{
    "docs": [
        {
            "location": "/", 
            "text": "\u6b22\u8fce\u9605\u8bfb\uff01\uff01\uff01\n\n\n\u6b22\u8fce\u8d21\u732e\uff01\uff01\uff01\n\n\n\u7b80\u4ecb\n\n\nHyperledger\u56fd\u9645\u5316\u5de5\u4f5c\u7ec4\n\u662fHyperledger\u4e2d\u56fd\u5de5\u4f5c\u7ec4(TWGC)\u4e0b\u5c5e\u7684\u4e00\u4e2a\u5c0f\u7ec4\uff0c\u4e3b\u8981\u8d1f\u8d23\u76f8\u5173\u6587\u6863\u7684\u4e2d\u6587\u7f16\u5199\u548c\u7ffb\u8bd1\uff0c\u4ee5\u53ca\u7ec4\u7ec7\u8ba8\u8bba\u3001\u6559\u80b2\u57f9\u8bad\u6d3b\u52a8\u7b49\u3002\n\n\n\u76ee\u524d\u5c0f\u7ec4\u6709\u6210\u5458100\u4f59\u540d\uff0c\u6d3b\u8dc3\u8d21\u732e\u800520\u4f59\u540d\uff0c\u5df2\u5b8c\u6210\u6587\u7ae030\u4f59\u7bc7\u3002\n\n\n\u5982\u4f55\u8d21\u732e\n\n\n\u4ee5\u524d\u6211\u4eec\u7528\nHyperledger Wiki\n\u7ba1\u7406\u6587\u7ae0\uff0c\u4f46Wiki\u8bfb\u5199\u64cd\u4f5c\u6709\u8bf8\u591a\u4e0d\u4fbf\uff0c\u4e3a\u6b64\u6211\u4eec\u5c06\u6587\u6863\u8f6c\u79fb\u5230\ngithub\u4e0a\n\uff0c\u4ee5\u4f7f\u5927\u5bb6\u66f4\u65b9\u4fbf\u5730\u9605\u8bfb\u548c\u7f16\u8f91\u8d21\u732e\u8d44\u6e90\u3002\n\n\n\u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u6587\u6863\u7ffb\u8bd1\u3001\u77e5\u8bc6\u603b\u7ed3\u3001\u7ecf\u9a8c\u6559\u8bad\u3001\u597d\u6587\u94fe\u63a5\u3001\u5947\u601d\u5999\u60f3\n\n\n\u5982\u679c\u60a8\u4e0d\u60f3\u4f5c\u5982\u4e0b\u64cd\u4f5c\uff0c\u53ef\u5c06\u76f4\u63a5\u5185\u5bb9\u90ae\u4ef6\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u53d1\u9001\u7ed9\u5de5\u4f5c\u7ec4\uff0c\u6211\u4eec\u4e3a\u60a8\u53d1\u5e03\n\n\n\u52a0\u5165\u7ec4\u7ec7\n\n\n\n\n\n\n\u52a0\u5165\u5fae\u4fe1\u7fa4\n\n\n\u76ee\u524d\u5fae\u4fe1\u7fa4\u5df2\u8d85\u4e00\u767e\u4eba\uff0c\u53ea\u80fd\u901a\u8fc7\u9080\u8bf7\u65b9\u5f0f\u52a0\u5165\u3002\u60a8\u53ef\u4ee5\u8bf7\u8ba4\u8bc6\u7684\u5c0f\u4f19\u4f34\u62c9\u4f60\u5165\u7fa4\uff0c\u4e5f\u53ef\u4ee5\u8054\u7cfb\u7ba1\u7406\u5458\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u3002\n\n\n\n\n\n\n\u52a0\u5165wiki\n\n\nHyperledger Wiki\u662f\u5b98\u65b9\u7684\u4fe1\u606f\u6e20\u9053\uff0c\u6240\u4ee5\u8bf7\u5c06\u60a8\u7684\u4fe1\u606f\u52a0\u5165\u5176\u4e2d\u3002\n\u70b9\u51fb\u8fdb\u5165\n\uff0c\u767b\u9646\uff0c\u7136\u540e\u7f16\u8f91\nVolunteers\n\u8868\u683c\uff0c\u5c06\u81ea\u5df1\u7684\u4fe1\u606f\u5199\u5165\u5e76\u4fdd\u5b58\u3002\n\n\n\n\n\n\n\u8d21\u732e\u8d44\u6e90\n\n\n\u76ee\u524d\u4ee5\ngithub\n\u7ba1\u7406\u6587\u6863\uff0c\u4ee5\ngithub pages\n\u5c55\u793a\u6587\u6863\uff0c\u4ee5\nMkDocs\n\u6784\u5efa\u6587\u6863\u3002\u5176\u4e2d\u6587\u6863\u90fd\u662f\u4ee5Markdown\u7f16\u5199\u3002\n\n\n\u51c6\u5907\n\n\n\n\ngithub\u8d26\u53f7\n\n\n\u5b89\u88c5git\n\n\n\u5b89\u88c5\nMkDocs\n\uff08\u53ef\u53c2\u7167\n\u4e2d\u6587\u6587\u6863\n\uff09\n\n\n\n\n\u672c\u5730\u7f16\u8f91\n\u9884\u89c8\n\n\n\n\n\n\n\u4e0b\u8f7d\u6e90\u7801\n\n\ngit clone https://github.com/HyperledgerCN/hyperledgerDocs.git\n\n\n\n\n\n\n\n\u7f16\u8f91\u9884\u89c8\n\n\n\u6ce8\u610f\uff1a\n\u6587\u6863\u5f00\u5934\u56fa\u5b9a\u4ee5\u4e0b\u683c\u5f0f\uff1a\n\n\n| \u539f\u6587 | \u4f5c\u8005 | \u5ba1\u6838\u4fee\u6b63 |\n| --- | --- | \u2014--- |\n| [\u539f\u6587](\n\u539f\u6587\u8def\u5f84\n) | \n\u5982\u679c\u4f60\u662f\u4f5c\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d\n | \n\u5982\u679c\u4f60\u662f\u4fee\u6539\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d\uff0c\u53ef\u4ee5\u591a\u4e2a\n |\n\n\n\n\u56fe\u7247\u653e\u5230\nhyperledgerDocs/docs/img\n\u91cc\uff0c\u6587\u6863\u4e2d\u4ee5\nimg/xx.png\n\u5f15\u7528\u3002\n\n\n\n\n\n\n\u4fee\u6539\u5df2\u6709\u6587\u6863\uff1a\u8fdb\u5165\nhyperledgerDocs/docs\n\u76ee\u5f55\uff0c\u7f16\u8f91\u5bf9\u5e94\u6587\u4ef6\u3002\n\n\n\n\n\n\n\u6dfb\u52a0\u65b0\u6587\u6863\uff1a\u8fdb\u5165\nhyperledgerDocs/docs\n\u76ee\u5f55\uff0c\u6dfb\u52a0\u65b0\u7684\nMarkdown\u6587\u4ef6\n\u5e76\u7f16\u8f91\u5185\u5bb9\uff1b\u7136\u540e\u7f16\u8f91\nmkdocs.yml\n\uff0c\u5c06\u65b0\u52a0\u6587\u6863\u6309\u5982\u4e0b\u683c\u5f0f\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002\n\n\npages:\n    - \u6b22\u8fce: index.md\n    - \u8bcd\u6c47\u8868: glossary.md\n    - \u5feb\u901f\u5165\u95e8: getting_started.md\n    - \u534f\u8bae\u89c4\u8303: protocol-spec_zh.md\n    - Fabric\u6559\u7a0b:\n        - \u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc: build_network_zh.md\n        - \u7f16\u5199\u7b2c\u4e00\u4e2a\u5e94\u7528: write_first_app_zh.md\n        - Chaincode: chaincode_zh.md\n\n\n\n\n\n\n\n\u672c\u5730\u9884\u89c8\uff1a\u5728\nhyperledgerDocs\n\u76ee\u5f55\u4e0b\u6267\u884c\n\n\nmkdocs serve\n\n\n\n\u7136\u540e\u6d4f\u89c8\u5668\u6253\u5f00\nhttp://127.0.0.1:8000/\n\u627e\u5230\u76f8\u5e94\u9875\u9762\u3002\n\n\n\n\n\n\n\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/HyperledgerCN/hyperledgerDocs.git\n\n\n\n\n\n\n\u8d21\u732e\u6d41\u7a0b\n\n\n\u8ff0\u8d21\u732e\u6d41\u7a0b\u867d\u7136\u8f83\u4e3a\u7e41\u7410\uff0c\u4f46\u662f\u63d0\u9ad8\u4e86reviewer\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u51cf\u5c11reviewer\u624b\u52a8merge\u7684\u9891\u7387\uff0c\u5e0c\u671b\u5927\u5bb6\u9075\u5b88\u4e0b\u8ff0\b\u7ea6\u5b9a\uff0c\u4e3a\u793e\u533a\u8425\u9020\u826f\u597d\u7684\u6c1b\u56f4\u3002\n\n\n1. fork \u539f\u59cb\u4ed3\u5e93\u5230\u81ea\u5df1\u7684github\u4ed3\u5e93\u3002\n\n2. clone \u81ea\u5df1\u7684\u4ed3\u5e93\u5230\u672c\u5730\u3002\n\n3. \u5728 master \u5206\u652f\u6dfb\u52a0\u539f\u59cb\u4ed3\u5e93\u4e3a\u8fdc\u7a0b\u5206\u652f git remote add upstream \u8fdc\u7a0b\u4ed3\u5e93\u3002\n\n4. \u81ea\u5df1\u5206\u652f\u5f00\u53d1\uff0c\u5982 dev \u5206\u652f\u5f00\u53d1\uff1agit checkout -b dev\n\u672c\u5730 dev \u63d0\u4ea4\u3002\n\n5. \u5207\u6362 master \u5206\u652f\uff0c\u540c\u6b65\u539f\u59cb\u4ed3\u5e93\uff1agit checkout master\uff0c git pull upstream master\u3002\n\n6. \u5207\u6362\u672c\u5730 dev \u5206\u652f\uff0c\u5408\u5e76\u672c\u5730 master \u5206\u652f\uff08\u5df2\u7ecf\u548c\u539f\u59cb\u4ed3\u5e93\u540c\u6b65\uff09\uff0c\u53ef\u80fd\u9700\u8981\u89e3\u51b2\u7a81\u3002\n\n7. \u63d0\u4ea4\u672c\u5730 dev \u5206\u652f\u5230\u81ea\u5df1\u7684\u8fdc\u7a0b dev \u4ed3\u5e93\u3002\n\n8. \u539f\u59cb\u4ed3\u5e93\u53d1 pull request \u8bf7\u6c42\u3002\n\n9. \u7b49\u5f85reviewer\u7684review,review\u4e4b\u540e\u4f1a\u6709\u54cd\u5e94\u7684\u56de\u590d\uff08\u63a5\u53d7/\u62d2\u7edd\uff09\u3002\n\n10. \u901a\u8fc7\u5ba1\u6838\u4e4b\u540e\uff0c\u76f8\u5173\u7684reviewer\u4f1a\u63d0\u4ea4\b\u5230\bgithub pages\u4e3b\u9875\u4e0a\u3002\n\n\n\n\n\u5173\u4e8ecommit\u8981\u6c42\u5efa\u8bae\u5982\u4e0b\n\n\n\u4f8b\u5982\uff1a\n\n\nAd\bd a new Doc\n\nThis doc describes xxx\n\nAuthor:xxx\nDate:xxxx//xx/xx", 
            "title": "\u6b22\u8fce"
        }, 
        {
            "location": "/#_1", 
            "text": "Hyperledger\u56fd\u9645\u5316\u5de5\u4f5c\u7ec4 \u662fHyperledger\u4e2d\u56fd\u5de5\u4f5c\u7ec4(TWGC)\u4e0b\u5c5e\u7684\u4e00\u4e2a\u5c0f\u7ec4\uff0c\u4e3b\u8981\u8d1f\u8d23\u76f8\u5173\u6587\u6863\u7684\u4e2d\u6587\u7f16\u5199\u548c\u7ffb\u8bd1\uff0c\u4ee5\u53ca\u7ec4\u7ec7\u8ba8\u8bba\u3001\u6559\u80b2\u57f9\u8bad\u6d3b\u52a8\u7b49\u3002  \u76ee\u524d\u5c0f\u7ec4\u6709\u6210\u5458100\u4f59\u540d\uff0c\u6d3b\u8dc3\u8d21\u732e\u800520\u4f59\u540d\uff0c\u5df2\u5b8c\u6210\u6587\u7ae030\u4f59\u7bc7\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/#_2", 
            "text": "\u4ee5\u524d\u6211\u4eec\u7528 Hyperledger Wiki \u7ba1\u7406\u6587\u7ae0\uff0c\u4f46Wiki\u8bfb\u5199\u64cd\u4f5c\u6709\u8bf8\u591a\u4e0d\u4fbf\uff0c\u4e3a\u6b64\u6211\u4eec\u5c06\u6587\u6863\u8f6c\u79fb\u5230 github\u4e0a \uff0c\u4ee5\u4f7f\u5927\u5bb6\u66f4\u65b9\u4fbf\u5730\u9605\u8bfb\u548c\u7f16\u8f91\u8d21\u732e\u8d44\u6e90\u3002  \u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u6587\u6863\u7ffb\u8bd1\u3001\u77e5\u8bc6\u603b\u7ed3\u3001\u7ecf\u9a8c\u6559\u8bad\u3001\u597d\u6587\u94fe\u63a5\u3001\u5947\u601d\u5999\u60f3  \u5982\u679c\u60a8\u4e0d\u60f3\u4f5c\u5982\u4e0b\u64cd\u4f5c\uff0c\u53ef\u5c06\u76f4\u63a5\u5185\u5bb9\u90ae\u4ef6\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u53d1\u9001\u7ed9\u5de5\u4f5c\u7ec4\uff0c\u6211\u4eec\u4e3a\u60a8\u53d1\u5e03", 
            "title": "\u5982\u4f55\u8d21\u732e"
        }, 
        {
            "location": "/#_3", 
            "text": "\u52a0\u5165\u5fae\u4fe1\u7fa4  \u76ee\u524d\u5fae\u4fe1\u7fa4\u5df2\u8d85\u4e00\u767e\u4eba\uff0c\u53ea\u80fd\u901a\u8fc7\u9080\u8bf7\u65b9\u5f0f\u52a0\u5165\u3002\u60a8\u53ef\u4ee5\u8bf7\u8ba4\u8bc6\u7684\u5c0f\u4f19\u4f34\u62c9\u4f60\u5165\u7fa4\uff0c\u4e5f\u53ef\u4ee5\u8054\u7cfb\u7ba1\u7406\u5458\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u3002    \u52a0\u5165wiki  Hyperledger Wiki\u662f\u5b98\u65b9\u7684\u4fe1\u606f\u6e20\u9053\uff0c\u6240\u4ee5\u8bf7\u5c06\u60a8\u7684\u4fe1\u606f\u52a0\u5165\u5176\u4e2d\u3002 \u70b9\u51fb\u8fdb\u5165 \uff0c\u767b\u9646\uff0c\u7136\u540e\u7f16\u8f91 Volunteers \u8868\u683c\uff0c\u5c06\u81ea\u5df1\u7684\u4fe1\u606f\u5199\u5165\u5e76\u4fdd\u5b58\u3002", 
            "title": "\u52a0\u5165\u7ec4\u7ec7"
        }, 
        {
            "location": "/#_4", 
            "text": "\u76ee\u524d\u4ee5 github \u7ba1\u7406\u6587\u6863\uff0c\u4ee5 github pages \u5c55\u793a\u6587\u6863\uff0c\u4ee5 MkDocs \u6784\u5efa\u6587\u6863\u3002\u5176\u4e2d\u6587\u6863\u90fd\u662f\u4ee5Markdown\u7f16\u5199\u3002", 
            "title": "\u8d21\u732e\u8d44\u6e90"
        }, 
        {
            "location": "/#_5", 
            "text": "github\u8d26\u53f7  \u5b89\u88c5git  \u5b89\u88c5 MkDocs \uff08\u53ef\u53c2\u7167 \u4e2d\u6587\u6587\u6863 \uff09", 
            "title": "\u51c6\u5907"
        }, 
        {
            "location": "/#_6", 
            "text": "\u4e0b\u8f7d\u6e90\u7801  git clone https://github.com/HyperledgerCN/hyperledgerDocs.git    \u7f16\u8f91\u9884\u89c8  \u6ce8\u610f\uff1a \u6587\u6863\u5f00\u5934\u56fa\u5b9a\u4ee5\u4e0b\u683c\u5f0f\uff1a  | \u539f\u6587 | \u4f5c\u8005 | \u5ba1\u6838\u4fee\u6b63 |\n| --- | --- | \u2014--- |\n| [\u539f\u6587]( \u539f\u6587\u8def\u5f84 ) |  \u5982\u679c\u4f60\u662f\u4f5c\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d  |  \u5982\u679c\u4f60\u662f\u4fee\u6539\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d\uff0c\u53ef\u4ee5\u591a\u4e2a  |  \u56fe\u7247\u653e\u5230 hyperledgerDocs/docs/img \u91cc\uff0c\u6587\u6863\u4e2d\u4ee5 img/xx.png \u5f15\u7528\u3002    \u4fee\u6539\u5df2\u6709\u6587\u6863\uff1a\u8fdb\u5165 hyperledgerDocs/docs \u76ee\u5f55\uff0c\u7f16\u8f91\u5bf9\u5e94\u6587\u4ef6\u3002    \u6dfb\u52a0\u65b0\u6587\u6863\uff1a\u8fdb\u5165 hyperledgerDocs/docs \u76ee\u5f55\uff0c\u6dfb\u52a0\u65b0\u7684 Markdown\u6587\u4ef6 \u5e76\u7f16\u8f91\u5185\u5bb9\uff1b\u7136\u540e\u7f16\u8f91 mkdocs.yml \uff0c\u5c06\u65b0\u52a0\u6587\u6863\u6309\u5982\u4e0b\u683c\u5f0f\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002  pages:\n    - \u6b22\u8fce: index.md\n    - \u8bcd\u6c47\u8868: glossary.md\n    - \u5feb\u901f\u5165\u95e8: getting_started.md\n    - \u534f\u8bae\u89c4\u8303: protocol-spec_zh.md\n    - Fabric\u6559\u7a0b:\n        - \u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc: build_network_zh.md\n        - \u7f16\u5199\u7b2c\u4e00\u4e2a\u5e94\u7528: write_first_app_zh.md\n        - Chaincode: chaincode_zh.md    \u672c\u5730\u9884\u89c8\uff1a\u5728 hyperledgerDocs \u76ee\u5f55\u4e0b\u6267\u884c  mkdocs serve  \u7136\u540e\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u627e\u5230\u76f8\u5e94\u9875\u9762\u3002    \u9879\u76ee\u5730\u5740\uff1ahttps://github.com/HyperledgerCN/hyperledgerDocs.git", 
            "title": "\u672c\u5730\u7f16\u8f91&amp;\u9884\u89c8"
        }, 
        {
            "location": "/#_7", 
            "text": "\u8ff0\u8d21\u732e\u6d41\u7a0b\u867d\u7136\u8f83\u4e3a\u7e41\u7410\uff0c\u4f46\u662f\u63d0\u9ad8\u4e86reviewer\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u51cf\u5c11reviewer\u624b\u52a8merge\u7684\u9891\u7387\uff0c\u5e0c\u671b\u5927\u5bb6\u9075\u5b88\u4e0b\u8ff0\b\u7ea6\u5b9a\uff0c\u4e3a\u793e\u533a\u8425\u9020\u826f\u597d\u7684\u6c1b\u56f4\u3002  1. fork \u539f\u59cb\u4ed3\u5e93\u5230\u81ea\u5df1\u7684github\u4ed3\u5e93\u3002\n\n2. clone \u81ea\u5df1\u7684\u4ed3\u5e93\u5230\u672c\u5730\u3002\n\n3. \u5728 master \u5206\u652f\u6dfb\u52a0\u539f\u59cb\u4ed3\u5e93\u4e3a\u8fdc\u7a0b\u5206\u652f git remote add upstream \u8fdc\u7a0b\u4ed3\u5e93\u3002\n\n4. \u81ea\u5df1\u5206\u652f\u5f00\u53d1\uff0c\u5982 dev \u5206\u652f\u5f00\u53d1\uff1agit checkout -b dev\n\u672c\u5730 dev \u63d0\u4ea4\u3002\n\n5. \u5207\u6362 master \u5206\u652f\uff0c\u540c\u6b65\u539f\u59cb\u4ed3\u5e93\uff1agit checkout master\uff0c git pull upstream master\u3002\n\n6. \u5207\u6362\u672c\u5730 dev \u5206\u652f\uff0c\u5408\u5e76\u672c\u5730 master \u5206\u652f\uff08\u5df2\u7ecf\u548c\u539f\u59cb\u4ed3\u5e93\u540c\u6b65\uff09\uff0c\u53ef\u80fd\u9700\u8981\u89e3\u51b2\u7a81\u3002\n\n7. \u63d0\u4ea4\u672c\u5730 dev \u5206\u652f\u5230\u81ea\u5df1\u7684\u8fdc\u7a0b dev \u4ed3\u5e93\u3002\n\n8. \u539f\u59cb\u4ed3\u5e93\u53d1 pull request \u8bf7\u6c42\u3002\n\n9. \u7b49\u5f85reviewer\u7684review,review\u4e4b\u540e\u4f1a\u6709\u54cd\u5e94\u7684\u56de\u590d\uff08\u63a5\u53d7/\u62d2\u7edd\uff09\u3002\n\n10. \u901a\u8fc7\u5ba1\u6838\u4e4b\u540e\uff0c\u76f8\u5173\u7684reviewer\u4f1a\u63d0\u4ea4\b\u5230\bgithub pages\u4e3b\u9875\u4e0a\u3002", 
            "title": "\u8d21\u732e\u6d41\u7a0b"
        }, 
        {
            "location": "/#commit", 
            "text": "\u4f8b\u5982\uff1a  Ad\bd a new Doc\n\nThis doc describes xxx\n\nAuthor:xxx\nDate:xxxx//xx/xx", 
            "title": "\u5173\u4e8ecommit\u8981\u6c42\u5efa\u8bae\u5982\u4e0b"
        }, 
        {
            "location": "/glossary/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\nBaohua Yang\n\n\n\n\n\n\n\n\nTerminology is important, so that all Fabric users and developers agree on what we mean by each specific term. What is chaincode, for example. So we\u2019ll point you there, whenever you want to reassure yourself. Of course, feel free to read the entire thing in one sitting if you like, it\u2019s pretty enlightening!\n\n\n\u4e13\u4e1a\u672f\u8bed\u5f88\u91cd\u8981\uff0c\u6240\u4ee5\u6240\u6709\u201dFabric\u201d\u9879\u76ee\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u540c\u610f\u6211\u4eec\u6240\u8bf4\u7684\u6bcf\u4e2a\u7279\u5b9a\u672f\u8bed\u7684\u542b\u4e49\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5982\u4ec0\u4e48\u662f\u94fe\u7801\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5f15\u5bfc\u4f60\u5230\u672f\u8bed\u8bf4\u660e\uff0c\u8ba9\u4f60\u968f\u65f6\u53ef\u4ee5\u6d88\u9664\u5bf9\u672f\u8bed\u7406\u89e3\u7684\u7591\u8651\uff0c\u5f53\u7136\uff0c\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\u53ef\u4ee5\u81ea\u7531\u7684\u9605\u8bfb\u6574\u4e2a\u6587\u6863\uff0c\u975e\u5e38\u6709\u542f\u53d1\uff01\n\n\nAnchor Peer - \u951a\u8282\u70b9\n\n\nA peer node on a channel that all other peers can discover and communicate with. Each \nMember\n on a channel has an anchor peer (or multiple anchor peers to prevent single point of failure), allowing for peers belonging to different Members to discover all existing peers on a channel.\n\n\n\u951a\u8282\u70b9\u662f\u901a\u9053\u4e2d\u80fd\u88ab\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u63a2\u6d4b\u3001\u5e76\u80fd\u4e0e\u4e4b\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u79cd\u5bf9\u7b49\u8282\u70b9\u3002\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u6709\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff0c\u4ee5\u9632\u5355\u70b9\u6545\u969c\uff09\u951a\u8282\u70b9\uff0c\u5141\u8bb8\u5c5e\u4e8e\u4e0d\u540c\u6210\u5458\u8eab\u4efd\u7684\u8282\u70b9\u6765\u53d1\u73b0\u901a\u9053\u4e2d\u5b58\u5728\u7684\u5176\u5b83\u8282\u70b9\u3002\n\n\nBlock - \u533a\u5757\n\n\nAn ordered set of transactions that is cryptographically linked to the preceding block(s) on a channel.\n\n\n\u5728\u4e00\u4e2a\u901a\u9053\u4e0a\uff0c\uff08\u533a\u5757\u662f\uff09\u4e00\u7ec4\u6709\u5e8f\u4ea4\u6613\u7684\u96c6\u5408\u3002\u533a\u5757\u5f80\u5f80\u901a\u8fc7\u5bc6\u7801\u5b66\u624b\u6bb5\uff08Hash \u503c\uff09\u8fde\u63a5\u5230\u524d\u5bfc\u533a\u5757\u3002\n\n\nZhu Jiang\uff1a\u533a\u5757\u662f\u4e00\u7ec4\u6709\u5e8f\u7684\u4ea4\u6613\u96c6\u5408\uff0c\u5728\u901a\u9053\u4e2d\u7ecf\u8fc7\u52a0\u5bc6\uff08\u54c8\u5e0c\u52a0\u5bc6\uff09\u540e\u4e0e\u524d\u5e8f\u533a\u5757\u8fde\u63a5\u3002\n\n\nChain - \u94fe\n\n\nThe ledger\u2019s chain is a transaction log structured as hash-linked blocks of transactions. Peers receive blocks of transactions from the ordering service, mark the block\u2019s transactions as valid or invalid based on endorsement policies and concurrency violations, and append the block to the hash chain on the peer\u2019s file system.\n\n\nchain\u5c31\u662fblock\u4e4b\u95f4\u4ee5hash\u8fde\u63a5\u4e3a\u7ed3\u6784\u7684\u4ea4\u6613\u65e5\u5fd7\u3002peer\u4eceorder service\u63a5\u6536\u4ea4\u6613block\uff0c\u5e76\u6839\u636e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6807\u8bb0block\u4e0a\u7684\u4ea4\u6613\u662f\u5426\u6709\u6548\uff0c\u7136\u540e\u5c06\u8be5block\u8ffd\u52a0\u5230peer\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684hash chain\u4e0a\u3002\n\n\nZhu Jiang:\u8d26\u672c\u7684\u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u533a\u5757\u7ecf\u8fc7\u201c\u54c8\u5e0c\u8fde\u63a5\u201d\u7ed3\u6784\u5316\u7684\u4ea4\u6613\u65e5\u5fd7\u3002\u5bf9\u7b49\u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4ea4\u6613\u533a\u5757\uff0c\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6765\u6807\u6ce8\u533a\u5757\u7684\u4ea4\u6613\u4e3a\u6709\u6548\u6216\u8005\u65e0\u6548\u72b6\u6001\uff0c\u5e76\u4e14\u5c06\u533a\u5757\u8ffd\u52a0\u5230\u5bf9\u7b49\u8282\u70b9\u6587\u4ef6\u7cfb\u7edf\u7684\u54c8\u5e0c\u94fe\u4e2d\u3002\n\n\nChaincode - \u94fe\u7801\n\n\nChaincode is software, running on a ledger, to encode assets and the transaction instructions (business logic) for modifying the assets.\n\n\n\u94fe\u7801\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u8d26\u672c\u4e0a\u7684\u8f6f\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5bf9\u8d44\u4ea7\u8fdb\u884c\u7f16\u7801\uff0c\u5176\u4e2d\u7684\u4ea4\u6613\u6307\u4ee4\uff08\u6216\u8005\u53eb\u4e1a\u52a1\u903b\u8f91\uff09\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u8d44\u4ea7\u3002\n\n\nChannel - \u901a\u9053\n\n\nA channel is a private blockchain overlay on a Fabric network, allowing for data isolation and confidentiality. A channel-specific ledger is shared across the peers in the channel, and transacting parties must be properly authenticated to a channel in order to interact with it. Channels are defined by a \nConfiguration-Block\n.\n\n\n\u901a\u9053\u662f\u6784\u5efa\u5728\u201cFabric\u201d\u7f51\u7edc\u4e0a\u7684\u79c1\u6709\u533a\u5757\u94fe\uff0c\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u9694\u79bb\u548c\u4fdd\u5bc6\u3002\u901a\u9053\u7279\u5b9a\u7684\u8d26\u672c\u5728\u901a\u9053\u4e2d\u662f\u4e0e\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u5171\u4eab\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u65b9\u5fc5\u987b\u901a\u8fc7\u8be5\u901a\u9053\u7684\u6b63\u786e\u9a8c\u8bc1\u624d\u80fd\u4e0e\u8d26\u672c\u8fdb\u884c\u4ea4\u4e92\u3002\u901a\u9053\u662f\u7531\u4e00\u4e2a\u201c\u914d\u7f6e\u5757\u201d\u6765\u5b9a\u4e49\u7684\u3002\n\n\nCommitment - \u63d0\u4ea4\n\n\nEach \nPeer\n on a channel validates ordered blocks of transactions and then commits (writes-appends) the blocks to its replica of the channel \nLedger\n. Peers also mark each transaction in each block as valid or invalid.\n\n\n\u4e00\u4e2a\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u7b49\u8282\u70b9\u90fd\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u7684\u6709\u5e8f\u533a\u5757\uff0c\u7136\u540e\u5c06\u533a\u5757\u63d0\u4ea4\uff08\u5199\u6216\u8ffd\u52a0\uff09\u81f3\u8be5\u901a\u9053\u4e0a\u8d26\u672c\u7684\u5404\u4e2a\u526f\u672c\u3002\u5bf9\u7b49\u8282\u70b9\u4e5f\u4f1a\u6807\u8bb0\u6bcf\u4e2a\u533a\u5757\u4e2d\u7684\u6bcf\u7b14\u4ea4\u6613\u7684\u72b6\u6001\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u3002\n\n\nConcurrency Control Version Check - \u5e76\u53d1\u63a7\u5236\u7248\u672c\u68c0\u67e5\uff08CCVC\uff09\n\n\nConcurrency Control Version Check is a method of keeping state in sync across peers on a channel. Peers execute transactions in parallel, and before commitment to the ledger, peers check that the data read at execution time has not changed. If the data read for the transaction has changed between execution time and commitment time, then a Concurrency Control Version Check violation has occurred, and the transaction is marked as invalid on the ledger and values are not updated in the state database.\n\n\nCCVC\u662f\u4fdd\u6301\u901a\u9053\u4e2d\u5404\u5bf9\u7b49\u8282\u70b9\u95f4\u72b6\u6001\u540c\u6b65\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5bf9\u7b49\u8282\u70b9\u5e76\u884c\u7684\u6267\u884c\u4ea4\u6613\uff0c\u5728\u4ea4\u6613\u63d0\u4ea4\u81f3\u8d26\u672c\u4e4b\u524d\uff0c\u5bf9\u7b49\u8282\u70b9\u4f1a\u68c0\u67e5\u4ea4\u6613\u5728\u6267\u884c\u671f\u95f4\u8bfb\u5230\u7684\u6570\u636e\u662f\u5426\u88ab\u4fee\u6539\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u5728\u6267\u884c\u548c\u63d0\u4ea4\u4e4b\u95f4\u88ab\u6539\u53d8\uff0c\u5c31\u4f1a\u5f15\u53d1CCVC\u51b2\u7a81\uff0c\u8be5\u4ea4\u6613\u5c31\u4f1a\u5728\u8d26\u672c\u4e2d\u88ab\u6807\u8bb0\u4e3a\u65e0\u6548\uff0c\u800c\u4e14\u503c\u4e0d\u4f1a\u66f4\u65b0\u5230\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002\n\n\nConfiguration Block - \u914d\u7f6e\u533a\u5757\n\n\nContains the configuration data defining members and policies for a system chain (ordering service) or channel. Any configuration modifications to a channel or overall network (e.g. a member leaving or joining) will result in a new configuration block being appended to the appropriate chain. This block will contain the contents of the genesis block, plus the delta.\n\n\n\u5305\u542b\u4e3a\u7cfb\u7edf\u94fe\uff08\u6392\u5e8f\u670d\u52a1\uff09\u6216\u901a\u9053\u5b9a\u4e49\u6210\u5458\u548c\u7b56\u7565\u7684\u914d\u7f6e\u6570\u636e\u3002\u5bf9\u67d0\u4e2a\u901a\u9053\u6216\u6574\u4e2a\u7f51\u7edc\u7684\u914d\u7f6e\u4fee\u6539\uff08\u6bd4\u5982\uff0c\u6210\u5458\u79bb\u5f00\u6216\u52a0\u5165\uff09\u90fd\u5c06\u5bfc\u81f4\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u533a\u5757\u5e76\u8ffd\u52a0\u5230\u9002\u5f53\u7684\u94fe\u4e0a\u3002\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\u4f1a\u5305\u542b\u521b\u59cb\u533a\u5757\u7684\u5185\u5bb9\u52a0\u4e0a\u589e\u91cf\u3002\n\n\nConsensus - \u5171\u8bc6\n\n\nA broader term overarching the entire transactional flow, which serves to generate an agreement on the order and to confirm the correctness of the set of transactions constituting a block.\n\n\n\u5171\u8bc6\u662f\u8d2f\u7a7f\u6574\u4e2a\u4ea4\u6613\u6d41\u7a0b\u7684\u5e7f\u4e49\u672f\u8bed\uff0c\u5176\u7528\u4e8e\u4ea7\u751f\u4e00\u4e2a\u5bf9\u4e8e\u6392\u5e8f\u7684\u540c\u610f\u4e66\u548c\u786e\u8ba4\u6784\u6210\u533a\u5757\u7684\u4ea4\u6613\u96c6\u7684\u6b63\u786e\u6027\u3002\n\n\nCurrent State - \u5f53\u524d\u72b6\u6001\n\n\nThe current state of the ledger represents the latest values for all keys ever included in its chain transaction log. Peers commit the latest values to ledger current state for each valid transaction included in a processed block. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State. Chaincode executes transaction proposals against current state data.\n\n\nledger\u7684current state\u8868\u793a\u5176chain\u4ea4\u6613log\u4e2d\u6240\u6709key\u7684\u6700\u65b0\u503c\u3002peer\u4f1a\u5c06\u5904\u7406\u8fc7\u7684block\u4e2d\u7684\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u5e94\u7684\u4fee\u6539value\u63d0\u4ea4\u5230ledger\u7684current state\uff0c\u7531\u4e8ecurrent state\u8868\u793achannel\u6240\u77e5\u7684\u6240\u6709\u6700\u65b0\u7684k-v\uff0c\u6240\u4ee5current state\u4e5f\u88ab\u79f0\u4e3aWorld State\u3002Chaincode\u6267\u884c\u4ea4\u6613proposal\u5c31\u662f\u9488\u5bf9\u7684current state\u3002\n\n\nDynamic Membership - \u52a8\u6001\u6210\u5458\n\n\nFabric supports the addition-removal of members, peers, and ordering service nodes, without compromising the operationality of the overall network. Dynamic membership is critical when business relationships adjust and entities need to be added-removed for various reasons.\n\n\nFabric\u652f\u6301\u52a8\u6001\u6dfb\u52a0-\u79fb\u9664members\u3001peers\u548cordering\u670d\u52a1\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u6574\u4e2a\u7f51\u7edc\u7684\u64cd\u4f5c\u6027\u3002\u5f53\u4e1a\u52a1\u5173\u7cfb\u8c03\u6574\u6216\u56e0\u5404\u79cd\u539f\u56e0\u9700\u6dfb\u52a0-\u79fb\u9664\u5b9e\u4f53\u65f6\uff0cDynamic Membership\u81f3\u5173\u91cd\u8981\u3002\n\n\nEndorsement - \u80cc\u4e66\n\n\nRefers to the process where specific peer nodes execute a transaction and return a \nYES-NO\n response to the client application that generated the transaction proposal. Chaincode applications have corresponding endorsement policies, in which the endorsing peers are specified.\n\n\nEndorsement \u662f\u6307\u4e00\u4e2apeer\u6267\u884c\u4e00\u4e2a\u4ea4\u6613\u5e76\u8fd4\u56de\nYES-NO\n\u7ed9\u751f\u6210\u4ea4\u6613proposal\u7684client app \u7684\u8fc7\u7a0b\u3002chaincode\u5177\u6709\u76f8\u5e94\u7684endorsement policies\uff0c\u5176\u4e2d\u6307\u5b9a\u4e86endorsing peer\u3002\n\n\nEndorsement policy - \u80cc\u4e66\u7b56\u7565\n\n\nDefines the peer nodes on a channel that must execute transactions attached to a specific chaincode application, and the required combination of responses (endorsements). A policy could require that a transaction be endorsed by a minimum number of endorsing peers, a minimum percentage of endorsing peers, or by all endorsing peers that are assigned to a specific chaincode application. Policies can be curated based on the application and the desired level of resilience against misbehavior (deliberate or not) by the endorsing peers. A distinct endorsement policy for install and instantiate transactions is also required.\n\n\nEndorsement policy\u5b9a\u4e49\u4e86\u4f9d\u8d56\u4e8e\u7279\u5b9achaincode\u6267\u884c\u4ea4\u6613\u7684channel\u4e0a\u7684peer\u548c\u54cd\u5e94\u7ed3\u679c\uff08endorsements\uff09\u7684\u5fc5\u8981\u7ec4\u5408\u6761\u4ef6\uff08\u5373\u8fd4\u56deYes\u6216No\u7684\u6761\u4ef6\uff09\u3002Endorsement policy\u53ef\u6307\u5b9a\u5bf9\u4e8e\u67d0\u4e00chaincode\uff0c\u53ef\u4ee5\u5bf9\u4ea4\u6613\u80cc\u4e66\u7684\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u6570\u6216\u8005\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u767e\u5206\u6bd4\u3002\u80cc\u4e66\u7b56\u7565\u7531\u80cc\u4e66\u8282\u70b9\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u62b5\u5fa1\u4e0d\u826f\u884c\u4e3a\u7684\u671f\u671b\u6c34\u5e73\u6765\u7ec4\u7ec7\u7ba1\u7406\u3002\u5728install\u548cinstantiate Chaincode\uff08deploy tx\uff09\u65f6\u9700\u8981\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u3002\n\n\nFabric-ca\n\n\nFabric-ca is the default Certificate Authority component, which issues PKI-based certificates to network member organizations and their users. The CA issues one root certificate (rootCert) to each member, one enrollment certificate (eCert) to each authorized user, and a number of transaction certificates (tCerts) for each eCert.\n\n\nFabric-ca\u662f\u9ed8\u8ba4\u7684\u8bc1\u4e66\u7ba1\u7406\u7ec4\u4ef6\uff0c\u5b83\u5411\u7f51\u7edc\u6210\u5458\u53ca\u5176\u7528\u6237\u9881\u53d1\u57fa\u4e8ePKI\u7684\u8bc1\u4e66\u3002CA\u4e3a\u6bcf\u4e2a\u6210\u5458\u9881\u53d1\u4e00\u4e2a\u6839\u8bc1\u4e66\uff08rootCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6388\u6743\u7528\u6237\u9881\u53d1\u4e00\u4e2a\u6ce8\u518c\u8bc1\u4e66\uff08eCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6ce8\u518c\u8bc1\u4e66\u9881\u53d1\u5927\u91cf\u4ea4\u6613\u8bc1\u4e66\uff08tCerts\uff09\u3002\n\n\nGenesis Block - \u521d\u59cb\u533a\u5757\n\n\nThe configuration block that initializes a blockchain network or channel, and also serves as the first block on a chain.\n\n\nGenesis Block\u662f\u521d\u59cb\u5316\u533a\u5757\u94fe\u7f51\u7edc\u6216channel\u7684\u914d\u7f6e\u533a\u5757\uff0c\u4e5f\u662f\u94fe\u4e0a\u7684\u7b2c\u4e00\u4e2a\u533a\u5757\u3002\n\n\nGossip Protocol - Gossip\u534f\u8bae\n\n\nThe gossip data dissemination protocol performs three functions: 1) manages peer discovery and channel membership; 2) disseminates ledger data across all peers on the channel; 3) syncs ledger state across all peers on the channel. Refer to the \nGossip\n topic for more details.\n\n\nGossip\u6570\u636e\u4f20\u8f93\u534f\u8bae\u6709\u4e09\u9879\u529f\u80fd\uff1a1\uff09\u7ba1\u7406peer\u53d1\u73b0\u548cchannel\u6210\u5458\uff1b2\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u5e7f\u64ad\u8d26\u672c\u6570\u636e\uff1b3\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u540c\u6b65\u8d26\u672c\u6570\u636e\u3002\n\n\nInitialize - \u521d\u59cb\u5316\n\n\nA method to initialize a chaincode application.\n\n\n\u4e00\u4e2a\u521d\u59cb\u5316chaincode\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002\n\n\nInstall - \u5b89\u88c5\n\n\nThe process of placing a chaincode on a peer\u2019s file system.\n\n\n\u5c06chaincode\u653e\u5230peer\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u8fc7\u7a0b\u3002\n\uff08\u8bd1\u6ce8\uff1a\u5373\u5c06ChaincodeDeploymentSpec\u4fe1\u606f\u5b58\u5230chaincodeInstallPath-chaincodeName.chainVersion\u6587\u4ef6\u4e2d\uff09\n\n\nInstantiate - \u5b9e\u4f8b\u5316\n\n\nThe process of starting a chaincode container.\n\n\n\u542f\u52a8chaincode\u5bb9\u5668\u7684\u8fc7\u7a0b\u3002\n\uff08\u8bd1\u6ce8\uff1a\u5728lccc\u4e2d\u5c06ChaincodeData\u4fdd\u5b58\u5230state\u4e2d\uff0c\u7136\u540edeploy Chaincode\u5e76\u6267\u884cInit\u65b9\u6cd5\uff09\n\n\nInvoke - \u8c03\u7528\n\n\nUsed to call chaincode functions. Invocations are captured as transaction proposals, which then pass through a modular flow of endorsement, ordering, validation, committal. The structure of invoke is a function and an array of arguments.\n\n\n\u7528\u4e8e\u8c03\u7528chaincode\u5185\u7684\u51fd\u6570\u3002Chaincode invoke\u5c31\u662f\u4e00\u4e2a\u4ea4\u6613proposal\uff0c\u7136\u540e\u6267\u884c\u6a21\u5757\u5316\u7684\u6d41\u7a0b\uff08\u80cc\u4e66\u3001\u5171\u8bc6\u3001 \u9a8c\u8bc1\u3001 \u63d0\u4ea4\uff09\u3002invoke\u7684\u7ed3\u6784\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\u3002\n\n\nLeading Peer - \u4e3b\u5bfc\u8282\u70b9\n\n\nEach \nMember\n can own multiple peers on each channel that it subscribes to. One of these peers is serves as the leading peer for the channel, in order to communicate with the network ordering service on behalf of the member. The ordering service \u201cdelivers\u201d blocks to the leading peer(s) on a channel, who then distribute them to other peers within the same member cluster.\n\n\n\u6bcf\u4e00\u4e2aMember\u5728\u5176\u8ba2\u9605\u7684channel\u4e0a\u53ef\u4ee5\u62e5\u6709\u591a\u4e2apeer\uff0c\u5176\u4e2d\u4e00\u4e2apeer\u4f1a\u4f5c\u4e3achannel\u7684leading peer\u4ee3\u8868\u8be5Member\u4e0eordering service\u901a\u4fe1\u3002ordering service\u5c06block\u4f20\u9012\u7ed9leading peer\uff0c\u8be5peer\u518d\u5c06\u6b64block\u5206\u53d1\u7ed9\u540c\u4e00member\u4e0b\u7684\u5176\u4ed6peer\u3002\n\n\nLedger - \u8d26\u672c\n\n\nA ledger is a channel\u2019s chain and current state data which is maintained by each peer on the channel.\n\n\nLedger\u662f\u4e2achannel\u7684chain\u548c\u7531channel\u4e2d\u6bcf\u4e2apeer\u7ef4\u62a4\u7684world state\u3002\n\uff08\u8fd9\u4e2a\u89e3\u91ca\u6709\u70b9\u602a\uff09\n\n\nMember - \u6210\u5458\n\n\nA legally separate entity that owns a unique root certificate for the network. Network components such as peer nodes and application clients will be linked to a member.\n\n\n\u62e5\u6709\u7f51\u7edc\u552f\u4e00\u6839\u8bc1\u4e66\u7684\u5408\u6cd5\u72ec\u7acb\u5b9e\u4f53\u3002\u50cfpeer\u8282\u70b9\u548capp client\u8fd9\u6837\u7684\u7f51\u7edc\u7ec4\u4ef6\u4f1a\u94fe\u63a5\u5230\u4e00\u4e2aMember\u3002\n\n\nMembership Service Provider - MSP\n\n\nThe Membership Service Provider (MSP) refers to an abstract component of the system that provides credentials to clients, and peers for them to participate in a Hyperledger Fabric network. Clients use these credentials to authenticate their transactions, and peers use these credentials to authenticate transaction processing results (endorsements). While strongly connected to the transaction processing components of the systems, this interface aims to have membership services components defined, in such a way that alternate implementations of this can be smoothly plugged in without modifying the core of transaction processing components of the system.\n\n\nMSP\u662f\u6307\u4e3aclient\u548cpeer\u63d0\u4f9b\u8bc1\u4e66\u7684\u7cfb\u7edf\u62bd\u8c61\u7ec4\u4ef6\u3002Client\u7528\u8bc1\u4e66\u6765\u8ba4\u8bc1\u4ed6\u4eec\u7684\u4ea4\u6613\uff1bpeer\u7528\u8bc1\u4e66\u8ba4\u8bc1\u5176\u4ea4\u6613\u80cc\u4e66\u3002\u8be5\u63a5\u53e3\u4e0e\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u5bc6\u5207\u76f8\u5173\uff0c\u65e8\u5728\u4f7f\u5df2\u5b9a\u4e49\u7684\u6210\u5458\u8eab\u4efd\u670d\u52a1\u7ec4\u4ef6\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u987a\u5229\u63d2\u5165\u800c\u4e0d\u4f1a\u4fee\u6539\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u7684\u6838\u5fc3\u3002\n\n\nMembership Services - \u6210\u5458\u670d\u52a1\n\n\nMembership Services authenticates, authorizes, and manages identities on a permissioned blockchain network. The membership services code that runs in peers and orderers both authenticates and authorizes blockchain operations. It is a PKI-based implementation of the Membership Services Provider (MSP) abstraction.\n\n\n\u6210\u5458\u670d\u52a1\u5728\u8bb8\u53ef\u7684\u533a\u5757\u94fe\u7f51\u7edc\u4e0a\u8ba4\u8bc1\u3001\u6388\u6743\u548c\u7ba1\u7406\u8eab\u4efd\u3002\u5728peer\u548corder\u4e2d\u8fd0\u884c\u7684\u6210\u5458\u670d\u52a1\u7684\u4ee3\u7801\u90fd\u4f1a\u8ba4\u8bc1\u548c\u6388\u6743\u533a\u5757\u94fe\u64cd\u4f5c\u3002\u5b83\u662f\u57fa\u4e8ePKI\u7684MSP\u5b9e\u73b0\u3002\n\n\nThe \nfabric-ca\n component is an implementation of membership services to manage identities. In particular, it handles the issuance and revocation of enrollment certificates and transaction certificates.\n\n\nfabric-ca\n\u7ec4\u4ef6\u5b9e\u73b0\u4e86\u6210\u5458\u670d\u52a1\uff0c\u6765\u7ba1\u7406\u8eab\u4efd\u3002\u7279\u522b\u7684\uff0c\u5b83\u5904\u7406ECert\u548cTCert\u7684\u9881\u53d1\u548c\u64a4\u9500\u3002\n\n\nAn enrollment certificate is a long-term identity credential; a transaction certificate is a short-term identity credential which is both anonymous and un-linkable.\n\n\nECert\u662f\u957f\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff1bTCert\u662f\u77ed\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff0c\u662f\u533f\u540d\u548c\u4e0d\u53ef\u94fe\u63a5\u7684\u3002\n\n\nOrdering Service - \u6392\u5e8f\u670d\u52a1\u6216\u5171\u8bc6\u670d\u52a1\n\n\nA defined collective of nodes that orders transactions into a block. The ordering service exists independent of the peer processes and orders transactions on a first-come-first-serve basis for all channel\u2019s on the network. The ordering service is designed to support pluggable implementations beyond the out-of-the-box SOLO and Kafka varieties. The ordering service is a common binding for the overall network; it contains the cryptographic identity material tied to each \nMember\n.\n\n\n\u5c06\u4ea4\u6613\u6392\u5e8f\u653e\u5165block\u7684\u8282\u70b9\u7684\u96c6\u5408\u3002ordering service\u72ec\u7acb\u4e8epeer\u6d41\u7a0b\u4e4b\u5916\uff0c\u5e76\u4ee5\u5148\u5230\u5148\u5f97\u7684\u65b9\u5f0f\u4e3a\u7f51\u7edc\u4e0a\u6240\u6709\u7684channel\u4f5c\u4ea4\u6613\u6392\u5e8f\u3002ordering service\u652f\u6301\u53ef\u63d2\u62d4\u5b9e\u73b0\uff0c\u76ee\u524d\u9ed8\u8ba4\u5b9e\u73b0\u4e86SOLO\u548cKafka\u3002ordering service\u662f\u6574\u4e2a\u7f51\u7edc\u7684\u516c\u7528binding\uff0c\u5305\u542b\u4e0e\u6bcf\u4e2aMember\u76f8\u5173\u7684\u52a0\u5bc6\u6750\u6599\u3002\n\n\nPeer - \u8282\u70b9\n\n\nA network entity that maintains a ledger and runs chaincode containers in order to perform read-write operations to the ledger. Peers are owned and maintained by members.\n\n\n\u4e00\u4e2a\u7f51\u7edc\u5b9e\u4f53\uff0c\u7ef4\u62a4ledger\u5e76\u8fd0\u884cChaincode\u5bb9\u5668\u6765\u5bf9ledger\u6267\u884cread-write\u64cd\u4f5c\u3002peer\u7531Member\u62e5\u6709\u548c\u7ef4\u62a4\u3002\n\n\nPolicy - \u7b56\u7565\n\n\nThere are policies for endorsement, validation, block committal, chaincode management and network-channel management.\n\n\n\u6709\u80cc\u4e66\u7b56\u7565\uff0c\u6821\u9a8c\u7b56\u7565\uff0c\u533a\u5757\u63d0\u4ea4\u7b56\u7565\uff0cChaincode\u7ba1\u7406\u7b56\u7565\u548c\u7f51\u7edc-\u901a\u9053\u7ba1\u7406\u7b56\u7565\u3002\n\n\nProposal - \u63d0\u6848\n\n\nA request for endorsement that is aimed at specific peers on a channel. Each proposal is either an instantiate or an invoke (read-write) request.\n\n\n\u4e00\u79cd\u9488\u5bf9channel\u4e2d\u67d0peer\u7684\u80cc\u4e66\u8bf7\u6c42\u3002\u6bcf\u4e2aproposal\u8981\u4e48\u662fChaincode instantiate\u8981\u4e48\u662fChaincode invoke\u3002\n\n\nQuery - \u67e5\u8be2\n\n\nA query requests the value of a key(s) against the current state.\n\n\n\u5bf9\u4e8ecurrent state\u4e2d\u67d0\u4e2akey\u7684value\u7684\u67e5\u8be2\u8bf7\u6c42\u3002\n\n\nSoftware Development Kit - SDK\n\n\nThe Hyperledger Fabric client SDK provides a structured environment of libraries for developers to write and test chaincode applications. The SDK is fully configurable and extensible through a standard interface. Components, including cryptographic algorithms for signatures, logging frameworks and state stores, are easily swapped in and out of the SDK. The SDK API uses protocol buffers over gRPC for transaction processing, membership services, node traversal and event handling applications to communicate across the fabric. The SDK comes in multiple flavors - Node.js, Java. and Python.\n\n\nSDK\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u5e93\u73af\u5883\uff0c\u7528\u4e8e\u7f16\u5199\u548c\u6d4b\u8bd5\u94fe\u7801\u5e94\u7528\u7a0b\u5e8f\u3002SDK\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u63a5\u53e3\u5b9e\u73b0\u914d\u7f6e\u548c\u6269\u5c55\uff0c\u50cf\u7b7e\u540d\u7684\u52a0\u5bc6\u7b97\u6cd5\u3001\u65e5\u5fd7\u6846\u67b6\u548cstate\u5b58\u50a8\u8fd9\u6837\u7684\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u66ff\u6362\u3002SDK API\u4f7f\u7528gRPC\u8fdb\u884c\u4ea4\u6613\u5904\u7406\uff0c\u6210\u5458\u670d\u52a1\u3001\u8282\u70b9\u904d\u5386\u4ee5\u53ca\u4e8b\u4ef6\u5904\u7406\u90fd\u662f\u636e\u6b64\u4e0efabric\u901a\u4fe1\u3002\u76ee\u524dSDK\u652f\u6301Node.js\u3001Java\u548cPython\u3002\n\n\nState Database - stateDB\n\n\nCurrent state data is stored in a state database for efficient reads and queries from chaincode. These databases include levelDB and couchDB.\n\n\n\u4e3a\u4e86\u4eceChaincode\u4e2d\u9ad8\u6548\u7684\u8bfb\u5199\uff0cCurrent state \u6570\u636e\u5b58\u50a8\u5728stateDB\u4e2d\uff0c\u5305\u62eclevelDB\u548ccouchDB\u3002\n\n\nSystem Chain - \u7cfb\u7edf\u94fe\n\n\nContains a configuration block defining the network at a system level. The system chain lives within the ordering service, and similar to a channel, has an initial configuration containing information such as: MSP information, policies, and configuration details. Any change to the overall network (e.g. a new org joining or a new ordering node being added) will result in a new configuration block being added to the system chain.\n\n\n\u5305\u542b\u5728\u7cfb\u7edf\u7ea7\u5b9a\u4e49\u7f51\u7edc\u7684\u914d\u7f6e\u533a\u5757\u3002\u7cfb\u7edf\u94fe\u5b58\u5728\u4e8eordering service\u4e2d\uff0c\u4e0echannel\u7c7b\u4f3c\uff0c\u5177\u6709\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\u7684\u521d\u59cb\u914d\u7f6e\uff1aMSP\u4fe1\u606f\u3001\u7b56\u7565\u548c\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u6574\u4e2a\u7f51\u7edc\u7684\u4efb\u4f55\u53d8\u5316\uff08\u4f8b\u5982\u65b0\u7684Org\u52a0\u5165\u6216\u8005\u6dfb\u52a0\u65b0\u7684Ordering\u8282\u70b9\uff09\u5c06\u5bfc\u81f4\u65b0\u7684\u914d\u7f6e\u533a\u5757\u88ab\u6dfb\u52a0\u5230\u7cfb\u7edf\u94fe\u3002\n\n\nThe system chain can be thought of as the common binding for a channel or group of channels. For instance, a collection of financial institutions may form a consortium (represented through the system chain), and then proceed to create channels relative to their aligned and varying business agendas.\n\n\n\u7cfb\u7edf\u94fe\u53ef\u770b\u505a\u662f\u4e00\u4e2achannel\u6216\u4e00\u7ec4channel\u7684\u516c\u7528binding\u3002\u4f8b\u5982\uff0c\u91d1\u878d\u673a\u6784\u7684\u96c6\u5408\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u8d22\u56e2\uff08\u4ee5system chain\u8868\u793a\uff09\uff0c\u7136\u540e\u6839\u636e\u5176\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4e1a\u52a1\u521b\u5efachannel\u3002\n\n\nTransaction - \u4ea4\u6613\n\n\nAn invoke or instantiate operation. Invokes are requests to read-write data from the ledger. Instantiate is a request to start a chaincode container on a peer.\n\n\nChaincode\u7684invoke\u6216instantiate\u64cd\u4f5c\u3002Invoke\u662f\u4eceledger\u4e2d\u8bf7\u6c42read-write set\uff1bInstantiate\u662f\u8bf7\u6c42\u5728peer\u4e0a\u542f\u52a8Chaincode\u5bb9\u5668\u3002", 
            "title": "\u8bcd\u6c47\u8868"
        }, 
        {
            "location": "/glossary/#anchor-peer-", 
            "text": "A peer node on a channel that all other peers can discover and communicate with. Each  Member  on a channel has an anchor peer (or multiple anchor peers to prevent single point of failure), allowing for peers belonging to different Members to discover all existing peers on a channel.  \u951a\u8282\u70b9\u662f\u901a\u9053\u4e2d\u80fd\u88ab\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u63a2\u6d4b\u3001\u5e76\u80fd\u4e0e\u4e4b\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u79cd\u5bf9\u7b49\u8282\u70b9\u3002\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u6709\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff0c\u4ee5\u9632\u5355\u70b9\u6545\u969c\uff09\u951a\u8282\u70b9\uff0c\u5141\u8bb8\u5c5e\u4e8e\u4e0d\u540c\u6210\u5458\u8eab\u4efd\u7684\u8282\u70b9\u6765\u53d1\u73b0\u901a\u9053\u4e2d\u5b58\u5728\u7684\u5176\u5b83\u8282\u70b9\u3002", 
            "title": "Anchor Peer - \u951a\u8282\u70b9"
        }, 
        {
            "location": "/glossary/#block-", 
            "text": "An ordered set of transactions that is cryptographically linked to the preceding block(s) on a channel.  \u5728\u4e00\u4e2a\u901a\u9053\u4e0a\uff0c\uff08\u533a\u5757\u662f\uff09\u4e00\u7ec4\u6709\u5e8f\u4ea4\u6613\u7684\u96c6\u5408\u3002\u533a\u5757\u5f80\u5f80\u901a\u8fc7\u5bc6\u7801\u5b66\u624b\u6bb5\uff08Hash \u503c\uff09\u8fde\u63a5\u5230\u524d\u5bfc\u533a\u5757\u3002  Zhu Jiang\uff1a\u533a\u5757\u662f\u4e00\u7ec4\u6709\u5e8f\u7684\u4ea4\u6613\u96c6\u5408\uff0c\u5728\u901a\u9053\u4e2d\u7ecf\u8fc7\u52a0\u5bc6\uff08\u54c8\u5e0c\u52a0\u5bc6\uff09\u540e\u4e0e\u524d\u5e8f\u533a\u5757\u8fde\u63a5\u3002", 
            "title": "Block - \u533a\u5757"
        }, 
        {
            "location": "/glossary/#chain-", 
            "text": "The ledger\u2019s chain is a transaction log structured as hash-linked blocks of transactions. Peers receive blocks of transactions from the ordering service, mark the block\u2019s transactions as valid or invalid based on endorsement policies and concurrency violations, and append the block to the hash chain on the peer\u2019s file system.  chain\u5c31\u662fblock\u4e4b\u95f4\u4ee5hash\u8fde\u63a5\u4e3a\u7ed3\u6784\u7684\u4ea4\u6613\u65e5\u5fd7\u3002peer\u4eceorder service\u63a5\u6536\u4ea4\u6613block\uff0c\u5e76\u6839\u636e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6807\u8bb0block\u4e0a\u7684\u4ea4\u6613\u662f\u5426\u6709\u6548\uff0c\u7136\u540e\u5c06\u8be5block\u8ffd\u52a0\u5230peer\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684hash chain\u4e0a\u3002  Zhu Jiang:\u8d26\u672c\u7684\u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u533a\u5757\u7ecf\u8fc7\u201c\u54c8\u5e0c\u8fde\u63a5\u201d\u7ed3\u6784\u5316\u7684\u4ea4\u6613\u65e5\u5fd7\u3002\u5bf9\u7b49\u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4ea4\u6613\u533a\u5757\uff0c\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6765\u6807\u6ce8\u533a\u5757\u7684\u4ea4\u6613\u4e3a\u6709\u6548\u6216\u8005\u65e0\u6548\u72b6\u6001\uff0c\u5e76\u4e14\u5c06\u533a\u5757\u8ffd\u52a0\u5230\u5bf9\u7b49\u8282\u70b9\u6587\u4ef6\u7cfb\u7edf\u7684\u54c8\u5e0c\u94fe\u4e2d\u3002", 
            "title": "Chain - \u94fe"
        }, 
        {
            "location": "/glossary/#chaincode-", 
            "text": "Chaincode is software, running on a ledger, to encode assets and the transaction instructions (business logic) for modifying the assets.  \u94fe\u7801\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u8d26\u672c\u4e0a\u7684\u8f6f\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5bf9\u8d44\u4ea7\u8fdb\u884c\u7f16\u7801\uff0c\u5176\u4e2d\u7684\u4ea4\u6613\u6307\u4ee4\uff08\u6216\u8005\u53eb\u4e1a\u52a1\u903b\u8f91\uff09\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u8d44\u4ea7\u3002", 
            "title": "Chaincode - \u94fe\u7801"
        }, 
        {
            "location": "/glossary/#channel-", 
            "text": "A channel is a private blockchain overlay on a Fabric network, allowing for data isolation and confidentiality. A channel-specific ledger is shared across the peers in the channel, and transacting parties must be properly authenticated to a channel in order to interact with it. Channels are defined by a  Configuration-Block .  \u901a\u9053\u662f\u6784\u5efa\u5728\u201cFabric\u201d\u7f51\u7edc\u4e0a\u7684\u79c1\u6709\u533a\u5757\u94fe\uff0c\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u9694\u79bb\u548c\u4fdd\u5bc6\u3002\u901a\u9053\u7279\u5b9a\u7684\u8d26\u672c\u5728\u901a\u9053\u4e2d\u662f\u4e0e\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u5171\u4eab\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u65b9\u5fc5\u987b\u901a\u8fc7\u8be5\u901a\u9053\u7684\u6b63\u786e\u9a8c\u8bc1\u624d\u80fd\u4e0e\u8d26\u672c\u8fdb\u884c\u4ea4\u4e92\u3002\u901a\u9053\u662f\u7531\u4e00\u4e2a\u201c\u914d\u7f6e\u5757\u201d\u6765\u5b9a\u4e49\u7684\u3002", 
            "title": "Channel - \u901a\u9053"
        }, 
        {
            "location": "/glossary/#commitment-", 
            "text": "Each  Peer  on a channel validates ordered blocks of transactions and then commits (writes-appends) the blocks to its replica of the channel  Ledger . Peers also mark each transaction in each block as valid or invalid.  \u4e00\u4e2a\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u7b49\u8282\u70b9\u90fd\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u7684\u6709\u5e8f\u533a\u5757\uff0c\u7136\u540e\u5c06\u533a\u5757\u63d0\u4ea4\uff08\u5199\u6216\u8ffd\u52a0\uff09\u81f3\u8be5\u901a\u9053\u4e0a\u8d26\u672c\u7684\u5404\u4e2a\u526f\u672c\u3002\u5bf9\u7b49\u8282\u70b9\u4e5f\u4f1a\u6807\u8bb0\u6bcf\u4e2a\u533a\u5757\u4e2d\u7684\u6bcf\u7b14\u4ea4\u6613\u7684\u72b6\u6001\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u3002", 
            "title": "Commitment - \u63d0\u4ea4"
        }, 
        {
            "location": "/glossary/#concurrency-control-version-check-ccvc", 
            "text": "Concurrency Control Version Check is a method of keeping state in sync across peers on a channel. Peers execute transactions in parallel, and before commitment to the ledger, peers check that the data read at execution time has not changed. If the data read for the transaction has changed between execution time and commitment time, then a Concurrency Control Version Check violation has occurred, and the transaction is marked as invalid on the ledger and values are not updated in the state database.  CCVC\u662f\u4fdd\u6301\u901a\u9053\u4e2d\u5404\u5bf9\u7b49\u8282\u70b9\u95f4\u72b6\u6001\u540c\u6b65\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5bf9\u7b49\u8282\u70b9\u5e76\u884c\u7684\u6267\u884c\u4ea4\u6613\uff0c\u5728\u4ea4\u6613\u63d0\u4ea4\u81f3\u8d26\u672c\u4e4b\u524d\uff0c\u5bf9\u7b49\u8282\u70b9\u4f1a\u68c0\u67e5\u4ea4\u6613\u5728\u6267\u884c\u671f\u95f4\u8bfb\u5230\u7684\u6570\u636e\u662f\u5426\u88ab\u4fee\u6539\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u5728\u6267\u884c\u548c\u63d0\u4ea4\u4e4b\u95f4\u88ab\u6539\u53d8\uff0c\u5c31\u4f1a\u5f15\u53d1CCVC\u51b2\u7a81\uff0c\u8be5\u4ea4\u6613\u5c31\u4f1a\u5728\u8d26\u672c\u4e2d\u88ab\u6807\u8bb0\u4e3a\u65e0\u6548\uff0c\u800c\u4e14\u503c\u4e0d\u4f1a\u66f4\u65b0\u5230\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002", 
            "title": "Concurrency Control Version Check - \u5e76\u53d1\u63a7\u5236\u7248\u672c\u68c0\u67e5\uff08CCVC\uff09"
        }, 
        {
            "location": "/glossary/#configuration-block-", 
            "text": "Contains the configuration data defining members and policies for a system chain (ordering service) or channel. Any configuration modifications to a channel or overall network (e.g. a member leaving or joining) will result in a new configuration block being appended to the appropriate chain. This block will contain the contents of the genesis block, plus the delta.  \u5305\u542b\u4e3a\u7cfb\u7edf\u94fe\uff08\u6392\u5e8f\u670d\u52a1\uff09\u6216\u901a\u9053\u5b9a\u4e49\u6210\u5458\u548c\u7b56\u7565\u7684\u914d\u7f6e\u6570\u636e\u3002\u5bf9\u67d0\u4e2a\u901a\u9053\u6216\u6574\u4e2a\u7f51\u7edc\u7684\u914d\u7f6e\u4fee\u6539\uff08\u6bd4\u5982\uff0c\u6210\u5458\u79bb\u5f00\u6216\u52a0\u5165\uff09\u90fd\u5c06\u5bfc\u81f4\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u533a\u5757\u5e76\u8ffd\u52a0\u5230\u9002\u5f53\u7684\u94fe\u4e0a\u3002\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\u4f1a\u5305\u542b\u521b\u59cb\u533a\u5757\u7684\u5185\u5bb9\u52a0\u4e0a\u589e\u91cf\u3002", 
            "title": "Configuration Block - \u914d\u7f6e\u533a\u5757"
        }, 
        {
            "location": "/glossary/#consensus-", 
            "text": "A broader term overarching the entire transactional flow, which serves to generate an agreement on the order and to confirm the correctness of the set of transactions constituting a block.  \u5171\u8bc6\u662f\u8d2f\u7a7f\u6574\u4e2a\u4ea4\u6613\u6d41\u7a0b\u7684\u5e7f\u4e49\u672f\u8bed\uff0c\u5176\u7528\u4e8e\u4ea7\u751f\u4e00\u4e2a\u5bf9\u4e8e\u6392\u5e8f\u7684\u540c\u610f\u4e66\u548c\u786e\u8ba4\u6784\u6210\u533a\u5757\u7684\u4ea4\u6613\u96c6\u7684\u6b63\u786e\u6027\u3002", 
            "title": "Consensus - \u5171\u8bc6"
        }, 
        {
            "location": "/glossary/#current-state-", 
            "text": "The current state of the ledger represents the latest values for all keys ever included in its chain transaction log. Peers commit the latest values to ledger current state for each valid transaction included in a processed block. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State. Chaincode executes transaction proposals against current state data.  ledger\u7684current state\u8868\u793a\u5176chain\u4ea4\u6613log\u4e2d\u6240\u6709key\u7684\u6700\u65b0\u503c\u3002peer\u4f1a\u5c06\u5904\u7406\u8fc7\u7684block\u4e2d\u7684\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u5e94\u7684\u4fee\u6539value\u63d0\u4ea4\u5230ledger\u7684current state\uff0c\u7531\u4e8ecurrent state\u8868\u793achannel\u6240\u77e5\u7684\u6240\u6709\u6700\u65b0\u7684k-v\uff0c\u6240\u4ee5current state\u4e5f\u88ab\u79f0\u4e3aWorld State\u3002Chaincode\u6267\u884c\u4ea4\u6613proposal\u5c31\u662f\u9488\u5bf9\u7684current state\u3002", 
            "title": "Current State - \u5f53\u524d\u72b6\u6001"
        }, 
        {
            "location": "/glossary/#dynamic-membership-", 
            "text": "Fabric supports the addition-removal of members, peers, and ordering service nodes, without compromising the operationality of the overall network. Dynamic membership is critical when business relationships adjust and entities need to be added-removed for various reasons.  Fabric\u652f\u6301\u52a8\u6001\u6dfb\u52a0-\u79fb\u9664members\u3001peers\u548cordering\u670d\u52a1\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u6574\u4e2a\u7f51\u7edc\u7684\u64cd\u4f5c\u6027\u3002\u5f53\u4e1a\u52a1\u5173\u7cfb\u8c03\u6574\u6216\u56e0\u5404\u79cd\u539f\u56e0\u9700\u6dfb\u52a0-\u79fb\u9664\u5b9e\u4f53\u65f6\uff0cDynamic Membership\u81f3\u5173\u91cd\u8981\u3002", 
            "title": "Dynamic Membership - \u52a8\u6001\u6210\u5458"
        }, 
        {
            "location": "/glossary/#endorsement-", 
            "text": "Refers to the process where specific peer nodes execute a transaction and return a  YES-NO  response to the client application that generated the transaction proposal. Chaincode applications have corresponding endorsement policies, in which the endorsing peers are specified.  Endorsement \u662f\u6307\u4e00\u4e2apeer\u6267\u884c\u4e00\u4e2a\u4ea4\u6613\u5e76\u8fd4\u56de YES-NO \u7ed9\u751f\u6210\u4ea4\u6613proposal\u7684client app \u7684\u8fc7\u7a0b\u3002chaincode\u5177\u6709\u76f8\u5e94\u7684endorsement policies\uff0c\u5176\u4e2d\u6307\u5b9a\u4e86endorsing peer\u3002", 
            "title": "Endorsement - \u80cc\u4e66"
        }, 
        {
            "location": "/glossary/#endorsement-policy-", 
            "text": "Defines the peer nodes on a channel that must execute transactions attached to a specific chaincode application, and the required combination of responses (endorsements). A policy could require that a transaction be endorsed by a minimum number of endorsing peers, a minimum percentage of endorsing peers, or by all endorsing peers that are assigned to a specific chaincode application. Policies can be curated based on the application and the desired level of resilience against misbehavior (deliberate or not) by the endorsing peers. A distinct endorsement policy for install and instantiate transactions is also required.  Endorsement policy\u5b9a\u4e49\u4e86\u4f9d\u8d56\u4e8e\u7279\u5b9achaincode\u6267\u884c\u4ea4\u6613\u7684channel\u4e0a\u7684peer\u548c\u54cd\u5e94\u7ed3\u679c\uff08endorsements\uff09\u7684\u5fc5\u8981\u7ec4\u5408\u6761\u4ef6\uff08\u5373\u8fd4\u56deYes\u6216No\u7684\u6761\u4ef6\uff09\u3002Endorsement policy\u53ef\u6307\u5b9a\u5bf9\u4e8e\u67d0\u4e00chaincode\uff0c\u53ef\u4ee5\u5bf9\u4ea4\u6613\u80cc\u4e66\u7684\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u6570\u6216\u8005\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u767e\u5206\u6bd4\u3002\u80cc\u4e66\u7b56\u7565\u7531\u80cc\u4e66\u8282\u70b9\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u62b5\u5fa1\u4e0d\u826f\u884c\u4e3a\u7684\u671f\u671b\u6c34\u5e73\u6765\u7ec4\u7ec7\u7ba1\u7406\u3002\u5728install\u548cinstantiate Chaincode\uff08deploy tx\uff09\u65f6\u9700\u8981\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u3002", 
            "title": "Endorsement policy - \u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/glossary/#fabric-ca", 
            "text": "Fabric-ca is the default Certificate Authority component, which issues PKI-based certificates to network member organizations and their users. The CA issues one root certificate (rootCert) to each member, one enrollment certificate (eCert) to each authorized user, and a number of transaction certificates (tCerts) for each eCert.  Fabric-ca\u662f\u9ed8\u8ba4\u7684\u8bc1\u4e66\u7ba1\u7406\u7ec4\u4ef6\uff0c\u5b83\u5411\u7f51\u7edc\u6210\u5458\u53ca\u5176\u7528\u6237\u9881\u53d1\u57fa\u4e8ePKI\u7684\u8bc1\u4e66\u3002CA\u4e3a\u6bcf\u4e2a\u6210\u5458\u9881\u53d1\u4e00\u4e2a\u6839\u8bc1\u4e66\uff08rootCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6388\u6743\u7528\u6237\u9881\u53d1\u4e00\u4e2a\u6ce8\u518c\u8bc1\u4e66\uff08eCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6ce8\u518c\u8bc1\u4e66\u9881\u53d1\u5927\u91cf\u4ea4\u6613\u8bc1\u4e66\uff08tCerts\uff09\u3002", 
            "title": "Fabric-ca"
        }, 
        {
            "location": "/glossary/#genesis-block-", 
            "text": "The configuration block that initializes a blockchain network or channel, and also serves as the first block on a chain.  Genesis Block\u662f\u521d\u59cb\u5316\u533a\u5757\u94fe\u7f51\u7edc\u6216channel\u7684\u914d\u7f6e\u533a\u5757\uff0c\u4e5f\u662f\u94fe\u4e0a\u7684\u7b2c\u4e00\u4e2a\u533a\u5757\u3002", 
            "title": "Genesis Block - \u521d\u59cb\u533a\u5757"
        }, 
        {
            "location": "/glossary/#gossip-protocol-gossip", 
            "text": "The gossip data dissemination protocol performs three functions: 1) manages peer discovery and channel membership; 2) disseminates ledger data across all peers on the channel; 3) syncs ledger state across all peers on the channel. Refer to the  Gossip  topic for more details.  Gossip\u6570\u636e\u4f20\u8f93\u534f\u8bae\u6709\u4e09\u9879\u529f\u80fd\uff1a1\uff09\u7ba1\u7406peer\u53d1\u73b0\u548cchannel\u6210\u5458\uff1b2\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u5e7f\u64ad\u8d26\u672c\u6570\u636e\uff1b3\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u540c\u6b65\u8d26\u672c\u6570\u636e\u3002", 
            "title": "Gossip Protocol - Gossip\u534f\u8bae"
        }, 
        {
            "location": "/glossary/#initialize-", 
            "text": "A method to initialize a chaincode application.  \u4e00\u4e2a\u521d\u59cb\u5316chaincode\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002", 
            "title": "Initialize - \u521d\u59cb\u5316"
        }, 
        {
            "location": "/glossary/#install-", 
            "text": "The process of placing a chaincode on a peer\u2019s file system.  \u5c06chaincode\u653e\u5230peer\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u8fc7\u7a0b\u3002 \uff08\u8bd1\u6ce8\uff1a\u5373\u5c06ChaincodeDeploymentSpec\u4fe1\u606f\u5b58\u5230chaincodeInstallPath-chaincodeName.chainVersion\u6587\u4ef6\u4e2d\uff09", 
            "title": "Install - \u5b89\u88c5"
        }, 
        {
            "location": "/glossary/#instantiate-", 
            "text": "The process of starting a chaincode container.  \u542f\u52a8chaincode\u5bb9\u5668\u7684\u8fc7\u7a0b\u3002 \uff08\u8bd1\u6ce8\uff1a\u5728lccc\u4e2d\u5c06ChaincodeData\u4fdd\u5b58\u5230state\u4e2d\uff0c\u7136\u540edeploy Chaincode\u5e76\u6267\u884cInit\u65b9\u6cd5\uff09", 
            "title": "Instantiate - \u5b9e\u4f8b\u5316"
        }, 
        {
            "location": "/glossary/#invoke-", 
            "text": "Used to call chaincode functions. Invocations are captured as transaction proposals, which then pass through a modular flow of endorsement, ordering, validation, committal. The structure of invoke is a function and an array of arguments.  \u7528\u4e8e\u8c03\u7528chaincode\u5185\u7684\u51fd\u6570\u3002Chaincode invoke\u5c31\u662f\u4e00\u4e2a\u4ea4\u6613proposal\uff0c\u7136\u540e\u6267\u884c\u6a21\u5757\u5316\u7684\u6d41\u7a0b\uff08\u80cc\u4e66\u3001\u5171\u8bc6\u3001 \u9a8c\u8bc1\u3001 \u63d0\u4ea4\uff09\u3002invoke\u7684\u7ed3\u6784\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\u3002", 
            "title": "Invoke - \u8c03\u7528"
        }, 
        {
            "location": "/glossary/#leading-peer-", 
            "text": "Each  Member  can own multiple peers on each channel that it subscribes to. One of these peers is serves as the leading peer for the channel, in order to communicate with the network ordering service on behalf of the member. The ordering service \u201cdelivers\u201d blocks to the leading peer(s) on a channel, who then distribute them to other peers within the same member cluster.  \u6bcf\u4e00\u4e2aMember\u5728\u5176\u8ba2\u9605\u7684channel\u4e0a\u53ef\u4ee5\u62e5\u6709\u591a\u4e2apeer\uff0c\u5176\u4e2d\u4e00\u4e2apeer\u4f1a\u4f5c\u4e3achannel\u7684leading peer\u4ee3\u8868\u8be5Member\u4e0eordering service\u901a\u4fe1\u3002ordering service\u5c06block\u4f20\u9012\u7ed9leading peer\uff0c\u8be5peer\u518d\u5c06\u6b64block\u5206\u53d1\u7ed9\u540c\u4e00member\u4e0b\u7684\u5176\u4ed6peer\u3002", 
            "title": "Leading Peer - \u4e3b\u5bfc\u8282\u70b9"
        }, 
        {
            "location": "/glossary/#ledger-", 
            "text": "A ledger is a channel\u2019s chain and current state data which is maintained by each peer on the channel.  Ledger\u662f\u4e2achannel\u7684chain\u548c\u7531channel\u4e2d\u6bcf\u4e2apeer\u7ef4\u62a4\u7684world state\u3002 \uff08\u8fd9\u4e2a\u89e3\u91ca\u6709\u70b9\u602a\uff09", 
            "title": "Ledger - \u8d26\u672c"
        }, 
        {
            "location": "/glossary/#member-", 
            "text": "A legally separate entity that owns a unique root certificate for the network. Network components such as peer nodes and application clients will be linked to a member.  \u62e5\u6709\u7f51\u7edc\u552f\u4e00\u6839\u8bc1\u4e66\u7684\u5408\u6cd5\u72ec\u7acb\u5b9e\u4f53\u3002\u50cfpeer\u8282\u70b9\u548capp client\u8fd9\u6837\u7684\u7f51\u7edc\u7ec4\u4ef6\u4f1a\u94fe\u63a5\u5230\u4e00\u4e2aMember\u3002", 
            "title": "Member - \u6210\u5458"
        }, 
        {
            "location": "/glossary/#membership-service-provider-msp", 
            "text": "The Membership Service Provider (MSP) refers to an abstract component of the system that provides credentials to clients, and peers for them to participate in a Hyperledger Fabric network. Clients use these credentials to authenticate their transactions, and peers use these credentials to authenticate transaction processing results (endorsements). While strongly connected to the transaction processing components of the systems, this interface aims to have membership services components defined, in such a way that alternate implementations of this can be smoothly plugged in without modifying the core of transaction processing components of the system.  MSP\u662f\u6307\u4e3aclient\u548cpeer\u63d0\u4f9b\u8bc1\u4e66\u7684\u7cfb\u7edf\u62bd\u8c61\u7ec4\u4ef6\u3002Client\u7528\u8bc1\u4e66\u6765\u8ba4\u8bc1\u4ed6\u4eec\u7684\u4ea4\u6613\uff1bpeer\u7528\u8bc1\u4e66\u8ba4\u8bc1\u5176\u4ea4\u6613\u80cc\u4e66\u3002\u8be5\u63a5\u53e3\u4e0e\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u5bc6\u5207\u76f8\u5173\uff0c\u65e8\u5728\u4f7f\u5df2\u5b9a\u4e49\u7684\u6210\u5458\u8eab\u4efd\u670d\u52a1\u7ec4\u4ef6\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u987a\u5229\u63d2\u5165\u800c\u4e0d\u4f1a\u4fee\u6539\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u7684\u6838\u5fc3\u3002", 
            "title": "Membership Service Provider - MSP"
        }, 
        {
            "location": "/glossary/#membership-services-", 
            "text": "Membership Services authenticates, authorizes, and manages identities on a permissioned blockchain network. The membership services code that runs in peers and orderers both authenticates and authorizes blockchain operations. It is a PKI-based implementation of the Membership Services Provider (MSP) abstraction.  \u6210\u5458\u670d\u52a1\u5728\u8bb8\u53ef\u7684\u533a\u5757\u94fe\u7f51\u7edc\u4e0a\u8ba4\u8bc1\u3001\u6388\u6743\u548c\u7ba1\u7406\u8eab\u4efd\u3002\u5728peer\u548corder\u4e2d\u8fd0\u884c\u7684\u6210\u5458\u670d\u52a1\u7684\u4ee3\u7801\u90fd\u4f1a\u8ba4\u8bc1\u548c\u6388\u6743\u533a\u5757\u94fe\u64cd\u4f5c\u3002\u5b83\u662f\u57fa\u4e8ePKI\u7684MSP\u5b9e\u73b0\u3002  The  fabric-ca  component is an implementation of membership services to manage identities. In particular, it handles the issuance and revocation of enrollment certificates and transaction certificates.  fabric-ca \u7ec4\u4ef6\u5b9e\u73b0\u4e86\u6210\u5458\u670d\u52a1\uff0c\u6765\u7ba1\u7406\u8eab\u4efd\u3002\u7279\u522b\u7684\uff0c\u5b83\u5904\u7406ECert\u548cTCert\u7684\u9881\u53d1\u548c\u64a4\u9500\u3002  An enrollment certificate is a long-term identity credential; a transaction certificate is a short-term identity credential which is both anonymous and un-linkable.  ECert\u662f\u957f\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff1bTCert\u662f\u77ed\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff0c\u662f\u533f\u540d\u548c\u4e0d\u53ef\u94fe\u63a5\u7684\u3002", 
            "title": "Membership Services - \u6210\u5458\u670d\u52a1"
        }, 
        {
            "location": "/glossary/#ordering-service-", 
            "text": "A defined collective of nodes that orders transactions into a block. The ordering service exists independent of the peer processes and orders transactions on a first-come-first-serve basis for all channel\u2019s on the network. The ordering service is designed to support pluggable implementations beyond the out-of-the-box SOLO and Kafka varieties. The ordering service is a common binding for the overall network; it contains the cryptographic identity material tied to each  Member .  \u5c06\u4ea4\u6613\u6392\u5e8f\u653e\u5165block\u7684\u8282\u70b9\u7684\u96c6\u5408\u3002ordering service\u72ec\u7acb\u4e8epeer\u6d41\u7a0b\u4e4b\u5916\uff0c\u5e76\u4ee5\u5148\u5230\u5148\u5f97\u7684\u65b9\u5f0f\u4e3a\u7f51\u7edc\u4e0a\u6240\u6709\u7684channel\u4f5c\u4ea4\u6613\u6392\u5e8f\u3002ordering service\u652f\u6301\u53ef\u63d2\u62d4\u5b9e\u73b0\uff0c\u76ee\u524d\u9ed8\u8ba4\u5b9e\u73b0\u4e86SOLO\u548cKafka\u3002ordering service\u662f\u6574\u4e2a\u7f51\u7edc\u7684\u516c\u7528binding\uff0c\u5305\u542b\u4e0e\u6bcf\u4e2aMember\u76f8\u5173\u7684\u52a0\u5bc6\u6750\u6599\u3002", 
            "title": "Ordering Service - \u6392\u5e8f\u670d\u52a1\u6216\u5171\u8bc6\u670d\u52a1"
        }, 
        {
            "location": "/glossary/#peer-", 
            "text": "A network entity that maintains a ledger and runs chaincode containers in order to perform read-write operations to the ledger. Peers are owned and maintained by members.  \u4e00\u4e2a\u7f51\u7edc\u5b9e\u4f53\uff0c\u7ef4\u62a4ledger\u5e76\u8fd0\u884cChaincode\u5bb9\u5668\u6765\u5bf9ledger\u6267\u884cread-write\u64cd\u4f5c\u3002peer\u7531Member\u62e5\u6709\u548c\u7ef4\u62a4\u3002", 
            "title": "Peer - \u8282\u70b9"
        }, 
        {
            "location": "/glossary/#policy-", 
            "text": "There are policies for endorsement, validation, block committal, chaincode management and network-channel management.  \u6709\u80cc\u4e66\u7b56\u7565\uff0c\u6821\u9a8c\u7b56\u7565\uff0c\u533a\u5757\u63d0\u4ea4\u7b56\u7565\uff0cChaincode\u7ba1\u7406\u7b56\u7565\u548c\u7f51\u7edc-\u901a\u9053\u7ba1\u7406\u7b56\u7565\u3002", 
            "title": "Policy - \u7b56\u7565"
        }, 
        {
            "location": "/glossary/#proposal-", 
            "text": "A request for endorsement that is aimed at specific peers on a channel. Each proposal is either an instantiate or an invoke (read-write) request.  \u4e00\u79cd\u9488\u5bf9channel\u4e2d\u67d0peer\u7684\u80cc\u4e66\u8bf7\u6c42\u3002\u6bcf\u4e2aproposal\u8981\u4e48\u662fChaincode instantiate\u8981\u4e48\u662fChaincode invoke\u3002", 
            "title": "Proposal - \u63d0\u6848"
        }, 
        {
            "location": "/glossary/#query-", 
            "text": "A query requests the value of a key(s) against the current state.  \u5bf9\u4e8ecurrent state\u4e2d\u67d0\u4e2akey\u7684value\u7684\u67e5\u8be2\u8bf7\u6c42\u3002", 
            "title": "Query - \u67e5\u8be2"
        }, 
        {
            "location": "/glossary/#software-development-kit-sdk", 
            "text": "The Hyperledger Fabric client SDK provides a structured environment of libraries for developers to write and test chaincode applications. The SDK is fully configurable and extensible through a standard interface. Components, including cryptographic algorithms for signatures, logging frameworks and state stores, are easily swapped in and out of the SDK. The SDK API uses protocol buffers over gRPC for transaction processing, membership services, node traversal and event handling applications to communicate across the fabric. The SDK comes in multiple flavors - Node.js, Java. and Python.  SDK\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u5e93\u73af\u5883\uff0c\u7528\u4e8e\u7f16\u5199\u548c\u6d4b\u8bd5\u94fe\u7801\u5e94\u7528\u7a0b\u5e8f\u3002SDK\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u63a5\u53e3\u5b9e\u73b0\u914d\u7f6e\u548c\u6269\u5c55\uff0c\u50cf\u7b7e\u540d\u7684\u52a0\u5bc6\u7b97\u6cd5\u3001\u65e5\u5fd7\u6846\u67b6\u548cstate\u5b58\u50a8\u8fd9\u6837\u7684\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u66ff\u6362\u3002SDK API\u4f7f\u7528gRPC\u8fdb\u884c\u4ea4\u6613\u5904\u7406\uff0c\u6210\u5458\u670d\u52a1\u3001\u8282\u70b9\u904d\u5386\u4ee5\u53ca\u4e8b\u4ef6\u5904\u7406\u90fd\u662f\u636e\u6b64\u4e0efabric\u901a\u4fe1\u3002\u76ee\u524dSDK\u652f\u6301Node.js\u3001Java\u548cPython\u3002", 
            "title": "Software Development Kit - SDK"
        }, 
        {
            "location": "/glossary/#state-database-statedb", 
            "text": "Current state data is stored in a state database for efficient reads and queries from chaincode. These databases include levelDB and couchDB.  \u4e3a\u4e86\u4eceChaincode\u4e2d\u9ad8\u6548\u7684\u8bfb\u5199\uff0cCurrent state \u6570\u636e\u5b58\u50a8\u5728stateDB\u4e2d\uff0c\u5305\u62eclevelDB\u548ccouchDB\u3002", 
            "title": "State Database - stateDB"
        }, 
        {
            "location": "/glossary/#system-chain-", 
            "text": "Contains a configuration block defining the network at a system level. The system chain lives within the ordering service, and similar to a channel, has an initial configuration containing information such as: MSP information, policies, and configuration details. Any change to the overall network (e.g. a new org joining or a new ordering node being added) will result in a new configuration block being added to the system chain.  \u5305\u542b\u5728\u7cfb\u7edf\u7ea7\u5b9a\u4e49\u7f51\u7edc\u7684\u914d\u7f6e\u533a\u5757\u3002\u7cfb\u7edf\u94fe\u5b58\u5728\u4e8eordering service\u4e2d\uff0c\u4e0echannel\u7c7b\u4f3c\uff0c\u5177\u6709\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\u7684\u521d\u59cb\u914d\u7f6e\uff1aMSP\u4fe1\u606f\u3001\u7b56\u7565\u548c\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u6574\u4e2a\u7f51\u7edc\u7684\u4efb\u4f55\u53d8\u5316\uff08\u4f8b\u5982\u65b0\u7684Org\u52a0\u5165\u6216\u8005\u6dfb\u52a0\u65b0\u7684Ordering\u8282\u70b9\uff09\u5c06\u5bfc\u81f4\u65b0\u7684\u914d\u7f6e\u533a\u5757\u88ab\u6dfb\u52a0\u5230\u7cfb\u7edf\u94fe\u3002  The system chain can be thought of as the common binding for a channel or group of channels. For instance, a collection of financial institutions may form a consortium (represented through the system chain), and then proceed to create channels relative to their aligned and varying business agendas.  \u7cfb\u7edf\u94fe\u53ef\u770b\u505a\u662f\u4e00\u4e2achannel\u6216\u4e00\u7ec4channel\u7684\u516c\u7528binding\u3002\u4f8b\u5982\uff0c\u91d1\u878d\u673a\u6784\u7684\u96c6\u5408\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u8d22\u56e2\uff08\u4ee5system chain\u8868\u793a\uff09\uff0c\u7136\u540e\u6839\u636e\u5176\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4e1a\u52a1\u521b\u5efachannel\u3002", 
            "title": "System Chain - \u7cfb\u7edf\u94fe"
        }, 
        {
            "location": "/glossary/#transaction-", 
            "text": "An invoke or instantiate operation. Invokes are requests to read-write data from the ledger. Instantiate is a request to start a chaincode container on a peer.  Chaincode\u7684invoke\u6216instantiate\u64cd\u4f5c\u3002Invoke\u662f\u4eceledger\u4e2d\u8bf7\u6c42read-write set\uff1bInstantiate\u662f\u8bf7\u6c42\u5728peer\u4e0a\u542f\u52a8Chaincode\u5bb9\u5668\u3002", 
            "title": "Transaction - \u4ea4\u6613"
        }, 
        {
            "location": "/blockchain_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nWei Li\n\n\n\n\n\n\n\n\n\n\n\u7b80\u4ecb\n\n\nHyperledger Fabric\u662f\u4e00\u4e2a\u63d0\u4f9b\u5206\u5e03\u5f0f\u8d26\u672c\u89e3\u51b3\u65b9\u6848\u7684\u5e73\u53f0\u3002Hyperledger Fabric\u7531\u6a21\u5757\u5316\u67b6\u6784\u652f\u6491\uff0c\u5e76\u5177\u5907\u6781\u4f73\u7684\u4fdd\u5bc6\u6027\u3001\u53ef\u4f38\u7f29\u6027\u3001\u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002Hyperledger Fabric\u88ab\u8bbe\u8ba1\u6210\u652f\u6301\u4e0d\u540c\u7684\u6a21\u5757\u7ec4\u4ef6\u76f4\u63a5\u62d4\u63d2\u542f\u7528\uff0c\u5e76\u80fd\u9002\u5e94\u5728\u7ecf\u6d4e\u751f\u6001\u7cfb\u7edf\u4e2d\u9519\u7efc\u590d\u6742\u7684\u5404\u79cd\u573a\u666f\u3002\n\n\nHyperledger Fabric\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7279\u7684\u53ef\u4f38\u7f29\u3001\u53ef\u6269\u5c55\u7684\u67b6\u6784\uff0c\u8fd9\u4e5f\u662fHyperledger Fabric\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u89e3\u51b3\u65b9\u6848\u7684\u663e\u8457\u533a\u522b\u3002\u5047\u5982\u4f60\u6b63\u5728\u8ba1\u5212\u90e8\u7f72\u5177\u5907\u5b8c\u6574\u5ba1\u67e5\u673a\u5236\u4ee5\u53ca\u5f00\u6e90\u67b6\u6784\u7684\u4f01\u4e1a\u7ea7\u533a\u5757\u94fe\uff0cHyperledger Fabric\u662f\u4f60\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\u3002\n\n\n\u5bf9\u4e8e\u521d\u5b66\u8005\uff0c\u63a8\u8350\u9996\u5148\u9605\u8bfb\u4e0b\u6587\u4e2d\u7684\u7b80\u4ecb\uff0c\u4ee5\u4fbf\u4e8e\u7406\u89e3\u533a\u5757\u94fe\u7684\u5de5\u4f5c\u539f\u7406\u3001\u5177\u6709\u7684\u4e3b\u8981\u7279\u70b9\u4ee5\u53caHyperledger Fabric\u4e2d\u5305\u542b\u7684\u7ec4\u4ef6\u3002\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u5bf9\u533a\u5757\u94fe\u548cHyperledger Fabric\u6709\u6240\u4e86\u89e3\uff0c\u53ef\u76f4\u63a5\u9605\u8bfb\n\u5feb\u901f\u5165\u95e8\n\uff0c\u5728\u5feb\u901f\u5165\u95e8\u4e2d\u5305\u542b\u76f8\u5173\u793a\u4f8b\u3001\u6280\u672f\u89c4\u683c\u4ee5\u53caAPIs\u7b49\u7b49\u3002\n\n\n\u533a\u5757\u94fe\u662f\u4ec0\u4e48\uff1f\n\n\n\u5206\u5e03\u5f0f\u8d26\u672c\n\n\n\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u8d26\u672c\uff0c\u5728\u8fd9\u4e2a\u8d26\u672c\u4e2d\u8bb0\u5f55\u4e86\u7f51\u7edc\u4e2d\u53d1\u751f\u7684\u6240\u6709\u4ea4\u6613\u4fe1\u606f\u3002\n\n\n\u533a\u5757\u94fe\u8d26\u672c\u901a\u5e38\u88ab\u5b9a\u4e49\u4e3a\n\u53bb\u4e2d\u5fc3\u5316\n\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u6574\u4e2a\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e2a\u53c2\u4e0e\u8005\u90fd\u4fdd\u5b58\u7740\u4e00\u4e2a\u533a\u5757\u94fe\u8d26\u672c\u7684\u526f\u672c\uff0c\u6240\u6709\u53c2\u4e0e\u8005\u901a\u8fc7\n\u534f\u4f5c\n\u5171\u540c\u7ef4\u62a4\u7740\u8d26\u672c\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u770b\u5230\uff0c\u53bb\u4e2d\u5fc3\u5316\u4e0e\u534f\u4f5c\u8fd9\u4e24\u4e2a\u7279\u70b9\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u5546\u4e1a\u8d27\u7269\u4ea4\u6613\u548c\u5546\u52a1\u670d\u52a1\u4e2d\u5c55\u73b0\u51fa\u7684\u663e\u8457\u4f18\u70b9\u3002\n\n\n\n\n\u9664\u4e86\u53bb\u4e2d\u5fc3\u5316\u4e0e\u534f\u4f5c\uff0c\u533a\u5757\u94fe\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u7279\u70b9\u662f\u4fe1\u606f\u5728\u53ea\u80fd\u4ee5\u201c\u9644\u52a0\u201d\u7684\u65b9\u5f0f\u8bb0\u5f55\u5728\u533a\u5757\u94fe\u4e2d\uff0c\u540c\u65f6\u4f7f\u7528\u52a0\u5bc6\u6280\u672f\u4fdd\u969c\u4e86\u4ea4\u6613\u4e00\u65e6\u88ab\u6dfb\u52a0\u8fdb\u8d26\u672c\u4e2d\uff0c\u5c31\u65e0\u6cd5\u88ab\u7be1\u6539\u3002\u533a\u5757\u94fe\u7684\u8fd9\u79cd\u4e0d\u53ef\u7be1\u6539\u6027\u4f7f\u5f97\u4fe1\u606f\u6765\u6e90\u7684\u786e\u8ba4\u53d8\u5f97\u5f02\u5e38\u5bb9\u6613\uff0c\u8fd9\u662f\u7531\u4e8e\u53c2\u4e0e\u8005\u53ef\u4ee5\u80af\u5b9a\u4fe1\u606f\u4e00\u65e6\u88ab\u5199\u5165\u533a\u5757\u94fe\u4e2d\u5c31\u51e0\u4e4e\u4e0d\u53ef\u88ab\u7be1\u6539\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u533a\u5757\u94fe\u5e38\u5e38\u4e5f\u88ab\u79f0\u4e3a\n\u8bc1\u660e\u7684\u7cfb\u7edf\n\u7684\u539f\u56e0\u3002\n\n\n\u667a\u80fd\u5408\u7ea6\n\n\n\u4e3a\u4e86\u6301\u7eed\u7684\u8fdb\u884c\u4fe1\u606f\u7684\u66f4\u65b0\uff0c\u4ee5\u53ca\u5bf9\u8d26\u672c\u8fdb\u884c\u7ba1\u7406\uff08\u5199\u5165\u4ea4\u6613\uff0c\u8fdb\u884c\u67e5\u8be2\u7b49\uff09\uff0c\u533a\u5757\u94fe\u7f51\u7edc\u5f15\u5165\u4e86\n\u667a\u80fd\u5408\u7ea6\n\u6765\u5b9e\u73b0\u5bf9\u8d26\u672c\u7684\u8bbf\u95ee\u548c\u63a7\u5236\u3002\n\n\n\n\n\u667a\u80fd\u5408\u7ea6\u4e0d\u4ec5\u4ec5\u53ef\u7528\u4e8e\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u6253\u5305\u4fe1\u606f\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e\u81ea\u52a8\u7684\u6267\u884c\u7531\u53c2\u4e0e\u8005\u5b9a\u4e49\u7684\u7279\u5b9a\u4ea4\u6613\u64cd\u4f5c\u3002\n\n\n\u4f8b\u5982\uff0c\u4e70\u5356\u53cc\u65b9\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u4ee5\u4fdd\u8bc1\u5f53\u5356\u65b9\u53d1\u8d27\u7684\u5546\u54c1\u8fd0\u9001\u5230\u8fbe\u65f6\uff0c\u4e70\u65b9\u652f\u4ed8\u7684\u8d27\u6b3e\u4f1a\u81ea\u52a8\u8f6c\u8d26\u7ed9\u5356\u65b9\u3002\n\n\n\u5171\u8bc6\n\n\n\u4fdd\u6301\u7f51\u7edc\u4e2d\u6240\u6709\u8d26\u672c\u4ea4\u6613\u7684\u540c\u6b65\u6d41\u7a0b\uff0c\u5c31\u662f\n\u5171\u8bc6\n\u3002\u5171\u8bc6\u4fdd\u8bc1\u4e86\u8d26\u672c\u53ea\u4f1a\u5728\u4ea4\u6613\u53cc\u65b9\u90fd\u786e\u8ba4\u540e\u624d\u8fdb\u884c\u66f4\u65b0\u3002\u540c\u65f6\u5728\u8d26\u672c\u66f4\u65b0\u65f6\uff0c\u4ea4\u6613\u53cc\u65b9\u80fd\u591f\u5728\u8d26\u672c\u4e2d\u7684\u76f8\u540c\u4f4d\u7f6e\uff0c\u66f4\u65b0\u4e00\u4e2a\u76f8\u540c\u7684\u4ea4\u6613\u4fe1\u606f\u3002\n\n\n\n\n\u540e\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u8d26\u672c\u3001\u667a\u80fd\u5408\u7ea6\u548c\u5171\u8bc6\u7684\u76f8\u5173\u5185\u5bb9\u3002\u4f46\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u9700\u628a\u533a\u5757\u94fe\u7406\u89e3\u4e3a\u4e00\u4e2a\u5171\u4eab\u7684\uff0c\u901a\u8fc7\u667a\u80fd\u5408\u7ea6\u66f4\u65b0\u7684\u591a\u526f\u672c\u4ea4\u6613\u7cfb\u7edf\uff0c\u540c\u65f6\u8fd9\u4e2a\u7cfb\u7edf\u901a\u8fc7\u534f\u4f5c\u5171\u8bc6\u673a\u5236\u4fdd\u8bc1\u4e86\u7f51\u7edc\u4e2d\u6240\u6709\u8d26\u672c\u526f\u672c\u7684\u540c\u6b65\u3002\n\n\n\u533a\u5757\u94fe\u4e3a\u4ec0\u4e48\u5207\u5b9e\u53ef\u884c\uff1f\n\n\n\u5f53\u524d\u7684\u8bb0\u5f55\u7cfb\u7edf\n\n\n\u81ea\u4ece\u5546\u4e1a\u6570\u636e\u8bb0\u5f55\u7f51\u7edc\u7cfb\u7edf\u8bde\u751f\u4ee5\u6765\uff0c\u76f4\u5230\u4eca\u5929\u7684\u4ea4\u6613\u7f51\u7edc\u5e76\u6ca1\u6709\u53d1\u751f\u592a\u5927\u7684\u53d8\u5316\u3002\u5728\n\u5546\u4e1a\u7f51\u7edc\n\u4e2d\u7684\u6210\u5458\u8fdb\u884c\u76f8\u4e92\u4ea4\u6613\u65f6\uff0c\u4ed6\u4eec\u5404\u81ea\u7ef4\u62a4\u7740\u81ea\u5df1\u72ec\u7acb\u7684\u4ea4\u6613\u8bb0\u5f55\u3002\u540c\u65f6\uff0c\u4eba\u4eec\u4ea4\u6613\u7684\u7269\u54c1\u2014\u2014\u65e0\u8bba\u662f16\u4e16\u7eaa\u4f5b\u5170\u5fb7\u7684\u6302\u6bef\uff0c\u8fd8\u662f\u73b0\u4ee3\u7684\u6709\u4ef7\u8bc1\u5238\u2014\u2014\u90fd\u4efb\u7136\u9700\u8981\u5728\u6bcf\u6b21\u5356\u51fa\u4ea4\u6613\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u6765\u6e90\u4fe1\u606f\uff0c\u4ee5\u786e\u4fdd\u5356\u65b9\u62e5\u6709\u6240\u51fa\u552e\u5546\u54c1\u7684\u6240\u6709\u6743\u3002\n\n\n\u5f53\u524d\u7684\u5546\u4e1a\u7f51\u7edc\u5c31\u50cf\u4e0b\u56fe\u63cf\u8ff0\u7684\u4e00\u6837\uff1a\n\n\n\n\n\u968f\u7740\u79d1\u6280\u7684\u8fdb\u6b65\uff0c\u4e0a\u56fe\u4e2d\u7684\u4ea4\u6613\u6d41\u7a0b\u4e0d\u65ad\u6f14\u5316\u53d1\u5c55\uff0c\u7ecf\u5386\u4e86\u4ece\u4f7f\u7528\u77f3\u7891\u3001\u4f7f\u7528\u7eb8\u8d28\u8d26\u672c\u3001\u4f7f\u7528\u786c\u76d8\u5b58\u50a8\u5668\u76f4\u5230\u4f7f\u7528\u4e91\u8ba1\u7b97\u5e73\u53f0\u7684\u4e0d\u540c\u9636\u6bb5\uff0c\u4f46\u6d41\u7a0b\u7684\u5e95\u5c42\u67b6\u6784\u5e76\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u53d8\u5316\u3002\u5e76\u4e0d\u5b58\u5728\u4e00\u4e2a\u53ef\u4ee5\u7edf\u4e00\u7ba1\u7406\u7f51\u7edc\u53c2\u4e0e\u8005\u8eab\u4efd\u7684\u7cfb\u7edf\uff0c\u786e\u8ba4\u5546\u54c1\u6765\u6e90\u5341\u5206\u8d39\u52b2\uff0c\u5e38\u5e38\u4f1a\u8017\u8d39\u6570\u5929\u7684\u65f6\u95f4\u660e\u786e\u8bc1\u5238\u7684\u4ea4\u6613\uff08\u5305\u542b\u6570\u4ee5\u4e07\u8ba1\u7f8e\u5143\u7684\u6570\u91cf\uff09\u3002\u4eba\u4eec\u5fc5\u987b\u7b7e\u8ba2\u5408\u7ea6\u5e76\u624b\u52a8\u6267\u884c\uff0c\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u5e93\u90fd\u5305\u542b\u7740\u72ec\u7acb\u7684\u4fe1\u606f\u5e76\u6700\u7ec8\u4ee3\u8868\u4e00\u4e2a\u5355\u70b9\u7684\u9519\u8bef\u3002\n\n\n\u5728\u4eca\u5929\u7684\u4fe1\u606f\u548c\u8fc7\u7a0b\u5171\u4eab\u65ad\u88c2\u7684\u65b9\u6cd5\u4e2d\uff0c\u5efa\u7acb\u4e00\u4e2a\u8de8\u8d8a\u5546\u4e1a\u7f51\u7edc\u7684\u8bb0\u5f55\u7cfb\u7edf\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5c3d\u7ba1\u53ef\u89c1\u6027\u548c\u4fe1\u4efb\u7684\u9700\u6c42\u662f\u660e\u786e\u7684\u3002\n\n\n\u533a\u5757\u94fe\u7684\u4e0d\u540c\u70b9\n\n\n\u90a3\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u7528\u201c\u73b0\u4ee3\u201d\u7684\u4ea4\u6613\u7cfb\u7edf\u6765\u66ff\u4ee3\u8fd9\u79cd\u6548\u7387\u4f4e\u4e0b\u7684\u7f51\u7edc\uff1f\u65b0\u7684\u5546\u4e1a\u7f51\u7edc\u53ef\u4ee5\u5177\u6709\u6807\u51c6\u7684\u65b9\u6cd5\u5efa\u7acb\u8eab\u4efd\u4fe1\u606f\uff0c\u6267\u884c\u4ea4\u6613\uff0c\u5e76\u4e14\u5b58\u50a8\u6570\u636e\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5efa\u7acb\u4e00\u4e2a\u53ef\u4fe1\u7684\u4ea4\u6613\u94fe\u6761\u8bb0\u5f55\uff1f\u901a\u8fc7\u67e5\u8be2\u8fd9\u4e2a\u94fe\u6761\u4e0a\u7684\u6240\u6709\u4ea4\u6613\uff0c\u6765\u786e\u5b9a\u4ea4\u6613\u5546\u54c1\u6765\u6e90\uff0c\u5e76\u4e14\u8fd9\u4e2a\u94fe\u6761\u4e0a\u7684\u4fe1\u606f\u4e00\u65e6\u88ab\u5199\u5165\uff0c\u5c31\u65e0\u6cd5\u88ab\u518d\u6b21\u7be1\u6539\u3002\n\n\n\u4ee5\u4e0a\u63cf\u8ff0\u7684\u5546\u4e1a\u7f51\u7edc\u5c31\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\u8fd9\u5c31\u662f\u533a\u5757\u94fe\u7f51\u7edc\u3002\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u53c2\u4e0e\u8005\u90fd\u4fdd\u6709\u4e00\u4efd\u8d26\u672c\u7684\u526f\u672c\u3002\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u8d26\u672c\u4fe1\u606f\u4f1a\u88ab\u5171\u4eab\uff0c\u66f4\u65b0\u8d26\u672c\u7684\u6d41\u7a0b\u4e5f\u662f\u5171\u4eab\u7684\u3002\u4e0d\u540c\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u2014\u2014\u53c2\u4e0e\u8005\u4f7f\u7528\n\u79c1\u6709\n\u7684\u7a0b\u5e8f\u5bf9\n\u79c1\u6709\n\u7684\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\uff0c\u800c\u533a\u5757\u94fe\u7cfb\u7edf\u4f7f\u7528\n\u5171\u4eab\n\u7684\u7a0b\u5e8f\u5bf9\n\u5171\u4eab\n\u7684\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\u3002\n\n\n\u901a\u8fc7\u4f7f\u7528\u5171\u4eab\u8d26\u672c\u534f\u8c03\u6574\u4e2a\u5546\u4e1a\u7f51\u7edc\uff0c\u533a\u5757\u94fe\u7f51\u7edc\u80fd\u591f\u51cf\u5c11\u65f6\u95f4\u3001\u6210\u672c\u4ee5\u53ca\u9690\u79c1\u4fe1\u606f\u6cc4\u9732\u7684\u98ce\u9669\uff0c\u5e76\u4e14\u80fd\u4f7f\u6d41\u7a0b\u66f4\u52a0\u53ef\u4fe1\u548c\u900f\u660e\u3002\n\n\n\u73b0\u5728\u4f60\u5df2\u7ecf\u660e\u767d\u4e86\u4ec0\u4e48\u662f\u533a\u5757\u94fe\u4ee5\u53ca\u5b83\u7684\u7528\u9014\u3002\u540c\u65f6\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u7684\u5185\u5bb9\u4e5f\u975e\u5e38\u91cd\u8981\uff0c\u4ed6\u4eec\u662f\u4fe1\u606f\u4e0e\u6d41\u7a0b\u5171\u4eab\u7684\u57fa\u7840\u77e5\u8bc6\u3002\n\n\nHyperledger Fabric\u662f\u4ec0\u4e48\uff1f\n\n\n2015\u5e74\uff0cLinux\u57fa\u91d1\u4f1a\u542f\u52a8\u4e86Hyperledger\u9879\u76ee\uff0c\u76ee\u6807\u662f\u53d1\u5c55\u8de8\u884c\u4e1a\u7684\u533a\u5757\u94fe\u6280\u672f\u3002Hyperledger\u9879\u76ee\u5e76\u4e0d\u4ec5\u4ec5\u662f\u5b9a\u4e49\u4e00\u4e2a\u5355\u4e00\u7684\u533a\u5757\u94fe\u6807\u51c6\uff0c\u5b83\u66f4\u9f13\u52b1\u901a\u8fc7\u5f00\u6e90\u793e\u533a\u7684\u529b\u91cf\u534f\u4f5c\u5f00\u53d1\u533a\u5757\u94fe\u6280\u672f\u3002\n\n\nHyperledger Fabric\u662fHyperledger\u4e2d\u7684\u4e00\u4e2a\u533a\u5757\u94fe\u9879\u76ee\u3002\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u6280\u672f\u7c7b\u4f3c\uff0cHyperledger Fabric\u5305\u542b\u4e00\u4e2a\u8d26\u672c\uff0c\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u5e76\u4e14\u662f\u4e00\u4e2a\u901a\u8fc7\u6240\u6709\u53c2\u4e0e\u8005\u7ba1\u7406\u4ea4\u6613\u7684\u7cfb\u7edf\u3002\n\n\nHyperledger Fabric\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u7cfb\u7edf\u6700\u5927\u7684\u4e0d\u540c\u4f53\u73b0\u5728\n\u79c1\u6709\n\u548c\n\u8bb8\u53ef\n\u3002\u4e0e\u5f00\u653e\u65e0\u9700\u8bb8\u53ef\u7684\u7f51\u7edc\u7cfb\u7edf\u5141\u8bb8\u672a\u77e5\u8eab\u4efd\u7684\u53c2\u4e0e\u8005\u52a0\u5165\u7f51\u7edc\u4e0d\u540c\uff08\u9700\u8981\u901a\u8fc7\u5de5\u4f5c\u91cf\u8bc1\u660e\u534f\u8bae\u6765\u4fdd\u8bc1\u4ea4\u6613\u6709\u6548\u5e76\u7ef4\u62a4\u7f51\u7edc\u7684\u5b89\u5168\uff09\uff0cHyperledger Fabric\u901a\u8fc7\nMembership Service Provider(MSP)\n\u6765\u767b\u8bb0\u6240\u6709\u7684\u6210\u5458\u3002\n\n\nHyperledger Fabric\u4e5f\u63d0\u4f9b\u4e86\u591a\u4e2a\u53ef\u62d4\u63d2\u9009\u9879\u3002\u8d26\u672c\u6570\u636e\u53ef\u88ab\u5b58\u50a8\u4e3a\u591a\u79cd\u683c\u5f0f\uff0c\u5171\u8bc6\u673a\u5236\u53ef\u88ab\u63a5\u5165\u6216\u8005\u65ad\u5f00\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684MSP\u3002\n\n\nHyperledger Fabric\u63d0\u4f9b\u4e86\u5efa\u7acb\nchannel\n\u7684\u529f\u80fd\uff0c\u8fd9\u5141\u8bb8\u53c2\u4e0e\u8005\u4e3a\u4ea4\u6613\u65b0\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u8d26\u672c\u3002\u5f53\u7f51\u7edc\u4e2d\u7684\u4e00\u4e9b\u53c2\u4e0e\u8005\u662f\u7ade\u4e89\u5bf9\u624b\u65f6\uff0c\u8fd9\u4e2a\u529f\u80fd\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u56e0\u4e3a\u8fd9\u4e9b\u53c2\u4e0e\u8005\u5e76\u4e0d\u5e0c\u671b\u6240\u6709\u7684\u4ea4\u6613\u4fe1\u606f\u2014\u2014\u6bd4\u5982\u63d0\u4f9b\u7ed9\u90e8\u5206\u5ba2\u6237\u7684\u7279\u5b9a\u4ef7\u683c\u4fe1\u606f\u2014\u2014\u90fd\u5bf9\u7f51\u7edc\u4e2d\u6240\u6709\u53c2\u4e0e\u8005\u516c\u5f00\u3002\u53ea\u6709\u5728\u540c\u4e00\u4e2achannel\u4e2d\u7684\u53c2\u4e0e\u8005\uff0c\u624d\u4f1a\u62e5\u6709\u8be5channel\u4e2d\u7684\u8d26\u672c\uff0c\u800c\u5176\u4ed6\u4e0d\u5728\u6b64channel\u4e2d\u7684\u53c2\u4e0e\u8005\u5219\u770b\u4e0d\u5230\u8fd9\u4e2a\u8d26\u672c\u3002\n\n\n\u5171\u4eab\u8d26\u672c\n\n\nHyperledger Fabric\u5305\u542b\u4e00\u4e2a\u8d26\u672c\u5b50\u7cfb\u7edf\uff0c\u8fd9\u4e2a\u5b50\u7cfb\u7edf\u5305\u542b\u4e24\u4e2a\u7ec4\u4ef6\uff1a\n\u4e16\u754c\u72b6\u6001(world state)\n\u548c\n\u4ea4\u6613\u8bb0\u5f55\n\u3002\u5728Hyperledger Fabric\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53c2\u4e0e\u8005\u90fd\u62e5\u6709\u4e00\u4e2a\u8d26\u672c\u7684\u526f\u672c\u3002\n\n\n\u4e16\u754c\u72b6\u6001\u7ec4\u4ef6\u63cf\u8ff0\u4e86\u8d26\u672c\u5728\u7279\u5b9a\u65f6\u95f4\u70b9\u7684\u72b6\u6001\uff0c\u5b83\u662f\u8d26\u672c\u7684\u6570\u636e\u5e93\u3002\u4ea4\u6613\u8bb0\u5f55\u7ec4\u4ef6\u8bb0\u5f55\u4e86\u4ea7\u751f\u4e16\u754c\u72b6\u6001\u5f53\u524d\u503c\u7684\u6240\u6709\u4ea4\u6613\uff0c\u5b83\u662f\u4e16\u754c\u72b6\u6001\u7684\u66f4\u65b0\u5386\u53f2\u3002\u90a3\u4e48\uff0c\u8d26\u672c\u5219\u662f\u4e16\u754c\u72b6\u6001\u6570\u636e\u5e93\u548c\u4ea4\u6613\u5386\u53f2\u8bb0\u5f55\u7684\u96c6\u5408\u3002\n\n\n\u8d26\u672c\u7684\u4e16\u754c\u72b6\u6001\u5b58\u50a8\u6570\u636e\u5e93\u662f\u53ef\u66f4\u6362\u7684\u3002\u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2akey-value\u5b58\u50a8\u6570\u636e\u5e93\u3002\u4ea4\u6613\u8bb0\u5f55\u6a21\u5757\u4e0d\u9700\u8981\u88ab\u63a5\u5165\u3002\u53ea\u9700\u8981\u8bb0\u5f55\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u8d26\u672c\u6570\u636e\u5e93\u88ab\u4f7f\u7528\u65f6\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u667a\u80fd\u5408\u7ea6\n\n\nHyperledger Fabric\u667a\u80fd\u5408\u7ea6\u88ab\u79f0\u4e3a\nchaincode\n\uff0c\u5f53\u4e00\u4e2a\u533a\u5757\u94fe\u5916\u90e8\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u8d26\u672c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528chaincode\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cchaincode\u53ea\u4f1a\u8bbf\u95ee\u8d26\u672c\u7684\u6570\u636e\u5e93\u7ec4\u4ef6\u548c\u4e16\u754c\u72b6\u6001(world state)\uff08\u6bd4\u5982\u67e5\u8be2\uff09\uff0c\u4f46\u4e0d\u4f1a\u67e5\u8be2\u4ea4\u6613\u8bb0\u5f55\u3002\n\n\nchaincode\u53ef\u901a\u8fc7\u591a\u79cd\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u3002\u76ee\u524d\u652f\u6301chaincode\u7684\u8bed\u8a00\u662fGo\uff08\u5305\u542b\u5bf9java\u7684\u652f\u6301\uff09\uff0c\u66f4\u591a\u7684\u7f16\u7a0b\u8bed\u8a00\u4f1a\u5728\u4eca\u540e\u7684\u7248\u672c\u4e2d\u83b7\u5f97\u652f\u6301\u3002\n\n\n\u9690\u79c1\n\n\n\u6839\u636e\u7f51\u7edc\u7684\u9700\u6c42\uff0c\u5728\u4e00\u4e2aBusiness-to-Business\uff08B2B\uff09\u7f51\u7edc\u4e2d\u7684\u53c2\u4e0e\u8005\u4f1a\u5bf9\u4fe1\u606f\u5171\u4eab\u7684\u7a0b\u5ea6\u6781\u4e3a\u654f\u611f\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7684\u7f51\u7edc\uff0c\u9690\u79c1\u5e76\u4e0d\u662f\u9996\u8981\u8003\u8651\u7684\u56e0\u7d20\u3002\n\n\nHyperledger Fabric\u652f\u6301\u6784\u5efa\u9690\u79c1\u4fdd\u62a4\u4e25\u683c\u7684\u7f51\u7edc\uff0c\u4e5f\u652f\u6301\u6784\u5efa\u76f8\u5bf9\u5f00\u653e\u7684\u7f51\u7edc\u3002\n\n\n\u5171\u8bc6\n\n\n\u5728\u7f51\u7edc\u4e2d\uff0c\u4e0d\u540c\u7684\u53c2\u4e0e\u8005\u5199\u5165\u7684\u4ea4\u6613\u5fc5\u987b\u6309\u7167\u4ea7\u751f\u987a\u5e8f\u4f9d\u6b21\u88ab\u5199\u5165\u8d26\u672c\u4e2d\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u4ea4\u6613\u987a\u5e8f\u5fc5\u987b\u88ab\u6b63\u786e\u7684\u5efa\u7acb\u5e76\u4e14\u5fc5\u987b\u5305\u542b\u62d2\u7edd\u9519\u8bef\uff08\u6216\u8005\u6076\u610f\uff09\u63d2\u5165\u8d26\u672c\u4e2d\u7684\u65e0\u6548\u4ea4\u6613\u7684\u65b9\u6cd5\u3002\n\n\n\u8fd9\u5b8c\u5168\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u7814\u7a76\u9886\u57df\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u65b9\u6cd5\u5b9e\u73b0\u4e0a\u9762\u63d0\u5230\u7684\u76ee\u6807\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\u3002\u4f8b\u5982\uff0cPBFT (Practical Byzantine Fault Tolerance)\u53ef\u4ee5\u4e3a\u6587\u4ef6\u526f\u672c\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\u6765\u76f8\u4e92\u901a\u4fe1\uff0c\u5373\u4f7f\u662f\u5728\u53d1\u751f\u8150\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u526f\u672c\u4fdd\u6301\u4e00\u81f4\u3002\u53e6\u5916\uff0c\u5728\u6bd4\u7279\u5e01\u4e2d\uff0c\u901a\u8fc7\u4e00\u79cd\u79f0\u4e3a\u6316\u77ff\u7684\u884c\u4e3a\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u6316\u77ff\u8fc7\u7a0b\u4e2d\uff0c\u7ade\u4e89\u7684\u8ba1\u7b97\u673a\u7ade\u76f8\u89e3\u51b3\u4e00\u4e2a\u5bc6\u7801\u96be\u9898\uff0c\u8fd9\u4e2a\u8c1c\u9898\u5b9a\u4e49\u4e86\u6240\u6709\u540e\u7eed\u7684\u6784\u5efa\u987a\u5e8f\u3002\n\n\nHyperledger Fabric\u88ab\u8bbe\u8ba1\u4e3a\u5141\u8bb8\u7f51\u7edc\u6784\u5efa\u8005\u4f9d\u636e\u4e1a\u52a1\u9700\u6c42\u6765\u9009\u62e9\u91c7\u7528\u7684\u5171\u8bc6\u673a\u5236\u3002\u597d\u6bd4\u8003\u8651\u9690\u79c1\u6027\uff0c\u5c31\u4f1a\u6709\u4e00\u8fde\u4e32\u7684\u9700\u6c42\uff0c\u4ece\u9ad8\u5ea6\u7ed3\u6784\u5316\u7684\u7f51\u7edc\u6216\u662f\u66f4\u52a0\u70b9\u5bf9\u70b9\u7684\u7f51\u7edc\u3002\n\n\n\u66f4\u591a\u7684Hyperledger Fabric\u5171\u8bc6\u673a\u5236\u4f1a\u5728\u53e6\u4e00\u4efd\u6587\u6863\u4e2d\u8be6\u7ec6\u63cf\u8ff0\uff0c\u8fd9\u4e9b\u5171\u8bc6\u673a\u5236\u76ee\u524d\u5305\u542bSOLO\uff0cKafka\u4ee5\u53ca\u540e\u7eed\u4f1a\u6dfb\u52a0\u7684SBFT (Simplified Byzantine Fault Tolerance)\u3002\n\n\n\u540e\u7eed\u5b66\u4e60\n\n\n\u5feb\u901f\u5165\u95e8\n\n\n\u5728\u5feb\u901f\u5165\u95e8\u4e2d\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u533a\u5757\u94fe\u7f51\u7edc\u6838\u5fc3\u7ec4\u4ef6\u4ecb\u7ecd\u7684\u6559\u7a0b\u3002\u901a\u8fc7\u8fd9\u4e9b\u6559\u7a0b\uff0c\u4f60\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u7684\u5b66\u4e60\u5230\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u8fd0\u884c\u673a\u5236\uff0c\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5b8c\u6574\u7684\u4ee3\u7801\u5e76\u76f4\u63a5\u5728\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u8fd0\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4ea4\u6613\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9762\u5411Hyperledger Fabric\u533a\u5757\u94fe\u7f51\u7edc\u7ef4\u62a4\u4eba\u5458\u7684\u6559\u7a0b\u3002\n\n\nHyperledger Fabric\u6a21\u578b\n\n\n\u5728Hyperledger Fabric\u6a21\u578b\u4e2d\uff0c\u4f1a\u5bf9\u5728\u8fd9\u7bc7\u7b80\u4ecb\u4e2d\u63d0\u5230\u7684\u7ec4\u4ef6\u548c\u6982\u5ff5\u8fdb\u884c\u4e86\u6df1\u5165\u8bb2\u89e3\uff0c\u4e5f\u5305\u542b\u4e00\u4e9b\u5176\u4ed6\u672a\u63d0\u5230\u7684\u5185\u5bb9\uff0c\u5e76\u901a\u8fc7\u4e00\u4e2a\u4ea4\u6613\u6d41\u7a0b\u793a\u4f8b\u63cf\u8ff0\u4e86\u4ed6\u4eec\u7684\u5de5\u4f5c\u673a\u5236\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/blockchain_zh/#_1", 
            "text": "Hyperledger Fabric\u662f\u4e00\u4e2a\u63d0\u4f9b\u5206\u5e03\u5f0f\u8d26\u672c\u89e3\u51b3\u65b9\u6848\u7684\u5e73\u53f0\u3002Hyperledger Fabric\u7531\u6a21\u5757\u5316\u67b6\u6784\u652f\u6491\uff0c\u5e76\u5177\u5907\u6781\u4f73\u7684\u4fdd\u5bc6\u6027\u3001\u53ef\u4f38\u7f29\u6027\u3001\u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002Hyperledger Fabric\u88ab\u8bbe\u8ba1\u6210\u652f\u6301\u4e0d\u540c\u7684\u6a21\u5757\u7ec4\u4ef6\u76f4\u63a5\u62d4\u63d2\u542f\u7528\uff0c\u5e76\u80fd\u9002\u5e94\u5728\u7ecf\u6d4e\u751f\u6001\u7cfb\u7edf\u4e2d\u9519\u7efc\u590d\u6742\u7684\u5404\u79cd\u573a\u666f\u3002  Hyperledger Fabric\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7279\u7684\u53ef\u4f38\u7f29\u3001\u53ef\u6269\u5c55\u7684\u67b6\u6784\uff0c\u8fd9\u4e5f\u662fHyperledger Fabric\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u89e3\u51b3\u65b9\u6848\u7684\u663e\u8457\u533a\u522b\u3002\u5047\u5982\u4f60\u6b63\u5728\u8ba1\u5212\u90e8\u7f72\u5177\u5907\u5b8c\u6574\u5ba1\u67e5\u673a\u5236\u4ee5\u53ca\u5f00\u6e90\u67b6\u6784\u7684\u4f01\u4e1a\u7ea7\u533a\u5757\u94fe\uff0cHyperledger Fabric\u662f\u4f60\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\u3002  \u5bf9\u4e8e\u521d\u5b66\u8005\uff0c\u63a8\u8350\u9996\u5148\u9605\u8bfb\u4e0b\u6587\u4e2d\u7684\u7b80\u4ecb\uff0c\u4ee5\u4fbf\u4e8e\u7406\u89e3\u533a\u5757\u94fe\u7684\u5de5\u4f5c\u539f\u7406\u3001\u5177\u6709\u7684\u4e3b\u8981\u7279\u70b9\u4ee5\u53caHyperledger Fabric\u4e2d\u5305\u542b\u7684\u7ec4\u4ef6\u3002  \u5982\u679c\u4f60\u5df2\u7ecf\u5bf9\u533a\u5757\u94fe\u548cHyperledger Fabric\u6709\u6240\u4e86\u89e3\uff0c\u53ef\u76f4\u63a5\u9605\u8bfb \u5feb\u901f\u5165\u95e8 \uff0c\u5728\u5feb\u901f\u5165\u95e8\u4e2d\u5305\u542b\u76f8\u5173\u793a\u4f8b\u3001\u6280\u672f\u89c4\u683c\u4ee5\u53caAPIs\u7b49\u7b49\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/blockchain_zh/#_2", 
            "text": "", 
            "title": "\u533a\u5757\u94fe\u662f\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/blockchain_zh/#_3", 
            "text": "\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u8d26\u672c\uff0c\u5728\u8fd9\u4e2a\u8d26\u672c\u4e2d\u8bb0\u5f55\u4e86\u7f51\u7edc\u4e2d\u53d1\u751f\u7684\u6240\u6709\u4ea4\u6613\u4fe1\u606f\u3002  \u533a\u5757\u94fe\u8d26\u672c\u901a\u5e38\u88ab\u5b9a\u4e49\u4e3a \u53bb\u4e2d\u5fc3\u5316 \uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u6574\u4e2a\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e2a\u53c2\u4e0e\u8005\u90fd\u4fdd\u5b58\u7740\u4e00\u4e2a\u533a\u5757\u94fe\u8d26\u672c\u7684\u526f\u672c\uff0c\u6240\u6709\u53c2\u4e0e\u8005\u901a\u8fc7 \u534f\u4f5c \u5171\u540c\u7ef4\u62a4\u7740\u8d26\u672c\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u770b\u5230\uff0c\u53bb\u4e2d\u5fc3\u5316\u4e0e\u534f\u4f5c\u8fd9\u4e24\u4e2a\u7279\u70b9\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u5546\u4e1a\u8d27\u7269\u4ea4\u6613\u548c\u5546\u52a1\u670d\u52a1\u4e2d\u5c55\u73b0\u51fa\u7684\u663e\u8457\u4f18\u70b9\u3002   \u9664\u4e86\u53bb\u4e2d\u5fc3\u5316\u4e0e\u534f\u4f5c\uff0c\u533a\u5757\u94fe\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u7279\u70b9\u662f\u4fe1\u606f\u5728\u53ea\u80fd\u4ee5\u201c\u9644\u52a0\u201d\u7684\u65b9\u5f0f\u8bb0\u5f55\u5728\u533a\u5757\u94fe\u4e2d\uff0c\u540c\u65f6\u4f7f\u7528\u52a0\u5bc6\u6280\u672f\u4fdd\u969c\u4e86\u4ea4\u6613\u4e00\u65e6\u88ab\u6dfb\u52a0\u8fdb\u8d26\u672c\u4e2d\uff0c\u5c31\u65e0\u6cd5\u88ab\u7be1\u6539\u3002\u533a\u5757\u94fe\u7684\u8fd9\u79cd\u4e0d\u53ef\u7be1\u6539\u6027\u4f7f\u5f97\u4fe1\u606f\u6765\u6e90\u7684\u786e\u8ba4\u53d8\u5f97\u5f02\u5e38\u5bb9\u6613\uff0c\u8fd9\u662f\u7531\u4e8e\u53c2\u4e0e\u8005\u53ef\u4ee5\u80af\u5b9a\u4fe1\u606f\u4e00\u65e6\u88ab\u5199\u5165\u533a\u5757\u94fe\u4e2d\u5c31\u51e0\u4e4e\u4e0d\u53ef\u88ab\u7be1\u6539\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u533a\u5757\u94fe\u5e38\u5e38\u4e5f\u88ab\u79f0\u4e3a \u8bc1\u660e\u7684\u7cfb\u7edf \u7684\u539f\u56e0\u3002", 
            "title": "\u5206\u5e03\u5f0f\u8d26\u672c"
        }, 
        {
            "location": "/blockchain_zh/#_4", 
            "text": "\u4e3a\u4e86\u6301\u7eed\u7684\u8fdb\u884c\u4fe1\u606f\u7684\u66f4\u65b0\uff0c\u4ee5\u53ca\u5bf9\u8d26\u672c\u8fdb\u884c\u7ba1\u7406\uff08\u5199\u5165\u4ea4\u6613\uff0c\u8fdb\u884c\u67e5\u8be2\u7b49\uff09\uff0c\u533a\u5757\u94fe\u7f51\u7edc\u5f15\u5165\u4e86 \u667a\u80fd\u5408\u7ea6 \u6765\u5b9e\u73b0\u5bf9\u8d26\u672c\u7684\u8bbf\u95ee\u548c\u63a7\u5236\u3002   \u667a\u80fd\u5408\u7ea6\u4e0d\u4ec5\u4ec5\u53ef\u7528\u4e8e\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u6253\u5305\u4fe1\u606f\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e\u81ea\u52a8\u7684\u6267\u884c\u7531\u53c2\u4e0e\u8005\u5b9a\u4e49\u7684\u7279\u5b9a\u4ea4\u6613\u64cd\u4f5c\u3002  \u4f8b\u5982\uff0c\u4e70\u5356\u53cc\u65b9\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u4ee5\u4fdd\u8bc1\u5f53\u5356\u65b9\u53d1\u8d27\u7684\u5546\u54c1\u8fd0\u9001\u5230\u8fbe\u65f6\uff0c\u4e70\u65b9\u652f\u4ed8\u7684\u8d27\u6b3e\u4f1a\u81ea\u52a8\u8f6c\u8d26\u7ed9\u5356\u65b9\u3002", 
            "title": "\u667a\u80fd\u5408\u7ea6"
        }, 
        {
            "location": "/blockchain_zh/#_5", 
            "text": "\u4fdd\u6301\u7f51\u7edc\u4e2d\u6240\u6709\u8d26\u672c\u4ea4\u6613\u7684\u540c\u6b65\u6d41\u7a0b\uff0c\u5c31\u662f \u5171\u8bc6 \u3002\u5171\u8bc6\u4fdd\u8bc1\u4e86\u8d26\u672c\u53ea\u4f1a\u5728\u4ea4\u6613\u53cc\u65b9\u90fd\u786e\u8ba4\u540e\u624d\u8fdb\u884c\u66f4\u65b0\u3002\u540c\u65f6\u5728\u8d26\u672c\u66f4\u65b0\u65f6\uff0c\u4ea4\u6613\u53cc\u65b9\u80fd\u591f\u5728\u8d26\u672c\u4e2d\u7684\u76f8\u540c\u4f4d\u7f6e\uff0c\u66f4\u65b0\u4e00\u4e2a\u76f8\u540c\u7684\u4ea4\u6613\u4fe1\u606f\u3002   \u540e\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u8d26\u672c\u3001\u667a\u80fd\u5408\u7ea6\u548c\u5171\u8bc6\u7684\u76f8\u5173\u5185\u5bb9\u3002\u4f46\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u9700\u628a\u533a\u5757\u94fe\u7406\u89e3\u4e3a\u4e00\u4e2a\u5171\u4eab\u7684\uff0c\u901a\u8fc7\u667a\u80fd\u5408\u7ea6\u66f4\u65b0\u7684\u591a\u526f\u672c\u4ea4\u6613\u7cfb\u7edf\uff0c\u540c\u65f6\u8fd9\u4e2a\u7cfb\u7edf\u901a\u8fc7\u534f\u4f5c\u5171\u8bc6\u673a\u5236\u4fdd\u8bc1\u4e86\u7f51\u7edc\u4e2d\u6240\u6709\u8d26\u672c\u526f\u672c\u7684\u540c\u6b65\u3002", 
            "title": "\u5171\u8bc6"
        }, 
        {
            "location": "/blockchain_zh/#_6", 
            "text": "", 
            "title": "\u533a\u5757\u94fe\u4e3a\u4ec0\u4e48\u5207\u5b9e\u53ef\u884c\uff1f"
        }, 
        {
            "location": "/blockchain_zh/#_7", 
            "text": "\u81ea\u4ece\u5546\u4e1a\u6570\u636e\u8bb0\u5f55\u7f51\u7edc\u7cfb\u7edf\u8bde\u751f\u4ee5\u6765\uff0c\u76f4\u5230\u4eca\u5929\u7684\u4ea4\u6613\u7f51\u7edc\u5e76\u6ca1\u6709\u53d1\u751f\u592a\u5927\u7684\u53d8\u5316\u3002\u5728 \u5546\u4e1a\u7f51\u7edc \u4e2d\u7684\u6210\u5458\u8fdb\u884c\u76f8\u4e92\u4ea4\u6613\u65f6\uff0c\u4ed6\u4eec\u5404\u81ea\u7ef4\u62a4\u7740\u81ea\u5df1\u72ec\u7acb\u7684\u4ea4\u6613\u8bb0\u5f55\u3002\u540c\u65f6\uff0c\u4eba\u4eec\u4ea4\u6613\u7684\u7269\u54c1\u2014\u2014\u65e0\u8bba\u662f16\u4e16\u7eaa\u4f5b\u5170\u5fb7\u7684\u6302\u6bef\uff0c\u8fd8\u662f\u73b0\u4ee3\u7684\u6709\u4ef7\u8bc1\u5238\u2014\u2014\u90fd\u4efb\u7136\u9700\u8981\u5728\u6bcf\u6b21\u5356\u51fa\u4ea4\u6613\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u6765\u6e90\u4fe1\u606f\uff0c\u4ee5\u786e\u4fdd\u5356\u65b9\u62e5\u6709\u6240\u51fa\u552e\u5546\u54c1\u7684\u6240\u6709\u6743\u3002  \u5f53\u524d\u7684\u5546\u4e1a\u7f51\u7edc\u5c31\u50cf\u4e0b\u56fe\u63cf\u8ff0\u7684\u4e00\u6837\uff1a   \u968f\u7740\u79d1\u6280\u7684\u8fdb\u6b65\uff0c\u4e0a\u56fe\u4e2d\u7684\u4ea4\u6613\u6d41\u7a0b\u4e0d\u65ad\u6f14\u5316\u53d1\u5c55\uff0c\u7ecf\u5386\u4e86\u4ece\u4f7f\u7528\u77f3\u7891\u3001\u4f7f\u7528\u7eb8\u8d28\u8d26\u672c\u3001\u4f7f\u7528\u786c\u76d8\u5b58\u50a8\u5668\u76f4\u5230\u4f7f\u7528\u4e91\u8ba1\u7b97\u5e73\u53f0\u7684\u4e0d\u540c\u9636\u6bb5\uff0c\u4f46\u6d41\u7a0b\u7684\u5e95\u5c42\u67b6\u6784\u5e76\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u53d8\u5316\u3002\u5e76\u4e0d\u5b58\u5728\u4e00\u4e2a\u53ef\u4ee5\u7edf\u4e00\u7ba1\u7406\u7f51\u7edc\u53c2\u4e0e\u8005\u8eab\u4efd\u7684\u7cfb\u7edf\uff0c\u786e\u8ba4\u5546\u54c1\u6765\u6e90\u5341\u5206\u8d39\u52b2\uff0c\u5e38\u5e38\u4f1a\u8017\u8d39\u6570\u5929\u7684\u65f6\u95f4\u660e\u786e\u8bc1\u5238\u7684\u4ea4\u6613\uff08\u5305\u542b\u6570\u4ee5\u4e07\u8ba1\u7f8e\u5143\u7684\u6570\u91cf\uff09\u3002\u4eba\u4eec\u5fc5\u987b\u7b7e\u8ba2\u5408\u7ea6\u5e76\u624b\u52a8\u6267\u884c\uff0c\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u5e93\u90fd\u5305\u542b\u7740\u72ec\u7acb\u7684\u4fe1\u606f\u5e76\u6700\u7ec8\u4ee3\u8868\u4e00\u4e2a\u5355\u70b9\u7684\u9519\u8bef\u3002  \u5728\u4eca\u5929\u7684\u4fe1\u606f\u548c\u8fc7\u7a0b\u5171\u4eab\u65ad\u88c2\u7684\u65b9\u6cd5\u4e2d\uff0c\u5efa\u7acb\u4e00\u4e2a\u8de8\u8d8a\u5546\u4e1a\u7f51\u7edc\u7684\u8bb0\u5f55\u7cfb\u7edf\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5c3d\u7ba1\u53ef\u89c1\u6027\u548c\u4fe1\u4efb\u7684\u9700\u6c42\u662f\u660e\u786e\u7684\u3002", 
            "title": "\u5f53\u524d\u7684\u8bb0\u5f55\u7cfb\u7edf"
        }, 
        {
            "location": "/blockchain_zh/#_8", 
            "text": "\u90a3\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u7528\u201c\u73b0\u4ee3\u201d\u7684\u4ea4\u6613\u7cfb\u7edf\u6765\u66ff\u4ee3\u8fd9\u79cd\u6548\u7387\u4f4e\u4e0b\u7684\u7f51\u7edc\uff1f\u65b0\u7684\u5546\u4e1a\u7f51\u7edc\u53ef\u4ee5\u5177\u6709\u6807\u51c6\u7684\u65b9\u6cd5\u5efa\u7acb\u8eab\u4efd\u4fe1\u606f\uff0c\u6267\u884c\u4ea4\u6613\uff0c\u5e76\u4e14\u5b58\u50a8\u6570\u636e\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5efa\u7acb\u4e00\u4e2a\u53ef\u4fe1\u7684\u4ea4\u6613\u94fe\u6761\u8bb0\u5f55\uff1f\u901a\u8fc7\u67e5\u8be2\u8fd9\u4e2a\u94fe\u6761\u4e0a\u7684\u6240\u6709\u4ea4\u6613\uff0c\u6765\u786e\u5b9a\u4ea4\u6613\u5546\u54c1\u6765\u6e90\uff0c\u5e76\u4e14\u8fd9\u4e2a\u94fe\u6761\u4e0a\u7684\u4fe1\u606f\u4e00\u65e6\u88ab\u5199\u5165\uff0c\u5c31\u65e0\u6cd5\u88ab\u518d\u6b21\u7be1\u6539\u3002  \u4ee5\u4e0a\u63cf\u8ff0\u7684\u5546\u4e1a\u7f51\u7edc\u5c31\u5982\u4e0b\u56fe\u6240\u793a\uff1a   \u8fd9\u5c31\u662f\u533a\u5757\u94fe\u7f51\u7edc\u3002\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u53c2\u4e0e\u8005\u90fd\u4fdd\u6709\u4e00\u4efd\u8d26\u672c\u7684\u526f\u672c\u3002\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u8d26\u672c\u4fe1\u606f\u4f1a\u88ab\u5171\u4eab\uff0c\u66f4\u65b0\u8d26\u672c\u7684\u6d41\u7a0b\u4e5f\u662f\u5171\u4eab\u7684\u3002\u4e0d\u540c\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u2014\u2014\u53c2\u4e0e\u8005\u4f7f\u7528 \u79c1\u6709 \u7684\u7a0b\u5e8f\u5bf9 \u79c1\u6709 \u7684\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\uff0c\u800c\u533a\u5757\u94fe\u7cfb\u7edf\u4f7f\u7528 \u5171\u4eab \u7684\u7a0b\u5e8f\u5bf9 \u5171\u4eab \u7684\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\u3002  \u901a\u8fc7\u4f7f\u7528\u5171\u4eab\u8d26\u672c\u534f\u8c03\u6574\u4e2a\u5546\u4e1a\u7f51\u7edc\uff0c\u533a\u5757\u94fe\u7f51\u7edc\u80fd\u591f\u51cf\u5c11\u65f6\u95f4\u3001\u6210\u672c\u4ee5\u53ca\u9690\u79c1\u4fe1\u606f\u6cc4\u9732\u7684\u98ce\u9669\uff0c\u5e76\u4e14\u80fd\u4f7f\u6d41\u7a0b\u66f4\u52a0\u53ef\u4fe1\u548c\u900f\u660e\u3002  \u73b0\u5728\u4f60\u5df2\u7ecf\u660e\u767d\u4e86\u4ec0\u4e48\u662f\u533a\u5757\u94fe\u4ee5\u53ca\u5b83\u7684\u7528\u9014\u3002\u540c\u65f6\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u7684\u5185\u5bb9\u4e5f\u975e\u5e38\u91cd\u8981\uff0c\u4ed6\u4eec\u662f\u4fe1\u606f\u4e0e\u6d41\u7a0b\u5171\u4eab\u7684\u57fa\u7840\u77e5\u8bc6\u3002", 
            "title": "\u533a\u5757\u94fe\u7684\u4e0d\u540c\u70b9"
        }, 
        {
            "location": "/blockchain_zh/#hyperledger-fabric", 
            "text": "2015\u5e74\uff0cLinux\u57fa\u91d1\u4f1a\u542f\u52a8\u4e86Hyperledger\u9879\u76ee\uff0c\u76ee\u6807\u662f\u53d1\u5c55\u8de8\u884c\u4e1a\u7684\u533a\u5757\u94fe\u6280\u672f\u3002Hyperledger\u9879\u76ee\u5e76\u4e0d\u4ec5\u4ec5\u662f\u5b9a\u4e49\u4e00\u4e2a\u5355\u4e00\u7684\u533a\u5757\u94fe\u6807\u51c6\uff0c\u5b83\u66f4\u9f13\u52b1\u901a\u8fc7\u5f00\u6e90\u793e\u533a\u7684\u529b\u91cf\u534f\u4f5c\u5f00\u53d1\u533a\u5757\u94fe\u6280\u672f\u3002  Hyperledger Fabric\u662fHyperledger\u4e2d\u7684\u4e00\u4e2a\u533a\u5757\u94fe\u9879\u76ee\u3002\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u6280\u672f\u7c7b\u4f3c\uff0cHyperledger Fabric\u5305\u542b\u4e00\u4e2a\u8d26\u672c\uff0c\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u5e76\u4e14\u662f\u4e00\u4e2a\u901a\u8fc7\u6240\u6709\u53c2\u4e0e\u8005\u7ba1\u7406\u4ea4\u6613\u7684\u7cfb\u7edf\u3002  Hyperledger Fabric\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u7cfb\u7edf\u6700\u5927\u7684\u4e0d\u540c\u4f53\u73b0\u5728 \u79c1\u6709 \u548c \u8bb8\u53ef \u3002\u4e0e\u5f00\u653e\u65e0\u9700\u8bb8\u53ef\u7684\u7f51\u7edc\u7cfb\u7edf\u5141\u8bb8\u672a\u77e5\u8eab\u4efd\u7684\u53c2\u4e0e\u8005\u52a0\u5165\u7f51\u7edc\u4e0d\u540c\uff08\u9700\u8981\u901a\u8fc7\u5de5\u4f5c\u91cf\u8bc1\u660e\u534f\u8bae\u6765\u4fdd\u8bc1\u4ea4\u6613\u6709\u6548\u5e76\u7ef4\u62a4\u7f51\u7edc\u7684\u5b89\u5168\uff09\uff0cHyperledger Fabric\u901a\u8fc7 Membership Service Provider(MSP) \u6765\u767b\u8bb0\u6240\u6709\u7684\u6210\u5458\u3002  Hyperledger Fabric\u4e5f\u63d0\u4f9b\u4e86\u591a\u4e2a\u53ef\u62d4\u63d2\u9009\u9879\u3002\u8d26\u672c\u6570\u636e\u53ef\u88ab\u5b58\u50a8\u4e3a\u591a\u79cd\u683c\u5f0f\uff0c\u5171\u8bc6\u673a\u5236\u53ef\u88ab\u63a5\u5165\u6216\u8005\u65ad\u5f00\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684MSP\u3002  Hyperledger Fabric\u63d0\u4f9b\u4e86\u5efa\u7acb channel \u7684\u529f\u80fd\uff0c\u8fd9\u5141\u8bb8\u53c2\u4e0e\u8005\u4e3a\u4ea4\u6613\u65b0\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u8d26\u672c\u3002\u5f53\u7f51\u7edc\u4e2d\u7684\u4e00\u4e9b\u53c2\u4e0e\u8005\u662f\u7ade\u4e89\u5bf9\u624b\u65f6\uff0c\u8fd9\u4e2a\u529f\u80fd\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u56e0\u4e3a\u8fd9\u4e9b\u53c2\u4e0e\u8005\u5e76\u4e0d\u5e0c\u671b\u6240\u6709\u7684\u4ea4\u6613\u4fe1\u606f\u2014\u2014\u6bd4\u5982\u63d0\u4f9b\u7ed9\u90e8\u5206\u5ba2\u6237\u7684\u7279\u5b9a\u4ef7\u683c\u4fe1\u606f\u2014\u2014\u90fd\u5bf9\u7f51\u7edc\u4e2d\u6240\u6709\u53c2\u4e0e\u8005\u516c\u5f00\u3002\u53ea\u6709\u5728\u540c\u4e00\u4e2achannel\u4e2d\u7684\u53c2\u4e0e\u8005\uff0c\u624d\u4f1a\u62e5\u6709\u8be5channel\u4e2d\u7684\u8d26\u672c\uff0c\u800c\u5176\u4ed6\u4e0d\u5728\u6b64channel\u4e2d\u7684\u53c2\u4e0e\u8005\u5219\u770b\u4e0d\u5230\u8fd9\u4e2a\u8d26\u672c\u3002", 
            "title": "Hyperledger Fabric\u662f\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/blockchain_zh/#_9", 
            "text": "Hyperledger Fabric\u5305\u542b\u4e00\u4e2a\u8d26\u672c\u5b50\u7cfb\u7edf\uff0c\u8fd9\u4e2a\u5b50\u7cfb\u7edf\u5305\u542b\u4e24\u4e2a\u7ec4\u4ef6\uff1a \u4e16\u754c\u72b6\u6001(world state) \u548c \u4ea4\u6613\u8bb0\u5f55 \u3002\u5728Hyperledger Fabric\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53c2\u4e0e\u8005\u90fd\u62e5\u6709\u4e00\u4e2a\u8d26\u672c\u7684\u526f\u672c\u3002  \u4e16\u754c\u72b6\u6001\u7ec4\u4ef6\u63cf\u8ff0\u4e86\u8d26\u672c\u5728\u7279\u5b9a\u65f6\u95f4\u70b9\u7684\u72b6\u6001\uff0c\u5b83\u662f\u8d26\u672c\u7684\u6570\u636e\u5e93\u3002\u4ea4\u6613\u8bb0\u5f55\u7ec4\u4ef6\u8bb0\u5f55\u4e86\u4ea7\u751f\u4e16\u754c\u72b6\u6001\u5f53\u524d\u503c\u7684\u6240\u6709\u4ea4\u6613\uff0c\u5b83\u662f\u4e16\u754c\u72b6\u6001\u7684\u66f4\u65b0\u5386\u53f2\u3002\u90a3\u4e48\uff0c\u8d26\u672c\u5219\u662f\u4e16\u754c\u72b6\u6001\u6570\u636e\u5e93\u548c\u4ea4\u6613\u5386\u53f2\u8bb0\u5f55\u7684\u96c6\u5408\u3002  \u8d26\u672c\u7684\u4e16\u754c\u72b6\u6001\u5b58\u50a8\u6570\u636e\u5e93\u662f\u53ef\u66f4\u6362\u7684\u3002\u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2akey-value\u5b58\u50a8\u6570\u636e\u5e93\u3002\u4ea4\u6613\u8bb0\u5f55\u6a21\u5757\u4e0d\u9700\u8981\u88ab\u63a5\u5165\u3002\u53ea\u9700\u8981\u8bb0\u5f55\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u8d26\u672c\u6570\u636e\u5e93\u88ab\u4f7f\u7528\u65f6\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\u3002", 
            "title": "\u5171\u4eab\u8d26\u672c"
        }, 
        {
            "location": "/blockchain_zh/#_10", 
            "text": "Hyperledger Fabric\u667a\u80fd\u5408\u7ea6\u88ab\u79f0\u4e3a chaincode \uff0c\u5f53\u4e00\u4e2a\u533a\u5757\u94fe\u5916\u90e8\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u8d26\u672c\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528chaincode\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cchaincode\u53ea\u4f1a\u8bbf\u95ee\u8d26\u672c\u7684\u6570\u636e\u5e93\u7ec4\u4ef6\u548c\u4e16\u754c\u72b6\u6001(world state)\uff08\u6bd4\u5982\u67e5\u8be2\uff09\uff0c\u4f46\u4e0d\u4f1a\u67e5\u8be2\u4ea4\u6613\u8bb0\u5f55\u3002  chaincode\u53ef\u901a\u8fc7\u591a\u79cd\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u3002\u76ee\u524d\u652f\u6301chaincode\u7684\u8bed\u8a00\u662fGo\uff08\u5305\u542b\u5bf9java\u7684\u652f\u6301\uff09\uff0c\u66f4\u591a\u7684\u7f16\u7a0b\u8bed\u8a00\u4f1a\u5728\u4eca\u540e\u7684\u7248\u672c\u4e2d\u83b7\u5f97\u652f\u6301\u3002", 
            "title": "\u667a\u80fd\u5408\u7ea6"
        }, 
        {
            "location": "/blockchain_zh/#_11", 
            "text": "\u6839\u636e\u7f51\u7edc\u7684\u9700\u6c42\uff0c\u5728\u4e00\u4e2aBusiness-to-Business\uff08B2B\uff09\u7f51\u7edc\u4e2d\u7684\u53c2\u4e0e\u8005\u4f1a\u5bf9\u4fe1\u606f\u5171\u4eab\u7684\u7a0b\u5ea6\u6781\u4e3a\u654f\u611f\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7684\u7f51\u7edc\uff0c\u9690\u79c1\u5e76\u4e0d\u662f\u9996\u8981\u8003\u8651\u7684\u56e0\u7d20\u3002  Hyperledger Fabric\u652f\u6301\u6784\u5efa\u9690\u79c1\u4fdd\u62a4\u4e25\u683c\u7684\u7f51\u7edc\uff0c\u4e5f\u652f\u6301\u6784\u5efa\u76f8\u5bf9\u5f00\u653e\u7684\u7f51\u7edc\u3002", 
            "title": "\u9690\u79c1"
        }, 
        {
            "location": "/blockchain_zh/#_12", 
            "text": "\u5728\u7f51\u7edc\u4e2d\uff0c\u4e0d\u540c\u7684\u53c2\u4e0e\u8005\u5199\u5165\u7684\u4ea4\u6613\u5fc5\u987b\u6309\u7167\u4ea7\u751f\u987a\u5e8f\u4f9d\u6b21\u88ab\u5199\u5165\u8d26\u672c\u4e2d\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u4ea4\u6613\u987a\u5e8f\u5fc5\u987b\u88ab\u6b63\u786e\u7684\u5efa\u7acb\u5e76\u4e14\u5fc5\u987b\u5305\u542b\u62d2\u7edd\u9519\u8bef\uff08\u6216\u8005\u6076\u610f\uff09\u63d2\u5165\u8d26\u672c\u4e2d\u7684\u65e0\u6548\u4ea4\u6613\u7684\u65b9\u6cd5\u3002  \u8fd9\u5b8c\u5168\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u7814\u7a76\u9886\u57df\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u65b9\u6cd5\u5b9e\u73b0\u4e0a\u9762\u63d0\u5230\u7684\u76ee\u6807\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\u3002\u4f8b\u5982\uff0cPBFT (Practical Byzantine Fault Tolerance)\u53ef\u4ee5\u4e3a\u6587\u4ef6\u526f\u672c\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\u6765\u76f8\u4e92\u901a\u4fe1\uff0c\u5373\u4f7f\u662f\u5728\u53d1\u751f\u8150\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u526f\u672c\u4fdd\u6301\u4e00\u81f4\u3002\u53e6\u5916\uff0c\u5728\u6bd4\u7279\u5e01\u4e2d\uff0c\u901a\u8fc7\u4e00\u79cd\u79f0\u4e3a\u6316\u77ff\u7684\u884c\u4e3a\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u6316\u77ff\u8fc7\u7a0b\u4e2d\uff0c\u7ade\u4e89\u7684\u8ba1\u7b97\u673a\u7ade\u76f8\u89e3\u51b3\u4e00\u4e2a\u5bc6\u7801\u96be\u9898\uff0c\u8fd9\u4e2a\u8c1c\u9898\u5b9a\u4e49\u4e86\u6240\u6709\u540e\u7eed\u7684\u6784\u5efa\u987a\u5e8f\u3002  Hyperledger Fabric\u88ab\u8bbe\u8ba1\u4e3a\u5141\u8bb8\u7f51\u7edc\u6784\u5efa\u8005\u4f9d\u636e\u4e1a\u52a1\u9700\u6c42\u6765\u9009\u62e9\u91c7\u7528\u7684\u5171\u8bc6\u673a\u5236\u3002\u597d\u6bd4\u8003\u8651\u9690\u79c1\u6027\uff0c\u5c31\u4f1a\u6709\u4e00\u8fde\u4e32\u7684\u9700\u6c42\uff0c\u4ece\u9ad8\u5ea6\u7ed3\u6784\u5316\u7684\u7f51\u7edc\u6216\u662f\u66f4\u52a0\u70b9\u5bf9\u70b9\u7684\u7f51\u7edc\u3002  \u66f4\u591a\u7684Hyperledger Fabric\u5171\u8bc6\u673a\u5236\u4f1a\u5728\u53e6\u4e00\u4efd\u6587\u6863\u4e2d\u8be6\u7ec6\u63cf\u8ff0\uff0c\u8fd9\u4e9b\u5171\u8bc6\u673a\u5236\u76ee\u524d\u5305\u542bSOLO\uff0cKafka\u4ee5\u53ca\u540e\u7eed\u4f1a\u6dfb\u52a0\u7684SBFT (Simplified Byzantine Fault Tolerance)\u3002", 
            "title": "\u5171\u8bc6"
        }, 
        {
            "location": "/blockchain_zh/#_13", 
            "text": "", 
            "title": "\u540e\u7eed\u5b66\u4e60"
        }, 
        {
            "location": "/blockchain_zh/#_14", 
            "text": "\u5728\u5feb\u901f\u5165\u95e8\u4e2d\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u533a\u5757\u94fe\u7f51\u7edc\u6838\u5fc3\u7ec4\u4ef6\u4ecb\u7ecd\u7684\u6559\u7a0b\u3002\u901a\u8fc7\u8fd9\u4e9b\u6559\u7a0b\uff0c\u4f60\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u7684\u5b66\u4e60\u5230\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u8fd0\u884c\u673a\u5236\uff0c\u540c\u65f6\u4f60\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5b8c\u6574\u7684\u4ee3\u7801\u5e76\u76f4\u63a5\u5728\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u8fd0\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4ea4\u6613\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9762\u5411Hyperledger Fabric\u533a\u5757\u94fe\u7f51\u7edc\u7ef4\u62a4\u4eba\u5458\u7684\u6559\u7a0b\u3002", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/blockchain_zh/#hyperledger-fabric_1", 
            "text": "\u5728Hyperledger Fabric\u6a21\u578b\u4e2d\uff0c\u4f1a\u5bf9\u5728\u8fd9\u7bc7\u7b80\u4ecb\u4e2d\u63d0\u5230\u7684\u7ec4\u4ef6\u548c\u6982\u5ff5\u8fdb\u884c\u4e86\u6df1\u5165\u8bb2\u89e3\uff0c\u4e5f\u5305\u542b\u4e00\u4e9b\u5176\u4ed6\u672a\u63d0\u5230\u7684\u5185\u5bb9\uff0c\u5e76\u901a\u8fc7\u4e00\u4e2a\u4ea4\u6613\u6d41\u7a0b\u793a\u4f8b\u63cf\u8ff0\u4e86\u4ed6\u4eec\u7684\u5de5\u4f5c\u673a\u5236\u3002", 
            "title": "Hyperledger Fabric\u6a21\u578b"
        }, 
        {
            "location": "/getting_started/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\nKewei Sun\n\n\n\n\n\n\n\n\n\u672c\u6587\u8bbe\u5b9a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684Fabric\u7f51\u7edc\u573a\u666f\uff0c\u5305\u62ec2\u4e2aorganization\uff0c\u6bcf\u4e2a\u67092\u4e2apeer\uff0c\u5e76\u4f7f\u7528\u201csolo\u201d ordering\u670d\u52a1\u3002\u7f51\u7edc\u5b9e\u4f53\u6240\u9700\u7684\u52a0\u5bc6\u6750\u6599\uff08x509\u8bc1\u4e66\uff09\u5df2\u9884\u5148\u751f\u6210\u5e76\u653e\u5230\u76f8\u5e94\u76ee\u5f55\u548c\u914d\u7f6e\u6587\u4ef6\u91cc\u4e86\uff0c\u4f60\u65e0\u9700\u4fee\u6539\u8fd9\u4e9b\u914d\u7f6e\u3002\nexamples/e2e_cli\n\u6587\u4ef6\u5939\u91cc\u5305\u542b\u4e86docker-compose\u6587\u4ef6\u548c\u8981\u7528\u6765\u521b\u5efa\u548c\u6d4b\u8bd5\u7f51\u7edc\u7684\u811a\u672c\u6587\u4ef6\u3002\n\n\n\u672c\u6587\u8fd8\u6f14\u793a\u4e86\u4f7f\u7528\u914d\u7f6e\u751f\u6210\u5de5\u5177\nconfigtxgen\n\u751f\u6210\u7f51\u7edc\u914d\u7f6e\u3002\n\n\n\u524d\u63d0\n\n\n\u5b8c\u6210\u4ee5\u4e0b\u5b89\u88c5Fabric\u6e90\u7801\u548c\u7f16\u8bd1\nconfigtxgen\n\u5de5\u5177\uff1a\n\n\n\n\n\u5b8c\u6210\n\u73af\u5883\u5b89\u88c5\n\uff0c\u5e76\u8bbe\u7f6e\u6b63\u786e\u7684\n$GOPATH\n\u73af\u5883\u53d8\u91cf\u3002\n\n\n\n\n\u62c9\u53d6Fabric\u6e90\u7801\n\n\ngit clone https://github.com/hyperledger/fabric.git\n\n\n\n\n\n\n\n\u7f16\u8bd1\nconfigtxgen\n\u5de5\u5177\n\n\n\n\n\n\n\u5982\u679c\u8fd0\u884c\u5728Linux\uff0c\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\ncd $GOPATH/src/github.com/hyperledger/fabric\nmake configtxgen\n# \u5982\u679c\u51fa\u9519\uff1a'ltdl.h' file not found\nsudo apt install libtool libltdl-dev\n# \u7136\u540e\u518d\u8fd0\u884cmake\nmake configtxgen\n\n\n\n\n\n\n\n\u5982\u679c\u8fd0\u884c\u5728OSX\uff0c\u5148\u5b89\u88c5Xcode 8.0\u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u7136\u540e\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n# \u5b89\u88c5 Homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# \u6dfb\u52a0 gnu-tar\nbrew install gnu-tar --with-default-names\n# \u6dfb\u52a0 libtool\nbrew install libtool\n# \u7f16\u8bd1 configtxgen\nmake configtxgen\n\n\n\n\u7f16\u8bd1\u6210\u529f\u540e\u8f93\u51fa\uff1a\n\n\nbuild/bin/configtxgen\nCGO_CFLAGS=\" \" GOBIN=/Users/johndoe/work/src/github.com/hyperledger/fabric/build/bin go install -ldflags \"-X github.com/hyperledger/fabric/common/metadata.Version=1.0.0-snapshot-8d3275f -X github.com/hyperledger/fabric/common /metadata.BaseVersion=0.3.0 -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric\"       github.com/hyperledger/fabric/common/configtx/tool/configtxgen\nBinary available as build/bin/configtxgen``\n\n\n\n\n\n\n\n\u7f16\u8bd1\u540e\u6267\u884c\u6587\u4ef6\u653e\u5728Fabric\u76ee\u5f55\u4e0b\u7684\u7684\nbuild/bin/configtxgen\n\n\n\n\n\n\n\u6267\u884c\u5b8c\u6574\u811a\u672c\n\n\n\u4e3a\u4e86\u52a0\u5feb\u90e8\u7f72\u8fc7\u7a0b\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\u6765\u6267\u884c\u6240\u6709\u4efb\u52a1\u3002\u6267\u884c\u8be5\u811a\u672c\u4f1a\u751f\u6210\u914d\u7f6e\u7ed3\u679c\u3001\u672c\u5730\u7f51\u7edc\u3001Chaincode\u6d4b\u8bd5\u3002\n\n\n\u8fdb\u5165\nexamples/e2e_cli\n\u76ee\u5f55\uff0c\u9996\u5148\u4eceDocker Hub\u62c9\u53d6\u955c\u50cf\uff1a\n\n\n# \u4f7f\u811a\u672c\u53ef\u6267\u884c\nchmod +x download-dockerimages.sh\n# \u6267\u884c\u811a\u672c\n./download-dockerimages.sh\n\n\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u9700\u8981\u51e0\u5206\u949f\uff0c\u811a\u672c\u6267\u884c\u540e\u8f93\u51fa\uff1a\n\n\n===\n List out hyperledger docker images\nhyperledger/fabric-ca          latest               35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-ca          x86_64-1.0.0-alpha   35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-couchdb     latest               f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-couchdb     x86_64-1.0.0-alpha   f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-kafka       latest               589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-kafka       x86_64-1.0.0-alpha   589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-zookeeper   latest               9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-zookeeper   x86_64-1.0.0-alpha   9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-orderer     latest               5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-orderer     x86_64-1.0.0-alpha   5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-peer        latest               784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-peer        x86_64-1.0.0-alpha   784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-javaenv     latest               a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-javaenv     x86_64-1.0.0-alpha   a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-ccenv       latest               91792014b61f        7 days ago          1.29 GB\nhyperledger/fabric-ccenv       x86_64-1.0.0-alpha   91792014b61f        7 days ago          1.29 GB\n\n\n\n\u73b0\u5728\u8fd0\u884c\u5b8c\u6574\u811a\u672c\uff1a\n\n\n./network_setup.sh up \nchannel-ID\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\nchannel-ID\n\u53c2\u6570\uff0cchannel\u540d\u9ed8\u8ba4\u662f\nmychannel\n\u3002\u811a\u672c\u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a\n\n\n===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================\n\n\n\n\u6b64\u65f6\uff0c\u7f51\u7edc\u542f\u52a8\u8fd0\u884c\u5e76\u6d4b\u8bd5\u6210\u529f\u3002\n\n\n\u6e05\u7406\n\n\n\u505c\u6b62\u7f51\u7edc\uff1a\n\n\n# \u5728e2e_cli\u76ee\u5f55\u4e0b\ndocker rm -f $(docker ps -aq)\n\n\n\n\u7136\u540e\u6267\u884c\ndocker images\n\u547d\u4ee4\u67e5\u770bChaincode\u955c\u50cf\uff0c\u7c7b\u4f3c\u8f93\u51fa\u5982\u4e0b\uff1a\n\n\nREPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB\n\n\n\n\u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a\n\n\ndocker rmi \nIMAGE ID\n \nIMAGE ID\n \nIMAGE ID\n\n\n\n\n\u4f8b\u5982\uff1a\n\n\ndocker rmi -f 13f e27 111\n\n\n\n\u6700\u540e\u5220\u9664\u914d\u7f6e\u7ed3\u679c\uff0c\u5728\ncrypto/orderer\n\u76ee\u5f55\u5220\u9664\norderer.block\n\u548c\nchannel.tx\n\u3002\n\n\nconfigtxgen\n\n\nconfigtxgen\u5de5\u5177\u751f\u6210\u4e24\u4e2a\u5185\u5bb9\uff1a    Orderer\u7684\nbootstrap block\n\u548cFabric\u7684\nchannel configuration transaction\n\u3002\n\n\norderer block\u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff1bchannel transaction\u6587\u4ef6\u5728create channel\u65f6\u4f1a\u88ab\u5e7f\u64ad\u7ed9orderer\u3002\n\n\nconfigtx.yaml\n\u5305\u542b\u7f51\u7edc\u7684\u5b9a\u4e49\uff0c\u5e76\u7ed9\u51fa\u4e86\u7f51\u7edc\u7ec4\u4ef6\u7684\u62d3\u6251\u7ed3\u6784\n2\u4e2a\u6210\u5458\uff08Org0\u548cOrg1\uff09\u5206\u522b\u7ba1\u7406\u7ef4\u62a42\u4e2apeer\u3002\u8fd8\u6307\u51fa\u6bcf\u4e2a\u7f51\u7edc\u5b9e\u4f53\u7684\u52a0\u5bc6\u6750\u6599\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002\ncrypto\n\u76ee\u5f55\u5305\u542b\u6bcf\u4e2a\u5b9e\u4f53\u7684admin\u8bc1\u4e66\u3001ca\u8bc1\u4e66\u3001\u7b7e\u540d\u8bc1\u4e66\u548c\u79c1\u94a5\u3002\n\n\n\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\ngenerateCfgTrx.sh\n\uff0c\u8be5\u811a\u672c\u6574\u5408\u4e86\nconfigtxgen\n\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6267\u884c\u540e\u4f1a\u751f\u6210\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\uff1a\norderer.block\n\u548c\nchannel.tx\n\u3002\u5982\u679c\u4f60\u8fd0\u884c\u8fc7\u4e0a\u8fb9\u7684\nnetwork_setup.sh\n\u5219\u8fd9\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\u5df2\u751f\u6210\uff0c\u8981\u5148\u5230\ncrypto/orderer\n\u76ee\u5f55\u5c06\u4e4b\u5220\u9664\u3002\n\n\n\u6267\u884c\ngenerateCfgTrx.sh\n\u811a\u672c\n\n\n\u5728\ne2e_cli\n\u76ee\u5f55\u4e0b\uff1a\n\n\ncd $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli\n\n\n\ngenerateCfgTrx.sh\n\u811a\u672c\u6709\u4e2a\u53ef\u9009\u53c2\u6570\nchannel-ID\n\uff0c\u5982\u679c\u4e0d\u8bbe\u6b64\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a\nmychannel\n\u3002\n\n\n# \u5982\u4e0a\u6240\u8ff0\uff0c\nchannel-ID\n \u53c2\u6570\u662f\u53ef\u9009\u7684\n./generateCfgTrx.sh \nchannel-ID\n\n\n\n\n\u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a\n\n\n2017/02/28 17:01:52 Generating new channel configtx\n2017/02/28 17:01:52 Creating no-op MSP instance\n2017/02/28 17:01:52 Obtaining default signing identity\n2017/02/28 17:01:52 Creating no-op signing identity instance\n2017/02/28 17:01:52 Serializing identity\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 Writing new channel tx\n\n\n\n\u751f\u6210\u7684\norderer.block\n\u548c\nchannel.tx\n\u4e24\u4e2a\u6587\u4ef6\u5b58\u653e\u5728\ncrypto/orderer\n\u76ee\u5f55\u3002\n\n\norderer.block\n\u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff0c\nchannel.tx\n\u5305\u542b\u65b0channel\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u4fe9\u6587\u4ef6\u90fd\u6765\u81ea\nconfigtx.yaml\n\u53ca\u5176\u6240\u5305\u542b\u7684\u52a0\u5bc6\u6750\u6599\u548c\u7f51\u7edc\u4fe1\u606f\u7684\u6570\u636e\u3002\n\n\n\u6ce8\u610f\uff1a\n\u4e5f\u53ef\u624b\u52a8\u6267\u884c\u811a\u672c\ngenerateCfgTrx.sh\n\u91cc\u7684\u547d\u4ee4\u3002\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5219\u5fc5\u987b\u5148\u7528\ne2e_cli\n\u76ee\u5f55\u4e0b\u7684\nconfigtx.yaml\n\u66ff\u6362Fabric sampleconfig\u76ee\u5f55\u4e0b\u9ed8\u8ba4\u7684\nconfigtx.yaml\n\uff0c\u7136\u540e\u8fd4\u56defabric\u76ee\u5f55\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u524d\u63d0\u662f\u5220\u9664\u4e4b\u524d\ngenerateCfgTrx.sh\n\u751f\u6210\u7684\u4e24\u4e2a\u6587\u4ef6\u3002\n\n\n\u542f\u52a8\u7f51\u7edc\n\n\n\u4f7f\u7528docker-compose\u542f\u52a8\u7f51\u7edc\uff0c\u5982\u679c\u6ca1\u6709\u62c9\u53d6Fabric\u955c\u50cf\uff0c\u5219\u8fd4\u56de\u4e4b\u524d\u7684\u64cd\u4f5c\u53bb\u62c9\u53d6\u955c\u50cf\u3002\n\n\n\u811a\u672c\nscript.sh\n\u5d4c\u5165\u5230docker-compose\u6587\u4ef6\u91cc\uff0c\u8be5\u811a\u672c\u5c06peer\u52a0\u5165\u5230channel\u5e76\u5411peer\u53d1\u9001read/write\u8bf7\u6c42\uff0c\u5982\u6b64\u4fbf\u53ef\u81ea\u52a8\u6267\u884c\u4ea4\u6613\u6d41\u7a0b\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u8fd9\u4e2a\u811a\u672c\u81ea\u52a8\u6267\u884c\u4ea4\u6613\uff0c\u53ef\u4ee5\u8df3\u5230\u4e0b\u9762\u201c\u624b\u52a8\u6267\u884c\u4ea4\u6613\u201d\u4e00\u8282\u3002\n\n\n\u5728\ne2e_cli\n\u76ee\u5f55\u4e0b\u4f7f\u7528docker-compose\u751f\u6210\u7f51\u7edc\u5b9e\u4f53\u5e76\u6267\u884c\u5d4c\u5165\u7684\u811a\u672c\uff1a\n\n\nCHANNEL_NAME=\nchannel-id\n docker-compose up -d\n\n\n\n\u5982\u679c\u4e4b\u524d\u521b\u5efa\u4e86\u4e00\u4e2achannel\u540d\uff0c\u5c31\u5fc5\u987b\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\uff0c\u5426\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684\nmychannel\n\u3002\u4f8b\u5982\uff1a\n\n\nCHANNEL_NAME=mychannel docker-compose up -d\n\n\n\n\u7b49\u5f85\u4e00\u4f1a\u513f\uff0c\u56e0\u4e3a\u80cc\u540e\u6709\u4ea4\u6613\u4f1a\u53d1\u9001\u5230peer\u3002\u6267\u884c\ndocker ps\n\u67e5\u770b\u8fd0\u884c\u72b6\u6001\u7684container\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a\n\n\nvagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric/examples/e2e_cli$ docker ps\nCONTAINER ID        IMAGE                        COMMAND                  CREATED              STATUS              PORTS                                              NAMES\n45e3e114f7a2        dev-peer3-mycc-1.0           \"chaincode -peer.a...\"   4 seconds ago        Up 4 seconds                                                           dev-peer3-mycc-1.0\n5970f740ad2b        dev-peer0-mycc-1.0           \"chaincode -peer.a...\"   24 seconds ago       Up 23 seconds                                                          dev-peer0-mycc-1.0\nb84808d66e99        dev-peer2-mycc-1.0           \"chaincode -peer.a...\"   48 seconds ago       Up 47 seconds                                                          dev-peer2-mycc-1.0\n16d7d94c8773        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:10051-\n7051/tcp, 0.0.0.0:10053-\n7053/tcp   peer3\n3561a99e35e6        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:9051-\n7051/tcp, 0.0.0.0:9053-\n7053/tcp     peer2\n0baad3047d92        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:8051-\n7051/tcp, 0.0.0.0:8053-\n7053/tcp     peer1\n1216896b7b4f        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:7051-\n7051/tcp, 0.0.0.0:7053-\n7053/tcp     peer0\n155ff8747b4d        hyperledger/fabric-orderer   \"orderer\"                About a minute ago   Up About a minute   0.0.0.0:7050-\n7050/tcp                             orderer\n\n\n\n\u80cc\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\n\n\n\n\n\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\u4e86\u811a\u672c\nscript.sh\n\u3002\u8be5\u811a\u672c\u7528\u9ed8\u8ba4\u7684\nmychannel\n\u6267\u884c\ncreateChannel\n\u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u7528\u5230\u4e86\u4e4b\u524d\nconfigtxgen\n\u5de5\u5177\u751f\u6210\u7684\nchannel.tx\n\u3002\n\n\ncreateChannel\n\u6267\u884c\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u521b\u4e16\u533a\u5757\nmychannel.block\n\u5e76\u4fdd\u5b58\u5230\u5f53\u524d\u76ee\u5f55\u3002\n\n\n\u5bf94\u4e2apeer\u5206\u522b\u6267\u884c\njoinChannel\n\u547d\u4ee4\uff0c\u901a\u8fc7\u521d\u59cb\u533a\u5757\nmychannel.block\n\u52a0\u5165channel\u3002\u81f3\u6b64\uff0c\u6709\u4e00\u4e2achannel\u5305\u542b4\u4e2apeer\u548c2\u4e2aorganization\u3002\n\n\nPEER0\n\u548c\nPEER1\n\u5c5e\u4e8eOrg0\uff0c\nPEER2\n\u548c\nPEER3\n\u5c5e\u4e8eOrg1\u3002\u8fd9\u4e9b\u5173\u7cfb\u7684\u5b9a\u4e49\u90fd\u5728\nconfigtx.yaml\n\u4e2d\n\n\nChaincode \nchaincode_example02\n\u88abinstall\u5230\nPEER0\n\u548c\nPEER2\n\n\n\u7136\u540eChaincode\u5728\nPEER2\n\u4e0ainstantiate\u3002\u5b9e\u4f8b\u5316\u662f\u6307\u542f\u52a8\u5bb9\u5668\u548c\u521d\u59cb\u5316\u4e0eChaincode\u76f8\u5173\u7684\u952e\u503c\u5bf9\uff0c\u672c\u4f8b\u4e2d\u7684\u521d\u59cb\u503c\u662f\n[\u201ca\u201d,\u201d100\u201d \u201cb\u201d,\u201d200\u201d]\n\u3002\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u540d\u4e3a\ndev-peer2-mycc-1.0\n\u7684\u5bb9\u5668\u542f\u52a8\uff0c\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5bb9\u5668\u4ec5\u662f\u9488\u5bf9\nPEER2\n\u3002\n\uff08\u8bd1\u6ce8\uff1a\u5c24\u5176\u6ce8\u610f\u8fd9\u91cc\u4ec5\u4ec5\u662f\u542f\u52a8\u4e86\u4e00\u4e2acontainer\uff09\n\n\n\u5b9e\u4f8b\u5316\u65f6\u8fd8\u4f1a\u5e26\u6709\u80cc\u4e66\u7b56\u7565\u53c2\u6570\uff0c\u672c\u4f8b\u4e2d\u80cc\u4e66\u7b56\u7565\u4e3a`-P \nOR (\nOrg0MSP.member\n,\nOrg1MSP.member\n)\n\uff0c\u610f\u601d\u662f\u4efb\u4f55\u4ea4\u6613\u5fc5\u987b\u7531\u7ed1\u5b9a\u5230Org0\u6216\u8005Org1\u7684peer\u80cc\u4e66\u3002\n\n\n\u5bf9\u4e8e\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230\nPEER0\n\u3002\u5728\u4e4b\u524dChaincode\u88abinstall\u5230\nPEER0\n\u4e86\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a\ndev-peer0-mycc-1.0\n\u7684\u65b0\u5bb9\u5668\uff0c\u7136\u540e\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002\u7531\u4e8e\u6ca1\u6709write\u64cd\u4f5c\u53d1\u751f\uff0c\u6240\u4ee5\u201ca\u201d\u7684\u503c\u4f9d\u7136\u662f\u201c100\u201d\u3002\n\n\n\u4ece\u201ca\u201c\u8f6c\u79fb\u201d10\u201c\u7ed9\u201db\u201d\u7684invoke\u8bf7\u6c42\u53d1\u9001\u5230\nPEER0\n\n\nChaincode install\u5230\nPEER3\n\n\n\u5bf9\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230\nPEER3\n\u3002\u8fd9\u542f\u52a8\u4e86\u7b2c\u4e09\u4e2a\u540d\u4e3a\ndev-peer3-mycc-1.0\n\u7684\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c90\uff0c\u6b63\u786e\u7684\u53cd\u6620\u4e86\u4e4b\u524d\u7684\u4ea4\u6613\u3002\n\n\n\n\n\u8fd9\u8868\u660e\u4e86\u4ec0\u4e48\uff1f\n\n\nChaincode\u5fc5\u987b\u88abinstall\u5230\u4e00\u4e2apeer\u4e0a\u624d\u80fd\u6210\u529f\u7684\u5bf9\u8fd9\u4e2apeer\u7684ledger\u6267\u884cread/write\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u53ea\u6709\u5f53\u5728peer\u4e0a\u9488\u5bf9chaincode\u6267\u884cread/write\u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2apeer\u4e0a\u624d\u4f1a\u542f\u52a8\u8be5chaincode \u5bb9\u5668\u3002\uff08\u6bd4\u5982\uff0c\u67e5\u8be2\u201ca\u201d\u7684\u503c\uff09\n\u4ea4\u6613\u5bfc\u81f4\u5bb9\u5668\u542f\u52a8\n\u3002channel\u4e2d\u7684\u6240\u6709peer\uff08\u5305\u62ec\u90a3\u4e9b\u6ca1\u6709install chaincode\u7684peer\uff0c\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684\nPEER3\n\uff09\u90fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u51c6\u786e\u7684ledger\uff0cledger\u5305\u542b\u5b58\u50a8\u4e86\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u4ea4\u6613\u8bb0\u5f55\u7684block\uff0c\u8fd8\u6709\u7ef4\u62a4current state\u7684statedb\u3002\u5728peer\u4e0ainstall chaincode\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5peer\u4e0a\u7684chaincode\u4e86\uff08\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684\nPEER3\n\uff09\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecfinstantiate\u8fc7\u4e86 \n\uff08\u8bd1\u6ce8\uff1a\u5373\u540c\u4e00channel\u4e2d\u7684chaincode\u53ea\u9700\u4e00\u6b21instantiate\uff09\n\u3002\n\n\n\u67e5\u770b\u4ea4\u6613\n\n\n\u67e5\u770bCLI\u5bb9\u5668\u7684log\uff1a\n\n\ndocker logs -f cli\n\n\n\n\u8f93\u51fa\uff1a\n\n\n2017-02-28 04:31:20.841 UTC [logging] InitFromViper -\n DEBU 001 Setting default logging level to DEBUG for command 'chaincode'\n2017-02-28 04:31:20.842 UTC [msp] GetLocalMSP -\n DEBU 002 Returning existing local MSP\n2017-02-28 04:31:20.842 UTC [msp] GetDefaultSigningIdentity -\n DEBU 003 Obtaining default signing identity\n2017-02-28 04:31:20.843 UTC [msp] Sign -\n DEBU 004 Sign: plaintext: 0A8F050A59080322096D796368616E6E...6D7963631A0A0A0571756572790A0161\n2017-02-28 04:31:20.843 UTC [msp] Sign -\n DEBU 005 Sign: digest: 52F1A41B7B0B08CF3FC94D9D7E916AC4C01C54399E71BC81D551B97F5619AB54\nQuery Result: 90\n2017-02-28 04:31:30.425 UTC [main] main -\n INFO 006 Exiting.....\n===================== Query on chaincode on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================\n\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u5b9e\u65f6\u67e5\u770b\u65e5\u5fd7\uff0c\u9700\u8981\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u3002\n\n\n\u9996\u5148\uff0c\u505c\u6b62\u8fd0\u884c\u7740\u7684docker\u5bb9\u5668\uff1a\n\n\ndocker rm -f $(docker ps -aq)\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8docker-compose\u811a\u672c\uff1a\n\n\n# add the appropriate CHANNEL_NAME parm\nCHANNEL_NAME=\nchannel-id\n docker-compose up -d\n\n\n\n\u5728\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u67e5\u770blog\uff1a\n\n\ndocker logs -f cli\n\n\n\n\u8fd9\u5c06\u5b9e\u65f6\u8f93\u51fa\u901a\u8fc7\nscript.sh\n\u6267\u884c\u7684\u4ea4\u6613\u4fe1\u606f\u3002\n\n\n\u67e5\u770bchaincode\u65e5\u5fd7\n\n\n\u5bf9\u6bcf\u4e2achaincode\u5bb9\u5668\u5355\u72ec\u67e5\u770blog\uff0c\u8f93\u51fa\uff1a\n\n\n$ docker logs dev-peer2-mycc-1.0\n04:30:45.947 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Init\nAval = 100, Bval = 200\n\n$ docker logs dev-peer0-mycc-1.0\n04:31:10.569 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"100\"}\nex02 Invoke\nAval = 90, Bval = 210\n\n$ docker logs dev-peer3-mycc-1.0\n04:31:30.420 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"90\"}\n\n\n\n\u624b\u52a8\u6267\u884c\u4ea4\u6613\n\n\n\u505c\u6b62\u6240\u6709\u5bb9\u5668\uff1a\n\n\ndocker rm -f $(docker ps -aq)\n\n\n\n\u7136\u540e\uff0c\u6267\u884c\ndocker images\n\u547d\u4ee4\u67e5\u770bchaincode\u955c\u50cf\uff0c\u4f1a\u6709\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\nREPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB\n\n\n\n\u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a\n\n\ndocker rmi \nIMAGE ID\n \nIMAGE ID\n \nIMAGE ID\n\n\n\n\n\u6bd4\u5982\uff1a\n\n\ndocker rmi -f 13f e27 111\n\n\n\n\u786e\u4fdd\u4e4b\u524d\u751f\u6210\u7684\u914d\u7f6e\u5185\u5bb9\u8fd8\u5728\uff0c\u5982\u679c\u5220\u9664\u4e86\u5c31\u518d\u6267\u884c\u811a\u672c\uff1a\n\n\n./generateCfgTrx.sh \nchannel-ID\n\n\n\n\n\u6216\u8005\u4f7f\u7528\u811a\u672c\u4e2d\u7684\u547d\u4ee4\u624b\u52a8\u751f\u6210\u3002\n\n\n\u4fee\u6539docker-compose\u6587\u4ef6\n\n\n\u6253\u5f00docker-compose\u6587\u4ef6\u6ce8\u91ca\u6389\u6267\u884c\nscript.sh\n\u811a\u672c\u7684\u547d\u4ee4\uff0c\u5982\u4e0b\uff1a\n\n\nworking_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}'\n\n\n\n\u4fdd\u5b58\u6587\u4ef6\uff0c\u91cd\u542f\u7f51\u7edc\uff1a\n\n\n# \u5728e2e_cli\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u8bbe\u7f6e\u6b63\u786e\u7684CHANNEL_NAME\nCHANNEL_NAME=\nchannel-id\n docker-compose up -d\n\n\n\n\u547d\u4ee4\u8bed\u6cd5\n\n\n\u53c2\u7167\nscript.sh\n\u811a\u672c\u4e2d\u7684create\u548cjoin\u547d\u4ee4\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u53ea\u662f\u9488\u5bf9\nPEER0\n\u7684\uff0c\u5f53\u5bf9orderer\u548cpeer\u6267\u884c\u547d\u4ee4\u65f6\uff0c\u9700\u8981\u4fee\u6539\u4e0b\u9762\u7ed9\u51fa\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002\n\n\n# \u5bf9PEER0\u6240\u7528\u7684\u73af\u5883\u53d8\u91cf\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig\nCORE_PEER_ADDRESS=peer0:7051\nCORE_PEER_LOCALMSPID=\"Org0MSP\"\nCORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/ peer0/localMspConfig/cacerts/peerOrg0.pem\n\n\n\n\u6bcf\u4e2apeer\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u90fd\u5728docker-compose\u6587\u4ef6\u4e2d\n\n\nCreate channel\n\n\n\u8fdb\u53bbcli\u5bb9\u5668\uff1a\n\n\ndocker exec -it cli bash\n\n\n\n\u6267\u884c\u6210\u529f\u8f93\u51fa\uff1a\n\n\nroot@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#\n\n\n\n\u7528\n-c\n\u6307\u5b9achannel name\uff0c\n-f\n\u6307\u5b9achannel configuration transaction\uff08\u6b64\u4f8b\u4e2d\u662f\nchannel.tx\n\uff09\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\u5b89\u88c5 configuration transaction\u3002\n\n\n# channel.tx \u548c orderer.block \u5728 cli \u5bb9\u5668\u7684 crypto/orderer \u76ee\u5f55\u4e0b\npeer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem\n\n\n\n\u7531\u4e8e\u6b64\u4f8b\u7684\npeer channel create\n\u547d\u4ee4\u662f\u9488\u5bf9orderer\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4fee\u6539\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0a\u8fb9\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a\n\n\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig CORE_PEER_LOCALMSPID=\"OrdererMSP\" peer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem\n\n\n\n\u6ce8\u610f\uff1a\n\u4e0b\u9762\u7684\u5176\u4ed6\u547d\u4ee4\u4f9d\u7136\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\uff0c\u800c\u4e14\u8981\u8bb0\u4f4f\u547d\u4ee4\u91cc\u6bcf\u4e2apeer\u5bf9\u5e94\u7684\u73af\u5883\u53d8\u91cf\n\n\nJoin channel\n\n\n\u5c06\u6307\u5b9a\u7684peer\u52a0\u5165\u5230channel\uff1a\n\n\n# \u9ed8\u8ba4\u53ea\u5c06 PEER0 \u52a0\u5165\npeer channel join -b mychannel.block\n\n\n\n\u5b8c\u6574\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a\n\n\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=\"Org0MSP\" CORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/cacerts/peerOrg0.pem peer channel join -b mychannel.block\n\n\n\n\u4fee\u6539\u8fd9\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u5c06\u5176\u4ed6\u7684peer\u52a0\u5165\u5230channel\u4e2d\n\n\nInstall chaincode\n\n\n\u5c06\u793a\u4f8bchaincode\u4ee3\u7801\u5b89\u88c5\u5230\u56db\u4e2a\u5bf9\u7b49\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\uff1a\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02\n\n\n\nInstantiate chaincode\n\n\n\u5728\u4e00\u4e2apeer\u4e0a\u5b9e\u4f8b\u5316chaincode\uff0c\u8fd9\u5c06\u5bf9\u8be5peer\u542f\u52a8\u4e00\u4e2achaincode\u5bb9\u5668\uff0c\u5e76\u4e3a\u8be5chaincode\u8bbe\u7f6e\u80cc\u4e66\u7b56\u7565\u3002\u6b64\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7b56\u7565\u662f\u6709\nOrg0\n\u6216\nOrg1\n\u4e2d\u7684\u4e00\u4e2apeer\u80cc\u4e66\u5373\u53ef\u3002\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\n# \u7528 -C \u53c2\u6570\u8bbe\u7f6e\u6b63\u786e\u7684channel\u540d\uff0c\u9ed8\u8ba4\u662f mychannel\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"\n\n\n\nInvoke chaincode\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode invoke -o orderer0:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'\n\n\n\nQuery chaincode\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode query -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'\n\n\n\n\u6267\u884c\u7ed3\u679c\uff1a\n\n\nQuery Result: 90\n\n\n\n\u624b\u52a8\u6784\u5efa\u955c\u50cf\n\n\n\u6784\u5efapeer\u548corderer\u955c\u50cf\uff1a\n\n\n# \u5728fabric\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u5982\u679c\u4e0d\u80fd\u987a\u5229\u751f\u6210\u955c\u50cf\uff0c\u5219\u4f7f\u7528vagrant\u73af\u5883\nmake peer-docker orderer-docker\n\n\n\n\u6267\u884c\ndocker images\n\u547d\u4ee4\u8f93\u51fa\uff1a\n\n\nvagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric$ docker images\nREPOSITORY                     TAG                             IMAGE ID            CREATED             SIZE\nhyperledger/fabric-orderer     latest                          264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-orderer     x86_64-0.7.0-snapshot-a0d032b   264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-peer        latest                          b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-peer        x86_64-0.7.0-snapshot-a0d032b   b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-javaenv     latest                          6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-javaenv     x86_64-0.7.0-snapshot-a0d032b   6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-ccenv       latest                          0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-ccenv       x86_64-0.7.0-snapshot-a0d032b   0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-baseimage   x86_64-0.3.0                    f4751a503f02        4 weeks ago         1.27 GB\nhyperledger/fabric-baseos      x86_64-0.3.0                    c3a4cf3b3350        4 weeks ago         161 MB\n\n\n\n\u4f7f\u7528\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6\n\n\n\u8fdb\u53bbvagrant\u73af\u5883\uff1a\n\n\ncd $GOPATH/src/github.com/hyperledger/fabric/devenv\n\n# \u7b2c\u4e00\u6b21\u542f\u52a8VM\u7528 vagrant up \nvagrant ssh\n\n\n\n\u5728fabric\u76ee\u5f55\u4e0b\u7f16\u8bd1peer\u548corderer\uff1a\n\n\nmake clean\nmake native\n\n\n\n\u751f\u6210\nccenv\n\u955c\u50cf\uff1a\n\n\nmake peer-docker\n\n\n\n\u7136\u540e\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u90fd\u8fdb\u5165vagrant\uff0c\u81f3\u6b64\u6709\u4e09\u4e2a\u7ec8\u7aef\u90fd\u5728vagrant\u91cc\u3002\n\n\n\u524d\u9996\u5148\u6e05\u7a7aledger\u6587\u4ef6\u5939\n/var/hyperledger/\n\uff08\u6bcf\u6b21\u8fd0\u884c\u540e\uff0c\u4e3a\u907f\u514d\u9519\u8bef\u6216\u91cd\u590d\uff0c\u90fd\u8981\u6e05\u7a7a\uff09:\n\n\nrm -rf /var/hyperledger/*\n\n\n\n\u7ec8\u7aef1\n\n\n\u4f7f\u7528\nconfigtxgen\n\u5de5\u5177\u521b\u5efaorderer\u521b\u4e16\u533a\u5757\uff1a\n\n\nconfigtxgen -profile SampleSingleMSPSolo -outputBlock orderer.block\n\n\n\n\u7ec8\u7aef2\n\n\n\u7528\u521a\u751f\u6210\u7684\u521b\u4e16\u533a\u5757\u542f\u52a8orderer\uff1a\n\n\nORDERER_GENERAL_GENESISMETHOD=file ORDERER_GENERAL_GENESISFILE=./orderer.block orderer\n\n\n\n\u7ec8\u7aef1\n\n\n\u521b\u5efa channel configuration transaction\uff1a\n\n\nconfigtxgen -profile SampleSingleMSPSolo -outputCreateChannelTx channel.tx -channelID \nchannel-ID\n\n\n\n\n\u6267\u884c\u6210\u529f\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\nchannel.tx\n\n\n\u7ec8\u7aef3\n\n\n\u4ee5\nchainless\n\u6a21\u5f0f\u542f\u52a8peer\uff1a\n\n\npeer node start --peer-defaultchain=false\n\n\n\nCreate channel\n\n\n\u4ee5\nchannel.tx\n\u4e3a\u53c2\u6570\u521b\u5efachannel\uff1a\n\n\npeer channel create -o 127.0.0.1:7050 -c mychannel -f channel.tx\n\n\n\n\u6267\u884c\u540e\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2achannel\u7684\u521b\u4e16\u533a\u5757\nmychannel.block\n\n\nJoin channel\n\n\n\u901a\u8fc7channel\u7684\u521b\u4e16\u533a\u5757\nmychannel.block\n\u52a0\u5165channel\uff1a\n\n\npeer channel join -b mychannel.block\n\n\n\nInstall chaincode\n\n\n\u5728peer\u4e0a\u5b89\u88c5chaincode\uff1a\n\n\npeer chaincode install -o 127.0.0.1:7050 -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02\n\n\n\n\u6267\u884c\u6210\u529f\u540e\u67e5\u770b\u6587\u4ef6\u53ef\u4ee5\u770b\u5230\nmycc.1.0\n:\n\n\nls /var/hyperledger/production/chaincodes\n\n\n\nInstantiate chaincode\n\n\n\u5b9e\u4f8b\u5316chaincode\uff1a\n\n\npeer chaincode instantiate -o 127.0.0.1:7050 -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}'\n\n\n\ndocker ps\n\u67e5\u770b\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u5982\u679cchaincode\u542f\u52a8\u6210\u529f\uff0c\u5219\u663e\u793a\uff1a\n\n\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nbd9c6bda7560        dev-jdoe-mycc-1.0   \"chaincode -peer.a...\"   5 seconds ago       Up 5 seconds                            dev-jdoe-mycc-1.0\n\n\n\nInvoke chaincode\n\n\n\u8c03\u7528chaincode\u4ece\u201ca\u201d\u8f6c\u79fb\u201c10\u201d\u7ed9\u201cb\u201c\uff1a\n\n\npeer chaincode invoke -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'\n\n\n\nQuery chaincode\n\n\n\u67e5\u8be2\u201da\u201c\u7684\u503c\uff1a\n\n\n# \u8fd4\u56de\u503c\u5e94\u662f 90\npeer chaincode query -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'\n\n\n\n\u8fd0\u884c\u5b8c\u6210\u540e\u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7aledger\u6587\u4ef6\u5939\n/var/hyperledger/\n\uff1a\n\n\nrm -rf /var/hyperledger/*\n\n\n\n\u4f7f\u7528CouchDB\n\n\n\u53ef\u4ee5\u5c06stateDB\u9ed8\u8ba4\u7684goleveldb\u66ff\u6362\u6210CouchDB\u3002\u5bf9\u4e8eCouchDB\uff0cchaincode\u5404\u529f\u80fd\u4f9d\u7136\u53ef\u7528\uff0c\u4f46\u5c06chaincode\u6570\u636e\u4ee5JSON\u65b9\u5f0f\u5b58\u50a8\u7684\u8bdd\u5c31\u53ef\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u7684\u529f\u80fd\u3002\n\n\n\u4e3a\u4e86\u4f7f\u7528CouchDB\uff0c\u9664\u4e86\u6700\u524d\u9762\u7684\u201d\u524d\u63d0\u201c\u4e00\u8282\u7684\u64cd\u4f5c\u5916\uff0c\u8fd8\u9700\u8981\u4e0b\u8fb9\u4e24\u6b65\u542f\u52a8CouchDB\u5bb9\u5668\u5e76\u5c06\u4e4b\u4e0epeer\u5bb9\u5668\u5173\u8054\uff1a\n\n\n\n\n\n\n\u6784\u5efaCouchDB\u955c\u50cf\uff1a\n\n\n# make sure you are in the fabric directory\nmake couchdb\n\n\n\n\n\n\n\n\u7f16\u8f91\nfabric/examples/e2e_cli/docker-compose.yaml\n\u548c\ndocker-compose.yam\n\uff0c\u5c06\u6240\u6709\u4e0eCouchDB\u6709\u5173\u7684\u5185\u5bb9\u53d6\u6d88\u6ce8\u91ca\u3002\u8fd9\u6837\nchaincode_example02\n\u5c31\u53ef\u4ee5\u624dCouchDB\u4e0b\u8fd0\u884c\u4e86\u3002\n\n\n\n\n\n\n\u6ce8\u610f\uff1a\n\u5982\u679c\u5c06CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\u7684\u4e3b\u673a\uff0c\u8bf7\u4e00\u5b9a\u8981\u6ce8\u610f\u5b89\u5168\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u5c06\u7aef\u53e3\u6620\u5c04\u51fa\u6765\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684web\u754c\u9762\u53ef\u89c6\u5316\u64cd\u4f5c\u6570\u636e\u3002\u751f\u4ea7\u73af\u5883\u4e2d\u4e00\u822c\u4e0d\u4f1a\u505a\u7aef\u53e3\u6620\u5c04\uff0c\u4ee5\u9650\u5236CouchDB\u7684\u5916\u90e8\u8bbf\u95ee\u3002\n\n\n\u53ef\u4ee5\u7528\nchaincode_example02\n\u5728CouchDB\u4e0b\u6267\u884c\u4e0a\u8fb9\u7684chaincode\u64cd\u4f5c\uff0c\u4f46\u662f\u4e3a\u4e86\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u529f\u80fd\uff0cchaincode\u6570\u636e\u4e00\u5b9a\u8981\u4ee5JSON\u683c\u5f0f\u5b58\u50a8\uff08\u4f8b\u5982\nfabric/examples/chaincode/go/marbles02\n\uff09\u3002\n\n\n\u4f7f\u7528\n\u624b\u52a8\u6267\u884c\u4ea4\u6613\n\u8fd9\u4e00\u8282\u4e2d\u7684\u6b65\u9aa4install\u3001instantiate\u3001invoke\u548cquery \nmarbles02\n\uff0c\u6267\u884c\u5b8c\nJoin channel\n\u8fd9\u6b65\u540e\u4f7f\u7528\u4e0b\u8fb9\u7684\u547d\u4ee4\u64cd\u4f5c\nmarbles02\n\uff1a\n\n\n\n\n\n\n\u5728\nPEER0\n\u4e0a\u5b89\u88c5\u5e76\u5b9e\u4f8b\u5316chaincode\n\n\npeer chaincode install -o orderer0:7050 -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02 -c '{\"Args\":[\"init\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"\n\n\n\n\n\n\n\n\u521b\u5efa\u4e00\u4e9bmarble\u5e76\u79fb\u52a8\u5b83\u4eec\n\n\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble1\",\"blue\",\"35\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble2\",\"red\",\"50\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble3\",\"blue\",\"70\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarble\",\"marble2\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarblesBasedOnColor\",\"blue\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"delete\",\"marble1\"]}'\n\n\n\n\n\n\n\n\u5982\u679c\u505a\u4e86CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7web\u754c\u9762\u67e5\u770b\u6570\u636e\uff0c\u53ef\u4ee5\u770b\u5230\u540d\u4e3a\nmychannel\n\u7684\u6570\u636e\u5e93\u53ca\u5176\u6587\u6863\n\n\n\n\n\n\n\u5982\u679c\u4f7f\u7528\u7684\u662fvagrant\u73af\u5883\n\n\nhttp://localhost:15984/_utils\n* \u5982\u679c\u4e0d\u662fvagrant\u73af\u5883\uff0c\u4f7f\u7528CouchDB\u5bb9\u5668\u6307\u5b9a\u7684\u7aef\u53e3\n\nhttp://localhost:5984/_utils\n\n\n\n\n\n\u53ef\u6709\u89c4\u5f8b\u7684\u67e5\u8be2chaincode\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6\nmarble2\n\uff09\n\n\n\n\npeer chaincode query -C mychannel -n marbles -c \n{\nArgs\n:[\nreadMarble\n,\nmarble2\n]}\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\nmarble2\n\u7684\u8be6\u7ec6\u4fe1\u606f\uff1a\n\n\nQuery Result: {\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}\n\n\n\n\u83b7\u53d6\nmarble1\n\u7684\u5386\u53f2\uff1a\n\n\npeer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"getHistoryForMarble\",\"marble1\"]}'\n\n\n\n\u53ef\u4ee5\u770b\u5230\u64cd\u4f5c\u8fc7\nmarble1\n\u7684\u4ea4\u6613\uff1a\n\n\nQuery Result: [{\"TxId\":\"1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"tom\"}},{\"TxId\":\"755d55c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"jerry\"}},{\"TxId\":\"819451032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f\", \"Value\":}]\n\n\n\n\u8fd8\u53ef\u4ee5\u6267\u884c\u590d\u6742\u67e5\u8be2\uff0c\u6bd4\u5982\u67e5\u8be2\njerry\n\u6240\u62e5\u6709\u7684marble\uff1a\n\n\npeer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarblesByOwner\",\"jerry\"]}'\n\n\n\n\u67e5\u8be2\u7ed3\u679c\u4e3a\njerry\n\u6240\u62e5\u6709\u76842\u4e2amarble\u7684\u4fe1\u606f\uff1a\n\n\nQuery Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]\n\n\n\n\u901a\u8fc7\nowner\n\u5b57\u6bb5\u7b49\u4e8e\njerry\n\u67e5\u8be2\uff1a\n\n\npeer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarbles\",\"{\\\"selector\\\":{\\\"owner\\\":\\\"jerry\\\"}}\"]}'\n\n\n\n\u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\uff1a\n\n\nQuery Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]\n\n\n\n\n\n\n\n\u6570\u636e\u6301\u4e45\u5316\n\n\n\u5982\u679c\u9700\u8981\u5bf9peer\u6216CouchDB\u5bb9\u5668\u7684\u6570\u636e\u6301\u4e45\u5316\uff0c\u4e00\u79cd\u9009\u62e9\u662f\u5c06\u5bb9\u5668\u7684\u76f8\u5173\u76ee\u5f55\u6302\u5728\u5230docker\u4e3b\u673a\u3002\u4f8b\u5982\uff0c\u5c06\u4e0b\u9762\u4e24\u884c\u5185\u5bb9\u653e\u5230\ndocker-compose.yaml\n\u6587\u4ef6\u4e2d\u7684\u5bf9\u5e94peer\u5904\uff1a\n\n\nvolumes:\n - /var/hyperledger/peer0:/var/hyperledger/production\n\n\n\n\u5c06\u4e0b\u9762\u4e24\u884c\u653e\u5230\u5bf9\u5e94\u7684CouchDB\u5904\uff1a\n\n\nvolumes:\n- /var/hyperledger/couchdb0:/opt/couchdb/data\n\n\n\n\u6545\u969c\u6392\u51fa\n\n\n\n\n\u6bcf\u6b21\u8fd0\u884c\u540e\u8981\u6e05\u7406\u6587\u4ef6\n\n\n\n\n\u5982\u679c\u51fa\u73b0docker\u9519\u8bef\uff0c\u5219\u5220\u9664\u955c\u50cf\uff0c\u4ece\u5934\u518d\u64cd\u4f5c\u4e00\u904d\n\n\nmake clean\nmake peer-docker orderer-docker\n\n\n\n\n\n\n\n\u5982\u679c\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\n\n\nError: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)\n\n\n\nchaincode\u955c\u50cf\uff08\u5982\ndev-peer0-mycc-1.0\n\u6216\ndev-peer1-mycc-1.0\n\uff09\u53ef\u80fd\u662f\u4ee5\u524d\u8fd0\u884c\u8fc7\u7684\u3002\u5220\u9664\u5b83\u4eec\u7136\u540e\u91cd\u8bd5\u3002\n\n\ndocker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')\n\n\n\n\n\n\n\n\u4f7f\u7528\ndown\n\u9009\u9879\u6e05\u7406\u7f51\u7edc\n\n\n./network_setup.sh down\nNext  Previous", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/getting_started/#_1", 
            "text": "\u5b8c\u6210\u4ee5\u4e0b\u5b89\u88c5Fabric\u6e90\u7801\u548c\u7f16\u8bd1 configtxgen \u5de5\u5177\uff1a   \u5b8c\u6210 \u73af\u5883\u5b89\u88c5 \uff0c\u5e76\u8bbe\u7f6e\u6b63\u786e\u7684 $GOPATH \u73af\u5883\u53d8\u91cf\u3002   \u62c9\u53d6Fabric\u6e90\u7801  git clone https://github.com/hyperledger/fabric.git    \u7f16\u8bd1 configtxgen \u5de5\u5177    \u5982\u679c\u8fd0\u884c\u5728Linux\uff0c\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  cd $GOPATH/src/github.com/hyperledger/fabric\nmake configtxgen\n# \u5982\u679c\u51fa\u9519\uff1a'ltdl.h' file not found\nsudo apt install libtool libltdl-dev\n# \u7136\u540e\u518d\u8fd0\u884cmake\nmake configtxgen    \u5982\u679c\u8fd0\u884c\u5728OSX\uff0c\u5148\u5b89\u88c5Xcode 8.0\u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u7136\u540e\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  # \u5b89\u88c5 Homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# \u6dfb\u52a0 gnu-tar\nbrew install gnu-tar --with-default-names\n# \u6dfb\u52a0 libtool\nbrew install libtool\n# \u7f16\u8bd1 configtxgen\nmake configtxgen  \u7f16\u8bd1\u6210\u529f\u540e\u8f93\u51fa\uff1a  build/bin/configtxgen\nCGO_CFLAGS=\" \" GOBIN=/Users/johndoe/work/src/github.com/hyperledger/fabric/build/bin go install -ldflags \"-X github.com/hyperledger/fabric/common/metadata.Version=1.0.0-snapshot-8d3275f -X github.com/hyperledger/fabric/common /metadata.BaseVersion=0.3.0 -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric\"       github.com/hyperledger/fabric/common/configtx/tool/configtxgen\nBinary available as build/bin/configtxgen``    \u7f16\u8bd1\u540e\u6267\u884c\u6587\u4ef6\u653e\u5728Fabric\u76ee\u5f55\u4e0b\u7684\u7684 build/bin/configtxgen", 
            "title": "\u524d\u63d0"
        }, 
        {
            "location": "/getting_started/#_2", 
            "text": "\u4e3a\u4e86\u52a0\u5feb\u90e8\u7f72\u8fc7\u7a0b\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\u6765\u6267\u884c\u6240\u6709\u4efb\u52a1\u3002\u6267\u884c\u8be5\u811a\u672c\u4f1a\u751f\u6210\u914d\u7f6e\u7ed3\u679c\u3001\u672c\u5730\u7f51\u7edc\u3001Chaincode\u6d4b\u8bd5\u3002  \u8fdb\u5165 examples/e2e_cli \u76ee\u5f55\uff0c\u9996\u5148\u4eceDocker Hub\u62c9\u53d6\u955c\u50cf\uff1a  # \u4f7f\u811a\u672c\u53ef\u6267\u884c\nchmod +x download-dockerimages.sh\n# \u6267\u884c\u811a\u672c\n./download-dockerimages.sh  \u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u9700\u8981\u51e0\u5206\u949f\uff0c\u811a\u672c\u6267\u884c\u540e\u8f93\u51fa\uff1a  ===  List out hyperledger docker images\nhyperledger/fabric-ca          latest               35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-ca          x86_64-1.0.0-alpha   35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-couchdb     latest               f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-couchdb     x86_64-1.0.0-alpha   f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-kafka       latest               589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-kafka       x86_64-1.0.0-alpha   589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-zookeeper   latest               9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-zookeeper   x86_64-1.0.0-alpha   9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-orderer     latest               5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-orderer     x86_64-1.0.0-alpha   5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-peer        latest               784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-peer        x86_64-1.0.0-alpha   784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-javaenv     latest               a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-javaenv     x86_64-1.0.0-alpha   a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-ccenv       latest               91792014b61f        7 days ago          1.29 GB\nhyperledger/fabric-ccenv       x86_64-1.0.0-alpha   91792014b61f        7 days ago          1.29 GB  \u73b0\u5728\u8fd0\u884c\u5b8c\u6574\u811a\u672c\uff1a  ./network_setup.sh up  channel-ID   \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e channel-ID \u53c2\u6570\uff0cchannel\u540d\u9ed8\u8ba4\u662f mychannel \u3002\u811a\u672c\u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a  ===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================  \u6b64\u65f6\uff0c\u7f51\u7edc\u542f\u52a8\u8fd0\u884c\u5e76\u6d4b\u8bd5\u6210\u529f\u3002", 
            "title": "\u6267\u884c\u5b8c\u6574\u811a\u672c"
        }, 
        {
            "location": "/getting_started/#_3", 
            "text": "\u505c\u6b62\u7f51\u7edc\uff1a  # \u5728e2e_cli\u76ee\u5f55\u4e0b\ndocker rm -f $(docker ps -aq)  \u7136\u540e\u6267\u884c docker images \u547d\u4ee4\u67e5\u770bChaincode\u955c\u50cf\uff0c\u7c7b\u4f3c\u8f93\u51fa\u5982\u4e0b\uff1a  REPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB  \u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a  docker rmi  IMAGE ID   IMAGE ID   IMAGE ID   \u4f8b\u5982\uff1a  docker rmi -f 13f e27 111  \u6700\u540e\u5220\u9664\u914d\u7f6e\u7ed3\u679c\uff0c\u5728 crypto/orderer \u76ee\u5f55\u5220\u9664 orderer.block \u548c channel.tx \u3002", 
            "title": "\u6e05\u7406"
        }, 
        {
            "location": "/getting_started/#configtxgen", 
            "text": "configtxgen\u5de5\u5177\u751f\u6210\u4e24\u4e2a\u5185\u5bb9\uff1a    Orderer\u7684 bootstrap block \u548cFabric\u7684 channel configuration transaction \u3002  orderer block\u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff1bchannel transaction\u6587\u4ef6\u5728create channel\u65f6\u4f1a\u88ab\u5e7f\u64ad\u7ed9orderer\u3002  configtx.yaml \u5305\u542b\u7f51\u7edc\u7684\u5b9a\u4e49\uff0c\u5e76\u7ed9\u51fa\u4e86\u7f51\u7edc\u7ec4\u4ef6\u7684\u62d3\u6251\u7ed3\u6784 2\u4e2a\u6210\u5458\uff08Org0\u548cOrg1\uff09\u5206\u522b\u7ba1\u7406\u7ef4\u62a42\u4e2apeer\u3002\u8fd8\u6307\u51fa\u6bcf\u4e2a\u7f51\u7edc\u5b9e\u4f53\u7684\u52a0\u5bc6\u6750\u6599\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 crypto \u76ee\u5f55\u5305\u542b\u6bcf\u4e2a\u5b9e\u4f53\u7684admin\u8bc1\u4e66\u3001ca\u8bc1\u4e66\u3001\u7b7e\u540d\u8bc1\u4e66\u548c\u79c1\u94a5\u3002  \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c generateCfgTrx.sh \uff0c\u8be5\u811a\u672c\u6574\u5408\u4e86 configtxgen \u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6267\u884c\u540e\u4f1a\u751f\u6210\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\uff1a orderer.block \u548c channel.tx \u3002\u5982\u679c\u4f60\u8fd0\u884c\u8fc7\u4e0a\u8fb9\u7684 network_setup.sh \u5219\u8fd9\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\u5df2\u751f\u6210\uff0c\u8981\u5148\u5230 crypto/orderer \u76ee\u5f55\u5c06\u4e4b\u5220\u9664\u3002", 
            "title": "configtxgen"
        }, 
        {
            "location": "/getting_started/#generatecfgtrxsh", 
            "text": "\u5728 e2e_cli \u76ee\u5f55\u4e0b\uff1a  cd $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli  generateCfgTrx.sh \u811a\u672c\u6709\u4e2a\u53ef\u9009\u53c2\u6570 channel-ID \uff0c\u5982\u679c\u4e0d\u8bbe\u6b64\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a mychannel \u3002  # \u5982\u4e0a\u6240\u8ff0\uff0c channel-ID  \u53c2\u6570\u662f\u53ef\u9009\u7684\n./generateCfgTrx.sh  channel-ID   \u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a  2017/02/28 17:01:52 Generating new channel configtx\n2017/02/28 17:01:52 Creating no-op MSP instance\n2017/02/28 17:01:52 Obtaining default signing identity\n2017/02/28 17:01:52 Creating no-op signing identity instance\n2017/02/28 17:01:52 Serializing identity\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 Writing new channel tx  \u751f\u6210\u7684 orderer.block \u548c channel.tx \u4e24\u4e2a\u6587\u4ef6\u5b58\u653e\u5728 crypto/orderer \u76ee\u5f55\u3002  orderer.block \u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff0c channel.tx \u5305\u542b\u65b0channel\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u4fe9\u6587\u4ef6\u90fd\u6765\u81ea configtx.yaml \u53ca\u5176\u6240\u5305\u542b\u7684\u52a0\u5bc6\u6750\u6599\u548c\u7f51\u7edc\u4fe1\u606f\u7684\u6570\u636e\u3002  \u6ce8\u610f\uff1a \u4e5f\u53ef\u624b\u52a8\u6267\u884c\u811a\u672c generateCfgTrx.sh \u91cc\u7684\u547d\u4ee4\u3002\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5219\u5fc5\u987b\u5148\u7528 e2e_cli \u76ee\u5f55\u4e0b\u7684 configtx.yaml \u66ff\u6362Fabric sampleconfig\u76ee\u5f55\u4e0b\u9ed8\u8ba4\u7684 configtx.yaml \uff0c\u7136\u540e\u8fd4\u56defabric\u76ee\u5f55\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u524d\u63d0\u662f\u5220\u9664\u4e4b\u524d generateCfgTrx.sh \u751f\u6210\u7684\u4e24\u4e2a\u6587\u4ef6\u3002", 
            "title": "\u6267\u884cgenerateCfgTrx.sh\u811a\u672c"
        }, 
        {
            "location": "/getting_started/#_4", 
            "text": "\u4f7f\u7528docker-compose\u542f\u52a8\u7f51\u7edc\uff0c\u5982\u679c\u6ca1\u6709\u62c9\u53d6Fabric\u955c\u50cf\uff0c\u5219\u8fd4\u56de\u4e4b\u524d\u7684\u64cd\u4f5c\u53bb\u62c9\u53d6\u955c\u50cf\u3002  \u811a\u672c script.sh \u5d4c\u5165\u5230docker-compose\u6587\u4ef6\u91cc\uff0c\u8be5\u811a\u672c\u5c06peer\u52a0\u5165\u5230channel\u5e76\u5411peer\u53d1\u9001read/write\u8bf7\u6c42\uff0c\u5982\u6b64\u4fbf\u53ef\u81ea\u52a8\u6267\u884c\u4ea4\u6613\u6d41\u7a0b\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u8fd9\u4e2a\u811a\u672c\u81ea\u52a8\u6267\u884c\u4ea4\u6613\uff0c\u53ef\u4ee5\u8df3\u5230\u4e0b\u9762\u201c\u624b\u52a8\u6267\u884c\u4ea4\u6613\u201d\u4e00\u8282\u3002  \u5728 e2e_cli \u76ee\u5f55\u4e0b\u4f7f\u7528docker-compose\u751f\u6210\u7f51\u7edc\u5b9e\u4f53\u5e76\u6267\u884c\u5d4c\u5165\u7684\u811a\u672c\uff1a  CHANNEL_NAME= channel-id  docker-compose up -d  \u5982\u679c\u4e4b\u524d\u521b\u5efa\u4e86\u4e00\u4e2achannel\u540d\uff0c\u5c31\u5fc5\u987b\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\uff0c\u5426\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684 mychannel \u3002\u4f8b\u5982\uff1a  CHANNEL_NAME=mychannel docker-compose up -d  \u7b49\u5f85\u4e00\u4f1a\u513f\uff0c\u56e0\u4e3a\u80cc\u540e\u6709\u4ea4\u6613\u4f1a\u53d1\u9001\u5230peer\u3002\u6267\u884c docker ps \u67e5\u770b\u8fd0\u884c\u72b6\u6001\u7684container\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a  vagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric/examples/e2e_cli$ docker ps\nCONTAINER ID        IMAGE                        COMMAND                  CREATED              STATUS              PORTS                                              NAMES\n45e3e114f7a2        dev-peer3-mycc-1.0           \"chaincode -peer.a...\"   4 seconds ago        Up 4 seconds                                                           dev-peer3-mycc-1.0\n5970f740ad2b        dev-peer0-mycc-1.0           \"chaincode -peer.a...\"   24 seconds ago       Up 23 seconds                                                          dev-peer0-mycc-1.0\nb84808d66e99        dev-peer2-mycc-1.0           \"chaincode -peer.a...\"   48 seconds ago       Up 47 seconds                                                          dev-peer2-mycc-1.0\n16d7d94c8773        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:10051- 7051/tcp, 0.0.0.0:10053- 7053/tcp   peer3\n3561a99e35e6        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:9051- 7051/tcp, 0.0.0.0:9053- 7053/tcp     peer2\n0baad3047d92        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:8051- 7051/tcp, 0.0.0.0:8053- 7053/tcp     peer1\n1216896b7b4f        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:7051- 7051/tcp, 0.0.0.0:7053- 7053/tcp     peer0\n155ff8747b4d        hyperledger/fabric-orderer   \"orderer\"                About a minute ago   Up About a minute   0.0.0.0:7050- 7050/tcp                             orderer", 
            "title": "\u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/getting_started/#_5", 
            "text": "\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\u4e86\u811a\u672c script.sh \u3002\u8be5\u811a\u672c\u7528\u9ed8\u8ba4\u7684 mychannel \u6267\u884c createChannel \u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u7528\u5230\u4e86\u4e4b\u524d configtxgen \u5de5\u5177\u751f\u6210\u7684 channel.tx \u3002  createChannel \u6267\u884c\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u521b\u4e16\u533a\u5757 mychannel.block \u5e76\u4fdd\u5b58\u5230\u5f53\u524d\u76ee\u5f55\u3002  \u5bf94\u4e2apeer\u5206\u522b\u6267\u884c joinChannel \u547d\u4ee4\uff0c\u901a\u8fc7\u521d\u59cb\u533a\u5757 mychannel.block \u52a0\u5165channel\u3002\u81f3\u6b64\uff0c\u6709\u4e00\u4e2achannel\u5305\u542b4\u4e2apeer\u548c2\u4e2aorganization\u3002  PEER0 \u548c PEER1 \u5c5e\u4e8eOrg0\uff0c PEER2 \u548c PEER3 \u5c5e\u4e8eOrg1\u3002\u8fd9\u4e9b\u5173\u7cfb\u7684\u5b9a\u4e49\u90fd\u5728 configtx.yaml \u4e2d  Chaincode  chaincode_example02 \u88abinstall\u5230 PEER0 \u548c PEER2  \u7136\u540eChaincode\u5728 PEER2 \u4e0ainstantiate\u3002\u5b9e\u4f8b\u5316\u662f\u6307\u542f\u52a8\u5bb9\u5668\u548c\u521d\u59cb\u5316\u4e0eChaincode\u76f8\u5173\u7684\u952e\u503c\u5bf9\uff0c\u672c\u4f8b\u4e2d\u7684\u521d\u59cb\u503c\u662f [\u201ca\u201d,\u201d100\u201d \u201cb\u201d,\u201d200\u201d] \u3002\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u540d\u4e3a dev-peer2-mycc-1.0 \u7684\u5bb9\u5668\u542f\u52a8\uff0c\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5bb9\u5668\u4ec5\u662f\u9488\u5bf9 PEER2 \u3002 \uff08\u8bd1\u6ce8\uff1a\u5c24\u5176\u6ce8\u610f\u8fd9\u91cc\u4ec5\u4ec5\u662f\u542f\u52a8\u4e86\u4e00\u4e2acontainer\uff09  \u5b9e\u4f8b\u5316\u65f6\u8fd8\u4f1a\u5e26\u6709\u80cc\u4e66\u7b56\u7565\u53c2\u6570\uff0c\u672c\u4f8b\u4e2d\u80cc\u4e66\u7b56\u7565\u4e3a`-P  OR ( Org0MSP.member , Org1MSP.member ) \uff0c\u610f\u601d\u662f\u4efb\u4f55\u4ea4\u6613\u5fc5\u987b\u7531\u7ed1\u5b9a\u5230Org0\u6216\u8005Org1\u7684peer\u80cc\u4e66\u3002  \u5bf9\u4e8e\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230 PEER0 \u3002\u5728\u4e4b\u524dChaincode\u88abinstall\u5230 PEER0 \u4e86\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a dev-peer0-mycc-1.0 \u7684\u65b0\u5bb9\u5668\uff0c\u7136\u540e\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002\u7531\u4e8e\u6ca1\u6709write\u64cd\u4f5c\u53d1\u751f\uff0c\u6240\u4ee5\u201ca\u201d\u7684\u503c\u4f9d\u7136\u662f\u201c100\u201d\u3002  \u4ece\u201ca\u201c\u8f6c\u79fb\u201d10\u201c\u7ed9\u201db\u201d\u7684invoke\u8bf7\u6c42\u53d1\u9001\u5230 PEER0  Chaincode install\u5230 PEER3  \u5bf9\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230 PEER3 \u3002\u8fd9\u542f\u52a8\u4e86\u7b2c\u4e09\u4e2a\u540d\u4e3a dev-peer3-mycc-1.0 \u7684\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c90\uff0c\u6b63\u786e\u7684\u53cd\u6620\u4e86\u4e4b\u524d\u7684\u4ea4\u6613\u3002", 
            "title": "\u80cc\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/getting_started/#_6", 
            "text": "Chaincode\u5fc5\u987b\u88abinstall\u5230\u4e00\u4e2apeer\u4e0a\u624d\u80fd\u6210\u529f\u7684\u5bf9\u8fd9\u4e2apeer\u7684ledger\u6267\u884cread/write\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u53ea\u6709\u5f53\u5728peer\u4e0a\u9488\u5bf9chaincode\u6267\u884cread/write\u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2apeer\u4e0a\u624d\u4f1a\u542f\u52a8\u8be5chaincode \u5bb9\u5668\u3002\uff08\u6bd4\u5982\uff0c\u67e5\u8be2\u201ca\u201d\u7684\u503c\uff09 \u4ea4\u6613\u5bfc\u81f4\u5bb9\u5668\u542f\u52a8 \u3002channel\u4e2d\u7684\u6240\u6709peer\uff08\u5305\u62ec\u90a3\u4e9b\u6ca1\u6709install chaincode\u7684peer\uff0c\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684 PEER3 \uff09\u90fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u51c6\u786e\u7684ledger\uff0cledger\u5305\u542b\u5b58\u50a8\u4e86\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u4ea4\u6613\u8bb0\u5f55\u7684block\uff0c\u8fd8\u6709\u7ef4\u62a4current state\u7684statedb\u3002\u5728peer\u4e0ainstall chaincode\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5peer\u4e0a\u7684chaincode\u4e86\uff08\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684 PEER3 \uff09\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecfinstantiate\u8fc7\u4e86  \uff08\u8bd1\u6ce8\uff1a\u5373\u540c\u4e00channel\u4e2d\u7684chaincode\u53ea\u9700\u4e00\u6b21instantiate\uff09 \u3002", 
            "title": "\u8fd9\u8868\u660e\u4e86\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/getting_started/#_7", 
            "text": "\u67e5\u770bCLI\u5bb9\u5668\u7684log\uff1a  docker logs -f cli  \u8f93\u51fa\uff1a  2017-02-28 04:31:20.841 UTC [logging] InitFromViper -  DEBU 001 Setting default logging level to DEBUG for command 'chaincode'\n2017-02-28 04:31:20.842 UTC [msp] GetLocalMSP -  DEBU 002 Returning existing local MSP\n2017-02-28 04:31:20.842 UTC [msp] GetDefaultSigningIdentity -  DEBU 003 Obtaining default signing identity\n2017-02-28 04:31:20.843 UTC [msp] Sign -  DEBU 004 Sign: plaintext: 0A8F050A59080322096D796368616E6E...6D7963631A0A0A0571756572790A0161\n2017-02-28 04:31:20.843 UTC [msp] Sign -  DEBU 005 Sign: digest: 52F1A41B7B0B08CF3FC94D9D7E916AC4C01C54399E71BC81D551B97F5619AB54\nQuery Result: 90\n2017-02-28 04:31:30.425 UTC [main] main -  INFO 006 Exiting.....\n===================== Query on chaincode on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================  \u4f60\u4e5f\u53ef\u4ee5\u5b9e\u65f6\u67e5\u770b\u65e5\u5fd7\uff0c\u9700\u8981\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u3002  \u9996\u5148\uff0c\u505c\u6b62\u8fd0\u884c\u7740\u7684docker\u5bb9\u5668\uff1a  docker rm -f $(docker ps -aq)  \u5728\u7b2c\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8docker-compose\u811a\u672c\uff1a  # add the appropriate CHANNEL_NAME parm\nCHANNEL_NAME= channel-id  docker-compose up -d  \u5728\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u67e5\u770blog\uff1a  docker logs -f cli  \u8fd9\u5c06\u5b9e\u65f6\u8f93\u51fa\u901a\u8fc7 script.sh \u6267\u884c\u7684\u4ea4\u6613\u4fe1\u606f\u3002", 
            "title": "\u67e5\u770b\u4ea4\u6613"
        }, 
        {
            "location": "/getting_started/#chaincode", 
            "text": "\u5bf9\u6bcf\u4e2achaincode\u5bb9\u5668\u5355\u72ec\u67e5\u770blog\uff0c\u8f93\u51fa\uff1a  $ docker logs dev-peer2-mycc-1.0\n04:30:45.947 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Init\nAval = 100, Bval = 200\n\n$ docker logs dev-peer0-mycc-1.0\n04:31:10.569 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"100\"}\nex02 Invoke\nAval = 90, Bval = 210\n\n$ docker logs dev-peer3-mycc-1.0\n04:31:30.420 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"90\"}", 
            "title": "\u67e5\u770bchaincode\u65e5\u5fd7"
        }, 
        {
            "location": "/getting_started/#_8", 
            "text": "\u505c\u6b62\u6240\u6709\u5bb9\u5668\uff1a  docker rm -f $(docker ps -aq)  \u7136\u540e\uff0c\u6267\u884c docker images \u547d\u4ee4\u67e5\u770bchaincode\u955c\u50cf\uff0c\u4f1a\u6709\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\uff1a  REPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB  \u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a  docker rmi  IMAGE ID   IMAGE ID   IMAGE ID   \u6bd4\u5982\uff1a  docker rmi -f 13f e27 111  \u786e\u4fdd\u4e4b\u524d\u751f\u6210\u7684\u914d\u7f6e\u5185\u5bb9\u8fd8\u5728\uff0c\u5982\u679c\u5220\u9664\u4e86\u5c31\u518d\u6267\u884c\u811a\u672c\uff1a  ./generateCfgTrx.sh  channel-ID   \u6216\u8005\u4f7f\u7528\u811a\u672c\u4e2d\u7684\u547d\u4ee4\u624b\u52a8\u751f\u6210\u3002", 
            "title": "\u624b\u52a8\u6267\u884c\u4ea4\u6613"
        }, 
        {
            "location": "/getting_started/#docker-compose", 
            "text": "\u6253\u5f00docker-compose\u6587\u4ef6\u6ce8\u91ca\u6389\u6267\u884c script.sh \u811a\u672c\u7684\u547d\u4ee4\uff0c\u5982\u4e0b\uff1a  working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}'  \u4fdd\u5b58\u6587\u4ef6\uff0c\u91cd\u542f\u7f51\u7edc\uff1a  # \u5728e2e_cli\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u8bbe\u7f6e\u6b63\u786e\u7684CHANNEL_NAME\nCHANNEL_NAME= channel-id  docker-compose up -d", 
            "title": "\u4fee\u6539docker-compose\u6587\u4ef6"
        }, 
        {
            "location": "/getting_started/#_9", 
            "text": "\u53c2\u7167 script.sh \u811a\u672c\u4e2d\u7684create\u548cjoin\u547d\u4ee4\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u53ea\u662f\u9488\u5bf9 PEER0 \u7684\uff0c\u5f53\u5bf9orderer\u548cpeer\u6267\u884c\u547d\u4ee4\u65f6\uff0c\u9700\u8981\u4fee\u6539\u4e0b\u9762\u7ed9\u51fa\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002  # \u5bf9PEER0\u6240\u7528\u7684\u73af\u5883\u53d8\u91cf\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig\nCORE_PEER_ADDRESS=peer0:7051\nCORE_PEER_LOCALMSPID=\"Org0MSP\"\nCORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/ peer0/localMspConfig/cacerts/peerOrg0.pem  \u6bcf\u4e2apeer\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u90fd\u5728docker-compose\u6587\u4ef6\u4e2d", 
            "title": "\u547d\u4ee4\u8bed\u6cd5"
        }, 
        {
            "location": "/getting_started/#create-channel", 
            "text": "\u8fdb\u53bbcli\u5bb9\u5668\uff1a  docker exec -it cli bash  \u6267\u884c\u6210\u529f\u8f93\u51fa\uff1a  root@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#  \u7528 -c \u6307\u5b9achannel name\uff0c -f \u6307\u5b9achannel configuration transaction\uff08\u6b64\u4f8b\u4e2d\u662f channel.tx \uff09\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\u5b89\u88c5 configuration transaction\u3002  # channel.tx \u548c orderer.block \u5728 cli \u5bb9\u5668\u7684 crypto/orderer \u76ee\u5f55\u4e0b\npeer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  \u7531\u4e8e\u6b64\u4f8b\u7684 peer channel create \u547d\u4ee4\u662f\u9488\u5bf9orderer\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4fee\u6539\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0a\u8fb9\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a  CORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig CORE_PEER_LOCALMSPID=\"OrdererMSP\" peer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  \u6ce8\u610f\uff1a \u4e0b\u9762\u7684\u5176\u4ed6\u547d\u4ee4\u4f9d\u7136\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\uff0c\u800c\u4e14\u8981\u8bb0\u4f4f\u547d\u4ee4\u91cc\u6bcf\u4e2apeer\u5bf9\u5e94\u7684\u73af\u5883\u53d8\u91cf", 
            "title": "Create channel"
        }, 
        {
            "location": "/getting_started/#join-channel", 
            "text": "\u5c06\u6307\u5b9a\u7684peer\u52a0\u5165\u5230channel\uff1a  # \u9ed8\u8ba4\u53ea\u5c06 PEER0 \u52a0\u5165\npeer channel join -b mychannel.block  \u5b8c\u6574\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a  CORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=\"Org0MSP\" CORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/cacerts/peerOrg0.pem peer channel join -b mychannel.block  \u4fee\u6539\u8fd9\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u5c06\u5176\u4ed6\u7684peer\u52a0\u5165\u5230channel\u4e2d", 
            "title": "Join channel"
        }, 
        {
            "location": "/getting_started/#install-chaincode", 
            "text": "\u5c06\u793a\u4f8bchaincode\u4ee3\u7801\u5b89\u88c5\u5230\u56db\u4e2a\u5bf9\u7b49\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\uff1a  # \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02", 
            "title": "Install chaincode"
        }, 
        {
            "location": "/getting_started/#instantiate-chaincode", 
            "text": "\u5728\u4e00\u4e2apeer\u4e0a\u5b9e\u4f8b\u5316chaincode\uff0c\u8fd9\u5c06\u5bf9\u8be5peer\u542f\u52a8\u4e00\u4e2achaincode\u5bb9\u5668\uff0c\u5e76\u4e3a\u8be5chaincode\u8bbe\u7f6e\u80cc\u4e66\u7b56\u7565\u3002\u6b64\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7b56\u7565\u662f\u6709 Org0 \u6216 Org1 \u4e2d\u7684\u4e00\u4e2apeer\u80cc\u4e66\u5373\u53ef\u3002\u547d\u4ee4\u5982\u4e0b\uff1a  # \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\n# \u7528 -C \u53c2\u6570\u8bbe\u7f6e\u6b63\u786e\u7684channel\u540d\uff0c\u9ed8\u8ba4\u662f mychannel\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"", 
            "title": "Instantiate chaincode"
        }, 
        {
            "location": "/getting_started/#invoke-chaincode", 
            "text": "# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode invoke -o orderer0:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'", 
            "title": "Invoke chaincode"
        }, 
        {
            "location": "/getting_started/#query-chaincode", 
            "text": "# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode query -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'  \u6267\u884c\u7ed3\u679c\uff1a  Query Result: 90", 
            "title": "Query chaincode"
        }, 
        {
            "location": "/getting_started/#_10", 
            "text": "\u6784\u5efapeer\u548corderer\u955c\u50cf\uff1a  # \u5728fabric\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u5982\u679c\u4e0d\u80fd\u987a\u5229\u751f\u6210\u955c\u50cf\uff0c\u5219\u4f7f\u7528vagrant\u73af\u5883\nmake peer-docker orderer-docker  \u6267\u884c docker images \u547d\u4ee4\u8f93\u51fa\uff1a  vagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric$ docker images\nREPOSITORY                     TAG                             IMAGE ID            CREATED             SIZE\nhyperledger/fabric-orderer     latest                          264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-orderer     x86_64-0.7.0-snapshot-a0d032b   264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-peer        latest                          b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-peer        x86_64-0.7.0-snapshot-a0d032b   b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-javaenv     latest                          6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-javaenv     x86_64-0.7.0-snapshot-a0d032b   6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-ccenv       latest                          0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-ccenv       x86_64-0.7.0-snapshot-a0d032b   0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-baseimage   x86_64-0.3.0                    f4751a503f02        4 weeks ago         1.27 GB\nhyperledger/fabric-baseos      x86_64-0.3.0                    c3a4cf3b3350        4 weeks ago         161 MB", 
            "title": "\u624b\u52a8\u6784\u5efa\u955c\u50cf"
        }, 
        {
            "location": "/getting_started/#_11", 
            "text": "\u8fdb\u53bbvagrant\u73af\u5883\uff1a  cd $GOPATH/src/github.com/hyperledger/fabric/devenv\n\n# \u7b2c\u4e00\u6b21\u542f\u52a8VM\u7528 vagrant up \nvagrant ssh  \u5728fabric\u76ee\u5f55\u4e0b\u7f16\u8bd1peer\u548corderer\uff1a  make clean\nmake native  \u751f\u6210 ccenv \u955c\u50cf\uff1a  make peer-docker  \u7136\u540e\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u90fd\u8fdb\u5165vagrant\uff0c\u81f3\u6b64\u6709\u4e09\u4e2a\u7ec8\u7aef\u90fd\u5728vagrant\u91cc\u3002  \u524d\u9996\u5148\u6e05\u7a7aledger\u6587\u4ef6\u5939 /var/hyperledger/ \uff08\u6bcf\u6b21\u8fd0\u884c\u540e\uff0c\u4e3a\u907f\u514d\u9519\u8bef\u6216\u91cd\u590d\uff0c\u90fd\u8981\u6e05\u7a7a\uff09:  rm -rf /var/hyperledger/*", 
            "title": "\u4f7f\u7528\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6"
        }, 
        {
            "location": "/getting_started/#1", 
            "text": "\u4f7f\u7528 configtxgen \u5de5\u5177\u521b\u5efaorderer\u521b\u4e16\u533a\u5757\uff1a  configtxgen -profile SampleSingleMSPSolo -outputBlock orderer.block", 
            "title": "\u7ec8\u7aef1"
        }, 
        {
            "location": "/getting_started/#2", 
            "text": "\u7528\u521a\u751f\u6210\u7684\u521b\u4e16\u533a\u5757\u542f\u52a8orderer\uff1a  ORDERER_GENERAL_GENESISMETHOD=file ORDERER_GENERAL_GENESISFILE=./orderer.block orderer", 
            "title": "\u7ec8\u7aef2"
        }, 
        {
            "location": "/getting_started/#1_1", 
            "text": "\u521b\u5efa channel configuration transaction\uff1a  configtxgen -profile SampleSingleMSPSolo -outputCreateChannelTx channel.tx -channelID  channel-ID   \u6267\u884c\u6210\u529f\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210 channel.tx", 
            "title": "\u7ec8\u7aef1"
        }, 
        {
            "location": "/getting_started/#3", 
            "text": "\u4ee5 chainless \u6a21\u5f0f\u542f\u52a8peer\uff1a  peer node start --peer-defaultchain=false", 
            "title": "\u7ec8\u7aef3"
        }, 
        {
            "location": "/getting_started/#create-channel_1", 
            "text": "\u4ee5 channel.tx \u4e3a\u53c2\u6570\u521b\u5efachannel\uff1a  peer channel create -o 127.0.0.1:7050 -c mychannel -f channel.tx  \u6267\u884c\u540e\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2achannel\u7684\u521b\u4e16\u533a\u5757 mychannel.block", 
            "title": "Create channel"
        }, 
        {
            "location": "/getting_started/#join-channel_1", 
            "text": "\u901a\u8fc7channel\u7684\u521b\u4e16\u533a\u5757 mychannel.block \u52a0\u5165channel\uff1a  peer channel join -b mychannel.block", 
            "title": "Join channel"
        }, 
        {
            "location": "/getting_started/#install-chaincode_1", 
            "text": "\u5728peer\u4e0a\u5b89\u88c5chaincode\uff1a  peer chaincode install -o 127.0.0.1:7050 -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02  \u6267\u884c\u6210\u529f\u540e\u67e5\u770b\u6587\u4ef6\u53ef\u4ee5\u770b\u5230 mycc.1.0 :  ls /var/hyperledger/production/chaincodes", 
            "title": "Install chaincode"
        }, 
        {
            "location": "/getting_started/#instantiate-chaincode_1", 
            "text": "\u5b9e\u4f8b\u5316chaincode\uff1a  peer chaincode instantiate -o 127.0.0.1:7050 -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}'  docker ps \u67e5\u770b\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u5982\u679cchaincode\u542f\u52a8\u6210\u529f\uff0c\u5219\u663e\u793a\uff1a  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nbd9c6bda7560        dev-jdoe-mycc-1.0   \"chaincode -peer.a...\"   5 seconds ago       Up 5 seconds                            dev-jdoe-mycc-1.0", 
            "title": "Instantiate chaincode"
        }, 
        {
            "location": "/getting_started/#invoke-chaincode_1", 
            "text": "\u8c03\u7528chaincode\u4ece\u201ca\u201d\u8f6c\u79fb\u201c10\u201d\u7ed9\u201cb\u201c\uff1a  peer chaincode invoke -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'", 
            "title": "Invoke chaincode"
        }, 
        {
            "location": "/getting_started/#query-chaincode_1", 
            "text": "\u67e5\u8be2\u201da\u201c\u7684\u503c\uff1a  # \u8fd4\u56de\u503c\u5e94\u662f 90\npeer chaincode query -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'  \u8fd0\u884c\u5b8c\u6210\u540e\u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7aledger\u6587\u4ef6\u5939 /var/hyperledger/ \uff1a  rm -rf /var/hyperledger/*", 
            "title": "Query chaincode"
        }, 
        {
            "location": "/getting_started/#couchdb", 
            "text": "\u53ef\u4ee5\u5c06stateDB\u9ed8\u8ba4\u7684goleveldb\u66ff\u6362\u6210CouchDB\u3002\u5bf9\u4e8eCouchDB\uff0cchaincode\u5404\u529f\u80fd\u4f9d\u7136\u53ef\u7528\uff0c\u4f46\u5c06chaincode\u6570\u636e\u4ee5JSON\u65b9\u5f0f\u5b58\u50a8\u7684\u8bdd\u5c31\u53ef\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u7684\u529f\u80fd\u3002  \u4e3a\u4e86\u4f7f\u7528CouchDB\uff0c\u9664\u4e86\u6700\u524d\u9762\u7684\u201d\u524d\u63d0\u201c\u4e00\u8282\u7684\u64cd\u4f5c\u5916\uff0c\u8fd8\u9700\u8981\u4e0b\u8fb9\u4e24\u6b65\u542f\u52a8CouchDB\u5bb9\u5668\u5e76\u5c06\u4e4b\u4e0epeer\u5bb9\u5668\u5173\u8054\uff1a    \u6784\u5efaCouchDB\u955c\u50cf\uff1a  # make sure you are in the fabric directory\nmake couchdb    \u7f16\u8f91 fabric/examples/e2e_cli/docker-compose.yaml \u548c docker-compose.yam \uff0c\u5c06\u6240\u6709\u4e0eCouchDB\u6709\u5173\u7684\u5185\u5bb9\u53d6\u6d88\u6ce8\u91ca\u3002\u8fd9\u6837 chaincode_example02 \u5c31\u53ef\u4ee5\u624dCouchDB\u4e0b\u8fd0\u884c\u4e86\u3002    \u6ce8\u610f\uff1a \u5982\u679c\u5c06CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\u7684\u4e3b\u673a\uff0c\u8bf7\u4e00\u5b9a\u8981\u6ce8\u610f\u5b89\u5168\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u5c06\u7aef\u53e3\u6620\u5c04\u51fa\u6765\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684web\u754c\u9762\u53ef\u89c6\u5316\u64cd\u4f5c\u6570\u636e\u3002\u751f\u4ea7\u73af\u5883\u4e2d\u4e00\u822c\u4e0d\u4f1a\u505a\u7aef\u53e3\u6620\u5c04\uff0c\u4ee5\u9650\u5236CouchDB\u7684\u5916\u90e8\u8bbf\u95ee\u3002  \u53ef\u4ee5\u7528 chaincode_example02 \u5728CouchDB\u4e0b\u6267\u884c\u4e0a\u8fb9\u7684chaincode\u64cd\u4f5c\uff0c\u4f46\u662f\u4e3a\u4e86\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u529f\u80fd\uff0cchaincode\u6570\u636e\u4e00\u5b9a\u8981\u4ee5JSON\u683c\u5f0f\u5b58\u50a8\uff08\u4f8b\u5982 fabric/examples/chaincode/go/marbles02 \uff09\u3002  \u4f7f\u7528 \u624b\u52a8\u6267\u884c\u4ea4\u6613 \u8fd9\u4e00\u8282\u4e2d\u7684\u6b65\u9aa4install\u3001instantiate\u3001invoke\u548cquery  marbles02 \uff0c\u6267\u884c\u5b8c Join channel \u8fd9\u6b65\u540e\u4f7f\u7528\u4e0b\u8fb9\u7684\u547d\u4ee4\u64cd\u4f5c marbles02 \uff1a    \u5728 PEER0 \u4e0a\u5b89\u88c5\u5e76\u5b9e\u4f8b\u5316chaincode  peer chaincode install -o orderer0:7050 -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02 -c '{\"Args\":[\"init\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"    \u521b\u5efa\u4e00\u4e9bmarble\u5e76\u79fb\u52a8\u5b83\u4eec  peer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble1\",\"blue\",\"35\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble2\",\"red\",\"50\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble3\",\"blue\",\"70\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarble\",\"marble2\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarblesBasedOnColor\",\"blue\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"delete\",\"marble1\"]}'    \u5982\u679c\u505a\u4e86CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7web\u754c\u9762\u67e5\u770b\u6570\u636e\uff0c\u53ef\u4ee5\u770b\u5230\u540d\u4e3a mychannel \u7684\u6570\u636e\u5e93\u53ca\u5176\u6587\u6863    \u5982\u679c\u4f7f\u7528\u7684\u662fvagrant\u73af\u5883  http://localhost:15984/_utils\n* \u5982\u679c\u4e0d\u662fvagrant\u73af\u5883\uff0c\u4f7f\u7528CouchDB\u5bb9\u5668\u6307\u5b9a\u7684\u7aef\u53e3\n\nhttp://localhost:5984/_utils   \u53ef\u6709\u89c4\u5f8b\u7684\u67e5\u8be2chaincode\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6 marble2 \uff09   peer chaincode query -C mychannel -n marbles -c  { Args :[ readMarble , marble2 ]}    \u53ef\u4ee5\u770b\u5230 marble2 \u7684\u8be6\u7ec6\u4fe1\u606f\uff1a  Query Result: {\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}  \u83b7\u53d6 marble1 \u7684\u5386\u53f2\uff1a  peer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"getHistoryForMarble\",\"marble1\"]}'  \u53ef\u4ee5\u770b\u5230\u64cd\u4f5c\u8fc7 marble1 \u7684\u4ea4\u6613\uff1a  Query Result: [{\"TxId\":\"1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"tom\"}},{\"TxId\":\"755d55c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"jerry\"}},{\"TxId\":\"819451032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f\", \"Value\":}]  \u8fd8\u53ef\u4ee5\u6267\u884c\u590d\u6742\u67e5\u8be2\uff0c\u6bd4\u5982\u67e5\u8be2 jerry \u6240\u62e5\u6709\u7684marble\uff1a  peer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarblesByOwner\",\"jerry\"]}'  \u67e5\u8be2\u7ed3\u679c\u4e3a jerry \u6240\u62e5\u6709\u76842\u4e2amarble\u7684\u4fe1\u606f\uff1a  Query Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]  \u901a\u8fc7 owner \u5b57\u6bb5\u7b49\u4e8e jerry \u67e5\u8be2\uff1a  peer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarbles\",\"{\\\"selector\\\":{\\\"owner\\\":\\\"jerry\\\"}}\"]}'  \u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\uff1a  Query Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]", 
            "title": "\u4f7f\u7528CouchDB"
        }, 
        {
            "location": "/getting_started/#_12", 
            "text": "\u5982\u679c\u9700\u8981\u5bf9peer\u6216CouchDB\u5bb9\u5668\u7684\u6570\u636e\u6301\u4e45\u5316\uff0c\u4e00\u79cd\u9009\u62e9\u662f\u5c06\u5bb9\u5668\u7684\u76f8\u5173\u76ee\u5f55\u6302\u5728\u5230docker\u4e3b\u673a\u3002\u4f8b\u5982\uff0c\u5c06\u4e0b\u9762\u4e24\u884c\u5185\u5bb9\u653e\u5230 docker-compose.yaml \u6587\u4ef6\u4e2d\u7684\u5bf9\u5e94peer\u5904\uff1a  volumes:\n - /var/hyperledger/peer0:/var/hyperledger/production  \u5c06\u4e0b\u9762\u4e24\u884c\u653e\u5230\u5bf9\u5e94\u7684CouchDB\u5904\uff1a  volumes:\n- /var/hyperledger/couchdb0:/opt/couchdb/data", 
            "title": "\u6570\u636e\u6301\u4e45\u5316"
        }, 
        {
            "location": "/getting_started/#_13", 
            "text": "\u6bcf\u6b21\u8fd0\u884c\u540e\u8981\u6e05\u7406\u6587\u4ef6   \u5982\u679c\u51fa\u73b0docker\u9519\u8bef\uff0c\u5219\u5220\u9664\u955c\u50cf\uff0c\u4ece\u5934\u518d\u64cd\u4f5c\u4e00\u904d  make clean\nmake peer-docker orderer-docker    \u5982\u679c\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef  Error: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)  chaincode\u955c\u50cf\uff08\u5982 dev-peer0-mycc-1.0 \u6216 dev-peer1-mycc-1.0 \uff09\u53ef\u80fd\u662f\u4ee5\u524d\u8fd0\u884c\u8fc7\u7684\u3002\u5220\u9664\u5b83\u4eec\u7136\u540e\u91cd\u8bd5\u3002  docker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')    \u4f7f\u7528 down \u9009\u9879\u6e05\u7406\u7f51\u7edc  ./network_setup.sh down\nNext  Previous", 
            "title": "\u6545\u969c\u6392\u51fa"
        }, 
        {
            "location": "/protocol-spec_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\n\n\n\n\n\n\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770b\n\u8fd9\u91cc", 
            "title": "\u534f\u8bae\u89c4\u8303"
        }, 
        {
            "location": "/build_network_zh/", 
            "text": "\u539f\u6587\n  \n\n\n\u542f\u52a8\u9996\u4e2a\u7f51\u7edc(first-network)\n\n\n\u672c\u8282\u9075\u5faahyperledger\u5b98\u65b9\u6587\u6863\u201c\nBuilding Your First Network\n\nfirst-network\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\u6765\u5e2e\u52a9\u521d\u5b66\u8005\u4f53\u9a8cfabric\uff0c\u5b83\u5c31\u662f\nbyfn.sh\n\u3002\u53ef\u4ee5\u901a\u8fc7\u5e2e\u52a9\u547d\u4ee4\u770b\u770b\u5b83\u7684\u529f\u80fd\uff1a\n\n\n$ cd /opt/fabric-samples/first-network\n$ ./byfn.sh --help\n byfn.sh -m up|down|restart|generate [-c \nchannel name\n] [-t \ntimeout\n] [-d \ndelay\n] [-f \ndocker-compose-file\n] [-s \ndbtype\n]\n\n\n\n\n\u751f\u6210\u7f51\u7edc\u5de5\u4ef6\n\n\ngenerate required certificates and genesis block\nfabric\u7684\u7f51\u7edc\u548c\u901a\u9053\u5177\u6709\u7c7b\u4f3c\u7684\u542b\u4e49\u3002\u901a\u9053\u53ef\u4ee5\u89c6\u4e3a\u4e00\u79cd\u865a\u62df\u7f51\u7edc\uff0c\u591a\u4e2a\u901a\u9053\u5c31\u591a\u4e2a\u865a\u62df\u7f51\u7edc\u3002docker\u652f\u6301overlay\u7f51\u7edc\uff0c\u4e3a\u540c\u4e00\u4e2apeer\u52a0\u5165\u4e0d\u540c\u7684\u7f51\u7edc\u521b\u9020\u4e86\u5e95\u5c42\u6280\u672f\u57fa\u7840\uff08\u4ee5\u4e0a\u8ba4\u8bc6\u8fd8\u6ca1\u6709\u5f97\u5230\u786e\u8ba4\uff09\u3002\n\n\n$ ./byfn.sh -m generate\nGenerating certs and genesis block for with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\n(\u540e\u7565)\n\n\n\n\nbyfn.sh\n\u4f1a\u5728\u5c4f\u5e55\u4e0a\u6709\u5f88\u591a\u8f93\u51fa\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6587\u5b57\u4e5f\u53ef\u4ee5\u77e5\u9053\u8be5\u811a\u672c\u7684\u529f\u80fd\uff1a\n1. \u751f\u6210\u4e86Orderer\u7684\u521b\u4e16\u533a\u5757\u3002\u5728\u6392\u5e8f\u8282\u70b9\u4e0afabric\u7ef4\u62a4\u4e86\u4e00\u4e2a\u201c\u7cfb\u7edf\u8d26\u672c\u201d\uff0c\u4fdd\u5b58\u4e86\u6574\u4e2afabric\u533a\u5757\u94fe\u7f51\u7edc\u7684\u53c2\u6570\u3001\u5143\u6570\u636e\u7b49\u3002\u5bf9\u4e8e\u533a\u5757\u94fe\u6765\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5757(\u6709\u65f6\u79f00\u53f7\u533a\u5757)\u88ab\u79f0\u4e3a\u521b\u4e16\u533a\u5757(Genesis block)\u3002\u8be5\u521b\u4e16\u533a\u5757\u5bf9\u5e94\u4e86\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e00\u822c\u662f\ngenesis.block\n\u3002\n\n2. \u521b\u5efa\u4e86\u4e00\u4e2a\u901a\u9053\u3002\u751f\u6210\u4e86\u4e00\u4e2a\u53eb\nchannel.tx\n\u7684\u6587\u4ef6\u3002\n\n3. \u751f\u6210\u4e86\u7ec4\u7ec7Org1MSP\u548cOrg2MSP\u7684\u951apeer\u3002\u951apeer\u7528\u4e8e\u8de8\u7ec4\u7ec7\u7684\u901a\u4fe1\u3002  \n\n\n\u542f\u52a8\u7f51\u7edc\n\n\n$ ./byfn.sh -m up\n\uff08\u9002\u5f53\u5220\u51cf\uff09\nChannel \nmychannel\n is created successfully =====================\nPEER0 joined on the channel \nmychannel\n =====================\nPEER1 joined on the channel \nmychannel\n =====================\nPEER2 joined on the channel \nmychannel\n =====================\nPEER3 joined on the channel \nmychannel\n =====================\nAnchor peers for org \nOrg1MSP\n on \nmychannel\n is updated successfully =====================\nAnchor peers for org \nOrg2MSP\n on \nmychannel\n is updated successfully =====================\nChaincode is installed on remote peer PEER0 =====================\nChaincode is installed on remote peer PEER2 =====================\nChaincode Instantiation on PEER2 on channel 'mychannel' is successful =====================\nQuerying on PEER0 on channel 'mychannel'... =====================\nInvoke transaction on PEER0 on channel 'mychannel' is successful =====================\nChaincode is installed on remote peer PEER3 =====================\nQuerying on PEER3 on channel 'mychannel'... =====================\n========= All GOOD, BYFN execution completed ===========\n\n\n\n\n\u542f\u52a8\u540e\u5c4f\u5e55\u4ecd\u88ab\u9501\u5b9a\u4e3a\u65e5\u5fd7\u8f93\u51fa\uff0c\u53ef\u4ee5\u6253\u5f00\u53e6\u5916\u7684\u7ec8\u7aef\u7a97\u53e3\u8fdb\u884c\u540e\u7eed\u7684\u64cd\u4f5c\u3002\u5982\uff0c\u67e5\u770b\u5bb9\u5668\u6e05\u5355\uff1a\n\n\n$ docker ps\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u6709\uff1a\n1. cli(fabric-tools)\uff0c\u662ffabric\u7684\u547d\u4ee4\u884c\u5de5\u5177\n\n2. peer0.org1.example.com\u7b49(fabric-peer)\uff0c\u662fpeer\u8282\u70b9\u7684\u8fdb\u7a0b\u5bb9\u5668\n\n3. orderer.example.com(fabric-orderer)\uff0c\u662forderer\u8282\u70b9\u7684\u8fdb\u7a0b\u5bb9\u5668\n\n4. dev-peer0.org1.example.com-mycc-1.0-xxxx\uff0c \u662f\u94fe\u7801\u5bb9\u5668\n\u5728\u5176\u4ed6\u7684fabric\u73af\u5883\u4e2d(\u5982\u751f\u4ea7\u73af\u5883\u4e0b)\uff0c\u8fd8\u53ef\u80fd\u770b\u5230ca-server\u7684\u5bb9\u5668\u3001couchdb\u7684\u5bb9\u5668\u7b49\u3002  \n\n\n\u505c\u6b62\u7f51\u7edc\n\n\n$ ./byfn.sh -m down\n$ docker ps\n\n\n\n\n\u7f51\u7edc\u505c\u6b62\u540e\uff0c\u901a\u8fc7docker ps\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u6240\u6709\u7684\u5bb9\u5668\u90fd\u6d88\u5931\u4e86\u3002\n\n\n\u5bc6\u94a5\u751f\u6210\u5668(Crypto Generator)\n\n\n\u6211\u4eec\u7528\ncryptogen\n\u5de5\u5177\u4e3a\u5404\u79cd\u7684\u7f51\u7edc\u5b9e\u4f53\u751f\u6210\u5bc6\u7801\u5b66\u6587\u4ef6(x509\u8bc1\u4e66\u548c\u7b7e\u540d\u5bc6\u94a5)\u3002\u8fd9\u4e9b\u8bc1\u4e66\u8868\u8fbe\u8eab\u4efd\uff0c\u5bf9\u5b9e\u4f53\u95f4\u901a\u4fe1\u548c\u4e8b\u52a1\u8ba4\u8bc1\u8fdb\u884c\u7b7e\u540d\u548c\u9a8c\u8bc1\u3002  \n\n\n\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\n\n\nCryptogen\u7684\u914d\u7f6e\u6587\u4ef6\u662f\ncrypto-config.yaml\n\uff0c\u8be5\u6587\u4ef6\u5305\u62ec\u7f51\u7edc\u62d3\u6251\uff0c\u5141\u8bb8\u6211\u4eec\u4e3a\u7ec4\u7ec7\u4ee5\u53ca\u5c5e\u4e8e\u7ec4\u7ec7\u7684\u7ec4\u4ef6\u751f\u6210\u4e00\u7cfb\u5217\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u6267\u884c\u793a\u8303\uff1a\n\n\n$ cryptogen generate --config=./crypto-config.yaml\n\n\n\n\n\u8fd0\u884c\u540e\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\ncrypto-config\n\u76ee\u5f55\uff0c\u91cc\u9762\u6709\u5f88\u591a\u5bc6\u7801\u5b66\u6587\u4ef6\u3002\u5728\u751f\u6210\u7684\u6587\u4ef6\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u4f1a\u5206\u914d\u4e00\u4e2a\u6839\u8bc1\u4e66(\nca-cert\n)\uff0c\u8be5\u8bc1\u4e66\u7ed1\u5b9a\u7279\u6b8a\u7ec4\u4ef6(peer\u548corderer)\u5230\u7ec4\u7ec7\u3002\u5047\u5b9a\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684CA\u8bc1\u4e66\uff0c\u6211\u4eec\u6a21\u4eff\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u7f51\u7edc\uff0c\u5176\u4e2d\u6bcf\u4e2a\n\u6210\u5458\n\u62e5\u6709\u81ea\u5df1\u7684CA\u3002\u5728Hyperledger Fabric\u4e2d\uff0c\u5b9e\u4f53\u4f7f\u7528\u81ea\u5df1\u7684\u79c1\u94a5(\nkeystore\n)\u5bf9\u4e8b\u52a1\u548c\u901a\u4fe1\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u7528\u5bf9\u65b9\u7684\u516c\u94a5(\nsigncerts\n)\u9a8c\u8bc1\u7b7e\u540d\u3002\n\n\u914d\u7f6e\u6587\u4ef6\u4e2d\nTemplate\n\u6709\u4e2a\ncount\n\u53d8\u91cf\uff0c\u6211\u4eec\u7528\u5b83\u6765\u6307\u5b9a\u6bcf\u4e2a\u7ec4\u7ec7\u4e0b\u7684peer\u6570\u91cf\uff1b\u5728\u6211\u4eec\u793a\u4f8b\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u4e0b\u6709\u4e24\u4e2apeer\u3002\nUsers\n\u4e0b\u4e5f\u6709\ncount\n\u53d8\u91cf\uff0c\u5b83\u8868\u793a\u521b\u5efa\u7684\u7528\u6237\u6570\u91cf\u3002\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n  - Name: Org2\n    Domain: org2.example.com\n    Template:\n      Count: 2\n    Users:\n      Count: 1\n\n\n\n\n\u6211\u4eec\u5728\u672c\u6587\u4e0d\u4f1a\u8be6\u8ff0\nX509\u8bc1\u4e66\u548cPKI\n\u3002\n\n\u5728\ncrypto-config.yaml\n\u6587\u4ef6\u4e2d\uff0c\u6ce8\u610f\nOrdererOrgs\n\u4e4b\u4e0b\u7684\u201cName\u201d, \u201cDomain\u201d and \u201cSpecs\u201d\u53c2\u6570\u3002\u7f51\u7edc\u5b9e\u4f53\u7684\u547d\u540d\u7ea6\u5b9a\u662f\uff1a\n{{.Hostname}}.{{.Domain}}\n\u3002\u4f8b\u5982\uff0c\u6392\u5e8f\u8282\u70b9\u7684\u540d\u79f0\u662f\norderer.example.com\n\uff0c\u8fd9\u5173\u8054\u4e86\u4e00\u4e2aMSP ID \nOrderer\n\uff0c\u5173\u4e8eMSP\u7684\u66f4\u591a\u7ec6\u8282\u53c2\u8003\n\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005(MSP)\n\u6587\u6863\u3002\n\n\u5728\ncryptogen\n\u751f\u6210\u7684\u52a0\u5bc6\u6750\u6599\u4e2d\u6709\u7ba1\u7406\u5458\u7684\uff0c\u8fd9\u91cc\u6709\u7bc7\u6587\u7ae0\n\u5bfb\u627e\u7ba1\u7406\u5458\u7684\u8bc1\u4e66\u548c\u79c1\u94a5\n\uff0c\u4e13\u95e8\u7814\u7a76\u4e86\ncryptogen\n\u751f\u6210\u7684\u7ba1\u7406\u5458\u7684\u52a0\u5bc6\u6750\u6599\u3002  \n\n\n\u914d\u7f6e\u4e8b\u52a1\u751f\u6210\u5668\n\n\n\u5de5\u5177\nconfigtxgen\n\u7528\u4e8e\u751f\u6210\u56db\u4e2a\u914d\u7f6e\u5de5\u4ef6\uff1a\n- \u6392\u5e8f\u5668(orderer)\ngenesis block\n\n- \u901a\u9053\nconfiguration transaction\n\n- \u4e24\u4e2a\nanchor peer transactions\n\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u751f\u6210\u4e00\u4e2a\n\n\u5173\u4e8e\nconfigtxgen\n\u66f4\u591a\u7ec6\u8282\u53c2\u8003\nChannel Configuration (configtxgen)\n\u3002  \n\n\n\u751f\u6210\u7684\u56db\u4e2a\u5de5\u4ef6\u4e2d\u7684\ngenesis block\n\u662f\u6392\u5e8f\u670d\u52a1\u7684\n\u521b\u4e16\u533a\u5757\n\u3002\n\u901a\u9053\n\u7684\nconfiguration transaction\n\u6587\u4ef6\u5728\u901a\u9053\u521b\u5efa\u65f6\u88ab\u5e7f\u64ad\u5230orderer\u3002\u81f3\u4e8e\nanchor peer transactions\n\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b9a\u4e49\u7ec4\u7ec7\u5728\u8fd9\u4e2a\u901a\u9053\u7684\n\u951a\u70b9peer\n\u3002  \n\n\n\u5de5\u4f5c\u539f\u7406\n\n\nConfigtxgen\u4f1a\u6839\u636e\u6587\u4ef6\nconfigtx.yaml\n\u5b9a\u4e49\u7684\u914d\u7f6e\u8fd0\u884c\uff0c\u6587\u4ef6\u5305\u542b\u4e86\u793a\u8303\u7f51\u7edc\u7684\u5b9a\u4e49\u3002\u5176\u4e2d\u6709\u4e09\u4e2a\u6210\u5458\uff1a\u4e00\u4e2a\u6392\u5e8f\u5668\u7ec4\u7ec7(\nOrdererOrg\n)\u548c\u4e24\u4e2aPeer\u7ec4\u7ec7(\nOrg1\n\u548c\nOrg2\n)\uff0c\u6bcf\u4e2aPeer\u7ec4\u7ec7\u7ba1\u7406\u548c\u7ef4\u62a4\u4e86\u4e24\u4e2apeer\u8282\u70b9\u3002\u8fd9\u4e2a\u6587\u4ef6\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8054\u76df(\nSampleConsortium\n)\uff0c\u8054\u76df\u5305\u542b\u4e86\u4e24\u4e2apeer\u7ec4\u7ec7\u3002\u7279\u522b\u9700\u8981\u6ce8\u610f\u6587\u4ef6\u5f00\u5934\u7684\u201cProfiles\u201d\u5c0f\u8282\u3002\u4f60\u5e94\u8be5\u6ce8\u610f\u5230\u4e86\u5b83\u6709\u4e24\u4e2a\u552f\u4e00\u7684\u5934\u3002\u4e00\u4e2a\u662f\u6392\u5e8f\u5668\u521b\u4e16\u533a\u5757(\nTwoOrgsOrdererGenesis\n)\uff0c\u53e6\u4e00\u4e2a\u662f\u901a\u9053(\nTwoOrgsChannel\n)\u3002  \n\n\n\u8fd9\u4e9b\u5934\u5f88\u91cd\u8981\uff0c\u5f53\u751f\u6210\u5de5\u4ef6\u65f6\uff0c\u5b83\u4eec\u5c06\u4f5c\u4e3a\u53c2\u6570\u53d1\u9001\u3002\n\n\n\u6ce8\u91ca\uff1a\u6211\u4eec\u7684\nSampleConsortium\n\u8054\u76df\u5b9a\u4e49\u5728\u7cfb\u7edf\u7ea7profile\uff0c\u7136\u540e\u88ab\u901a\u9053\u96c6profile\u5f15\u7528\u3002\u901a\u9053\u5c06\u5b58\u5728\u4e8e\u6574\u4e2a\u8054\u76df\u8303\u56f4\u3002\n  \n\n\n\u8fd9\u4e2a\u6587\u4ef6\u8fd8\u5305\u542b\u4e86\u4e24\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u9644\u52a0\u5185\u5bb9\u3002\u9996\u5148\uff0c\u4e3a\u6bcf\u4e2apeer\u7ec4\u7ec7(\npeer0.org1.example.com\n\u548c\npeer0.org2.example.com\n)\u5b9a\u4e49\u4e86\u951a\u70b9peer\u3002\u5176\u6b21\uff0c\u5b9a\u4e49\u4e86\u6bcf\u4e2a\u6210\u5458\u7684MSP\u76ee\u5f55\u5730\u5740\uff0c\u8fd9\u8ba9\u6211\u4eec\u5728\u6392\u5e8f\u5668\u521b\u4e16\u533a\u5757\u4e2d\u4fdd\u5b58\u4e86\u6bcf\u4e2a\u7ec4\u7ec7\u7684\u6839\u8bc1\u4e66\u3002\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u6982\u5ff5\u3002\u73b0\u5728\u4e0e\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u7684\u4efb\u4f55\u7f51\u7edc\u5b9e\u4f53\u53ef\u4ee5\u88ab\u9a8c\u8bc1\u5176\u6570\u5b57\u7b7e\u540d\u4e86\u3002  \n\n\n\u8fd0\u884c\u5de5\u5177\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\nconfigtxgen\n\u548c\ncryptogen\n\u5de5\u5177\u624b\u5de5\u751f\u6210\u8bc1\u4e66/\u5bc6\u94a5\u548c\u4e0d\u540c\u7684\u914d\u7f6e\u5de5\u4ef6\u3002\u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4fee\u6539\nbyfn.sh\n\u811a\u672c\u6765\u8fbe\u5230\u4f60\u7684\u76ee\u7684\u3002  \n\n\n\u624b\u5de5\u751f\u6210\u5de5\u4ef6\n\n\n\u4f60\u53ef\u4ee5\u53c2\u8003byfn.sh\u811a\u672c\u4e2d\u7684generateCerts\u51fd\u6570\uff0c\u91cc\u9762\u7684\u547d\u4ee4\u53ef\u4ee5\u6839\u636e\ncrypto-config.yaml\n\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7f51\u7edc\u914d\u7f6e\u751f\u6210\u8bc1\u4e66\u3002  \n\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8fd0\u884c\ncryptogen\n\u5de5\u5177\u3002\u5b83\u4f4d\u4e8e\nbin\n\u76ee\u5f55\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u4e86\u6267\u884c\u5b83\uff08\u6216\u8005\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u7684PATH\uff09:\n\n\n$ ../bin/cryptogen generate --config=./crypto-config.yaml\norg1.example.com\norg2.example.com\n\n\n\n\n\u8bc1\u4e66\u548c\u5bc6\u94a5(\u5373MSP\u6587\u4e66)\u4f1a\u88ab\u8f93\u51fa\u5230\ncrypto-config\n\u76ee\u5f55\uff08\u4f4d\u4e8e\nfirst-network\n\u76ee\u5f55\u4e4b\u4e0b\uff09\u3002\n\n\u751f\u6210\u7684\u52a0\u5bc6\u6750\u6599\u4e3b\u8981\u662f\u7ba1\u7406\u5458\u7684\u8eab\u4efd\u8bc1\u660e\u6587\u4ef6\uff0c\u5176\u4e2d\uff1a\n- \u7cfb\u7edf\u7ba1\u7406\u5458:\ncrypto-config/ordererOrganizations\n\u76ee\u5f55\u4e0b\n- \u7ec4\u7ec7\u7ba1\u7406\u5458\uff1aorg1\u7ec4\u7ec7\u7ba1\u7406\u5458\u4f4d\u4e8e\ncrypto-config/peerOrganizations/org1.example.com\n\u76ee\u5f55\u4e0b\n- peer\u7ba1\u7406\u5458\uff1aorg1\u7684peer0\u7ba1\u7406\u5458\u4f4d\u4e8e\ncrypto-config/peerOrganizations/org1.example.com/peerspeer0.org1.example.com\n\u76ee\u5f55\u4e0b\n\n\n\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9\nconfigtxgen\n\u5de5\u5177\u5230\u54ea\u91cc\u53bb\u5bfb\u627e\nconfigtx.yaml\n\u6587\u4ef6\u3002\u9700\u8981\u901a\u8fc7\u4e0b\u9762\u7684\u73af\u5883\u53d8\u91cf\u544a\u8bc9\u5b83($PWD\u8868\u793a\u5f53\u524d\u76ee\u5f55)\uff1a\n\n\n$ export FABRIC_CFG_PATH=$PWD\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u8c03\u7528\nconfigtxgen\n\u5de5\u5177\u53bb\u751f\u6210\u6392\u5e8f\u5668\u521b\u4e16\u533a\u5757\uff1a\n\n\n$ ../bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\n\n\n\n\n\u9700\u8981\u5148\u624b\u5de5\u521b\u5efa\u76ee\u5f55\nchannel-artifacts\n\uff0c\u5426\u5219\u4e0a\u8ff0\u547d\u4ee4\u4f1a\u51fa\u9519\u3002  \n\n\n\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\n\n\n\uff08\u5728Fabric\u4e2d\u901a\u9053\u914d\u7f6e\u4fe1\u606f\u4e5f\u4fdd\u5b58\u5728\u533a\u5757\u94fe\u4e2d\uff0c\u800c\u533a\u5757\u94fe\u7684\u5185\u5bb9\u662f\u9760\u4e8b\u52a1\u5199\u5165\u7684\uff0c\u6240\u4ee5\u8981\u65b0\u5efa\u901a\u9053\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4e8b\u52a1\u3002\uff09\n\n\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u901a\u9053\u4e8b\u52a1\u5de5\u4ef6\u3002\u786e\u4fdd\u66ff\u6362\n$CHANNEL_NAME\n\u6216\u8bbe\u7f6e\nCHANNEL_NAME\n\u4e3a\u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u6267\u884c\u4e0b\u5217\u6307\u4ee4\uff1a\n\n\n$ export CHANNEL_NAME=mychannel  \n$ ../bin/configtxgen -profile TwoOrgsChannel \\\n -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME\n\n\n\n\n\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u5c06\u5728\u521a\u521a\u521b\u5efa\u7684\u901a\u9053\u4e0a\u5b9a\u4e49Org1\u7684\u951a\u70b9peer\u3002\u540c\u6837\uff0c\u786e\u4fdd\u8986\u76d6\n$CHANNEL_NAME\n\u6216\u8bbe\u7f6e\u4e3a\u4e0b\u9762\u7684\u547d\u4ee4\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u3002\n\n\n$ ../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate \\\n./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP\n2017-12-07 08:59:42.756 UTC [common/tools/configtxgen] main -\n INFO 001 Loading configuration\n2017-12-07 08:59:42.762 UTC [common/tools/configtxgen] doOutputAnchorPeersUpdate -\n INFO 002 Generating anchor peer update\n2017-12-07 08:59:42.762 UTC [common/tools/configtxgen] doOutputAnchorPeersUpdate -\n INFO 003 Writing anchor peer update\n\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5728\u540c\u4e00\u4e2a\u901a\u9053\u4e2d\u5b9a\u4e49Org2\u7684\u951a\u70b9peer\uff1a\n\n\n$ ../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate \\\n./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP\n\n\n\n\n\u603b\u7ed3\u4e00\u4e0b\u672c\u8282\uff0c\u6267\u884c\u4e86\u4e0a\u8ff0\u4e00\u7cfb\u5217\u547d\u4ee4\u540e\uff0c\ncrypto-config\n\u76ee\u5f55\u751f\u6210\u4e86\u4e00\u4e9b\u8bc1\u4e66\u548c\u5bc6\u94a5\uff1b\nchannel-artifacts\n\u4e0b\u751f\u6210\u4e86\u4e00\u4e2a\u521b\u4e16\u533a\u5757\u6587\u4ef6\u548c3\u4e2a\u4e8b\u52a1\u6587\u4ef6\uff1a\n\n\n$ ls ./channel-artifacts\nchannel.tx  genesis.block  Org1MSPanchors.tx  Org2MSPanchors.tx\n\n\n\n\n\uff08\u6267\u884c\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u5c31\u76f8\u5f53\u4e8e\u6267\u884c\u4e86\nbyfn.sh -m generate\n\uff09  \n\n\n\u542f\u52a8\u7f51\u7edc\n\n\n\u6211\u4eec\u5c06\u4f7f\u7528docker-compose\u811a\u672c\u542f\u52a8\u6211\u4eec\u7684\u7f51\u7edc\u3002docker-compose\u4f1a\u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u4e0b\u8f7d\u7684docker\u955c\u50cf\uff0c\u7528\u6211\u4eec\u4e4b\u524d\u751f\u6210\ngenesis.block\n(\u521b\u4e16\u533a\u5757)\u5f15\u5bfc\u6392\u5e8f\u5668(orderer)\u3002\n\n\u5728\u542f\u52a8\u7f51\u7edc\u524d\uff0c\u6253\u5f00\ndocker-compose-cli.yaml\n\u6587\u4ef6\uff0c\u6ce8\u91ca\u6389CLI\u5bb9\u5668\u7684\nscript.sh\n\u3002\u8ba9\u4f60\u7684\ndocker-compose-cli.yaml\n\u6587\u4ef6\u53d8\u6210\u8fd9\u6837\uff1a\n\n\nworking_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'\nvolumes\n\n\n\n\n\u5982\u679c\u4e0d\u6ce8\u91ca\u6389\u8fd9\u4e00\u6837\uff0c\u811a\u672c\u5c31\u4f1a\u5229\u7528CLI\u547d\u4ee4\u628a\u7f51\u7edc\u542f\u52a8\u8d77\u6765\u4e86\u3002\u7136\u800c\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u624b\u5de5\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u4ee5\u4fbf\u89e3\u91ca\u8fd9\u4e9b\u8c03\u7528\u7684\u8bed\u6cd5\u548c\u529f\u80fd\u3002\n\nCLI\u9ed8\u8ba4\u8d85\u65f6\u662f10000\u79d2\u3002\u5982\u679c\u4f60\u9700\u8981\u5bb9\u5668\u5b58\u5728\u7684\u66f4\u4e45\uff0c\u9700\u8981\u901a\u8fc7\u8bbe\u7f6e\nTIMEOUT\n\u73af\u5883\u53d8\u91cf\u8986\u76d6\u8fd9\u4e00\u9ed8\u8ba4\u503c\u3002  \n\n\n\u542f\u52a8\u7f51\u7edc(\u786e\u4fdd\u7528\u547d\u4ee4\ndocker ps -a\n\u770b\u4e0d\u5230\u4efb\u4f55\u5bb9\u5668)\uff1a\n\n\n$ TIMEOUT=10000 CHANNEL_NAME=$CHANNEL_NAME docker-compose -f docker-compose-cli.yaml up -d\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u770b\u5230\u7f51\u7edc\u7684\u5b9e\u65f6\u65e5\u5fd7\uff0c\u5c31\u4e0d\u8981\u52a0\u4e0a\n-d\n\u6807\u5fd7\u3002\u5982\u679c\u4e0d\u52a0\n-d\n\u8868\u793a\uff0c\u4f60\u9700\u8981\u53e6\u5916\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e86\u6267\u884cCLI\u3002  \n\n\n\u73af\u5883\u53d8\u91cf\n\n\n\u4e3a\u4e86\u901a\u8fc7CLI\u547d\u4ee4\u8ba9\npeer0.org1.example.com\n\u5de5\u4f5c\u8d77\u6765\uff0c\u6211\u4eec\u9700\u8981\u51c6\u59074\u4e2a\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u4e9b\u53d8\u91cf\u4e4b\u524d\u88ab\u201c\u70e7\u5165\u201d\u4e86\npeer0.org1.example.com\nCLI\u5bb9\u5668\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u8f93\u5165\u5b83\u4eec\u5c31\u80fd\u64cd\u4f5c\u3002\u4f46\u5982\u679c\u4f60\u9700\u8981\u8c03\u7528\u5176\u4ed6peer\u6216orderer\uff0c\u5219\u9700\u8981\u6b63\u786e\u7684\u8bbe\u7f6e\u8fd9\u4e9b\u53d8\u91cf\u503c\u3002\u67e5\u770b\ndocker-compose-base.yaml\n\u6587\u4ef6\u53ef\u4ee5\u770b\u5230\u8fd9\u56db\u4e2a\u53d8\u91cf\u7684\u503c\uff1a\n\n\n# Environment variables for PEER0\n\nCORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nCORE_PEER_ADDRESS=peer0.org1.example.com:7051\nCORE_PEER_LOCALMSPID=\nOrg1MSP\n\nCORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\n\n\n\n\n\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053\n\n\n\u56de\u60f3\u4e00\u4e0b\u4e0a\u9762\u6211\u4eec\u5728\n\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\n\u4e00\u8282\u4e2d\u4f7f\u7528\nconfigtxgen\n\u5de5\u5177\u521b\u5efa\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u3002\u4f60\u53ef\u4ee5\u91cd\u590d\u90a3\u4e2a\u8fc7\u7a0b\u6765\u521b\u5efa\u53e6\u5916\u7684\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\uff0c\u4f7f\u7528\u76f8\u540c\u6216\u4e0d\u540c\u7684profile\u53c2\u6570(\u5728\nconfigtx.yaml\n\u4e2d\u5b9a\u4e49)\u4f20\u9012\u7ed9\nconfigtxgen\n\u3002\u4f60\u53ef\u4ee5\u91cd\u590d\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u7528\u6765\u5728\u7f51\u7edc\u4e2d\u521b\u5efa\u5176\u4ed6\u901a\u9053\u3002\n\n\u7528\u4e0b\u5217\u547d\u4ee4\u8fdb\u5165CLI\u5bb9\u5668\uff1a\n\n\n$ docker exec -it cli bash\nroot@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#\n\n\n\n\n\u9996\u5148\u8fdb\u5165\u7684\u662f\u5728\ndocker-compose.ymal\n\u4e2d\u5b9a\u4e49\u7684\nworking_dir\n\u76ee\u5f55\u3002\u4e0b\u9762\u7528\n$$\n\u8868\u793a\u5728\u5bb9\u5668\u5185\u7684\u547d\u4ee4\u884c\u64cd\u4f5c\u3002\n\n\u5728\u4e4b\u524d\n\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\n\u4e00\u8282\u4e2d\u6211\u4eec\u521b\u5efa\u4e86\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u5de5\u4ef6(\nchannel.txt\n)\uff0c\u4e0b\u9762\u6211\u4eec\u628a\u5b83\u4f5c\u4e3a\u521b\u5efa\u901a\u9053\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u53d1\u7ed9orderer\u3002\n\n\u6211\u4eec\u7528\n-c\n\u6807\u5fd7\u6307\u5b9a\u901a\u9053\u540d\u79f0\uff0c\u7528\n-f\n\u6807\u5fd7\u6307\u5b9a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u3002\u5728\u8fd9\u91cc\u5b83\u53eb\nchannel.txt\n\uff0c\u7136\u800c\u4f60\u53ef\u4ee5\u7528\u5176\u4ed6\u540d\u5b57\u6765\u6302\u8f7d\u4f60\u81ea\u5df1\u7684\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u3002\u6211\u4eec\u53c8\u4e00\u6b21\u5728CLI\u5bb9\u5668\u5185\u8bbe\u7f6e\nCHANNEL_NAME\n\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u7528\u663e\u5f0f\u5730\u4f20\u9012\u8fd9\u4e2a\u53c2\u6570\u3002  \n\n\n$$ export CHANNEL_NAME=mychannel\n$$ export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem\n$$ peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f \\\n./channel-artifacts/channel.tx --tls --cafile $ORDERER_CA\n\n\n\n\n\u6ce8\u610f\u6b64\u547d\u4ee4\u884c\u4e2d\u7684\n--cafile\n\u53c2\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411orderer\u6839CA\u8bc1\u4e66\u7684\u672c\u5730\u8def\u5f84\uff0c\u7528\u4e8e\u9a8c\u8bc1TLS\u63e1\u624b\u3002\n\n\u547d\u4ee4\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521b\u4e16\u533a\u5757(\nchannel-ID.block\n)\uff0c\u6211\u4eec\u7528\u5b83\u52a0\u5165\u901a\u9053\u3002\u5b83\u91cc\u9762\u5305\u542b\u4e86\u5728\nchannel.tx\n\u4e2d\u5b9a\u4e49\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u6539\u53d8\u8fc7\u901a\u9053\u540d\u79f0\uff0c\u8be5\u547d\u4ee4\u5c06\u8fd4\u56de\u4e00\u4e2a\u53eb\nmychannel.block\n\u7684proto\u3002\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\nmychannel.block\n\u6587\u4ef6\u3002\n\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u628a\npeer0.org1.example.com\n\u8282\u70b9\u52a0\u5165\u901a\u9053\uff1a\n\n\n$$ peer channel join -b mychannel.block\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u5c06\u5176\u4ed6peer\u52a0\u5165\u901a\u9053\uff0c\u65b9\u6cd5\u662f\u4fee\u6539\u4e4b\u524d\u5728\n\u73af\u5883\u53d8\u91cf\n\u4e00\u8282\u4e2d\u63d0\u5230\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u4f60\u7528\nenv\n\u547d\u4ee4\u67e5\u770b\u4e00\u4e0b\u73af\u5883\u53d8\u91cf\uff0c\u4f1a\u53d1\u73b0\u90a34\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u503c\u90fd\u662f\npeer0.org1.example.com\n\u5bf9\u5e94\u7684\u3002\n\n\u6211\u4eec\u4e0d\u5c06\u6bcf\u4e2apeer\u90fd\u52a0\u5165\u7f51\u7edc\uff0c\u800c\u662f\u5c06\npeer0.org2.example.com\n\u52a0\u5165\u7f51\u7edc\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u901a\u9053\u7684\u951a\u70b9peer\u5b9a\u4e49\u3002\u6211\u4eec\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5c06\u9884\u5148\u70e7\u5236\u5728CLI\u5bb9\u5668\u4e2d\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u66ff\u6362\u6389:\n\n\nCORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID=\nOrg2MSP\n CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel join -b mychannel.block\n\n\n\n\n\u66f4\u65b0\u951a\u70b9peer\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u662f\u901a\u9053\u53d8\u66f4\uff0c\u4ed6\u4eec\u4f1a\u5e7f\u64ad\u5230\u901a\u9053\u5b9a\u4e49\u3002\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u4f1a\u5728\u901a\u9053\u521b\u59cb\u533a\u5757\u7684\u4e0a\u9762\u8ffd\u52a0\u914d\u7f6e\u4fe1\u606f\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u6539\u53d8\u521b\u59cb\u533a\u5757\uff0c\u53ea\u662f\u5411\u94fe\u4e2d\u6dfb\u52a0\u4e86\u5b9a\u4e49\u951a\u70b9peer\u7684delta\u3002\n\n\u53d8\u66f4\u901a\u9053\u5b9a\u4e49\uff0c\u5c06\npeer0.org1.example.com\n\u5b9a\u4e49\u4e3aOrg1\u7684\u951a\u70b9peer\u3002\n\n\n$$ peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile $ORDERER_CA\n\n\n\n\n\u73b0\u5728\uff0c\u53d8\u66f4\u901a\u9053\u5b9a\u4e49\uff0c\u5c06\npeer0.org2.example.com\n\u5b9a\u4e49\u4e3aOrg2\u7684\u951a\u70b9peer\u3002\u6ce8\u610f\u547d\u4ee4\u4e2d\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u7528\u4e8e\u8986\u76d6\u9ed8\u8ba4\u7684\npeer0.org1.example.com\n\u7684\u76f8\u5173\u503c\u3002\n\n\nCORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID=\nOrg2MSP\n CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem\n\n\n\n\n\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801\n\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u7b80\u5355\u5b9e\u7528\u4e86\u4e00\u4e2a\u5df2\u6709\u94fe\u7801\u3002\u5982\u679c\u60f3\u5b66\u4e60\u94fe\u7801\u5f00\u53d1\uff0c\u8bf7\u53c2\u8003\n\u94fe\u7801\u5f00\u53d1\n\u4e00\u7ae0\u3002\n\n\u5e94\u7528\u901a\u8fc7\u94fe\u7801\u4e0e\u533a\u5757\u94fe\u8d26\u672c\u4ea4\u4e92\u3002\u6211\u4eec\u9700\u8981\u5b89\u88c5\u94fe\u7801\u5230\u90a3\u4e9b\u6267\u884c\u548c\u4e3a\u4e8b\u52a1\u80cc\u4e66\u7684peer\u4e0a\uff0c\u5e76\u5728\u901a\u9053\u4e0a\u5b9e\u4f8b\u5316\u94fe\u7801\u3002\n\n\u9996\u5148\uff0c\u5b89\u88c5Go\u8bed\u8a00\u793a\u8303\u94fe\u7801\u52304\u4e2apeer\u8282\u70b9\u7684\u67d0\u4e2a\u4e0a\u3002\u8fd9\u4e9b\u547d\u4ee4\u4f1a\u5c06\u6e90\u7801\u653e\u5230\u6307\u5b9apeer\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0a\u3002\n\n\n\u6ce8\u610f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u94fe\u7801\u540d\u79f0\u548c\u7248\u672c\uff0c\u4f60\u53ea\u80fd\u5b89\u88c5\u4e00\u4e2a\u7248\u672c\u7684\u6e90\u7801\u3002\u6e90\u7801\u4ee5\u94fe\u7801\u7684\u540d\u79f0\u548c\u7248\u672c\u53f7\u4e3a\u4e0a\u4e0b\u6587\u5b58\u5728\u4e8epeer\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u5b83\u4e0d\u5173\u6ce8\u8bed\u8a00\u3002\n  \n\n\n$$ peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/\n\n\n\n\n\u4e0b\u4e00\u6b65\u5728\u901a\u9053\u4e0a\u5b9e\u4f8b\u5316\u94fe\u7801\u3002\u8fd9\u5c06\u5728\u901a\u9053\u4e0a\u521d\u59cb\u5316\u94fe\u7801\u3001\u4e3a\u94fe\u7801\u8bbe\u7f6e\u80cc\u4e66\u7b56\u7565\u548c\u4e3a\u76ee\u6807peer\u542f\u52a8\u4e00\u4e2a\u94fe\u7801\u5bb9\u5668\u3002\u6ce8\u610f\n-P\n\u53c2\u6570\u3002\u8fd9\u662f\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u7528\u4e8e\u5bf9\u94fe\u7801\u4e8b\u52a1\u8fdb\u884c\u9a8c\u8bc1\u3002\n\n\u5728\u4e0b\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u4f60\u6ce8\u610f\u5230\u4e86\u6211\u4eec\u5c06\u7b56\u7565\u8bbe\u7f6e\u4e3a\n-P \"OR ('Org0MSP.member','Org1MSP.member')\"\n\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u4eceOrg1\u6216Org2\u7684peer\u4e0a\u83b7\u5f97\u4e00\u4e2a\u80cc\u4e66\u3002\u5982\u679c\u628a\nOR\n\u6539\u6210\nAND\n\uff0c\u5219\u8868\u793a\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u80cc\u4e66\u3002  \n\n\n$$ peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c '{\nArgs\n:[\ninit\n,\na\n, \n100\n, \nb\n,\n200\n]}' -P \nOR ('Org1MSP.member','Org2MSP.member')\n\n\n\n\n\n\u5173\u4e8e\u80cc\u4e66\u7b56\u7565\u7684\u7ec6\u8282\u53ef\u4ee5\u770b\u5230\n\u80cc\u4e66\u7b56\u7565\n\u3002\n\n\u5982\u679c\u4f60\u60f3\u66f4\u591a\u7684peer\u4e0e\u8d26\u672c\u4ea4\u4e92\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u4eec\u52a0\u5165\u901a\u9053\uff0c\u5b89\u88c5\u540c\u6837\u540d\u5b57\u3001\u7248\u672c\u548c\u8bed\u8a00\u7684\u94fe\u7801\u5230\u76f8\u5e94peer\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4e00\u4e2a\u94fe\u7801\u5bb9\u5668\u88ab\u5728peer\u4e0a\u542f\u52a8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4e0e\u76f8\u5e94\u94fe\u7801\u4ea4\u4e92\u4e86\u3002\u9700\u8981\u77e5\u9053\u7684\u662f\uff0cNode.js\u955c\u50cf\u7684\u7f16\u8bd1\u76f8\u5bf9\u8f83\u6162\u3002\n\n\u5f53\u94fe\u7801\u5728\u901a\u9053\u4e0a\u88ab\u5b9e\u4f8b\u5316\u540e\uff0c\u6211\u4eec\u53ea\u9700\u4f20\u5165\u901a\u9053id\u548c\u94fe\u7801\u540d\u79f0\u6765\u8bbf\u95ee\u5b83\u3002  \n\n\n\u67e5\u8be2\n\n\n\u8ba9\u6211\u4eec\u67e5\u8be2\u4e00\u4e0b\u952e\na\n\u7684\u503c\uff0c\u4ee5\u4fbf\u786e\u8ba4\u94fe\u7801\u5df2\u7ecf\u5b9e\u4f8b\u5316\u548c\u72b6\u6001\u6570\u636e\u5e93\u5df2\u7ecf\u586b\u5145\u3002\u67e5\u8be2\u8bed\u53e5\u5982\u4e0b\uff1a\n\n\n$$ peer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}'\nQuery Result: 100    (\u5176\u5b83\u4fe1\u606f\u7701\u7565)\n\n\n\n\n\u8c03\u7528(Inoke)\n\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u628a\na\n\u768410\u4e2a\u7ed9\nb\n\uff08\u5373a\u51cf\u5c1110\uff0cb\u589e\u52a010\uff09\u3002\u8fd9\u4e2a\u4e8b\u52a1\u4f1a\u5207\u5272\u4e00\u4e2a\u65b0\u533a\u5757\u5e76\u66f4\u65b0\u72b6\u6001\u6570\u636e\u5e93\u3002\u8c03\u7528\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a\n\n\n$$ peer chaincode invoke -o orderer.example.com:7050  --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\ninvoke\n,\na\n,\nb\n,\n10\n]}'\n\n\n\n\n\u7136\u540e\u5206\u522b\u67e5\u8be2\u4e00\u4e0b\na\n\u548c\nb\n\u7684\u503c\uff1a\n\n\n$$ peer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}'\nQuery Result: 90    (\u5176\u5b83\u4fe1\u606f\u7701\u7565)\n$$ peer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\nb\n]}'\nQuery Result: 210    (\u5176\u5b83\u4fe1\u606f\u7701\u7565)\n\n\n\n\n\u8fd9\u6f14\u793a\u4e86\u4ec0\u4e48\uff1f\n\n\n\u4e3a\u4e86\u5bf9\u8d26\u672c\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0cpeer\u5fc5\u987b\u5b89\u88c5\u94fe\u7801\u3002\u6b64\u5916\uff0c\u94fe\u7801\u5bb9\u5668\u5e76\u6ca1\u6709\u542f\u52a8\uff0c\u76f4\u5230\u5bf9\u94fe\u7801\u8fdb\u884c\u521d\u59cb\u5316\u6216\u6267\u884c\u8bfb\u5199\u4e8b\u52a1(\u5982\u67e5\u8be2\na\n\u7684\u503c)\u3002\u8fd9\u4e9b\u4e8b\u52a1\u4fc3\u4f7f\u5bb9\u5668\u542f\u52a8\u3002\u800c\u4e14\uff0c\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u4f1a\u7ef4\u6301\u4e00\u4e2a\u8d26\u672c\u7684\u5b8c\u5168\u526f\u672c\uff0c\u5176\u4e2d\u5305\u62ec\u4e0d\u53ef\u4fee\u6539\u3001\u533a\u5757\u4e2d\u7684\u987a\u5e8f\u8bb0\u5f55\uff0c\u4ee5\u53ca\u72b6\u6001\u6570\u636e\u5e93(\u5176\u4e2d\u7ef4\u62a4\u4e86\u5f53\u524d\u72b6\u6001\u7684\u5feb\u7167)\u3002\u8fd9\u5305\u542b\u6ca1\u6709\u5b89\u88c5\u94fe\u7801\u7684peer\uff08\u5c31\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\npeer1.org1.example.com\npeer)\u3002 \u6700\u7ec8\uff0c\u94fe\u7801\u5728\u5b89\u88c5\u540e\u53ef\u4ee5\u8bbf\u95ee(\u5c31\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\npeer1.org2.example.com\n)\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u3002  \n\n\n\u600e\u4e48\u770b\u5230\u8fd9\u4e9b\u4e8b\u52a1\uff1f\n\n\n\u68c0\u67e5CLI docker\u5bb9\u5668\u7684\u65e5\u5fd7(\u9700\u8981\u5148\u901a\u8fc7exit\u547d\u4ee4\u5148\u9000\u51fa\u5bb9\u5668\uff0c\u8fd4\u56de\u5230\u5bbf\u4e3b\u64cd\u4f5c\u7cfb\u7edf):\n\n\n$ docker logs -f cli\n\n\n\n\n\u4f46\uff0c\u6211\u7684cli\u5bb9\u5668\u7684\u65e5\u5fd7\u662f\u7a7a\u7684\uff01\u539f\u56e0\u4e0d\u660e\n\n\n\u600e\u4e48\u770b\u5230\u94fe\u7801\u65e5\u5fd7\uff1f\n\n\n\u7528\ndocker logs\n\u547d\u4ee4\u67e5\u770b\u4e0d\u540c\u94fe\u7801\u5bb9\u5668\u7684\u65e5\u5fd7\uff0c\u6765\u5206\u522b\u67e5\u770b\u5404\u4e2a\u4e8b\u52a1\u7684\u65e5\u5fd7\u3002\u9700\u8981\u5148\u7528\ndocker ps\n\u547d\u4ee4\u627e\u5230\u94fe\u7801\u5bb9\u5668id\u3002\u4e0b\u9762\u662f\u521a\u521a\u6d4b\u8bd5\u7684\u94fe\u7801\u5bb9\u5668\u65e5\u5fd7\uff1a\n\n\ndocker logs 3daea3abfab2\nex02 Init\nAval = 100, Bval = 200\nex02 Invoke\nQuery Response:{\nName\n:\na\n,\nAmount\n:\n100\n}\nex02 Invoke\nAval = 90, Bval = 210\nex02 Invoke\nQuery Response:{\nName\n:\na\n,\nAmount\n:\n90\n}\nex02 Invoke\nQuery Response:{\nName\n:\nb\n,\nAmount\n:\n210\n}\n\n\n\n\n\u7406\u89e3docker-comopse\u62d3\u6251\n\n\nBYFN\u8303\u4f8b\u63d0\u4f9b\u4e86\u4e24\u79cd\u98ce\u683c\u7684Docker Compose\u6587\u4ef6\uff0c\u90fd\u662f\u4ece\ndocker-compose-base.yaml\n(\u4f4d\u4e8e\nbase\n\u76ee\u5f55)\u6269\u5c55\u800c\u6765\u3002\u7b2c\u4e00\u79cd\u98ce\u683c\u662f\ndocker-compose-cli.yaml\n\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2aCLI\u5bb9\u5668,\u4ee5\u53ca\u4e00\u4e2aorderer\u548c4\u4e2apeer\u3002\u6211\u4eec\u5728\u8fd9\u4e2a\u6587\u7ae0\u4e2d\u4e3b\u8981\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u3002  \n\n\n\u6ce8\u91ca\uff1a\u672c\u6587\u5269\u4f59\u90e8\u5206\u7684\u5185\u5bb9\u4e3b\u8981\u8bb2\u4e00\u4e2a\u4e3a\u4e86SDK\u8bbe\u8ba1\u7684docker-compose\u6587\u4ef6\u3002\u66f4\u591a\u7ec6\u8282\u53c2\u8003\nNode SDK\u5e93\n\u3002\n\n\n\u7b2c\u4e8c\u79cd\u98ce\u683c\u7684\u662f\ndocker-compose-e2e.yaml\n\uff0c\u8fd9\u4e2a\u7528\u4e8e\u4f7f\u7528Node.js SDK\u8fdb\u884c\u7684\u7aef\u5230\u7aef\u6d4b\u8bd5\u3002\u4e3a\u4e86\u4f7f\u7528SDK\uff0c\u5b83\u7684\u4e3b\u8981\u4e0d\u540c\u662f\u5305\u542b\u4e00\u4e2a\u8fd0\u884cfabric-ca\u670d\u52a1\u5668\u7684\u5bb9\u5668\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001REST\u8bf7\u6c42\u5230\u7ec4\u7ec7\u7684CA\uff0c\u7528\u6765\u8fdb\u884c\u7528\u6237\u7684\u767b\u8bb0(registration)\u548c\u6ce8\u518c(enrollment)\u3002\n\n\u5982\u679c\u4f60\u60f3\u4f7f\u7528\ndocker-compose-e2e.yaml\n\u800c\u4e0d\u8fd0\u884c\nbyfn.sh\n\u811a\u672c\uff0c\u9700\u8981\u8fdb\u884c4\u4e2a\u5c0f\u4fee\u6539\u3002\u6211\u4eec\u9700\u8981\u6307\u51fa\u7ec4\u7ec7CA\u7684\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u6307\u51fa\u79c1\u94a5\u5728crypto-config\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0cOrg1\u7684\u79c1\u94a5\u662f\u8def\u5f84\ncrypto-config/peerOrganizations/org1.example.com/ca/\n\u3002\u8fd9\u4e2a\u79c1\u94a5\u7684\u6587\u4ef6\u540d\u662f\u4e00\u4e2a\u4ee5\n_sk\n\u7ed3\u5c3e\u7684\u957f\u54c8\u5e0c\u503c\u3002Org2\u7684\u79c1\u94a5\u8def\u5f84\u662f\ncrypto-config/peerOrganizations/org2.example.com/ca/\n\u3002\n\n\u5728\ndocker-compose-e2e.yaml\n\u4e2d\u4e3aca0\u548cca1\u4fee\u6539\nFABRIC_CA_SERVER_TLS_KEYFILE\n\u53d8\u91cf\u3002\u4f60\u8fd8\u9700\u8981\u4fee\u6539\u542f\u52a8ca\u670d\u52a1\u5668\u7684\u547d\u4ee4\u8def\u5f84\u3002\u4f60\u9700\u8981\u4e3a\u6bcf\u4e2aCA\u5bb9\u5668\u63d0\u4f9b\u540c\u6837\u7684\u79c1\u94a5\u4e24\u6b21\u3002  \n\n\n\u4f7f\u7528CouchDB\n\n\n\u72b6\u6001\u6570\u636e\u5e93\u53ef\u4ee5\u4ece\u9ed8\u8ba4(goleveldb)\u5207\u6362\u5230CouchDB\u3002\u540c\u6837\u7684\u94fe\u7801\u51fd\u6570\u53ef\u4ee5\u7528\u4e8eCouchDB\uff0c\u7136\u800c\uff0c\u5f53\u628a\u94fe\u7801\u6570\u636e\u5efa\u6a21\u4e3aJSON\u540e\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u72b6\u6001\u6570\u636e\u5e93\u7684\u6570\u636e\u5185\u5bb9\u6267\u884c\u4e30\u5bcc\u800c\u590d\u6742\u7684\u67e5\u8be2\u3002\n\n\u4f7f\u7528CouchDB\u4ee3\u66ff\u9ed8\u8ba4\u6570\u636e\u5e93(goleveldb)\uff0c\u4e0e\u4e4b\u524d\u63cf\u8ff0\u76f8\u540c\u6b65\u9aa4\u751f\u6210\u5de5\u4ef6\uff0c\u9664\u4e86\u542f\u52a8\u7f51\u7edc\u65f6\u4f7f\u7528\ndocker-compose-couch.yaml\n\uff1a\n\n\nCHANNEL_NAME=$CHANNEL_NAME TIMEOUT=\npick_a_value\n docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml up -d\n\n\n\n\n\u4e0b\u9762\u7684\u94fe\u7801\nchaincode_example02\n\u5c06\u4f7f\u7528CouchDB\u3002  \n\n\n\u6ce8\u91ca\uff1a\u5982\u679c\u4f60\u9009\u62e9\u4e86\u5c06fabric-couchdb\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7aef\u53e3\uff0c\u8bf7\u786e\u4fdd\u7aef\u53e3\u7684\u8fdc\u7a0b\u8bbf\u95ee\u662f\u5b89\u5168\u7684\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e0b\u6620\u5c04\u7aef\u53e3\u4f7fCouchDB REST API\u53ef\u7528\uff0c\u5e76\u4f7f\u901a\u8fc7CoutchDB web\u63a5\u53e3(Fauxton)\u4f7f\u6570\u636e\u5e93\u53ef\u89c1\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u8981\u614e\u91cd\uff0c\u9700\u8981\u9650\u5236\u4ece\u5916\u90e8\u8bbf\u95eeCouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u3002\n   \n\n\n\u4f60\u53ef\u4ee5\u7528\nchaincode_example02\n\u94fe\u7801\u8bbf\u95eeCouchDB\u72b6\u6001\u6570\u636e\u5e93\uff0c\u5c31\u50cf\u524d\u9762\u8bb2\u7684\u90a3\u6837\u3002\u4f46\u4e3a\u4e86\u6267\u884cCouchDB\u7279\u6027\u7684\u67e5\u8be2\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6570\u636e\u6a21\u578b\u4e3aJSON\u7684\u94fe\u7801(\u5982\nmarbles02\n)\u3002\u4f60\u53ef\u4ee5\u5728\nfabric/examples/chaincode/go\n\u76ee\u5f55\u627e\u5230\nmarbles02\n\u94fe\u7801\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6b65\u9aa4\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053\uff0c\u5c31\u50cf\u524d\u9762\u5728\n\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053\n\u4e00\u8282\u4e2d\u8bb2\u7684\u90a3\u6837\u3002\u4e00\u65e6\u5c06peer\u52a0\u5165\u4e86\u901a\u9053\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u6b65\u9aa4\u4e0e\nmarbles02\n\u94fe\u7801\u4ea4\u4e92\uff1a\n1. \u5728\npeer0.org1.example.com\n\u4e0a\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801:  \n\n\n$$ peer chaincode install -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\n$$ peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -v 1.0 -c '{\nArgs\n:[\ninit\n]}' -P \nOR ('Org0MSP.member','Org1MSP.member')\n\n\n\n\n\n\n\n\u521b\u5efa\u4e00\u4e9b\u5f39\u73e0\u5e76\u79fb\u52a8\u5b83\u4eec\uff1a\n\n\n\n\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ninitMarble\n,\nmarble1\n,\nblue\n,\n35\n,\ntom\n]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ninitMarble\n,\nmarble2\n,\nred\n,\n50\n,\ntom\n]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ninitMarble\n,\nmarble3\n,\nblue\n,\n70\n,\ntom\n]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ntransferMarble\n,\nmarble2\n,\njerry\n]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ntransferMarblesBasedOnColor\n,\nblue\n,\njerry\n]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ndelete\n,\nmarble1\n]}'\n\n\n\n\n\n\n\u5982\u679c\u4f60\u9009\u62e9\u5728docker-compse\u4e2d\u6620\u5c04CouchDB\u7aef\u53e3\uff0c\u4f60\u73b0\u5728\u5c31\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684web\u63a5\u53e3(Fauxton)\u67e5\u8be2\u72b6\u6001\u6570\u636e\u5e93\uff0c\u65b9\u6cd5\u662f\u6253\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230\u4e0b\u5217URL\uff1a\n\n\n\n\nhttp://localhost:5984/_utils\n\n\n\n\n\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u53eb\nmychannel\n\u7684\u6570\u636e\u5e93(\u6216\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684\u901a\u9053\u540d\u79f0)\u548c\u91cc\u9762\u7684\u6587\u6863\u6570\u636e\u3002\n\n\n\u6ce8\u91ca\uff1a\u4f60\u9700\u8981\u66f4\u65b0$CHANNEL_NAME\u4e3a\u5408\u9002\u7684\u503c\n   \n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7CLI\u8fd0\u884c\u4e00\u822c\u67e5\u8be2(\u5982\u8bfb\nmarble2\n):\n\n\n$$ peer chaincode query -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\nreadMarble\n,\nmarble2\n]}'\nQuery Result: {\ncolor\n:\nred\n,\ndocType\n:\nmarble\n,\nname\n:\nmarble2\n,\nowner\n:\njerry\n,\nsize\n:50}\n\n\n\n\n\u4f60\u53ef\u4ee5\u67e5\u8be2\u4e00\u4e2a\u7279\u5b9a\u5f39\u73e0\u7684\u5386\u53f2\uff0c\u5982\nmarble1\n:\n\n\n$$ peer chaincode query -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ngetHistoryForMarble\n,\nmarble1\n]}'\nQuery Result: [{\nTxId\n:\n1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464\n, \nValu\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u5bf9\u6570\u636e\u5185\u5bb9\u6267\u884c\u5bcc\u6587\u672c\u67e5\u8be2\uff0c\u5982\u67e5\u8be2\u62e5\u6709\u8005\njerry\n\u7684\u5f39\u73e0\u5b57\u6bb5\uff1a\n\n\npeer chaincode query -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\nqueryMarblesByOwner\n,\njerry\n]}'\nQuery Result: [{\nKey\n:\nmarble2\n, \nRecord\n:{\ncolor\n:\nred\n,\ndocType\n:\nmarble\n,\nname\n:\nmarble2\n,\nowner\n\n\n\n\n\n\u4e3a\u4ec0\u4e48\u662fCouchDB\uff1f\n\n\nCouchDB\u662f\u4e00\u79cdNoSQL\u89e3\u51b3\u65b9\u6848\u3002\u5b83\u662f\u4e00\u4e2a\u9762\u5411\u6587\u6863\u7684\u6570\u636e\u5e93\uff0c\u5176\u4e2d\u6587\u6863\u5b57\u6bb5\u88ab\u5b58\u50a8\u4e3a\u952e\u503c\u5bf9\u3002\u5b57\u6bb5\u53ef\u4ee5\u662f\u7b80\u5355\u7684\u952e/\u503c\u5bf9\uff0c\u5217\u8868\u6216\u6620\u5c04\u3002\u9664\u4e86LevelDB\u652f\u6301\u7684keyed/composite-key/key-range\u67e5\u8be2\u5916\uff0cCouchDB\u8fd8\u652f\u6301\u5b8c\u6574\u7684\u5bcc\u6587\u672c\u67e5\u8be2\u529f\u80fd\uff0c\u4f8b\u5982\u5bf9\u6574\u4e2a\u533a\u5757\u94fe\u6570\u636e\u7684\u975e\u952e\u67e5\u8be2\uff0c\u56e0\u4e3a\u5176\u6570\u636e\u5185\u5bb9\u4ee5JSON\u683c\u5f0f\u5b58\u50a8\uff0c\u5b8c\u5168\u53ef\u67e5\u8be2\u3002\u56e0\u6b64\uff0cCouchDB\u53ef\u4ee5\u6ee1\u8db3\u4e0d\u53d7LevelDB\u652f\u6301\u7684\u8bb8\u591a\u7528\u4f8b\u7684\u94fe\u7801\uff0c\u5ba1\u8ba1\u548c\u62a5\u544a\u8981\u6c42\u3002\n\n\nCouchDB\u8fd8\u53ef\u4ee5\u589e\u5f3a\u533a\u5757\u94fe\u4e2d\u5408\u89c4\u6027\u548c\u6570\u636e\u4fdd\u62a4\u7684\u5b89\u5168\u6027\u3002\u56e0\u4e3a\u5b83\u80fd\u591f\u901a\u8fc7\u8fc7\u6ee4\u548c\u5c4f\u853d\u4e8b\u52a1\u5185\u7684\u5c5e\u6027\u6765\u5b9e\u73b0\u5b57\u6bb5\u7ea7\u522b\u7684\u5b89\u5168\u6027\uff0c\u5e76\u4e14\u5728\u9700\u8981\u65f6\u6388\u6743\u53ea\u8bfb\u6743\u9650\u3002  \n\n\n\u53e6\u5916\uff0cCouchDB\u5c5e\u4e8eCAP\u5b9a\u7406\u7684AP\u7c7b\u578b\uff08Availability\u548cPartition Tolerance\uff09\u3002\u5b83\u4f7f\u7528\u4e3b - \u4e3b\u590d\u5236\u6a21\u578b\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605CouchDB\u6587\u6863\u7684\u201c\n \u6700\u7ec8\u4e00\u81f4\u6027\n\u201d\u9875\u9762\u3002\u4f46\u662f\uff0c\u5728\u6bcf\u4e2aFabric peer\u4e0b\uff0c\u4e0d\u5b58\u5728\u6570\u636e\u5e93\u526f\u672c\uff0c\u5199\u5165\u6570\u636e\u5e93\u5c06\u4fdd\u8bc1\u4e00\u81f4\u6027\u548c\u6301\u4e45\u6027\uff08\u975e\nEventual Consistency\n\uff09\u3002\n\n\nCouchDB\u662fFabric\u7684\u7b2c\u4e00\u4e2a\u5916\u90e8\u53ef\u63d2\u5165\u72b6\u6001\u6570\u636e\u5e93\uff0c\u53ef\u80fd\u4e5f\u4f1a\u6709\u5176\u4ed6\u5916\u90e8\u6570\u636e\u5e93\u9009\u9879\u3002\u4f8b\u5982\uff0cIBM\u4e3a\u5173\u7cfb\u6570\u636e\u5e93\u542f\u7528\u533a\u5757\u94fe\u3002\u800cCP\u578b\uff08\u4e00\u81f4\u6027\u548c\u5206\u533a\u5bb9\u5fcd\uff09\u6570\u636e\u5e93\u4e5f\u53ef\u80fd\u662f\u9700\u8981\u7684\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709\u5e94\u7528\u7ea7\u4fdd\u8bc1\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u6570\u636e\u4e00\u81f4\u6027\u3002  \n\n\n\u4e00\u4e2a\u5173\u4e8e\u6570\u636e\u6301\u4e45\u5316\u7684\u5907\u6ce8\n\n\n\u5982\u679c\u5728peer\u5bb9\u5668\u6216CouchDB\u5bb9\u5668\u4e0a\u9700\u8981\u6570\u636e\u6301\u4e45\u6027\uff0c\u6709\u4e00\u79cd\u9009\u62e9\u662f\u5c06docker\u5bbf\u4e3b\u673a\u4e2d\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u4e2d\u7684\u76f8\u5173\u76ee\u5f55\u4e2d\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728\ndocker-compose-base.yaml\n\u6587\u4ef6\u4e2d\u7684peer\u5bb9\u5668\u5b9a\u4e49\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c\uff1a\n\n\nvolumes:\n - /var/hyperledger/peer0:/var/hyperledger/production\n\n\n\n\n\u5bf9\u4e8eCouchDB\u5bb9\u5668\uff0c\u60a8\u53ef\u4ee5\u5728CouchDB\u5bb9\u5668\u5b9a\u4e49\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c\uff1a\u3001\n\n\nvolumes:\n - /var/hyperledger/couchdb0:/opt/couchdb/data\n\n\n\n\nTroubleshooting\n\n\n\n\n\u603b\u662f\u5e72\u51c0\u5730\u542f\u52a8\u7f51\u7edc\u3002\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u5220\u9664\u5171\u5efa\u3001\u5bc6\u94a5\u3001\u5bb9\u5668\u548c\u94fe\u7801\u955c\u50cf\uff1a\n\n\n\n\n./byfn.sh -m down\n\n\n\n\n\u6ce8\u91ca\uff1a\u5982\u679c\u4e0d\u5220\u9664\u65e7\u7684\u5bb9\u5668\u548c\u955c\u50cf\u4f1a\u62a5\u9519\u3002\n \n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230Docker\u9519\u8bef\uff0c\u9996\u5148\u68c0\u67e5docker\u7248\u672c\uff0c\u7136\u540e\u91cd\u542fdocker\u8fdb\u7a0b\u3002docker\u95ee\u9898\u5f80\u5f80\u4e0d\u597d\u8bc6\u522b\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u770b\u5230\u7684\u9519\u8bef\u662f\u4e0d\u80fd\u627e\u5230\u6302\u5728\u5230\u5bb9\u5668\u7684\u52a0\u5bc6\u6750\u6599\u3002\n\n\u5982\u679c\u4f60\u60f3\u5220\u9664\u955c\u50cf\u91cd\u65b0\u5f00\u59cb\uff1a\n\n\n\n\n$ docker rm -f $(docker ps -aq)\n$ docker rmi -f $(docker images -q)\n\n\n\n\n\n\n\u5982\u679c\u4f60\u5728\u521b\u5efa\u3001\u5b9e\u4f8b\u5316\u3001\u8c03\u7528\u6216\u67e5\u8be2\u547d\u4ee4\u4e2d\u770b\u5230\u9519\u8bef\uff0c\u786e\u4fdd\u4f60\u7684\u901a\u9053\u540d\u79f0\u548c\u94fe\u7801\u540d\u79f0\u6b63\u786e\u3002\n\n\n\u5982\u679c\u4f60\u770b\u5230\u4e0b\u9762\u7684\u9519\u8bef\uff1a\n\n\n\n\nError: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)\n\n\n\n\n\u770b\u6765\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u94fe\u7801\u955c\u50cf\uff08\u4f8b\u5982\ndev-peer1.org2.example.com-mycc-1.0\n\u6216\ndev-peer0.org1.example.com-mycc-1.0\n)\u5df2\u7ecf\u5728\u8fd0\u884c\u3002\u5220\u9664\u5b83\u4eec\u91cd\u8bd5\u3002\n\n\n$ docker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')\n\n\n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9\uff1a\n\n\n\n\nError connecting: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure\nError: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure\n\n\n\n\n\u786e\u4fdd\u4f60\u6b63\u5728\u8fd0\u884c\u7684\u7f51\u7edc\u662f\u201c1.0.0\u201d\u955c\u50cf\u5e76\u4e14tag\u662f\u201clatest\u201d\u3002  \n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u4e0b\u9762\u7684\u9519\u8bef\uff1a\n\n\n\n\n[configtx/tool/localconfig] Load -\n CRIT 002 Error reading configuration: Unsupported Config Type \n\npanic: Error reading configuration: Unsupported Config Type \n\n\n\n\n\n\u8bf4\u660e\u4f60\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\nFABRIC_CFG_PATH\n\u3002configtxgen\u5de5\u5177\u9700\u8981\u8fd9\u4e2a\u53d8\u91cf\u6765\u5b9a\u4f4dconfigtx.yaml\u3002\u8fd4\u56de\u548c\u6267\u884c\nexport FABRIC_CFG_PATH=$PWD\n\uff0c\u7136\u540e\u91cd\u5efa\u4f60\u7684\u901a\u9053\u5de5\u4ef6\u3002\n\n- \u4f7f\u7528\ndown\n\u9009\u9879\u6e05\u7406\u7f51\u7edc\uff1a\n\n\n$ ./byfn.sh -m down\n\n\n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u8bf4\u4f60\u4ecd\u6709\u6d3b\u52a8\u7684\u7aef\u70b9\uff0c\u5219\u9700\u8981prune\u4f60\u7684docker\u7f51\u7edc\u3002\u8fd9\u5c06\u6e05\u9664\u4e4b\u524d\u7684\u7f51\u7edc\uff0c\u91cd\u65b0\u542f\u52a8\u4e00\u4e2a\u5e72\u51c0\u7684\u73af\u5883\uff1a\n\n\n\n\n$ docker network prune\n\n\n\n\n\u4f60\u4f1a\u770b\u5230\u4e0b\u5217\u4fe1\u606f\uff1a\n\n\nWARNING! This will remove all networks not used by at least one container.\nAre you sure you want to continue? [y/N]\n\n\n\n\n\u9009\u62e9\ny\n\u3002\n\n\n\u7406\u89e3Fabric\u7f51\u7edc\n\n\n\u5e94\u7528\u901a\u8fc7API\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u3002\u667a\u80fd\u5408\u7ea6\u6258\u7ba1\u5728\u7f51\u7edc\u4e2d\uff0c\u9760\u540d\u79f0\u548c\u7248\u672c\u53f7\u8bc6\u522b\u3002\u4f8b\u5982\uff0c\u667a\u80fd\u5408\u7ea6\u5bb9\u5668\u7684\u540d\u79f0\u662f\ndev-peer0.org1.example.com-fabcar-1.0\n\uff0c\u5176\u4e2d\nfabcar\n\u662f\u667a\u80fd\u5408\u7ea6\u540d\u79f0\uff0c\n1.0\n\u662f\u667a\u80fd\u5408\u7ea6\u7248\u672c\u53f7\uff0c\u800c\ndev-peer0.org1.example.com\n\u662fpeer\u540d\u79f0\u3002\n\nAPI\u53ef\u4ee5\u628aSDK\u8bbf\u95ee\u3002SDK\u5c01\u88c5\u4e86\u5e94\u7528\u4e0e\u667a\u80fd\u5408\u7ea6\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u5982\u67e5\u8be2\u6216\u63a5\u6536\u8d26\u672c\u66f4\u65b0\u3002\u8fd9\u4e9bAPI\u4f7f\u7528\u51e0\u4e2a\u4e0d\u540c\u7684\u7f51\u7edc\u5730\u5740\uff0c\u63a5\u6536\u4e00\u4e9b\u8f93\u5165\u53c2\u6570\u3002\u667a\u80fd\u5408\u7ea6\u7531peer\u7ba1\u7406\u5458\u5b89\u88c5\uff0c\u7136\u540e\u6309\u7167\u94fe\u7801\u7684\u7b56\u7565\u88ab\u5b9e\u4f8b\u5316\u5230\u901a\u9053\u4e2d\u3002\u667a\u80fd\u5408\u7ea6\u7684\u5b9e\u4f8b\u5316\u6d41\u7a0b\u4e0e\u666e\u901a\u8c03\u7528\u7684\u4e8b\u52a1\u6d41\u7a0b\u76f8\u540c\uff0c\u80cc\u4e66\u3001\u6392\u5e8f\u3001\u751f\u6548\u3001\u63d0\u4ea4\uff0c\u4e4b\u540e\u624d\u80fd\u4e0e\u94fe\u7801\u5bb9\u5668\u4ea4\u4e92\uff08\u667a\u80fd\u5408\u7ea6\u5b9e\u4f8b\u5316\u5c31\u662f\u94fe\u7801\u5bb9\u5668\u542f\u52a8\uff09\u3002   \n\n\n\u67e5\u8be2\n\n\n\u67e5\u8be2\u662f\u6700\u7b80\u5355\u7684\u8c03\u7528\uff1a\u4e00\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u6700\u5e38\u89c1\u7684\u67e5\u8be2\u662f\u5411\u72b6\u6001\u6570\u636e\u5e93\u67e5\u8be2\u4e00\u4e2akey\u7684\u5f53\u524d\u503c(\nGetState\n)\u3002\u7136\u800c\uff0c\n\u94fe\u7801shim\u63a5\u53e3\n\u5141\u8bb8\u4e0d\u540c\u7684Get\u8bf7\u6c42\uff0c\u5982\nGetHistoryForKey\n\u6216\nGetCreator\n\u3002\n\n\u521b\u5efa\u67e5\u8be2\u9700\u8981\u6307\u5b9a\u4e00\u4e2apeer\u3001\u4e00\u4e2a\u94fe\u7801\u3001\u4e00\u4e2a\u901a\u9053\u548c\u4e00\u7cfb\u5217\u8f93\u5165(\u5982key)\u548c\u4e00\u4e2a\u53ef\u7528\u7684\u94fe\u7801\u51fd\u6570\uff0c\u7136\u540e\u901a\u8fc7API\nchain.queryByChaincode\n\u53d1\u9001\u67e5\u8be2\u5230peer\u3002\u76f8\u5e94\u7684\u54cd\u5e94\u503c\u4f1a\u8fd4\u56de\u7ed9\u5e94\u7528\u5ba2\u6237\u7aef\u3002  \n\n\n\u66f4\u65b0\n\n\n\u8d26\u672c\u66f4\u65b0\u5f00\u59cb\u4e8e\u5e94\u7528\u521b\u5efa\u4e00\u4e2a\u4e8b\u52a1\u63d0\u8bae\u3002\u7c7b\u4f3c\u4e8e\u67e5\u8be2\uff0c\u521b\u5efa\u4e8b\u52a1\u8bf7\u6c42\u9700\u8981\u6307\u5b9a\u4e00\u4e2apeer\u3001\u94fe\u7801\u3001\u901a\u9053\u3001\u51fd\u6570\u548c\u4e00\u7cfb\u5217\u8f93\u5165\u3002\u7a0b\u5e8f\u4e4b\u540e\u4f1a\u8c03\u7528API\nchannel.SendTransactionProposal\n\u53d1\u9001\u4e8b\u52a1\u63d0\u8bae\u5230peer\u5bfb\u6c42\u80cc\u4e66\u3002\n\n\u7f51\u7edc(\u4e5f\u5c31\u662f\u80cc\u4e66peer(\u53ef\u80fd\u591a\u4e2a))\u4f1a\u8fd4\u56de\u4e00\u4e2a\u63d0\u8bae\u54cd\u5e94\uff0c\u5e94\u7528\u4f7f\u7528\u8be5\u54cd\u5e94\u6765\u521b\u5efa\u548c\u7b7e\u7f72\u4e8b\u52a1\u8bf7\u6c42\u3002\u901a\u8fc7\u8c03\u7528API\nchannel.sendTransaction\n\uff0c\u8fd9\u4e2a\u4e8b\u52a1\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u6392\u5e8f\u670d\u52a1\u3002\u6392\u5e8f\u670d\u52a1\u5c06\u4e8b\u52a1\u6346\u7ed1\u5165\u4e00\u4e2a\u533a\u5757\uff0c\u5e76\u5c06\u5b83\u53d1\u9001\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u4ee5\u6c42\u751f\u6548(Fabcar\u7f51\u7edc\u53ea\u6709\u4e00\u4e2apeer\u548c\u4e00\u4e2a\u901a\u9053)\u3002\n\n\u6700\u540e\u5e94\u7528\u4f7f\u7528\u4e24\u4e2a\u4e8b\u4ef6\u5904\u7406\u5668API\uff1a\u7528\neh.setPeerAddr\n\u8fde\u63a5\u5230peer\u7684\u4e8b\u4ef6\u76d1\u542c\u8005\u7aef\u53e3\uff0c\u7528\neh.registerTxEvent\n\u548c\u4e00\u4e2a\u7279\u5b9a\u4e8b\u52a1ID\u53bb\u6ce8\u518c\u4e8b\u4ef6\u3002\neh.registerTxEvent\nAPI\u4f7f\u5e94\u7528\u53ef\u4ee5\u6536\u5230\u4e8b\u52a1\u7ed3\u679c\u901a\u77e5\uff08\u5c31\u662f\u662f\u5426\u751f\u6548\uff09\u3002\n\n\u4e8b\u52a1\u6d41\u7a0b\u56fe\u793a\u53c2\u8003\u672c\u6587\u7684\n\u5171\u8bc6\u8fc7\u7a0b\n\u4e00\u8282\u3002\n\n\u5173\u4e8e\u4e8b\u52a1\u6d41\u7a0b\u7684\u66f4\u591a\u7ec6\u8282\u53c2\u8003\nTransaction Flow\n\u3002\n\n\u5f00\u59cb\u94fe\u7801\u7f16\u7a0b\u53c2\u8003\nChaincode for Developers\n\u3002\n\n\u66f4\u591a\u80cc\u4e66\u7b56\u7565\u53c2\u8003\nEndorsement policies\n\u3002\n\n\u66f4\u591afabric\u67b6\u6784\u4fe1\u606f\u53c2\u8003\nArchitecture Explained\n\u3002", 
            "title": "\u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#first-network", 
            "text": "\u672c\u8282\u9075\u5faahyperledger\u5b98\u65b9\u6587\u6863\u201c Building Your First Network \nfirst-network\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\u6765\u5e2e\u52a9\u521d\u5b66\u8005\u4f53\u9a8cfabric\uff0c\u5b83\u5c31\u662f byfn.sh \u3002\u53ef\u4ee5\u901a\u8fc7\u5e2e\u52a9\u547d\u4ee4\u770b\u770b\u5b83\u7684\u529f\u80fd\uff1a  $ cd /opt/fabric-samples/first-network\n$ ./byfn.sh --help\n byfn.sh -m up|down|restart|generate [-c  channel name ] [-t  timeout ] [-d  delay ] [-f  docker-compose-file ] [-s  dbtype ]", 
            "title": "\u542f\u52a8\u9996\u4e2a\u7f51\u7edc(first-network)"
        }, 
        {
            "location": "/build_network_zh/#_1", 
            "text": "generate required certificates and genesis block\nfabric\u7684\u7f51\u7edc\u548c\u901a\u9053\u5177\u6709\u7c7b\u4f3c\u7684\u542b\u4e49\u3002\u901a\u9053\u53ef\u4ee5\u89c6\u4e3a\u4e00\u79cd\u865a\u62df\u7f51\u7edc\uff0c\u591a\u4e2a\u901a\u9053\u5c31\u591a\u4e2a\u865a\u62df\u7f51\u7edc\u3002docker\u652f\u6301overlay\u7f51\u7edc\uff0c\u4e3a\u540c\u4e00\u4e2apeer\u52a0\u5165\u4e0d\u540c\u7684\u7f51\u7edc\u521b\u9020\u4e86\u5e95\u5c42\u6280\u672f\u57fa\u7840\uff08\u4ee5\u4e0a\u8ba4\u8bc6\u8fd8\u6ca1\u6709\u5f97\u5230\u786e\u8ba4\uff09\u3002  $ ./byfn.sh -m generate\nGenerating certs and genesis block for with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\n(\u540e\u7565)  byfn.sh \u4f1a\u5728\u5c4f\u5e55\u4e0a\u6709\u5f88\u591a\u8f93\u51fa\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6587\u5b57\u4e5f\u53ef\u4ee5\u77e5\u9053\u8be5\u811a\u672c\u7684\u529f\u80fd\uff1a\n1. \u751f\u6210\u4e86Orderer\u7684\u521b\u4e16\u533a\u5757\u3002\u5728\u6392\u5e8f\u8282\u70b9\u4e0afabric\u7ef4\u62a4\u4e86\u4e00\u4e2a\u201c\u7cfb\u7edf\u8d26\u672c\u201d\uff0c\u4fdd\u5b58\u4e86\u6574\u4e2afabric\u533a\u5757\u94fe\u7f51\u7edc\u7684\u53c2\u6570\u3001\u5143\u6570\u636e\u7b49\u3002\u5bf9\u4e8e\u533a\u5757\u94fe\u6765\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5757(\u6709\u65f6\u79f00\u53f7\u533a\u5757)\u88ab\u79f0\u4e3a\u521b\u4e16\u533a\u5757(Genesis block)\u3002\u8be5\u521b\u4e16\u533a\u5757\u5bf9\u5e94\u4e86\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e00\u822c\u662f genesis.block \u3002 \n2. \u521b\u5efa\u4e86\u4e00\u4e2a\u901a\u9053\u3002\u751f\u6210\u4e86\u4e00\u4e2a\u53eb channel.tx \u7684\u6587\u4ef6\u3002 \n3. \u751f\u6210\u4e86\u7ec4\u7ec7Org1MSP\u548cOrg2MSP\u7684\u951apeer\u3002\u951apeer\u7528\u4e8e\u8de8\u7ec4\u7ec7\u7684\u901a\u4fe1\u3002", 
            "title": "\u751f\u6210\u7f51\u7edc\u5de5\u4ef6"
        }, 
        {
            "location": "/build_network_zh/#_2", 
            "text": "$ ./byfn.sh -m up\n\uff08\u9002\u5f53\u5220\u51cf\uff09\nChannel  mychannel  is created successfully =====================\nPEER0 joined on the channel  mychannel  =====================\nPEER1 joined on the channel  mychannel  =====================\nPEER2 joined on the channel  mychannel  =====================\nPEER3 joined on the channel  mychannel  =====================\nAnchor peers for org  Org1MSP  on  mychannel  is updated successfully =====================\nAnchor peers for org  Org2MSP  on  mychannel  is updated successfully =====================\nChaincode is installed on remote peer PEER0 =====================\nChaincode is installed on remote peer PEER2 =====================\nChaincode Instantiation on PEER2 on channel 'mychannel' is successful =====================\nQuerying on PEER0 on channel 'mychannel'... =====================\nInvoke transaction on PEER0 on channel 'mychannel' is successful =====================\nChaincode is installed on remote peer PEER3 =====================\nQuerying on PEER3 on channel 'mychannel'... =====================\n========= All GOOD, BYFN execution completed ===========  \u542f\u52a8\u540e\u5c4f\u5e55\u4ecd\u88ab\u9501\u5b9a\u4e3a\u65e5\u5fd7\u8f93\u51fa\uff0c\u53ef\u4ee5\u6253\u5f00\u53e6\u5916\u7684\u7ec8\u7aef\u7a97\u53e3\u8fdb\u884c\u540e\u7eed\u7684\u64cd\u4f5c\u3002\u5982\uff0c\u67e5\u770b\u5bb9\u5668\u6e05\u5355\uff1a  $ docker ps  \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u6709\uff1a\n1. cli(fabric-tools)\uff0c\u662ffabric\u7684\u547d\u4ee4\u884c\u5de5\u5177 \n2. peer0.org1.example.com\u7b49(fabric-peer)\uff0c\u662fpeer\u8282\u70b9\u7684\u8fdb\u7a0b\u5bb9\u5668 \n3. orderer.example.com(fabric-orderer)\uff0c\u662forderer\u8282\u70b9\u7684\u8fdb\u7a0b\u5bb9\u5668 \n4. dev-peer0.org1.example.com-mycc-1.0-xxxx\uff0c \u662f\u94fe\u7801\u5bb9\u5668\n\u5728\u5176\u4ed6\u7684fabric\u73af\u5883\u4e2d(\u5982\u751f\u4ea7\u73af\u5883\u4e0b)\uff0c\u8fd8\u53ef\u80fd\u770b\u5230ca-server\u7684\u5bb9\u5668\u3001couchdb\u7684\u5bb9\u5668\u7b49\u3002", 
            "title": "\u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#_3", 
            "text": "$ ./byfn.sh -m down\n$ docker ps  \u7f51\u7edc\u505c\u6b62\u540e\uff0c\u901a\u8fc7docker ps\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u6240\u6709\u7684\u5bb9\u5668\u90fd\u6d88\u5931\u4e86\u3002", 
            "title": "\u505c\u6b62\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#crypto-generator", 
            "text": "\u6211\u4eec\u7528 cryptogen \u5de5\u5177\u4e3a\u5404\u79cd\u7684\u7f51\u7edc\u5b9e\u4f53\u751f\u6210\u5bc6\u7801\u5b66\u6587\u4ef6(x509\u8bc1\u4e66\u548c\u7b7e\u540d\u5bc6\u94a5)\u3002\u8fd9\u4e9b\u8bc1\u4e66\u8868\u8fbe\u8eab\u4efd\uff0c\u5bf9\u5b9e\u4f53\u95f4\u901a\u4fe1\u548c\u4e8b\u52a1\u8ba4\u8bc1\u8fdb\u884c\u7b7e\u540d\u548c\u9a8c\u8bc1\u3002", 
            "title": "\u5bc6\u94a5\u751f\u6210\u5668(Crypto Generator)"
        }, 
        {
            "location": "/build_network_zh/#_4", 
            "text": "Cryptogen\u7684\u914d\u7f6e\u6587\u4ef6\u662f crypto-config.yaml \uff0c\u8be5\u6587\u4ef6\u5305\u62ec\u7f51\u7edc\u62d3\u6251\uff0c\u5141\u8bb8\u6211\u4eec\u4e3a\u7ec4\u7ec7\u4ee5\u53ca\u5c5e\u4e8e\u7ec4\u7ec7\u7684\u7ec4\u4ef6\u751f\u6210\u4e00\u7cfb\u5217\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u6267\u884c\u793a\u8303\uff1a  $ cryptogen generate --config=./crypto-config.yaml  \u8fd0\u884c\u540e\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a crypto-config \u76ee\u5f55\uff0c\u91cc\u9762\u6709\u5f88\u591a\u5bc6\u7801\u5b66\u6587\u4ef6\u3002\u5728\u751f\u6210\u7684\u6587\u4ef6\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u4f1a\u5206\u914d\u4e00\u4e2a\u6839\u8bc1\u4e66( ca-cert )\uff0c\u8be5\u8bc1\u4e66\u7ed1\u5b9a\u7279\u6b8a\u7ec4\u4ef6(peer\u548corderer)\u5230\u7ec4\u7ec7\u3002\u5047\u5b9a\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684CA\u8bc1\u4e66\uff0c\u6211\u4eec\u6a21\u4eff\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u7f51\u7edc\uff0c\u5176\u4e2d\u6bcf\u4e2a \u6210\u5458 \u62e5\u6709\u81ea\u5df1\u7684CA\u3002\u5728Hyperledger Fabric\u4e2d\uff0c\u5b9e\u4f53\u4f7f\u7528\u81ea\u5df1\u7684\u79c1\u94a5( keystore )\u5bf9\u4e8b\u52a1\u548c\u901a\u4fe1\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u7528\u5bf9\u65b9\u7684\u516c\u94a5( signcerts )\u9a8c\u8bc1\u7b7e\u540d\u3002 \n\u914d\u7f6e\u6587\u4ef6\u4e2d Template \u6709\u4e2a count \u53d8\u91cf\uff0c\u6211\u4eec\u7528\u5b83\u6765\u6307\u5b9a\u6bcf\u4e2a\u7ec4\u7ec7\u4e0b\u7684peer\u6570\u91cf\uff1b\u5728\u6211\u4eec\u793a\u4f8b\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u4e0b\u6709\u4e24\u4e2apeer\u3002 Users \u4e0b\u4e5f\u6709 count \u53d8\u91cf\uff0c\u5b83\u8868\u793a\u521b\u5efa\u7684\u7528\u6237\u6570\u91cf\u3002\u793a\u4f8b\u5982\u4e0b\uff1a    - Name: Org2\n    Domain: org2.example.com\n    Template:\n      Count: 2\n    Users:\n      Count: 1  \u6211\u4eec\u5728\u672c\u6587\u4e0d\u4f1a\u8be6\u8ff0 X509\u8bc1\u4e66\u548cPKI \u3002 \n\u5728 crypto-config.yaml \u6587\u4ef6\u4e2d\uff0c\u6ce8\u610f OrdererOrgs \u4e4b\u4e0b\u7684\u201cName\u201d, \u201cDomain\u201d and \u201cSpecs\u201d\u53c2\u6570\u3002\u7f51\u7edc\u5b9e\u4f53\u7684\u547d\u540d\u7ea6\u5b9a\u662f\uff1a {{.Hostname}}.{{.Domain}} \u3002\u4f8b\u5982\uff0c\u6392\u5e8f\u8282\u70b9\u7684\u540d\u79f0\u662f orderer.example.com \uff0c\u8fd9\u5173\u8054\u4e86\u4e00\u4e2aMSP ID  Orderer \uff0c\u5173\u4e8eMSP\u7684\u66f4\u591a\u7ec6\u8282\u53c2\u8003 \u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005(MSP) \u6587\u6863\u3002 \n\u5728 cryptogen \u751f\u6210\u7684\u52a0\u5bc6\u6750\u6599\u4e2d\u6709\u7ba1\u7406\u5458\u7684\uff0c\u8fd9\u91cc\u6709\u7bc7\u6587\u7ae0 \u5bfb\u627e\u7ba1\u7406\u5458\u7684\u8bc1\u4e66\u548c\u79c1\u94a5 \uff0c\u4e13\u95e8\u7814\u7a76\u4e86 cryptogen \u751f\u6210\u7684\u7ba1\u7406\u5458\u7684\u52a0\u5bc6\u6750\u6599\u3002", 
            "title": "\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f"
        }, 
        {
            "location": "/build_network_zh/#_5", 
            "text": "\u5de5\u5177 configtxgen \u7528\u4e8e\u751f\u6210\u56db\u4e2a\u914d\u7f6e\u5de5\u4ef6\uff1a\n- \u6392\u5e8f\u5668(orderer) genesis block \n- \u901a\u9053 configuration transaction \n- \u4e24\u4e2a anchor peer transactions \uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u751f\u6210\u4e00\u4e2a \n\u5173\u4e8e configtxgen \u66f4\u591a\u7ec6\u8282\u53c2\u8003 Channel Configuration (configtxgen) \u3002    \u751f\u6210\u7684\u56db\u4e2a\u5de5\u4ef6\u4e2d\u7684 genesis block \u662f\u6392\u5e8f\u670d\u52a1\u7684 \u521b\u4e16\u533a\u5757 \u3002 \u901a\u9053 \u7684 configuration transaction \u6587\u4ef6\u5728\u901a\u9053\u521b\u5efa\u65f6\u88ab\u5e7f\u64ad\u5230orderer\u3002\u81f3\u4e8e anchor peer transactions \uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b9a\u4e49\u7ec4\u7ec7\u5728\u8fd9\u4e2a\u901a\u9053\u7684 \u951a\u70b9peer \u3002", 
            "title": "\u914d\u7f6e\u4e8b\u52a1\u751f\u6210\u5668"
        }, 
        {
            "location": "/build_network_zh/#_6", 
            "text": "Configtxgen\u4f1a\u6839\u636e\u6587\u4ef6 configtx.yaml \u5b9a\u4e49\u7684\u914d\u7f6e\u8fd0\u884c\uff0c\u6587\u4ef6\u5305\u542b\u4e86\u793a\u8303\u7f51\u7edc\u7684\u5b9a\u4e49\u3002\u5176\u4e2d\u6709\u4e09\u4e2a\u6210\u5458\uff1a\u4e00\u4e2a\u6392\u5e8f\u5668\u7ec4\u7ec7( OrdererOrg )\u548c\u4e24\u4e2aPeer\u7ec4\u7ec7( Org1 \u548c Org2 )\uff0c\u6bcf\u4e2aPeer\u7ec4\u7ec7\u7ba1\u7406\u548c\u7ef4\u62a4\u4e86\u4e24\u4e2apeer\u8282\u70b9\u3002\u8fd9\u4e2a\u6587\u4ef6\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8054\u76df( SampleConsortium )\uff0c\u8054\u76df\u5305\u542b\u4e86\u4e24\u4e2apeer\u7ec4\u7ec7\u3002\u7279\u522b\u9700\u8981\u6ce8\u610f\u6587\u4ef6\u5f00\u5934\u7684\u201cProfiles\u201d\u5c0f\u8282\u3002\u4f60\u5e94\u8be5\u6ce8\u610f\u5230\u4e86\u5b83\u6709\u4e24\u4e2a\u552f\u4e00\u7684\u5934\u3002\u4e00\u4e2a\u662f\u6392\u5e8f\u5668\u521b\u4e16\u533a\u5757( TwoOrgsOrdererGenesis )\uff0c\u53e6\u4e00\u4e2a\u662f\u901a\u9053( TwoOrgsChannel )\u3002    \u8fd9\u4e9b\u5934\u5f88\u91cd\u8981\uff0c\u5f53\u751f\u6210\u5de5\u4ef6\u65f6\uff0c\u5b83\u4eec\u5c06\u4f5c\u4e3a\u53c2\u6570\u53d1\u9001\u3002  \u6ce8\u91ca\uff1a\u6211\u4eec\u7684 SampleConsortium \u8054\u76df\u5b9a\u4e49\u5728\u7cfb\u7edf\u7ea7profile\uff0c\u7136\u540e\u88ab\u901a\u9053\u96c6profile\u5f15\u7528\u3002\u901a\u9053\u5c06\u5b58\u5728\u4e8e\u6574\u4e2a\u8054\u76df\u8303\u56f4\u3002     \u8fd9\u4e2a\u6587\u4ef6\u8fd8\u5305\u542b\u4e86\u4e24\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u9644\u52a0\u5185\u5bb9\u3002\u9996\u5148\uff0c\u4e3a\u6bcf\u4e2apeer\u7ec4\u7ec7( peer0.org1.example.com \u548c peer0.org2.example.com )\u5b9a\u4e49\u4e86\u951a\u70b9peer\u3002\u5176\u6b21\uff0c\u5b9a\u4e49\u4e86\u6bcf\u4e2a\u6210\u5458\u7684MSP\u76ee\u5f55\u5730\u5740\uff0c\u8fd9\u8ba9\u6211\u4eec\u5728\u6392\u5e8f\u5668\u521b\u4e16\u533a\u5757\u4e2d\u4fdd\u5b58\u4e86\u6bcf\u4e2a\u7ec4\u7ec7\u7684\u6839\u8bc1\u4e66\u3002\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u6982\u5ff5\u3002\u73b0\u5728\u4e0e\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u7684\u4efb\u4f55\u7f51\u7edc\u5b9e\u4f53\u53ef\u4ee5\u88ab\u9a8c\u8bc1\u5176\u6570\u5b57\u7b7e\u540d\u4e86\u3002", 
            "title": "\u5de5\u4f5c\u539f\u7406"
        }, 
        {
            "location": "/build_network_zh/#_7", 
            "text": "\u4f60\u53ef\u4ee5\u4f7f\u7528 configtxgen \u548c cryptogen \u5de5\u5177\u624b\u5de5\u751f\u6210\u8bc1\u4e66/\u5bc6\u94a5\u548c\u4e0d\u540c\u7684\u914d\u7f6e\u5de5\u4ef6\u3002\u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4fee\u6539 byfn.sh \u811a\u672c\u6765\u8fbe\u5230\u4f60\u7684\u76ee\u7684\u3002", 
            "title": "\u8fd0\u884c\u5de5\u5177"
        }, 
        {
            "location": "/build_network_zh/#_8", 
            "text": "\u4f60\u53ef\u4ee5\u53c2\u8003byfn.sh\u811a\u672c\u4e2d\u7684generateCerts\u51fd\u6570\uff0c\u91cc\u9762\u7684\u547d\u4ee4\u53ef\u4ee5\u6839\u636e crypto-config.yaml \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7f51\u7edc\u914d\u7f6e\u751f\u6210\u8bc1\u4e66\u3002    \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8fd0\u884c cryptogen \u5de5\u5177\u3002\u5b83\u4f4d\u4e8e bin \u76ee\u5f55\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u4e86\u6267\u884c\u5b83\uff08\u6216\u8005\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u7684PATH\uff09:  $ ../bin/cryptogen generate --config=./crypto-config.yaml\norg1.example.com\norg2.example.com  \u8bc1\u4e66\u548c\u5bc6\u94a5(\u5373MSP\u6587\u4e66)\u4f1a\u88ab\u8f93\u51fa\u5230 crypto-config \u76ee\u5f55\uff08\u4f4d\u4e8e first-network \u76ee\u5f55\u4e4b\u4e0b\uff09\u3002 \n\u751f\u6210\u7684\u52a0\u5bc6\u6750\u6599\u4e3b\u8981\u662f\u7ba1\u7406\u5458\u7684\u8eab\u4efd\u8bc1\u660e\u6587\u4ef6\uff0c\u5176\u4e2d\uff1a\n- \u7cfb\u7edf\u7ba1\u7406\u5458: crypto-config/ordererOrganizations \u76ee\u5f55\u4e0b\n- \u7ec4\u7ec7\u7ba1\u7406\u5458\uff1aorg1\u7ec4\u7ec7\u7ba1\u7406\u5458\u4f4d\u4e8e crypto-config/peerOrganizations/org1.example.com \u76ee\u5f55\u4e0b\n- peer\u7ba1\u7406\u5458\uff1aorg1\u7684peer0\u7ba1\u7406\u5458\u4f4d\u4e8e crypto-config/peerOrganizations/org1.example.com/peerspeer0.org1.example.com \u76ee\u5f55\u4e0b  \u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9 configtxgen \u5de5\u5177\u5230\u54ea\u91cc\u53bb\u5bfb\u627e configtx.yaml \u6587\u4ef6\u3002\u9700\u8981\u901a\u8fc7\u4e0b\u9762\u7684\u73af\u5883\u53d8\u91cf\u544a\u8bc9\u5b83($PWD\u8868\u793a\u5f53\u524d\u76ee\u5f55)\uff1a  $ export FABRIC_CFG_PATH=$PWD  \u7136\u540e\uff0c\u6211\u4eec\u8c03\u7528 configtxgen \u5de5\u5177\u53bb\u751f\u6210\u6392\u5e8f\u5668\u521b\u4e16\u533a\u5757\uff1a  $ ../bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block  \u9700\u8981\u5148\u624b\u5de5\u521b\u5efa\u76ee\u5f55 channel-artifacts \uff0c\u5426\u5219\u4e0a\u8ff0\u547d\u4ee4\u4f1a\u51fa\u9519\u3002", 
            "title": "\u624b\u5de5\u751f\u6210\u5de5\u4ef6"
        }, 
        {
            "location": "/build_network_zh/#_9", 
            "text": "\uff08\u5728Fabric\u4e2d\u901a\u9053\u914d\u7f6e\u4fe1\u606f\u4e5f\u4fdd\u5b58\u5728\u533a\u5757\u94fe\u4e2d\uff0c\u800c\u533a\u5757\u94fe\u7684\u5185\u5bb9\u662f\u9760\u4e8b\u52a1\u5199\u5165\u7684\uff0c\u6240\u4ee5\u8981\u65b0\u5efa\u901a\u9053\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4e8b\u52a1\u3002\uff09 \n\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u901a\u9053\u4e8b\u52a1\u5de5\u4ef6\u3002\u786e\u4fdd\u66ff\u6362 $CHANNEL_NAME \u6216\u8bbe\u7f6e CHANNEL_NAME \u4e3a\u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u6267\u884c\u4e0b\u5217\u6307\u4ee4\uff1a  $ export CHANNEL_NAME=mychannel  \n$ ../bin/configtxgen -profile TwoOrgsChannel \\\n -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME  \u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u5c06\u5728\u521a\u521a\u521b\u5efa\u7684\u901a\u9053\u4e0a\u5b9a\u4e49Org1\u7684\u951a\u70b9peer\u3002\u540c\u6837\uff0c\u786e\u4fdd\u8986\u76d6 $CHANNEL_NAME \u6216\u8bbe\u7f6e\u4e3a\u4e0b\u9762\u7684\u547d\u4ee4\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u3002  $ ../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate \\\n./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP\n2017-12-07 08:59:42.756 UTC [common/tools/configtxgen] main -  INFO 001 Loading configuration\n2017-12-07 08:59:42.762 UTC [common/tools/configtxgen] doOutputAnchorPeersUpdate -  INFO 002 Generating anchor peer update\n2017-12-07 08:59:42.762 UTC [common/tools/configtxgen] doOutputAnchorPeersUpdate -  INFO 003 Writing anchor peer update  \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5728\u540c\u4e00\u4e2a\u901a\u9053\u4e2d\u5b9a\u4e49Org2\u7684\u951a\u70b9peer\uff1a  $ ../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate \\\n./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP  \u603b\u7ed3\u4e00\u4e0b\u672c\u8282\uff0c\u6267\u884c\u4e86\u4e0a\u8ff0\u4e00\u7cfb\u5217\u547d\u4ee4\u540e\uff0c crypto-config \u76ee\u5f55\u751f\u6210\u4e86\u4e00\u4e9b\u8bc1\u4e66\u548c\u5bc6\u94a5\uff1b channel-artifacts \u4e0b\u751f\u6210\u4e86\u4e00\u4e2a\u521b\u4e16\u533a\u5757\u6587\u4ef6\u548c3\u4e2a\u4e8b\u52a1\u6587\u4ef6\uff1a  $ ls ./channel-artifacts\nchannel.tx  genesis.block  Org1MSPanchors.tx  Org2MSPanchors.tx  \uff08\u6267\u884c\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u5c31\u76f8\u5f53\u4e8e\u6267\u884c\u4e86 byfn.sh -m generate \uff09", 
            "title": "\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1"
        }, 
        {
            "location": "/build_network_zh/#_10", 
            "text": "\u6211\u4eec\u5c06\u4f7f\u7528docker-compose\u811a\u672c\u542f\u52a8\u6211\u4eec\u7684\u7f51\u7edc\u3002docker-compose\u4f1a\u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u4e0b\u8f7d\u7684docker\u955c\u50cf\uff0c\u7528\u6211\u4eec\u4e4b\u524d\u751f\u6210 genesis.block (\u521b\u4e16\u533a\u5757)\u5f15\u5bfc\u6392\u5e8f\u5668(orderer)\u3002 \n\u5728\u542f\u52a8\u7f51\u7edc\u524d\uff0c\u6253\u5f00 docker-compose-cli.yaml \u6587\u4ef6\uff0c\u6ce8\u91ca\u6389CLI\u5bb9\u5668\u7684 script.sh \u3002\u8ba9\u4f60\u7684 docker-compose-cli.yaml \u6587\u4ef6\u53d8\u6210\u8fd9\u6837\uff1a  working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'\nvolumes  \u5982\u679c\u4e0d\u6ce8\u91ca\u6389\u8fd9\u4e00\u6837\uff0c\u811a\u672c\u5c31\u4f1a\u5229\u7528CLI\u547d\u4ee4\u628a\u7f51\u7edc\u542f\u52a8\u8d77\u6765\u4e86\u3002\u7136\u800c\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u624b\u5de5\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u4ee5\u4fbf\u89e3\u91ca\u8fd9\u4e9b\u8c03\u7528\u7684\u8bed\u6cd5\u548c\u529f\u80fd\u3002 \nCLI\u9ed8\u8ba4\u8d85\u65f6\u662f10000\u79d2\u3002\u5982\u679c\u4f60\u9700\u8981\u5bb9\u5668\u5b58\u5728\u7684\u66f4\u4e45\uff0c\u9700\u8981\u901a\u8fc7\u8bbe\u7f6e TIMEOUT \u73af\u5883\u53d8\u91cf\u8986\u76d6\u8fd9\u4e00\u9ed8\u8ba4\u503c\u3002    \u542f\u52a8\u7f51\u7edc(\u786e\u4fdd\u7528\u547d\u4ee4 docker ps -a \u770b\u4e0d\u5230\u4efb\u4f55\u5bb9\u5668)\uff1a  $ TIMEOUT=10000 CHANNEL_NAME=$CHANNEL_NAME docker-compose -f docker-compose-cli.yaml up -d  \u5982\u679c\u4f60\u60f3\u770b\u5230\u7f51\u7edc\u7684\u5b9e\u65f6\u65e5\u5fd7\uff0c\u5c31\u4e0d\u8981\u52a0\u4e0a -d \u6807\u5fd7\u3002\u5982\u679c\u4e0d\u52a0 -d \u8868\u793a\uff0c\u4f60\u9700\u8981\u53e6\u5916\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e86\u6267\u884cCLI\u3002", 
            "title": "\u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#_11", 
            "text": "\u4e3a\u4e86\u901a\u8fc7CLI\u547d\u4ee4\u8ba9 peer0.org1.example.com \u5de5\u4f5c\u8d77\u6765\uff0c\u6211\u4eec\u9700\u8981\u51c6\u59074\u4e2a\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u4e9b\u53d8\u91cf\u4e4b\u524d\u88ab\u201c\u70e7\u5165\u201d\u4e86 peer0.org1.example.com CLI\u5bb9\u5668\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u8f93\u5165\u5b83\u4eec\u5c31\u80fd\u64cd\u4f5c\u3002\u4f46\u5982\u679c\u4f60\u9700\u8981\u8c03\u7528\u5176\u4ed6peer\u6216orderer\uff0c\u5219\u9700\u8981\u6b63\u786e\u7684\u8bbe\u7f6e\u8fd9\u4e9b\u53d8\u91cf\u503c\u3002\u67e5\u770b docker-compose-base.yaml \u6587\u4ef6\u53ef\u4ee5\u770b\u5230\u8fd9\u56db\u4e2a\u53d8\u91cf\u7684\u503c\uff1a  # Environment variables for PEER0\n\nCORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nCORE_PEER_ADDRESS=peer0.org1.example.com:7051\nCORE_PEER_LOCALMSPID= Org1MSP \nCORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt", 
            "title": "\u73af\u5883\u53d8\u91cf"
        }, 
        {
            "location": "/build_network_zh/#_12", 
            "text": "\u56de\u60f3\u4e00\u4e0b\u4e0a\u9762\u6211\u4eec\u5728 \u521b\u5efa\u4e00\u4e2a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1 \u4e00\u8282\u4e2d\u4f7f\u7528 configtxgen \u5de5\u5177\u521b\u5efa\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u3002\u4f60\u53ef\u4ee5\u91cd\u590d\u90a3\u4e2a\u8fc7\u7a0b\u6765\u521b\u5efa\u53e6\u5916\u7684\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\uff0c\u4f7f\u7528\u76f8\u540c\u6216\u4e0d\u540c\u7684profile\u53c2\u6570(\u5728 configtx.yaml \u4e2d\u5b9a\u4e49)\u4f20\u9012\u7ed9 configtxgen \u3002\u4f60\u53ef\u4ee5\u91cd\u590d\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u7528\u6765\u5728\u7f51\u7edc\u4e2d\u521b\u5efa\u5176\u4ed6\u901a\u9053\u3002 \n\u7528\u4e0b\u5217\u547d\u4ee4\u8fdb\u5165CLI\u5bb9\u5668\uff1a  $ docker exec -it cli bash\nroot@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#  \u9996\u5148\u8fdb\u5165\u7684\u662f\u5728 docker-compose.ymal \u4e2d\u5b9a\u4e49\u7684 working_dir \u76ee\u5f55\u3002\u4e0b\u9762\u7528 $$ \u8868\u793a\u5728\u5bb9\u5668\u5185\u7684\u547d\u4ee4\u884c\u64cd\u4f5c\u3002 \n\u5728\u4e4b\u524d \u521b\u5efa\u4e00\u4e2a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1 \u4e00\u8282\u4e2d\u6211\u4eec\u521b\u5efa\u4e86\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u5de5\u4ef6( channel.txt )\uff0c\u4e0b\u9762\u6211\u4eec\u628a\u5b83\u4f5c\u4e3a\u521b\u5efa\u901a\u9053\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u53d1\u7ed9orderer\u3002 \n\u6211\u4eec\u7528 -c \u6807\u5fd7\u6307\u5b9a\u901a\u9053\u540d\u79f0\uff0c\u7528 -f \u6807\u5fd7\u6307\u5b9a\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u3002\u5728\u8fd9\u91cc\u5b83\u53eb channel.txt \uff0c\u7136\u800c\u4f60\u53ef\u4ee5\u7528\u5176\u4ed6\u540d\u5b57\u6765\u6302\u8f7d\u4f60\u81ea\u5df1\u7684\u901a\u9053\u914d\u7f6e\u4e8b\u52a1\u3002\u6211\u4eec\u53c8\u4e00\u6b21\u5728CLI\u5bb9\u5668\u5185\u8bbe\u7f6e CHANNEL_NAME \u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u7528\u663e\u5f0f\u5730\u4f20\u9012\u8fd9\u4e2a\u53c2\u6570\u3002    $$ export CHANNEL_NAME=mychannel\n$$ export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem\n$$ peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f \\\n./channel-artifacts/channel.tx --tls --cafile $ORDERER_CA  \u6ce8\u610f\u6b64\u547d\u4ee4\u884c\u4e2d\u7684 --cafile \u53c2\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411orderer\u6839CA\u8bc1\u4e66\u7684\u672c\u5730\u8def\u5f84\uff0c\u7528\u4e8e\u9a8c\u8bc1TLS\u63e1\u624b\u3002 \n\u547d\u4ee4\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521b\u4e16\u533a\u5757( channel-ID.block )\uff0c\u6211\u4eec\u7528\u5b83\u52a0\u5165\u901a\u9053\u3002\u5b83\u91cc\u9762\u5305\u542b\u4e86\u5728 channel.tx \u4e2d\u5b9a\u4e49\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u6539\u53d8\u8fc7\u901a\u9053\u540d\u79f0\uff0c\u8be5\u547d\u4ee4\u5c06\u8fd4\u56de\u4e00\u4e2a\u53eb mychannel.block \u7684proto\u3002\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a mychannel.block \u6587\u4ef6\u3002 \n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u628a peer0.org1.example.com \u8282\u70b9\u52a0\u5165\u901a\u9053\uff1a  $$ peer channel join -b mychannel.block  \u4f60\u8fd8\u53ef\u4ee5\u5c06\u5176\u4ed6peer\u52a0\u5165\u901a\u9053\uff0c\u65b9\u6cd5\u662f\u4fee\u6539\u4e4b\u524d\u5728 \u73af\u5883\u53d8\u91cf \u4e00\u8282\u4e2d\u63d0\u5230\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u4f60\u7528 env \u547d\u4ee4\u67e5\u770b\u4e00\u4e0b\u73af\u5883\u53d8\u91cf\uff0c\u4f1a\u53d1\u73b0\u90a34\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u503c\u90fd\u662f peer0.org1.example.com \u5bf9\u5e94\u7684\u3002 \n\u6211\u4eec\u4e0d\u5c06\u6bcf\u4e2apeer\u90fd\u52a0\u5165\u7f51\u7edc\uff0c\u800c\u662f\u5c06 peer0.org2.example.com \u52a0\u5165\u7f51\u7edc\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u901a\u9053\u7684\u951a\u70b9peer\u5b9a\u4e49\u3002\u6211\u4eec\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5c06\u9884\u5148\u70e7\u5236\u5728CLI\u5bb9\u5668\u4e2d\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u66ff\u6362\u6389:  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID= Org2MSP  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel join -b mychannel.block", 
            "title": "\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053"
        }, 
        {
            "location": "/build_network_zh/#peer", 
            "text": "\u4e0b\u9762\u7684\u547d\u4ee4\u662f\u901a\u9053\u53d8\u66f4\uff0c\u4ed6\u4eec\u4f1a\u5e7f\u64ad\u5230\u901a\u9053\u5b9a\u4e49\u3002\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u4f1a\u5728\u901a\u9053\u521b\u59cb\u533a\u5757\u7684\u4e0a\u9762\u8ffd\u52a0\u914d\u7f6e\u4fe1\u606f\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u6539\u53d8\u521b\u59cb\u533a\u5757\uff0c\u53ea\u662f\u5411\u94fe\u4e2d\u6dfb\u52a0\u4e86\u5b9a\u4e49\u951a\u70b9peer\u7684delta\u3002 \n\u53d8\u66f4\u901a\u9053\u5b9a\u4e49\uff0c\u5c06 peer0.org1.example.com \u5b9a\u4e49\u4e3aOrg1\u7684\u951a\u70b9peer\u3002  $$ peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile $ORDERER_CA  \u73b0\u5728\uff0c\u53d8\u66f4\u901a\u9053\u5b9a\u4e49\uff0c\u5c06 peer0.org2.example.com \u5b9a\u4e49\u4e3aOrg2\u7684\u951a\u70b9peer\u3002\u6ce8\u610f\u547d\u4ee4\u4e2d\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u7528\u4e8e\u8986\u76d6\u9ed8\u8ba4\u7684 peer0.org1.example.com \u7684\u76f8\u5173\u503c\u3002  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID= Org2MSP  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem", 
            "title": "\u66f4\u65b0\u951a\u70b9peer"
        }, 
        {
            "location": "/build_network_zh/#_13", 
            "text": "\u6ce8\u610f\uff0c\u6211\u4eec\u7b80\u5355\u5b9e\u7528\u4e86\u4e00\u4e2a\u5df2\u6709\u94fe\u7801\u3002\u5982\u679c\u60f3\u5b66\u4e60\u94fe\u7801\u5f00\u53d1\uff0c\u8bf7\u53c2\u8003 \u94fe\u7801\u5f00\u53d1 \u4e00\u7ae0\u3002 \n\u5e94\u7528\u901a\u8fc7\u94fe\u7801\u4e0e\u533a\u5757\u94fe\u8d26\u672c\u4ea4\u4e92\u3002\u6211\u4eec\u9700\u8981\u5b89\u88c5\u94fe\u7801\u5230\u90a3\u4e9b\u6267\u884c\u548c\u4e3a\u4e8b\u52a1\u80cc\u4e66\u7684peer\u4e0a\uff0c\u5e76\u5728\u901a\u9053\u4e0a\u5b9e\u4f8b\u5316\u94fe\u7801\u3002 \n\u9996\u5148\uff0c\u5b89\u88c5Go\u8bed\u8a00\u793a\u8303\u94fe\u7801\u52304\u4e2apeer\u8282\u70b9\u7684\u67d0\u4e2a\u4e0a\u3002\u8fd9\u4e9b\u547d\u4ee4\u4f1a\u5c06\u6e90\u7801\u653e\u5230\u6307\u5b9apeer\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0a\u3002  \u6ce8\u610f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u94fe\u7801\u540d\u79f0\u548c\u7248\u672c\uff0c\u4f60\u53ea\u80fd\u5b89\u88c5\u4e00\u4e2a\u7248\u672c\u7684\u6e90\u7801\u3002\u6e90\u7801\u4ee5\u94fe\u7801\u7684\u540d\u79f0\u548c\u7248\u672c\u53f7\u4e3a\u4e0a\u4e0b\u6587\u5b58\u5728\u4e8epeer\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u5b83\u4e0d\u5173\u6ce8\u8bed\u8a00\u3002     $$ peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/  \u4e0b\u4e00\u6b65\u5728\u901a\u9053\u4e0a\u5b9e\u4f8b\u5316\u94fe\u7801\u3002\u8fd9\u5c06\u5728\u901a\u9053\u4e0a\u521d\u59cb\u5316\u94fe\u7801\u3001\u4e3a\u94fe\u7801\u8bbe\u7f6e\u80cc\u4e66\u7b56\u7565\u548c\u4e3a\u76ee\u6807peer\u542f\u52a8\u4e00\u4e2a\u94fe\u7801\u5bb9\u5668\u3002\u6ce8\u610f -P \u53c2\u6570\u3002\u8fd9\u662f\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u7528\u4e8e\u5bf9\u94fe\u7801\u4e8b\u52a1\u8fdb\u884c\u9a8c\u8bc1\u3002 \n\u5728\u4e0b\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u4f60\u6ce8\u610f\u5230\u4e86\u6211\u4eec\u5c06\u7b56\u7565\u8bbe\u7f6e\u4e3a -P \"OR ('Org0MSP.member','Org1MSP.member')\" \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u4eceOrg1\u6216Org2\u7684peer\u4e0a\u83b7\u5f97\u4e00\u4e2a\u80cc\u4e66\u3002\u5982\u679c\u628a OR \u6539\u6210 AND \uff0c\u5219\u8868\u793a\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u80cc\u4e66\u3002    $$ peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c '{ Args :[ init , a ,  100 ,  b , 200 ]}' -P  OR ('Org1MSP.member','Org2MSP.member')   \u5173\u4e8e\u80cc\u4e66\u7b56\u7565\u7684\u7ec6\u8282\u53ef\u4ee5\u770b\u5230 \u80cc\u4e66\u7b56\u7565 \u3002 \n\u5982\u679c\u4f60\u60f3\u66f4\u591a\u7684peer\u4e0e\u8d26\u672c\u4ea4\u4e92\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u4eec\u52a0\u5165\u901a\u9053\uff0c\u5b89\u88c5\u540c\u6837\u540d\u5b57\u3001\u7248\u672c\u548c\u8bed\u8a00\u7684\u94fe\u7801\u5230\u76f8\u5e94peer\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4e00\u4e2a\u94fe\u7801\u5bb9\u5668\u88ab\u5728peer\u4e0a\u542f\u52a8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4e0e\u76f8\u5e94\u94fe\u7801\u4ea4\u4e92\u4e86\u3002\u9700\u8981\u77e5\u9053\u7684\u662f\uff0cNode.js\u955c\u50cf\u7684\u7f16\u8bd1\u76f8\u5bf9\u8f83\u6162\u3002 \n\u5f53\u94fe\u7801\u5728\u901a\u9053\u4e0a\u88ab\u5b9e\u4f8b\u5316\u540e\uff0c\u6211\u4eec\u53ea\u9700\u4f20\u5165\u901a\u9053id\u548c\u94fe\u7801\u540d\u79f0\u6765\u8bbf\u95ee\u5b83\u3002", 
            "title": "\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801"
        }, 
        {
            "location": "/build_network_zh/#_14", 
            "text": "\u8ba9\u6211\u4eec\u67e5\u8be2\u4e00\u4e0b\u952e a \u7684\u503c\uff0c\u4ee5\u4fbf\u786e\u8ba4\u94fe\u7801\u5df2\u7ecf\u5b9e\u4f8b\u5316\u548c\u72b6\u6001\u6570\u636e\u5e93\u5df2\u7ecf\u586b\u5145\u3002\u67e5\u8be2\u8bed\u53e5\u5982\u4e0b\uff1a  $$ peer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , a ]}'\nQuery Result: 100    (\u5176\u5b83\u4fe1\u606f\u7701\u7565)", 
            "title": "\u67e5\u8be2"
        }, 
        {
            "location": "/build_network_zh/#inoke", 
            "text": "\u73b0\u5728\u8ba9\u6211\u4eec\u628a a \u768410\u4e2a\u7ed9 b \uff08\u5373a\u51cf\u5c1110\uff0cb\u589e\u52a010\uff09\u3002\u8fd9\u4e2a\u4e8b\u52a1\u4f1a\u5207\u5272\u4e00\u4e2a\u65b0\u533a\u5757\u5e76\u66f4\u65b0\u72b6\u6001\u6570\u636e\u5e93\u3002\u8c03\u7528\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a  $$ peer chaincode invoke -o orderer.example.com:7050  --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{ Args :[ invoke , a , b , 10 ]}'  \u7136\u540e\u5206\u522b\u67e5\u8be2\u4e00\u4e0b a \u548c b \u7684\u503c\uff1a  $$ peer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , a ]}'\nQuery Result: 90    (\u5176\u5b83\u4fe1\u606f\u7701\u7565)\n$$ peer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , b ]}'\nQuery Result: 210    (\u5176\u5b83\u4fe1\u606f\u7701\u7565)", 
            "title": "\u8c03\u7528(Inoke)"
        }, 
        {
            "location": "/build_network_zh/#_15", 
            "text": "\u4e3a\u4e86\u5bf9\u8d26\u672c\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0cpeer\u5fc5\u987b\u5b89\u88c5\u94fe\u7801\u3002\u6b64\u5916\uff0c\u94fe\u7801\u5bb9\u5668\u5e76\u6ca1\u6709\u542f\u52a8\uff0c\u76f4\u5230\u5bf9\u94fe\u7801\u8fdb\u884c\u521d\u59cb\u5316\u6216\u6267\u884c\u8bfb\u5199\u4e8b\u52a1(\u5982\u67e5\u8be2 a \u7684\u503c)\u3002\u8fd9\u4e9b\u4e8b\u52a1\u4fc3\u4f7f\u5bb9\u5668\u542f\u52a8\u3002\u800c\u4e14\uff0c\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u4f1a\u7ef4\u6301\u4e00\u4e2a\u8d26\u672c\u7684\u5b8c\u5168\u526f\u672c\uff0c\u5176\u4e2d\u5305\u62ec\u4e0d\u53ef\u4fee\u6539\u3001\u533a\u5757\u4e2d\u7684\u987a\u5e8f\u8bb0\u5f55\uff0c\u4ee5\u53ca\u72b6\u6001\u6570\u636e\u5e93(\u5176\u4e2d\u7ef4\u62a4\u4e86\u5f53\u524d\u72b6\u6001\u7684\u5feb\u7167)\u3002\u8fd9\u5305\u542b\u6ca1\u6709\u5b89\u88c5\u94fe\u7801\u7684peer\uff08\u5c31\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 peer1.org1.example.com peer)\u3002 \u6700\u7ec8\uff0c\u94fe\u7801\u5728\u5b89\u88c5\u540e\u53ef\u4ee5\u8bbf\u95ee(\u5c31\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 peer1.org2.example.com )\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u3002", 
            "title": "\u8fd9\u6f14\u793a\u4e86\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/build_network_zh/#_16", 
            "text": "\u68c0\u67e5CLI docker\u5bb9\u5668\u7684\u65e5\u5fd7(\u9700\u8981\u5148\u901a\u8fc7exit\u547d\u4ee4\u5148\u9000\u51fa\u5bb9\u5668\uff0c\u8fd4\u56de\u5230\u5bbf\u4e3b\u64cd\u4f5c\u7cfb\u7edf):  $ docker logs -f cli  \u4f46\uff0c\u6211\u7684cli\u5bb9\u5668\u7684\u65e5\u5fd7\u662f\u7a7a\u7684\uff01\u539f\u56e0\u4e0d\u660e", 
            "title": "\u600e\u4e48\u770b\u5230\u8fd9\u4e9b\u4e8b\u52a1\uff1f"
        }, 
        {
            "location": "/build_network_zh/#_17", 
            "text": "\u7528 docker logs \u547d\u4ee4\u67e5\u770b\u4e0d\u540c\u94fe\u7801\u5bb9\u5668\u7684\u65e5\u5fd7\uff0c\u6765\u5206\u522b\u67e5\u770b\u5404\u4e2a\u4e8b\u52a1\u7684\u65e5\u5fd7\u3002\u9700\u8981\u5148\u7528 docker ps \u547d\u4ee4\u627e\u5230\u94fe\u7801\u5bb9\u5668id\u3002\u4e0b\u9762\u662f\u521a\u521a\u6d4b\u8bd5\u7684\u94fe\u7801\u5bb9\u5668\u65e5\u5fd7\uff1a  docker logs 3daea3abfab2\nex02 Init\nAval = 100, Bval = 200\nex02 Invoke\nQuery Response:{ Name : a , Amount : 100 }\nex02 Invoke\nAval = 90, Bval = 210\nex02 Invoke\nQuery Response:{ Name : a , Amount : 90 }\nex02 Invoke\nQuery Response:{ Name : b , Amount : 210 }", 
            "title": "\u600e\u4e48\u770b\u5230\u94fe\u7801\u65e5\u5fd7\uff1f"
        }, 
        {
            "location": "/build_network_zh/#docker-comopse", 
            "text": "BYFN\u8303\u4f8b\u63d0\u4f9b\u4e86\u4e24\u79cd\u98ce\u683c\u7684Docker Compose\u6587\u4ef6\uff0c\u90fd\u662f\u4ece docker-compose-base.yaml (\u4f4d\u4e8e base \u76ee\u5f55)\u6269\u5c55\u800c\u6765\u3002\u7b2c\u4e00\u79cd\u98ce\u683c\u662f docker-compose-cli.yaml \uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2aCLI\u5bb9\u5668,\u4ee5\u53ca\u4e00\u4e2aorderer\u548c4\u4e2apeer\u3002\u6211\u4eec\u5728\u8fd9\u4e2a\u6587\u7ae0\u4e2d\u4e3b\u8981\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u3002    \u6ce8\u91ca\uff1a\u672c\u6587\u5269\u4f59\u90e8\u5206\u7684\u5185\u5bb9\u4e3b\u8981\u8bb2\u4e00\u4e2a\u4e3a\u4e86SDK\u8bbe\u8ba1\u7684docker-compose\u6587\u4ef6\u3002\u66f4\u591a\u7ec6\u8282\u53c2\u8003 Node SDK\u5e93 \u3002  \u7b2c\u4e8c\u79cd\u98ce\u683c\u7684\u662f docker-compose-e2e.yaml \uff0c\u8fd9\u4e2a\u7528\u4e8e\u4f7f\u7528Node.js SDK\u8fdb\u884c\u7684\u7aef\u5230\u7aef\u6d4b\u8bd5\u3002\u4e3a\u4e86\u4f7f\u7528SDK\uff0c\u5b83\u7684\u4e3b\u8981\u4e0d\u540c\u662f\u5305\u542b\u4e00\u4e2a\u8fd0\u884cfabric-ca\u670d\u52a1\u5668\u7684\u5bb9\u5668\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001REST\u8bf7\u6c42\u5230\u7ec4\u7ec7\u7684CA\uff0c\u7528\u6765\u8fdb\u884c\u7528\u6237\u7684\u767b\u8bb0(registration)\u548c\u6ce8\u518c(enrollment)\u3002 \n\u5982\u679c\u4f60\u60f3\u4f7f\u7528 docker-compose-e2e.yaml \u800c\u4e0d\u8fd0\u884c byfn.sh \u811a\u672c\uff0c\u9700\u8981\u8fdb\u884c4\u4e2a\u5c0f\u4fee\u6539\u3002\u6211\u4eec\u9700\u8981\u6307\u51fa\u7ec4\u7ec7CA\u7684\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u6307\u51fa\u79c1\u94a5\u5728crypto-config\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0cOrg1\u7684\u79c1\u94a5\u662f\u8def\u5f84 crypto-config/peerOrganizations/org1.example.com/ca/ \u3002\u8fd9\u4e2a\u79c1\u94a5\u7684\u6587\u4ef6\u540d\u662f\u4e00\u4e2a\u4ee5 _sk \u7ed3\u5c3e\u7684\u957f\u54c8\u5e0c\u503c\u3002Org2\u7684\u79c1\u94a5\u8def\u5f84\u662f crypto-config/peerOrganizations/org2.example.com/ca/ \u3002 \n\u5728 docker-compose-e2e.yaml \u4e2d\u4e3aca0\u548cca1\u4fee\u6539 FABRIC_CA_SERVER_TLS_KEYFILE \u53d8\u91cf\u3002\u4f60\u8fd8\u9700\u8981\u4fee\u6539\u542f\u52a8ca\u670d\u52a1\u5668\u7684\u547d\u4ee4\u8def\u5f84\u3002\u4f60\u9700\u8981\u4e3a\u6bcf\u4e2aCA\u5bb9\u5668\u63d0\u4f9b\u540c\u6837\u7684\u79c1\u94a5\u4e24\u6b21\u3002", 
            "title": "\u7406\u89e3docker-comopse\u62d3\u6251"
        }, 
        {
            "location": "/build_network_zh/#couchdb", 
            "text": "\u72b6\u6001\u6570\u636e\u5e93\u53ef\u4ee5\u4ece\u9ed8\u8ba4(goleveldb)\u5207\u6362\u5230CouchDB\u3002\u540c\u6837\u7684\u94fe\u7801\u51fd\u6570\u53ef\u4ee5\u7528\u4e8eCouchDB\uff0c\u7136\u800c\uff0c\u5f53\u628a\u94fe\u7801\u6570\u636e\u5efa\u6a21\u4e3aJSON\u540e\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u72b6\u6001\u6570\u636e\u5e93\u7684\u6570\u636e\u5185\u5bb9\u6267\u884c\u4e30\u5bcc\u800c\u590d\u6742\u7684\u67e5\u8be2\u3002 \n\u4f7f\u7528CouchDB\u4ee3\u66ff\u9ed8\u8ba4\u6570\u636e\u5e93(goleveldb)\uff0c\u4e0e\u4e4b\u524d\u63cf\u8ff0\u76f8\u540c\u6b65\u9aa4\u751f\u6210\u5de5\u4ef6\uff0c\u9664\u4e86\u542f\u52a8\u7f51\u7edc\u65f6\u4f7f\u7528 docker-compose-couch.yaml \uff1a  CHANNEL_NAME=$CHANNEL_NAME TIMEOUT= pick_a_value  docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml up -d  \u4e0b\u9762\u7684\u94fe\u7801 chaincode_example02 \u5c06\u4f7f\u7528CouchDB\u3002    \u6ce8\u91ca\uff1a\u5982\u679c\u4f60\u9009\u62e9\u4e86\u5c06fabric-couchdb\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7aef\u53e3\uff0c\u8bf7\u786e\u4fdd\u7aef\u53e3\u7684\u8fdc\u7a0b\u8bbf\u95ee\u662f\u5b89\u5168\u7684\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e0b\u6620\u5c04\u7aef\u53e3\u4f7fCouchDB REST API\u53ef\u7528\uff0c\u5e76\u4f7f\u901a\u8fc7CoutchDB web\u63a5\u53e3(Fauxton)\u4f7f\u6570\u636e\u5e93\u53ef\u89c1\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u8981\u614e\u91cd\uff0c\u9700\u8981\u9650\u5236\u4ece\u5916\u90e8\u8bbf\u95eeCouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u3002      \u4f60\u53ef\u4ee5\u7528 chaincode_example02 \u94fe\u7801\u8bbf\u95eeCouchDB\u72b6\u6001\u6570\u636e\u5e93\uff0c\u5c31\u50cf\u524d\u9762\u8bb2\u7684\u90a3\u6837\u3002\u4f46\u4e3a\u4e86\u6267\u884cCouchDB\u7279\u6027\u7684\u67e5\u8be2\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6570\u636e\u6a21\u578b\u4e3aJSON\u7684\u94fe\u7801(\u5982 marbles02 )\u3002\u4f60\u53ef\u4ee5\u5728 fabric/examples/chaincode/go \u76ee\u5f55\u627e\u5230 marbles02 \u94fe\u7801\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6b65\u9aa4\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053\uff0c\u5c31\u50cf\u524d\u9762\u5728 \u521b\u5efa\u548c\u52a0\u5165\u901a\u9053 \u4e00\u8282\u4e2d\u8bb2\u7684\u90a3\u6837\u3002\u4e00\u65e6\u5c06peer\u52a0\u5165\u4e86\u901a\u9053\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u6b65\u9aa4\u4e0e marbles02 \u94fe\u7801\u4ea4\u4e92\uff1a\n1. \u5728 peer0.org1.example.com \u4e0a\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801:    $$ peer chaincode install -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\n$$ peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -v 1.0 -c '{ Args :[ init ]}' -P  OR ('Org0MSP.member','Org1MSP.member')    \u521b\u5efa\u4e00\u4e9b\u5f39\u73e0\u5e76\u79fb\u52a8\u5b83\u4eec\uff1a   $$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ initMarble , marble1 , blue , 35 , tom ]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ initMarble , marble2 , red , 50 , tom ]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ initMarble , marble3 , blue , 70 , tom ]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ transferMarble , marble2 , jerry ]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ transferMarblesBasedOnColor , blue , jerry ]}'\n$$ peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ delete , marble1 ]}'   \u5982\u679c\u4f60\u9009\u62e9\u5728docker-compse\u4e2d\u6620\u5c04CouchDB\u7aef\u53e3\uff0c\u4f60\u73b0\u5728\u5c31\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684web\u63a5\u53e3(Fauxton)\u67e5\u8be2\u72b6\u6001\u6570\u636e\u5e93\uff0c\u65b9\u6cd5\u662f\u6253\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230\u4e0b\u5217URL\uff1a   http://localhost:5984/_utils  \u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u53eb mychannel \u7684\u6570\u636e\u5e93(\u6216\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684\u901a\u9053\u540d\u79f0)\u548c\u91cc\u9762\u7684\u6587\u6863\u6570\u636e\u3002  \u6ce8\u91ca\uff1a\u4f60\u9700\u8981\u66f4\u65b0$CHANNEL_NAME\u4e3a\u5408\u9002\u7684\u503c      \u4f60\u53ef\u4ee5\u901a\u8fc7CLI\u8fd0\u884c\u4e00\u822c\u67e5\u8be2(\u5982\u8bfb marble2 ):  $$ peer chaincode query -C $CHANNEL_NAME -n marbles -c '{ Args :[ readMarble , marble2 ]}'\nQuery Result: { color : red , docType : marble , name : marble2 , owner : jerry , size :50}  \u4f60\u53ef\u4ee5\u67e5\u8be2\u4e00\u4e2a\u7279\u5b9a\u5f39\u73e0\u7684\u5386\u53f2\uff0c\u5982 marble1 :  $$ peer chaincode query -C $CHANNEL_NAME -n marbles -c '{ Args :[ getHistoryForMarble , marble1 ]}'\nQuery Result: [{ TxId : 1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464 ,  Valu  \u4f60\u8fd8\u53ef\u4ee5\u5bf9\u6570\u636e\u5185\u5bb9\u6267\u884c\u5bcc\u6587\u672c\u67e5\u8be2\uff0c\u5982\u67e5\u8be2\u62e5\u6709\u8005 jerry \u7684\u5f39\u73e0\u5b57\u6bb5\uff1a  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{ Args :[ queryMarblesByOwner , jerry ]}'\nQuery Result: [{ Key : marble2 ,  Record :{ color : red , docType : marble , name : marble2 , owner", 
            "title": "\u4f7f\u7528CouchDB"
        }, 
        {
            "location": "/build_network_zh/#couchdb_1", 
            "text": "CouchDB\u662f\u4e00\u79cdNoSQL\u89e3\u51b3\u65b9\u6848\u3002\u5b83\u662f\u4e00\u4e2a\u9762\u5411\u6587\u6863\u7684\u6570\u636e\u5e93\uff0c\u5176\u4e2d\u6587\u6863\u5b57\u6bb5\u88ab\u5b58\u50a8\u4e3a\u952e\u503c\u5bf9\u3002\u5b57\u6bb5\u53ef\u4ee5\u662f\u7b80\u5355\u7684\u952e/\u503c\u5bf9\uff0c\u5217\u8868\u6216\u6620\u5c04\u3002\u9664\u4e86LevelDB\u652f\u6301\u7684keyed/composite-key/key-range\u67e5\u8be2\u5916\uff0cCouchDB\u8fd8\u652f\u6301\u5b8c\u6574\u7684\u5bcc\u6587\u672c\u67e5\u8be2\u529f\u80fd\uff0c\u4f8b\u5982\u5bf9\u6574\u4e2a\u533a\u5757\u94fe\u6570\u636e\u7684\u975e\u952e\u67e5\u8be2\uff0c\u56e0\u4e3a\u5176\u6570\u636e\u5185\u5bb9\u4ee5JSON\u683c\u5f0f\u5b58\u50a8\uff0c\u5b8c\u5168\u53ef\u67e5\u8be2\u3002\u56e0\u6b64\uff0cCouchDB\u53ef\u4ee5\u6ee1\u8db3\u4e0d\u53d7LevelDB\u652f\u6301\u7684\u8bb8\u591a\u7528\u4f8b\u7684\u94fe\u7801\uff0c\u5ba1\u8ba1\u548c\u62a5\u544a\u8981\u6c42\u3002  CouchDB\u8fd8\u53ef\u4ee5\u589e\u5f3a\u533a\u5757\u94fe\u4e2d\u5408\u89c4\u6027\u548c\u6570\u636e\u4fdd\u62a4\u7684\u5b89\u5168\u6027\u3002\u56e0\u4e3a\u5b83\u80fd\u591f\u901a\u8fc7\u8fc7\u6ee4\u548c\u5c4f\u853d\u4e8b\u52a1\u5185\u7684\u5c5e\u6027\u6765\u5b9e\u73b0\u5b57\u6bb5\u7ea7\u522b\u7684\u5b89\u5168\u6027\uff0c\u5e76\u4e14\u5728\u9700\u8981\u65f6\u6388\u6743\u53ea\u8bfb\u6743\u9650\u3002    \u53e6\u5916\uff0cCouchDB\u5c5e\u4e8eCAP\u5b9a\u7406\u7684AP\u7c7b\u578b\uff08Availability\u548cPartition Tolerance\uff09\u3002\u5b83\u4f7f\u7528\u4e3b - \u4e3b\u590d\u5236\u6a21\u578b\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605CouchDB\u6587\u6863\u7684\u201c  \u6700\u7ec8\u4e00\u81f4\u6027 \u201d\u9875\u9762\u3002\u4f46\u662f\uff0c\u5728\u6bcf\u4e2aFabric peer\u4e0b\uff0c\u4e0d\u5b58\u5728\u6570\u636e\u5e93\u526f\u672c\uff0c\u5199\u5165\u6570\u636e\u5e93\u5c06\u4fdd\u8bc1\u4e00\u81f4\u6027\u548c\u6301\u4e45\u6027\uff08\u975e Eventual Consistency \uff09\u3002  CouchDB\u662fFabric\u7684\u7b2c\u4e00\u4e2a\u5916\u90e8\u53ef\u63d2\u5165\u72b6\u6001\u6570\u636e\u5e93\uff0c\u53ef\u80fd\u4e5f\u4f1a\u6709\u5176\u4ed6\u5916\u90e8\u6570\u636e\u5e93\u9009\u9879\u3002\u4f8b\u5982\uff0cIBM\u4e3a\u5173\u7cfb\u6570\u636e\u5e93\u542f\u7528\u533a\u5757\u94fe\u3002\u800cCP\u578b\uff08\u4e00\u81f4\u6027\u548c\u5206\u533a\u5bb9\u5fcd\uff09\u6570\u636e\u5e93\u4e5f\u53ef\u80fd\u662f\u9700\u8981\u7684\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709\u5e94\u7528\u7ea7\u4fdd\u8bc1\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u6570\u636e\u4e00\u81f4\u6027\u3002", 
            "title": "\u4e3a\u4ec0\u4e48\u662fCouchDB\uff1f"
        }, 
        {
            "location": "/build_network_zh/#_18", 
            "text": "\u5982\u679c\u5728peer\u5bb9\u5668\u6216CouchDB\u5bb9\u5668\u4e0a\u9700\u8981\u6570\u636e\u6301\u4e45\u6027\uff0c\u6709\u4e00\u79cd\u9009\u62e9\u662f\u5c06docker\u5bbf\u4e3b\u673a\u4e2d\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u4e2d\u7684\u76f8\u5173\u76ee\u5f55\u4e2d\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728 docker-compose-base.yaml \u6587\u4ef6\u4e2d\u7684peer\u5bb9\u5668\u5b9a\u4e49\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c\uff1a  volumes:\n - /var/hyperledger/peer0:/var/hyperledger/production  \u5bf9\u4e8eCouchDB\u5bb9\u5668\uff0c\u60a8\u53ef\u4ee5\u5728CouchDB\u5bb9\u5668\u5b9a\u4e49\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c\uff1a\u3001  volumes:\n - /var/hyperledger/couchdb0:/opt/couchdb/data", 
            "title": "\u4e00\u4e2a\u5173\u4e8e\u6570\u636e\u6301\u4e45\u5316\u7684\u5907\u6ce8"
        }, 
        {
            "location": "/build_network_zh/#troubleshooting", 
            "text": "\u603b\u662f\u5e72\u51c0\u5730\u542f\u52a8\u7f51\u7edc\u3002\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u5220\u9664\u5171\u5efa\u3001\u5bc6\u94a5\u3001\u5bb9\u5668\u548c\u94fe\u7801\u955c\u50cf\uff1a   ./byfn.sh -m down  \u6ce8\u91ca\uff1a\u5982\u679c\u4e0d\u5220\u9664\u65e7\u7684\u5bb9\u5668\u548c\u955c\u50cf\u4f1a\u62a5\u9519\u3002     \u5982\u679c\u4f60\u770b\u5230Docker\u9519\u8bef\uff0c\u9996\u5148\u68c0\u67e5docker\u7248\u672c\uff0c\u7136\u540e\u91cd\u542fdocker\u8fdb\u7a0b\u3002docker\u95ee\u9898\u5f80\u5f80\u4e0d\u597d\u8bc6\u522b\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u770b\u5230\u7684\u9519\u8bef\u662f\u4e0d\u80fd\u627e\u5230\u6302\u5728\u5230\u5bb9\u5668\u7684\u52a0\u5bc6\u6750\u6599\u3002 \n\u5982\u679c\u4f60\u60f3\u5220\u9664\u955c\u50cf\u91cd\u65b0\u5f00\u59cb\uff1a   $ docker rm -f $(docker ps -aq)\n$ docker rmi -f $(docker images -q)   \u5982\u679c\u4f60\u5728\u521b\u5efa\u3001\u5b9e\u4f8b\u5316\u3001\u8c03\u7528\u6216\u67e5\u8be2\u547d\u4ee4\u4e2d\u770b\u5230\u9519\u8bef\uff0c\u786e\u4fdd\u4f60\u7684\u901a\u9053\u540d\u79f0\u548c\u94fe\u7801\u540d\u79f0\u6b63\u786e\u3002  \u5982\u679c\u4f60\u770b\u5230\u4e0b\u9762\u7684\u9519\u8bef\uff1a   Error: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)  \u770b\u6765\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u94fe\u7801\u955c\u50cf\uff08\u4f8b\u5982 dev-peer1.org2.example.com-mycc-1.0 \u6216 dev-peer0.org1.example.com-mycc-1.0 )\u5df2\u7ecf\u5728\u8fd0\u884c\u3002\u5220\u9664\u5b83\u4eec\u91cd\u8bd5\u3002  $ docker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')   \u5982\u679c\u4f60\u770b\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9\uff1a   Error connecting: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure\nError: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure  \u786e\u4fdd\u4f60\u6b63\u5728\u8fd0\u884c\u7684\u7f51\u7edc\u662f\u201c1.0.0\u201d\u955c\u50cf\u5e76\u4e14tag\u662f\u201clatest\u201d\u3002     \u5982\u679c\u4f60\u770b\u5230\u4e0b\u9762\u7684\u9519\u8bef\uff1a   [configtx/tool/localconfig] Load -  CRIT 002 Error reading configuration: Unsupported Config Type  \npanic: Error reading configuration: Unsupported Config Type    \u8bf4\u660e\u4f60\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf FABRIC_CFG_PATH \u3002configtxgen\u5de5\u5177\u9700\u8981\u8fd9\u4e2a\u53d8\u91cf\u6765\u5b9a\u4f4dconfigtx.yaml\u3002\u8fd4\u56de\u548c\u6267\u884c export FABRIC_CFG_PATH=$PWD \uff0c\u7136\u540e\u91cd\u5efa\u4f60\u7684\u901a\u9053\u5de5\u4ef6\u3002 \n- \u4f7f\u7528 down \u9009\u9879\u6e05\u7406\u7f51\u7edc\uff1a  $ ./byfn.sh -m down   \u5982\u679c\u4f60\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u8bf4\u4f60\u4ecd\u6709\u6d3b\u52a8\u7684\u7aef\u70b9\uff0c\u5219\u9700\u8981prune\u4f60\u7684docker\u7f51\u7edc\u3002\u8fd9\u5c06\u6e05\u9664\u4e4b\u524d\u7684\u7f51\u7edc\uff0c\u91cd\u65b0\u542f\u52a8\u4e00\u4e2a\u5e72\u51c0\u7684\u73af\u5883\uff1a   $ docker network prune  \u4f60\u4f1a\u770b\u5230\u4e0b\u5217\u4fe1\u606f\uff1a  WARNING! This will remove all networks not used by at least one container.\nAre you sure you want to continue? [y/N]  \u9009\u62e9 y \u3002", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/build_network_zh/#fabric", 
            "text": "\u5e94\u7528\u901a\u8fc7API\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u3002\u667a\u80fd\u5408\u7ea6\u6258\u7ba1\u5728\u7f51\u7edc\u4e2d\uff0c\u9760\u540d\u79f0\u548c\u7248\u672c\u53f7\u8bc6\u522b\u3002\u4f8b\u5982\uff0c\u667a\u80fd\u5408\u7ea6\u5bb9\u5668\u7684\u540d\u79f0\u662f dev-peer0.org1.example.com-fabcar-1.0 \uff0c\u5176\u4e2d fabcar \u662f\u667a\u80fd\u5408\u7ea6\u540d\u79f0\uff0c 1.0 \u662f\u667a\u80fd\u5408\u7ea6\u7248\u672c\u53f7\uff0c\u800c dev-peer0.org1.example.com \u662fpeer\u540d\u79f0\u3002 \nAPI\u53ef\u4ee5\u628aSDK\u8bbf\u95ee\u3002SDK\u5c01\u88c5\u4e86\u5e94\u7528\u4e0e\u667a\u80fd\u5408\u7ea6\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u5982\u67e5\u8be2\u6216\u63a5\u6536\u8d26\u672c\u66f4\u65b0\u3002\u8fd9\u4e9bAPI\u4f7f\u7528\u51e0\u4e2a\u4e0d\u540c\u7684\u7f51\u7edc\u5730\u5740\uff0c\u63a5\u6536\u4e00\u4e9b\u8f93\u5165\u53c2\u6570\u3002\u667a\u80fd\u5408\u7ea6\u7531peer\u7ba1\u7406\u5458\u5b89\u88c5\uff0c\u7136\u540e\u6309\u7167\u94fe\u7801\u7684\u7b56\u7565\u88ab\u5b9e\u4f8b\u5316\u5230\u901a\u9053\u4e2d\u3002\u667a\u80fd\u5408\u7ea6\u7684\u5b9e\u4f8b\u5316\u6d41\u7a0b\u4e0e\u666e\u901a\u8c03\u7528\u7684\u4e8b\u52a1\u6d41\u7a0b\u76f8\u540c\uff0c\u80cc\u4e66\u3001\u6392\u5e8f\u3001\u751f\u6548\u3001\u63d0\u4ea4\uff0c\u4e4b\u540e\u624d\u80fd\u4e0e\u94fe\u7801\u5bb9\u5668\u4ea4\u4e92\uff08\u667a\u80fd\u5408\u7ea6\u5b9e\u4f8b\u5316\u5c31\u662f\u94fe\u7801\u5bb9\u5668\u542f\u52a8\uff09\u3002", 
            "title": "\u7406\u89e3Fabric\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#_19", 
            "text": "\u67e5\u8be2\u662f\u6700\u7b80\u5355\u7684\u8c03\u7528\uff1a\u4e00\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u6700\u5e38\u89c1\u7684\u67e5\u8be2\u662f\u5411\u72b6\u6001\u6570\u636e\u5e93\u67e5\u8be2\u4e00\u4e2akey\u7684\u5f53\u524d\u503c( GetState )\u3002\u7136\u800c\uff0c \u94fe\u7801shim\u63a5\u53e3 \u5141\u8bb8\u4e0d\u540c\u7684Get\u8bf7\u6c42\uff0c\u5982 GetHistoryForKey \u6216 GetCreator \u3002 \n\u521b\u5efa\u67e5\u8be2\u9700\u8981\u6307\u5b9a\u4e00\u4e2apeer\u3001\u4e00\u4e2a\u94fe\u7801\u3001\u4e00\u4e2a\u901a\u9053\u548c\u4e00\u7cfb\u5217\u8f93\u5165(\u5982key)\u548c\u4e00\u4e2a\u53ef\u7528\u7684\u94fe\u7801\u51fd\u6570\uff0c\u7136\u540e\u901a\u8fc7API chain.queryByChaincode \u53d1\u9001\u67e5\u8be2\u5230peer\u3002\u76f8\u5e94\u7684\u54cd\u5e94\u503c\u4f1a\u8fd4\u56de\u7ed9\u5e94\u7528\u5ba2\u6237\u7aef\u3002", 
            "title": "\u67e5\u8be2"
        }, 
        {
            "location": "/build_network_zh/#_20", 
            "text": "\u8d26\u672c\u66f4\u65b0\u5f00\u59cb\u4e8e\u5e94\u7528\u521b\u5efa\u4e00\u4e2a\u4e8b\u52a1\u63d0\u8bae\u3002\u7c7b\u4f3c\u4e8e\u67e5\u8be2\uff0c\u521b\u5efa\u4e8b\u52a1\u8bf7\u6c42\u9700\u8981\u6307\u5b9a\u4e00\u4e2apeer\u3001\u94fe\u7801\u3001\u901a\u9053\u3001\u51fd\u6570\u548c\u4e00\u7cfb\u5217\u8f93\u5165\u3002\u7a0b\u5e8f\u4e4b\u540e\u4f1a\u8c03\u7528API channel.SendTransactionProposal \u53d1\u9001\u4e8b\u52a1\u63d0\u8bae\u5230peer\u5bfb\u6c42\u80cc\u4e66\u3002 \n\u7f51\u7edc(\u4e5f\u5c31\u662f\u80cc\u4e66peer(\u53ef\u80fd\u591a\u4e2a))\u4f1a\u8fd4\u56de\u4e00\u4e2a\u63d0\u8bae\u54cd\u5e94\uff0c\u5e94\u7528\u4f7f\u7528\u8be5\u54cd\u5e94\u6765\u521b\u5efa\u548c\u7b7e\u7f72\u4e8b\u52a1\u8bf7\u6c42\u3002\u901a\u8fc7\u8c03\u7528API channel.sendTransaction \uff0c\u8fd9\u4e2a\u4e8b\u52a1\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u6392\u5e8f\u670d\u52a1\u3002\u6392\u5e8f\u670d\u52a1\u5c06\u4e8b\u52a1\u6346\u7ed1\u5165\u4e00\u4e2a\u533a\u5757\uff0c\u5e76\u5c06\u5b83\u53d1\u9001\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u4ee5\u6c42\u751f\u6548(Fabcar\u7f51\u7edc\u53ea\u6709\u4e00\u4e2apeer\u548c\u4e00\u4e2a\u901a\u9053)\u3002 \n\u6700\u540e\u5e94\u7528\u4f7f\u7528\u4e24\u4e2a\u4e8b\u4ef6\u5904\u7406\u5668API\uff1a\u7528 eh.setPeerAddr \u8fde\u63a5\u5230peer\u7684\u4e8b\u4ef6\u76d1\u542c\u8005\u7aef\u53e3\uff0c\u7528 eh.registerTxEvent \u548c\u4e00\u4e2a\u7279\u5b9a\u4e8b\u52a1ID\u53bb\u6ce8\u518c\u4e8b\u4ef6\u3002 eh.registerTxEvent API\u4f7f\u5e94\u7528\u53ef\u4ee5\u6536\u5230\u4e8b\u52a1\u7ed3\u679c\u901a\u77e5\uff08\u5c31\u662f\u662f\u5426\u751f\u6548\uff09\u3002 \n\u4e8b\u52a1\u6d41\u7a0b\u56fe\u793a\u53c2\u8003\u672c\u6587\u7684 \u5171\u8bc6\u8fc7\u7a0b \u4e00\u8282\u3002 \n\u5173\u4e8e\u4e8b\u52a1\u6d41\u7a0b\u7684\u66f4\u591a\u7ec6\u8282\u53c2\u8003 Transaction Flow \u3002 \n\u5f00\u59cb\u94fe\u7801\u7f16\u7a0b\u53c2\u8003 Chaincode for Developers \u3002 \n\u66f4\u591a\u80cc\u4e66\u7b56\u7565\u53c2\u8003 Endorsement policies \u3002 \n\u66f4\u591afabric\u67b6\u6784\u4fe1\u606f\u53c2\u8003 Architecture Explained \u3002", 
            "title": "\u66f4\u65b0"
        }, 
        {
            "location": "/write_first_app_zh/", 
            "text": "\u539f\u6587\n  \n\n\n\u7f16\u5199\u9996\u4e2a\u5e94\u7528\n\n\n\u5728\u5b9e\u8df5\u672c\u7ae0\u524d\uff0c\u8bf7\u6309\n\u542f\u52a8\u9996\u4e2a\u7f51\u7edc(first-network)\n\u4e00\u7ae0\u7684\u63cf\u8ff0\u51c6\u5907\u597d\u73af\u5883\u3002\n\n\u672c\u7ae0\u539f\u6587\u662f\u5b98\u7f51\u7684\nWriting Your First Application\n\n\u672c\u7ae0\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\n/opt/fabric-samples/fabcar\n\u3002\n\n\u5728\u672c\u7ae0\u4e2d\uff0c\u9996\u5148\u8bbf\u95eeCA\u751f\u6210\u6ce8\u518c\u8bc1\u4e66(ECert)\uff0c\u7136\u540e\u5229\u7528\u751f\u6210\u7684\u8eab\u4efd(\u7528\u6237\u5bf9\u8c61)\u67e5\u8be2\u548c\u66f4\u65b0\u8d26\u672c\u3002  \n\n\n\u5efa\u7acb\u5f00\u53d1\u73af\u5883\n\n\n\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u505c\u6b62\u201cfirst-network\u201d\u4e00\u7ae0\u4e2d\u7684\u5404\u79cd\u5bb9\u5668\uff1a\n\n\n$ cd /opt/fabric-samples/fabcar\n$ ../first-network/byfn.sh -m down\n\n\n\n\n\u6216\u4f7f\u7528docker\u547d\u4ee4\u5220\u9664\u6240\u6709\u5bb9\u5668(\u53ef\u4ee5\u4e0e\u4e0a\u9762\u7684\u547d\u4ee4\u6df7\u5408\u4f7f\u7528)\uff1a\n\n\n$ docker rm -f $(docker ps -aq)\n\n\n\n\n\u5220\u9664\u6240\u6709\u7f13\u5b58\u7f51\u7edc\uff1a\n\n\n$ docker network prune\n\n\n\n\n\u5b89\u88c5\u5ba2\u6237\u7aef\u548c\u542f\u52a8\u7f51\u7edc\n\n\n/opt/fabric-samples/fabcar\n\u76ee\u5f55\u4e0b\u6709\u4e2a\npackage.json\n\u6587\u4ef6\uff0c\u5b9a\u4e49\u4e86\u793a\u8303\u5e94\u7528\u7684\u4f9d\u8d56\u5305\uff0c\u901a\u8fc7\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u5b89\u88c5\u4f9d\u8d56\uff08\u4e0ejava\u7684maven\u7c7b\u4f3c\uff09\uff1a\n\n\n$ npm install\n\n\n\n\n\u4f7f\u7528\u811a\u672c\nstartFabric.sh\n\u542f\u52a8\u7f51\u7edc\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u542f\u52a8\u51e0\u4e2aFabric\u5b9e\u4f53\u548c\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u5bb9\u5668(\u94fe\u7801)\u3002\n\n\n$ ./startFabric.sh\n$ docker ps\n\n\n\n\n\u7528\u4e0a\u8ff0docker\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u542f\u52a8\u7684\u5bb9\u5668\u6e05\u5355\u3002  \n\n\n\u6ce8\u518c\u7528\u6237\n\n\n\u6ce8\u518c\u7ba1\u7406\u5458\u7528\u6237\n\n\n\u524d\u9762\u7684\nstartFabric.sh\n\u547d\u4ee4\u4f1a\u542f\u52a8\u4e00\u4e2aCA\u5bb9\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5217\u547d\u4ee4\u67e5\u770bCA\u5bb9\u5668\u7684\u65e5\u5fd7\uff1a\n\n\n$ docker logs -f ca.example.com\n\n\n\n\n\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u6765\u6ce8\u518cadmin\u7528\u6237\uff1a\n\n\n$ node enrollAdmin.js\n\n\n\n\n\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5411\u521b\u5efa\u76ee\u5f55\nhfc-key-store\n\uff0c\u521b\u5efa\u79c1\u94a5\uff0c\u5411CA\u53d1\u9001\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42(CSR)\uff0c\u7136\u540e\u628a\u8fd4\u56de\u7684CA\u7b7e\u540d\u8bc1\u4e66(eCert)\u5b58\u653e\u5728\nhfc-key-store\n\u76ee\u5f55\u3002  \n\n\n\u6ce8\u518c\u7528\u6237user1\n\n\nadmin\u7528\u6237\u662f\u8fd0\u7ef4\u4eba\u5458\u7528\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\u3002\u5728\u4e00\u822c\u7684\u4e1a\u52a1\u573a\u666f\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u201c\u666e\u901a\u7528\u6237\u201d(\u975e\u7ba1\u7406\u5458)\u6765\u8bbf\u95eeFabric\u7f51\u7edc\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u5411Fabric\u7f51\u7edc\u6ce8\u518c\u666e\u901a\u7528\u6237\u9700\u8981\u4f7f\u7528\u7ba1\u7406\u5458\u8eab\u4efd\uff0c\u5982\u73b0\u5728\u5c31\u662f\u7528admin\u8eab\u4efd\u6765\u6ce8\u518c\nuser1\n\u7528\u6237\u3002  \n\n\n$ node registerUser.js\n\n\n\n\n\u4e0e\u6ce8\u518cadmin\u7528\u6237\u7c7b\u4f3c\uff0c\u4ee3\u7801\u4f1a\u521b\u5efauser1\u7528\u6237\u79c1\u94a5\uff0c\u5411CA\u53d1\u9001\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42(CSR)\uff0c\u5e76\u5c06\u8fd4\u56de\u7684CA\u7b7e\u540d\u8bc1\u4e66(eCert)\u5b58\u653e\u5728\nhfc-key-store\n\u76ee\u5f55\u3002  \n\n\n\u67e5\u8be2\u8d26\u672c\n\n\n\u7528\ndocker ps\n\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\nhyperledger/fabric-couchdb\n\u7684\u5bb9\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u4fdd\u5b58\u201c\u4e16\u754c\u72b6\u6001\u201d\u7684key-value\u6570\u636e\u5e93(couchdb)\u3002\u67e5\u8be2\u8d26\u672c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u67e5\u8be2key-value\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff08\u6570\u636e\u5e93\u53d8\u5316\u65e5\u5fd7\u4fdd\u5b58\u5728\u533a\u5757\u94fe\u4e2d\uff09\u3002\u67e5\u8be2\u53c2\u6570\u4e00\u822c\u662f\u4e00\u4e2a\u6216\u51e0\u4e2akey\uff0c\u4e5f\u53ef\u4ee5\u7528json\u4e32\u5f53\u53c2\u6570\u8fdb\u884c\u590d\u6742\u67e5\u8be2\u3002\n\n\u6f14\u793a\u67e5\u8be2\u7684\u4ee3\u7801\u6587\u4ef6\u662f\nquery.js\n\uff0c\u5176\u4e2d\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u8bf4\u660e\u5e94\u7528\u4f7f\u7528\nuser1\n\u4f5c\u4e3a\u7b7e\u540d\u5b9e\u4f53\u3002\n\n\nfabric_client.getUserContext('user1', true);\n\n\n\n\nuser1\u7684\u8eab\u4efd\u8bc1\u660e\u6750\u6599\u5df2\u7ecf\u653e\u5728\u4e86\nhfc-key-store\n\u76ee\u5f55\u4e0b\uff0c\u6211\u4eec\u7b80\u5355\u5730\u544a\u8bc9\u5e94\u7528\u53bb\u83b7\u53d6\u8eab\u4efd\u3002  \n\n\n$ node query.js\n\n\n\n\n\u4f1a\u8fd4\u56de\u4e00\u4e2ajson\u4e32\uff0c\u91cc\u9762\u662f\u5168\u90e810\u8f86\u8f66\u7684\u4fe1\u606f\u3002\n\n\u89c2\u5bdf\u4e00\u4e0b\nquery.js\n\u6e90\u7801\u3002\u5728\u5e94\u7528\u7684\u521d\u59cb\u5316\u533a\u6bb5\uff0c\u5b9a\u4e49\u4e86\u51e0\u4e2a\u53d8\u91cf\uff0c\u5982\u901a\u9053\u540d\u79f0\u3001\u8bc1\u4e66\u5e93\u5730\u5740\u548c\u7f51\u7edc\u7aef\u70b9\u3002\n\n\nvar channel = fabric_client.newChannel('mychannel');\nvar peer = fabric_client.newPeer('grpc://localhost:7051');\nchannel.addPeer(peer);\n\nvar member_user = null;\nvar store_path = path.join(__dirname, 'hfc-key-store');\nconsole.log('Store path:'+store_path);\nvar tx_id = null;\n\n\n\n\n\u4e0b\u9762\u662f\u6267\u884c\u67e5\u8be2\u7684\u4ee3\u7801\uff1a\n\n\n// queryCar chaincode function - requires 1 argument, ex: args: ['CAR4'],\n// queryAllCars chaincode function - requires no arguments , ex: args: [''],\nconst request = {\n  //targets : --- letting this default to the peers assigned to the channel\n  chaincodeId: 'fabcar',\n  fcn: 'queryAllCars',\n  args: ['']\n};\n\n\n\n\n\u5e94\u7528\u6267\u884c\u65f6\uff0c\u5b83\u8c03\u7528\u4e86peer\u7684\nfabcar\n\u94fe\u7801\uff0c\u6267\u884c\u5176\u4e2d\u7684\nqueryAllCars\n\u51fd\u6570\u3002 \n\u5982\u679c\u60f3\u770b\u770b\u6709\u54ea\u4e9b\u94fe\u7801\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\uff0c\u53ef\u4ee5\u6253\u5f00\u6587\u4ef6\n../chaincode/fabcar/go/fabcar.go\n\u6765\u770b\u3002\u53ef\u4ee5\u770b\u5230\u4e0b\u5217\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\uff1a\ninitLedger\n, \nqueryCar\n, \nqueryAllCars\n, \ncreateCar\n\u548c\nchangeCarOwner\n\u3002\n\n\u4e0b\u56fe\u56fe\u793a\u4e86\u5e94\u7528\u3001\u667a\u80fd\u5408\u7ea6\u548c\u8d26\u672c\u7684\u5173\u7cfb\uff1a\n\n\n\n\u4e0b\u9762\u793a\u8303\u4e00\u4e0b\u8c03\u7528\u94fe\u7801\u7684\nqueryCar\n\u51fd\u6570\u6765\u67e5\u8be2\u67d0\u4e00\u8f86\u8f66\u7684\u4fe1\u606f\u3002\u5c06\nquery.js\n\u4e2d\u7684\nqueryAllCars\n\u51fd\u6570\u6362\u6210\nquieryCar\n\uff0c\u53c2\u6570key\u662f\nCAR4\n\u3002\n\n\nconst request = {\n  //targets : --- letting this default to the peers assigned to the channel\n  chaincodeId: 'fabcar',\n  fcn: 'queryCar',\n  args: ['CAR4']\n};\n\n\n\n\n\u4fdd\u5b58\nquery.js\n\uff0c\u5e76\u6267\u884c\uff0c\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u4e86\nCAR4\n\u7684\u8f66\u8f86\u4fe1\u606f\uff1a\n\n\n$ node query.js\n{\ncolour\n:\nblack\n,\nmake\n:\nTesla\n,\nmodel\n:\nS\n,\nowner\n:\nAdriana\n}\n\n\n\n\n\u66f4\u65b0\u8d26\u672c\n\n\n\u66f4\u65b0\u8d26\u672c\u7684\u8fc7\u7a0b\uff1a\u5148\u63d0\u8bae\uff0c\u540e\u80cc\u4e66\uff0c\u7ed3\u679c\u8fd4\u56de\u5230\u5e94\u7528\uff0c\u7136\u540e\u53d1\u9001\u7ed9\u6392\u5e8f\u8282\u70b9\uff0c\u518d\u5199\u5230\u5404\u4e2apeer\u7684\u8d26\u672c\u3002\n\n\n\njs\u6587\u4ef6\ninvoke.js\n\u662f\u66f4\u65b0\u8d26\u672c\u7684\u7a0b\u5e8f\u793a\u8303\u3002\u9996\u5148\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4e2d\u6784\u9020\u8bf7\u6c42\u7684\u4ee3\u7801\uff1a\n\n\nvar request = {\n  //targets: let default to the peer assigned to the client\n  chaincodeId: 'fabcar',\n  fcn: 'createCar',\n  args: ['CAR10', 'Chevy', 'Volt', 'Red', 'Nick'],\n  chainId: 'mychannel',\n  txId: tx_id\n};\n\n\n\n\n\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7\u8c03\u7528\u94fe\u7801\nfabcar\n\u7684\ncreateCar\n\u51fd\u6570\uff0c\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a10\u53f7\u8f66(key\u662f\nCAR10\n)\u3002\u6267\u884c\ninvoke.js\n\uff1a\n\n\n$ node invoke.js\nStore path:/opt/fabric-samples/fabcar/hfc-key-store\nSuccessfully loaded user1 from persistence\nAssigning transaction_id:  1adb925d24db20816bcfc97f0216f3b094f3291778af775c1d07d0d3179a3031\nTransaction proposal was good\nSuccessfully sent Proposal and received ProposalResponse: Status - 200, message - \nOK\n\ninfo: [EventHub.js]: _connect - options {\ngrpc.max_receive_message_length\n:-1,\ngrpc.max_send_message_length\n:-1}\nThe transaction has been committed on peer localhost:7053\nSend transaction promise and event listener promise have completed\nSuccessfully sent transaction to the orderer.\nSuccessfully committed the change to the ledger by the peer\n\n\n\n\n\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\u5173\u4e8e\nProposalResponse\n\u7684\u7ec8\u7aef\u8f93\u51fa\u548cpromise(\u4e00\u4e2a\u5f02\u6b65\u8c03\u7528\u6807\u51c6)\u3002\u4e0a\u6587\u7684\nThe transaction has been committed on peer localhost:7053\n\u8868\u793a\u4e8b\u52a1\u5df2\u7ecf\u6210\u529f\u5199\u5230peer\u3002\u4e0b\u9762\u53ef\u4ee5\u56de\u5230\nquery.js\n\uff0c\u5c06\u67e5\u8be2\u6761\u4ef6\u7531\nCAR4\n\u6539\u6210\nCAR10\n\uff1a\n\n\nconst request = {\n  //targets : --- letting this default to the peers assigned to the channel\n  chaincodeId: 'fabcar',\n  fcn: 'queryCar',\n  args: ['CAR10']\n};\n\n\n\n\n\u91cd\u65b0\u6267\u884c\nquery.js\n\u53ef\u4ee5\u67e5\u8be2\u5230\u6700\u65b0\u6dfb\u52a0\u768410\u53f7\u8f66\u7684\u4fe1\u606f\uff1a\n\n\n$ node query.js\nResponse is  {\ncolour\n:\nRed\n,\nmake\n:\nChevy\n,\nmodel\n:\nVolt\n,\nowner\n:\nNick\n}\n\n\n\n\n\u4e0b\u9762\u91cd\u65b0\u4fee\u6539\u4ee3\u7801\ninvoke.js\n\u3002\u5c06\u51fd\u6570\ncreateCar\n\u6539\u6210\nchangeCarOwner\n\uff0c\u76ee\u7684\u662f\u628a10\u53f7\u8f66\u7684\u8f66\u4e3b\u6539\u6210\nDave\n\uff1a\n\n\nvar request = {\n  //targets: let default to the peer assigned to the client\n  chaincodeId: 'fabcar',\n  fcn: 'changeCarOwner',\n  args: ['CAR10', 'Dave'],\n  chainId: 'mychannel',\n  txId: tx_id\n};\n\n\n\n\n\u91cd\u65b0\u6267\u884c\ninvoke.js\n\u548c\nquery.js\n\uff0c\u53ef\u4ee5\u770b\u5230\u8f66\u4e3b\u4fe1\u606f\u88ab\u4ece\nNick\n\u6539\u6210\u4e86\nDave\n\u3002\n\n\n$ node invoke.js\n$ node query.js\nResponse is  {\ncolour\n:\nRed\n,\nmake\n:\nChevy\n,\nmodel\n:\nVolt\n,\nowner\n:\nDave\n}\n\n\n\n\n\u672c\u7ae0\u4e3b\u8981\u8bb2\u5e94\u7528\u5f00\u53d1\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u8bb2\u94fe\u7801\u7684\u5f00\u53d1\u3002", 
            "title": "\u7f16\u5199\u7b2c\u4e00\u4e2a\u5e94\u7528"
        }, 
        {
            "location": "/write_first_app_zh/#_1", 
            "text": "\u5728\u5b9e\u8df5\u672c\u7ae0\u524d\uff0c\u8bf7\u6309 \u542f\u52a8\u9996\u4e2a\u7f51\u7edc(first-network) \u4e00\u7ae0\u7684\u63cf\u8ff0\u51c6\u5907\u597d\u73af\u5883\u3002 \n\u672c\u7ae0\u539f\u6587\u662f\u5b98\u7f51\u7684 Writing Your First Application \n\u672c\u7ae0\u7684\u5de5\u4f5c\u76ee\u5f55\u662f /opt/fabric-samples/fabcar \u3002 \n\u5728\u672c\u7ae0\u4e2d\uff0c\u9996\u5148\u8bbf\u95eeCA\u751f\u6210\u6ce8\u518c\u8bc1\u4e66(ECert)\uff0c\u7136\u540e\u5229\u7528\u751f\u6210\u7684\u8eab\u4efd(\u7528\u6237\u5bf9\u8c61)\u67e5\u8be2\u548c\u66f4\u65b0\u8d26\u672c\u3002", 
            "title": "\u7f16\u5199\u9996\u4e2a\u5e94\u7528"
        }, 
        {
            "location": "/write_first_app_zh/#_2", 
            "text": "\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u505c\u6b62\u201cfirst-network\u201d\u4e00\u7ae0\u4e2d\u7684\u5404\u79cd\u5bb9\u5668\uff1a  $ cd /opt/fabric-samples/fabcar\n$ ../first-network/byfn.sh -m down  \u6216\u4f7f\u7528docker\u547d\u4ee4\u5220\u9664\u6240\u6709\u5bb9\u5668(\u53ef\u4ee5\u4e0e\u4e0a\u9762\u7684\u547d\u4ee4\u6df7\u5408\u4f7f\u7528)\uff1a  $ docker rm -f $(docker ps -aq)  \u5220\u9664\u6240\u6709\u7f13\u5b58\u7f51\u7edc\uff1a  $ docker network prune", 
            "title": "\u5efa\u7acb\u5f00\u53d1\u73af\u5883"
        }, 
        {
            "location": "/write_first_app_zh/#_3", 
            "text": "/opt/fabric-samples/fabcar \u76ee\u5f55\u4e0b\u6709\u4e2a package.json \u6587\u4ef6\uff0c\u5b9a\u4e49\u4e86\u793a\u8303\u5e94\u7528\u7684\u4f9d\u8d56\u5305\uff0c\u901a\u8fc7\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u5b89\u88c5\u4f9d\u8d56\uff08\u4e0ejava\u7684maven\u7c7b\u4f3c\uff09\uff1a  $ npm install  \u4f7f\u7528\u811a\u672c startFabric.sh \u542f\u52a8\u7f51\u7edc\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u542f\u52a8\u51e0\u4e2aFabric\u5b9e\u4f53\u548c\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u5bb9\u5668(\u94fe\u7801)\u3002  $ ./startFabric.sh\n$ docker ps  \u7528\u4e0a\u8ff0docker\u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u542f\u52a8\u7684\u5bb9\u5668\u6e05\u5355\u3002", 
            "title": "\u5b89\u88c5\u5ba2\u6237\u7aef\u548c\u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/write_first_app_zh/#_4", 
            "text": "", 
            "title": "\u6ce8\u518c\u7528\u6237"
        }, 
        {
            "location": "/write_first_app_zh/#_5", 
            "text": "\u524d\u9762\u7684 startFabric.sh \u547d\u4ee4\u4f1a\u542f\u52a8\u4e00\u4e2aCA\u5bb9\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5217\u547d\u4ee4\u67e5\u770bCA\u5bb9\u5668\u7684\u65e5\u5fd7\uff1a  $ docker logs -f ca.example.com  \u6267\u884c\u4e0b\u5217\u547d\u4ee4\u6765\u6ce8\u518cadmin\u7528\u6237\uff1a  $ node enrollAdmin.js  \u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5411\u521b\u5efa\u76ee\u5f55 hfc-key-store \uff0c\u521b\u5efa\u79c1\u94a5\uff0c\u5411CA\u53d1\u9001\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42(CSR)\uff0c\u7136\u540e\u628a\u8fd4\u56de\u7684CA\u7b7e\u540d\u8bc1\u4e66(eCert)\u5b58\u653e\u5728 hfc-key-store \u76ee\u5f55\u3002", 
            "title": "\u6ce8\u518c\u7ba1\u7406\u5458\u7528\u6237"
        }, 
        {
            "location": "/write_first_app_zh/#user1", 
            "text": "admin\u7528\u6237\u662f\u8fd0\u7ef4\u4eba\u5458\u7528\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\u3002\u5728\u4e00\u822c\u7684\u4e1a\u52a1\u573a\u666f\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u201c\u666e\u901a\u7528\u6237\u201d(\u975e\u7ba1\u7406\u5458)\u6765\u8bbf\u95eeFabric\u7f51\u7edc\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u5411Fabric\u7f51\u7edc\u6ce8\u518c\u666e\u901a\u7528\u6237\u9700\u8981\u4f7f\u7528\u7ba1\u7406\u5458\u8eab\u4efd\uff0c\u5982\u73b0\u5728\u5c31\u662f\u7528admin\u8eab\u4efd\u6765\u6ce8\u518c user1 \u7528\u6237\u3002    $ node registerUser.js  \u4e0e\u6ce8\u518cadmin\u7528\u6237\u7c7b\u4f3c\uff0c\u4ee3\u7801\u4f1a\u521b\u5efauser1\u7528\u6237\u79c1\u94a5\uff0c\u5411CA\u53d1\u9001\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42(CSR)\uff0c\u5e76\u5c06\u8fd4\u56de\u7684CA\u7b7e\u540d\u8bc1\u4e66(eCert)\u5b58\u653e\u5728 hfc-key-store \u76ee\u5f55\u3002", 
            "title": "\u6ce8\u518c\u7528\u6237user1"
        }, 
        {
            "location": "/write_first_app_zh/#_6", 
            "text": "\u7528 docker ps \u547d\u4ee4\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a hyperledger/fabric-couchdb \u7684\u5bb9\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u4fdd\u5b58\u201c\u4e16\u754c\u72b6\u6001\u201d\u7684key-value\u6570\u636e\u5e93(couchdb)\u3002\u67e5\u8be2\u8d26\u672c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u67e5\u8be2key-value\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff08\u6570\u636e\u5e93\u53d8\u5316\u65e5\u5fd7\u4fdd\u5b58\u5728\u533a\u5757\u94fe\u4e2d\uff09\u3002\u67e5\u8be2\u53c2\u6570\u4e00\u822c\u662f\u4e00\u4e2a\u6216\u51e0\u4e2akey\uff0c\u4e5f\u53ef\u4ee5\u7528json\u4e32\u5f53\u53c2\u6570\u8fdb\u884c\u590d\u6742\u67e5\u8be2\u3002 \n\u6f14\u793a\u67e5\u8be2\u7684\u4ee3\u7801\u6587\u4ef6\u662f query.js \uff0c\u5176\u4e2d\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u8bf4\u660e\u5e94\u7528\u4f7f\u7528 user1 \u4f5c\u4e3a\u7b7e\u540d\u5b9e\u4f53\u3002  fabric_client.getUserContext('user1', true);  user1\u7684\u8eab\u4efd\u8bc1\u660e\u6750\u6599\u5df2\u7ecf\u653e\u5728\u4e86 hfc-key-store \u76ee\u5f55\u4e0b\uff0c\u6211\u4eec\u7b80\u5355\u5730\u544a\u8bc9\u5e94\u7528\u53bb\u83b7\u53d6\u8eab\u4efd\u3002    $ node query.js  \u4f1a\u8fd4\u56de\u4e00\u4e2ajson\u4e32\uff0c\u91cc\u9762\u662f\u5168\u90e810\u8f86\u8f66\u7684\u4fe1\u606f\u3002 \n\u89c2\u5bdf\u4e00\u4e0b query.js \u6e90\u7801\u3002\u5728\u5e94\u7528\u7684\u521d\u59cb\u5316\u533a\u6bb5\uff0c\u5b9a\u4e49\u4e86\u51e0\u4e2a\u53d8\u91cf\uff0c\u5982\u901a\u9053\u540d\u79f0\u3001\u8bc1\u4e66\u5e93\u5730\u5740\u548c\u7f51\u7edc\u7aef\u70b9\u3002  var channel = fabric_client.newChannel('mychannel');\nvar peer = fabric_client.newPeer('grpc://localhost:7051');\nchannel.addPeer(peer);\n\nvar member_user = null;\nvar store_path = path.join(__dirname, 'hfc-key-store');\nconsole.log('Store path:'+store_path);\nvar tx_id = null;  \u4e0b\u9762\u662f\u6267\u884c\u67e5\u8be2\u7684\u4ee3\u7801\uff1a  // queryCar chaincode function - requires 1 argument, ex: args: ['CAR4'],\n// queryAllCars chaincode function - requires no arguments , ex: args: [''],\nconst request = {\n  //targets : --- letting this default to the peers assigned to the channel\n  chaincodeId: 'fabcar',\n  fcn: 'queryAllCars',\n  args: ['']\n};  \u5e94\u7528\u6267\u884c\u65f6\uff0c\u5b83\u8c03\u7528\u4e86peer\u7684 fabcar \u94fe\u7801\uff0c\u6267\u884c\u5176\u4e2d\u7684 queryAllCars \u51fd\u6570\u3002 \n\u5982\u679c\u60f3\u770b\u770b\u6709\u54ea\u4e9b\u94fe\u7801\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\uff0c\u53ef\u4ee5\u6253\u5f00\u6587\u4ef6 ../chaincode/fabcar/go/fabcar.go \u6765\u770b\u3002\u53ef\u4ee5\u770b\u5230\u4e0b\u5217\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\uff1a initLedger ,  queryCar ,  queryAllCars ,  createCar \u548c changeCarOwner \u3002 \n\u4e0b\u56fe\u56fe\u793a\u4e86\u5e94\u7528\u3001\u667a\u80fd\u5408\u7ea6\u548c\u8d26\u672c\u7684\u5173\u7cfb\uff1a  \n\u4e0b\u9762\u793a\u8303\u4e00\u4e0b\u8c03\u7528\u94fe\u7801\u7684 queryCar \u51fd\u6570\u6765\u67e5\u8be2\u67d0\u4e00\u8f86\u8f66\u7684\u4fe1\u606f\u3002\u5c06 query.js \u4e2d\u7684 queryAllCars \u51fd\u6570\u6362\u6210 quieryCar \uff0c\u53c2\u6570key\u662f CAR4 \u3002  const request = {\n  //targets : --- letting this default to the peers assigned to the channel\n  chaincodeId: 'fabcar',\n  fcn: 'queryCar',\n  args: ['CAR4']\n};  \u4fdd\u5b58 query.js \uff0c\u5e76\u6267\u884c\uff0c\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u4e86 CAR4 \u7684\u8f66\u8f86\u4fe1\u606f\uff1a  $ node query.js\n{ colour : black , make : Tesla , model : S , owner : Adriana }", 
            "title": "\u67e5\u8be2\u8d26\u672c"
        }, 
        {
            "location": "/write_first_app_zh/#_7", 
            "text": "\u66f4\u65b0\u8d26\u672c\u7684\u8fc7\u7a0b\uff1a\u5148\u63d0\u8bae\uff0c\u540e\u80cc\u4e66\uff0c\u7ed3\u679c\u8fd4\u56de\u5230\u5e94\u7528\uff0c\u7136\u540e\u53d1\u9001\u7ed9\u6392\u5e8f\u8282\u70b9\uff0c\u518d\u5199\u5230\u5404\u4e2apeer\u7684\u8d26\u672c\u3002  \njs\u6587\u4ef6 invoke.js \u662f\u66f4\u65b0\u8d26\u672c\u7684\u7a0b\u5e8f\u793a\u8303\u3002\u9996\u5148\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4e2d\u6784\u9020\u8bf7\u6c42\u7684\u4ee3\u7801\uff1a  var request = {\n  //targets: let default to the peer assigned to the client\n  chaincodeId: 'fabcar',\n  fcn: 'createCar',\n  args: ['CAR10', 'Chevy', 'Volt', 'Red', 'Nick'],\n  chainId: 'mychannel',\n  txId: tx_id\n};  \u5728\u4ee3\u7801\u4e2d\u901a\u8fc7\u8c03\u7528\u94fe\u7801 fabcar \u7684 createCar \u51fd\u6570\uff0c\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a10\u53f7\u8f66(key\u662f CAR10 )\u3002\u6267\u884c invoke.js \uff1a  $ node invoke.js\nStore path:/opt/fabric-samples/fabcar/hfc-key-store\nSuccessfully loaded user1 from persistence\nAssigning transaction_id:  1adb925d24db20816bcfc97f0216f3b094f3291778af775c1d07d0d3179a3031\nTransaction proposal was good\nSuccessfully sent Proposal and received ProposalResponse: Status - 200, message -  OK \ninfo: [EventHub.js]: _connect - options { grpc.max_receive_message_length :-1, grpc.max_send_message_length :-1}\nThe transaction has been committed on peer localhost:7053\nSend transaction promise and event listener promise have completed\nSuccessfully sent transaction to the orderer.\nSuccessfully committed the change to the ledger by the peer  \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\u5173\u4e8e ProposalResponse \u7684\u7ec8\u7aef\u8f93\u51fa\u548cpromise(\u4e00\u4e2a\u5f02\u6b65\u8c03\u7528\u6807\u51c6)\u3002\u4e0a\u6587\u7684 The transaction has been committed on peer localhost:7053 \u8868\u793a\u4e8b\u52a1\u5df2\u7ecf\u6210\u529f\u5199\u5230peer\u3002\u4e0b\u9762\u53ef\u4ee5\u56de\u5230 query.js \uff0c\u5c06\u67e5\u8be2\u6761\u4ef6\u7531 CAR4 \u6539\u6210 CAR10 \uff1a  const request = {\n  //targets : --- letting this default to the peers assigned to the channel\n  chaincodeId: 'fabcar',\n  fcn: 'queryCar',\n  args: ['CAR10']\n};  \u91cd\u65b0\u6267\u884c query.js \u53ef\u4ee5\u67e5\u8be2\u5230\u6700\u65b0\u6dfb\u52a0\u768410\u53f7\u8f66\u7684\u4fe1\u606f\uff1a  $ node query.js\nResponse is  { colour : Red , make : Chevy , model : Volt , owner : Nick }  \u4e0b\u9762\u91cd\u65b0\u4fee\u6539\u4ee3\u7801 invoke.js \u3002\u5c06\u51fd\u6570 createCar \u6539\u6210 changeCarOwner \uff0c\u76ee\u7684\u662f\u628a10\u53f7\u8f66\u7684\u8f66\u4e3b\u6539\u6210 Dave \uff1a  var request = {\n  //targets: let default to the peer assigned to the client\n  chaincodeId: 'fabcar',\n  fcn: 'changeCarOwner',\n  args: ['CAR10', 'Dave'],\n  chainId: 'mychannel',\n  txId: tx_id\n};  \u91cd\u65b0\u6267\u884c invoke.js \u548c query.js \uff0c\u53ef\u4ee5\u770b\u5230\u8f66\u4e3b\u4fe1\u606f\u88ab\u4ece Nick \u6539\u6210\u4e86 Dave \u3002  $ node invoke.js\n$ node query.js\nResponse is  { colour : Red , make : Chevy , model : Volt , owner : Dave }  \u672c\u7ae0\u4e3b\u8981\u8bb2\u5e94\u7528\u5f00\u53d1\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u8bb2\u94fe\u7801\u7684\u5f00\u53d1\u3002", 
            "title": "\u66f4\u65b0\u8d26\u672c"
        }, 
        {
            "location": "/channel_update_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nWeibing Wang\n\n\n\n\n\n\n\n\n\n\n\u91cd\u65b0\u914d\u7f6e\u7b2c\u4e00\u4e2a\u7f51\u7edc\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u672c\u7ae0\u7684\u8fd9\u4e9b\u6b65\u9aa4\u5728docker\u955c\u50cf\n1.1.0-preview\n\u7248\u672c(tag)\u548c\u76f8\u5173\u5de5\u5177\u4e2d\u5df2\u7ecf\u9a8c\u8bc1\u8fc7\u3002\u786e\u4fdd\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u4e86\u9002\u5408\u7684\u955c\u50cf\u7248\u672c\u548c\u4e8c\u8fdb\u5236\u5305\uff0c\u6216\u8005\u4f60\u4ece\u6bd4Fabric\u201c1.1.0-preview\u201d\u6807\u7b7e\u66f4\u65b0\u7684\u5206\u652f\u4e0a\u6784\u5efa\u7684\u4e8c\u8fdb\u5236\u5305\u3002  \n\n\n\n\n\n\n\u672c\u7ae0\u662f\n\u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc\n\u7684\u540e\u7eed\uff0c\u4f1a\u6f14\u793a\u589e\u52a0\u4e00\u4e2a\u65b0\u7ec4\u7ec7\nOrg3\n\u5230\u81ea\u52a8\u751f\u6210\u7684\u5e94\u7528\u901a\u9053\nmychannel\n\u3002\u5b83\u5047\u5b9a\u4f60\u5df2\u7ecf\u5bf9\nBYFN\n\u793a\u8303\u5f88\u61c2\u4e86\uff0c\u5305\u62ec\u4f1a\u4f7f\u7528\u5de5\u5177\ncryptogen\n\u548c\nconfigtxgen\n\u3002  \n\n\n\u8fd9\u7bc7\u6587\u7ae0\u4ec5\u805a\u7126\u4e8e\u96c6\u6210\u4e00\u4e2a\u65b0\u7ec4\u7ec7\uff0c\u7136\u800c\u7528\u540c\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u66f4\u65b0\u5176\u4ed6\u901a\u9053\u914d\u7f6e\uff08\u5982\u66f4\u65b0\u4fee\u6539\u89c4\u5219\u3001\u6539\u53d8\u6279\u5927\u5c0f\u7b49\uff09\u3002\u793a\u8303\u7684\u64cd\u4f5c\u662f\u7ec4\u7ec7\u7ba1\u7406\u5458\u804c\u8d23\uff0c\u800c\u4e0d\u662f\u94fe\u7801\u6216\u5e94\u7528\u5f00\u53d1\u8005\u804c\u8d23\u3002\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u786e\u4fdd\u5df2\u7ecf\u5b89\u88c5\u4e86\u5fc5\u8981\u7684Fabric\u955c\u50cf\u548c\u5b9e\u7528\u7a0b\u5e8f\uff0c\u5e76\u4e14\u81ea\u52a8\u5316\u811a\u672c\nbyfn.sh\n\u5728\u7ee7\u7eed\u64cd\u4f5c\u524d\u5728\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u6ca1\u6709\u62a5\u9519\u3002\u5373\u5c06\u5230\u6765\u7684\u6b65\u9aa4\u4f9d\u8d56\u4e8e\u751f\u6210\u7684\u7f51\u7edc\u548c\u5de5\u4ef6\u3002\u5982\u679c\u5c1a\u672a\u914d\u7f6e\u673a\u5668\uff0c\u8bf7\u53c2\u9605\n\u524d\u63d0\u6761\u4ef6\n\u548c\nHyperledger Fabric\u793a\u8303\n\u6587\u6863\u3002\u63d0\u4f9b\u7684\u547d\u4ee4\u8fd8\u5047\u5b9aFabric\u5b9e\u7528\u7a0b\u5e8f\u5b58\u5728\u4e8e\nfabric-samples\n\u76ee\u5f55\u4e0b\u7684\nbin\n\u6839\u76ee\u5f55\u4e2d\u3002\u5982\u679c\u5df2\u5c06\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6587\u4ef6\u8def\u5f84\u5bfc\u51fa\u5230\u4e86PATH\u53d8\u91cf\u4e2d\uff0c\u5219\u53ef\u4ee5\u76f8\u5e94\u5730\u4fee\u6539\u8fd9\u4e9b\u547d\u4ee4\uff0c\u800c\u4e0d\u5fc5\u4f20\u9012\u7edd\u5bf9\u8def\u5f84\u3002  \n\n\n\n\n\n\n\u914d\u7f6e\u73af\u5883\u53d8\u91cf\n\n\n\u4e0b\u9762\u7684\u64cd\u4f5c\u5c06\u4f4d\u4e8e\nfabric-samples\n\u7684\u5b50\u76ee\u5f55\nfirst-network\n\u4e2d\u3002\u66f4\u6362\u5230\u8fd9\u4e2a\u76ee\u5f55\u3002\u4f60\u53ef\u4ee5\u6253\u5f00\u81ea\u5df1\u559c\u6b22\u7684\u7ec8\u7aef\u7a97\u53e3\uff0c\u5982git-bash\u3002  \n\n\n\u9996\u5148\uff0c\u4f7f\u7528\nbyfn.sh\n\u811a\u672c\u6765\u8fdb\u884c\u6e05\u7406\u5de5\u4f5c\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6740\u6b7b\u6d3b\u52a8\u7684docker\u5bb9\u5668\u548c\u5220\u9664\u4e4b\u524d\u751f\u6210\u7684\u52a0\u5bc6\u6750\u6599\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4e3a\u4e86\u6267\u884c\u91cd\u65b0\u914d\u7f6e\u4efb\u52a1\u5e76\u4e0d\u4e00\u5b9a\u8981\u505c\u6b62Fabric\u7f51\u7edc\uff0c\u7136\u800c\u4e3a\u4e86\u8fd9\u4e2a\u6559\u7a0b\u7684\u76ee\u7684\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5df2\u77e5\u7684\u521d\u59cb\u72b6\u6001\u3002\u56e0\u6b64\u8ba9\u6211\u4eec\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u6e05\u7406\u4e4b\u524d\u7684\u73af\u5883\uff1a\n\n\n./byfn.sh -m down\n\n\n\n\n\u73b0\u5728\u91cd\u65b0\u751f\u6210\u9ed8\u8ba4BYFN\u5de5\u4ef6\uff1a\n\n\n./byfn.sh -m generate\n\n\n\n\n\u901a\u8fc7\u6267\u884cCLI\u5bb9\u5668\u4e2d\u811a\u672c\u542f\u52a8\u7f51\u7edc\uff1a\n\n\n./byfn.sh -m up\n\n\n\n\n\u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u5207\u6362\u5230\norg3-artifacts\n\u5b50\u76ee\u5f55\u3002\n\n\ncd org3-artifacts\n\n\n\n\n\u5f53\u524d\u76ee\u5f55\u4e0b\u6709\u5174\u8da3\u7684\u6587\u4ef6\u6709\u4e24\u4e2a\norg3-crypto.yaml\n\u548c\nconfigtx.yaml\n\u3002\u9996\u5148\uff0c\u4e3aorg3\u751f\u6210\u52a0\u5bc6\u6750\u6599\uff1a\n\n\n../../bin/cryptogen generate --config=./org3-crypto.yaml\n\n\n\n\n\u4e0a\u8ff0\u547d\u4ee4\u4f1a\u8bfb\u53d6\u65b0\u7684\u52a0\u5bc6yaml\u6587\u4ef6\norg3-crypto.yaml\n\uff0c\u5229\u7528\ncryptogen\n\u5de5\u5177\u4e3aOrg3\u4e2d\u95f4CA\u751f\u6210\u5bc6\u94a5\u548c\u8bc1\u4e66\uff0c\u5e76\u4e14\u6709\u4e24\u4e2apeer\u7ed1\u5b9a\u5230\u8fd9\u4e2a\u65b0\u7ec4\u7ec7\u3002\u4e0eBYFN\u5b9e\u73b0\u4e00\u8d77\uff0c\u8fd9\u4e2a\u52a0\u5bc6\u6750\u6599\u8f93\u51fa\u5230\u4e00\u4e2a\u65b0\u751f\u6210\u7684\ncrypto-config\n\u76ee\u5f55\u4e2d\u3002  \n\n\n\u73b0\u5728\u4f7f\u7528\nconfigtxgen\n\u5de5\u5177\u8f93\u51faJSON\u683c\u5f0f\u7684Org3\u76f8\u5173\u914d\u7f6e\u6750\u6599\u3002\u4f5c\u4e3a\u5f00\u59cb\u7684\u547d\u4ee4\uff0c\u544a\u8bc9\u5de5\u5177\u4ece\u5f53\u524d\u76ee\u5f55\u4e0b\u8bfb\u53d6\nconfigtx.yaml\n\u3002\n\n\nexport FABRIC_CFG_PATH=$PWD \n ../../bin/configtxgen -printOrg Org3MSP \n ../channel-artifacts/org3.json\n\n\n\n\n\u4e0a\u9762\u7684\u547d\u4ee4\u4f1a\u521b\u5efa\u4e00\u4e2aJSON\u6587\u4ef6\norg3.json\n\uff0c\u5e76\u628a\u5b83\u8f93\u51fa\u5230\nfirst-network\n\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\nchannel-artifacts\n\u4e0b\u9762\u3002\u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u4e3aOrg3\u5b9a\u4e49\u7684\u4fee\u6539\u7b56\u7565\uff0c\u4ee5\u53ca\u4e09\u4e2abase64\u683c\u5f0f\u7684\u91cd\u8981\u8bc1\u4e66\uff1a\u7ba1\u7406\u5458\u7528\u6237\u8bc1\u4e66\u3001CA\u6839\u8bc1\u4e66\u548cTLS\u6839\u8bc1\u4e66\u3002\u5728\u4e0b\u9762\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u5c06\u9644\u52a0\u8fd9\u4e2aJSON\u5bf9\u8c61\u5230\u901a\u9053\u914d\u7f6e\u4e2d\u3002  \n\n\n\u6211\u4eec\u6700\u540e\u4e00\u9879\u51c6\u5907\u5de5\u4f5c\u662f\u5c06Orderer\u7ec4\u7ec7MSP\u6750\u6599\u642c\u79fb\u5230Org3\u7684\ncrypto-config\n\u76ee\u5f55\u4e2d\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u5173\u6ce8Orderer\u7684TLS\u6839\u8bc1\u4e66\uff0c\u8fd9\u5c06\u5141\u8bb8Org3\u5b9e\u4f53\u548c\u7f51\u7edc\u7684orderer\u8282\u70b9\u4e4b\u95f4\u7684\u5b89\u5168\u901a\u4fe1\u3002\n\n\ncd ../ \n cp -r crypto-config/ordererOrganizations org3-artifacts/crypto-config/\n\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u51c6\u5907\u597d\u91cd\u65b0\u914d\u7f6e\u4e86\u3002\n\n\n\u542f\u52a8configtxlator\u670d\u52a1\u5668\n\n\n\u66f4\u65b0\u8fc7\u7a0b\u4f7f\u7528\u914d\u7f6e\u8f6c\u6362\u5de5\u5177\nconfigtxlator\n\u3002\u8fd9\u4e2a\u5de5\u5177\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7eaf\u65e0\u72b6\u6001REST API\uff0c\u4e0d\u4f9d\u8d56SDK\uff0c\u4f7fHyperledger Fabric\u7f51\u7edc\u7684\u914d\u7f6e\u5de5\u4f5c\u7b80\u5355\u5316\u3002\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u4e0d\u540c\u8868\u73b0/\u683c\u5f0f\u7684\u7b49\u4ef7\u6570\u636e\u3002\u4f8b\u5982\uff0c\u5728\u5de5\u5177\u64cd\u4f5c\u7684\u4e00\u79cd\u6a21\u5f0f\u4e2d\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u5c06\u4e8c\u8fdb\u5236protobuf\u683c\u5f0f\u8f6c\u6362\u5230\u4eba\u7c7b\u53ef\u8bfb\u7684JSON\u6587\u672c\u683c\u5f0f\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u6b64\u5916\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u6839\u636e\u4e24\u7ec4\u4e0d\u540c\u7684\u914d\u7f6e\u4ea4\u6613\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u8ba1\u7b97\u914d\u7f6e\u66f4\u65b0\u3002  \n\n\n\u9996\u5148\uff0c\u7528docker exec\u547d\u4ee4\u8fdb\u5165CLI\u5bb9\u5668\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u5bb9\u5668\u5df2\u7ecf\u5b89\u88c5\u4e86BYFN\ncrypto-config\n\u5e93\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u8bbf\u95ee\u4e24\u4e2a\u539f\u6765\u7684peer\u7ec4\u7ec7\u548cOrderer\u7ec4\u7ec7\u7684MSP\u6750\u6599\u3002\u5f15\u5bfc\u8eab\u4efd\u662fOrg1\u7ba1\u7406\u5458\u7528\u6237\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u60f3\u8981\u4ee3\u8868Org2\u884c\u4e8b\u7684\u4efb\u4f55\u6b65\u9aa4\u90fd\u9700\u8981\u5bfc\u51faMSP\u7279\u5b9a\u7684\u73af\u5883\u53d8\u91cf\u3002\n\n\ndocker exec -it cli bash\n\n\n\n\n\u5728\u9ed8\u8ba4\u8bbe\u7f6e\u4e0b\uff0cCLI\u5bb9\u5668\u4f1a\u572810000\u79d2\u540e\u9000\u51fa\u3002\u5982\u679c\u5bb9\u5668\u9000\u51fa\u4e86\uff0c\u786e\u4fdd\u5728\u7ee7\u7eed\u524d\u91cd\u65b0\u542f\u52a8\u5b83\u3002\u9996\u5148\uff0c\u68c0\u67e5\u4f60\u7684\u5bb9\u5668\u72b6\u6001\uff1a\n\n\ndocker ps -a\n\n\n\n\n\u5982\u679c\u5fc5\u8981\uff0c\u91cd\u65b0\u542f\u52a8CLI:\n\n\ndocker start cli\n\n\n\n\n\u73b0\u5728\u5728\u5bb9\u5668\u4e2d\u5b89\u88c5\njq\n\u5de5\u5177\u3002\u8fd9\u4e2a\u5de5\u5177\u5141\u8bb8\u6211\u4eec\u4e0e\nconfigtxlator\n\u5de5\u5177\u8fd4\u56de\u7684JSON\u5bf9\u8c61\u8fdb\u884c\u811a\u672c\u4ea4\u4e92\uff1a\n\n\n# Press `y` when prompted by the command\napt update \n apt install jq\n\n\n\n\n\u542f\u52a8\nconfigtxlator\nREST\u670d\u52a1\u5668(\u6700\u540e\u7684\n\u7b26\u53f7\u4f7f\u952e\u76d8\u8f93\u5165\u4e0d\u9501\u4f4f)\uff1a\n\n\n# Press enter twice\nconfigtxlator start \n\n\n\n\n\n\u8bbe\u7f6eURL:\n\n\nCONFIGTXLATOR_URL=http://127.0.0.1:7059\n\n\n\n\n\u5bfc\u51fa\nORDERER_CA``CHANNEL_NAME\n\u53d8\u91cf\uff1a\n\n\nexport ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  \n export CHANNEL_NAME=mychannel\n\n\n\n\n\u68c0\u67e5\u4e00\u4e0b\u786e\u4fdd\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u6b63\u786e\uff1a\n\n\necho $ORDERER_CA \n echo $CHANNEL_NAME\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u5982\u679c\u4f60\u91cd\u542f\u4e86CLI\u5bb9\u5668\uff0c\u4f60\u9700\u8981\u91cd\u542fREST\u670d\u52a1\u5668\u548c\u91cd\u65b0\u5bfc\u51fa\u4e09\u4e2a\u73af\u5883\u53d8\u91cf\nCONFIGTXLATOR_URL\n\u3001\nORDERER_CA\n\u548c\nCHANNEL_NAME\n\u3002jq\u7684\u5b89\u88c5\u4f1a\u6301\u4e45\u5316\uff0c\u4e0d\u7528\u91cd\u65b0\u5b89\u88c5\u5b83\u3002*\n\n\n\n\n\n\n\u5f62\u6210\u66f4\u65b0\u5bf9\u8c61\u548c\u91cd\u65b0\u914d\u7f6e\u901a\u9053\n\n\n\u73b0\u5728\u6211\u4eec\u5728CLI\u5bb9\u5668\u4e2d\u6709\u4e86\u4e00\u4e2a\u8fd0\u884c\u4e2d\u7684REST\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u6211\u4eec\u5bfc\u51fa\u4e86\u4e24\u4e2a\u5173\u952e\u73af\u5883\u53d8\u91cf\nORDERER_CA\n\u548c\nCHANNEL_NAME\n\u3002\u8ba9\u6211\u4eec\u63d0\u53d6\u901a\u9053\nmychannel\n\u6700\u65b0\u914d\u7f6e\u533a\u5757\u3002\n\n\npeer channel fetch config config_block.pb -o orderer.example.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA\n\n\n\n\n\u4e0a\u9762\u7684\u547d\u4ee4\u5bf9\u751f\u6210\u7684\u4e8c\u8fdb\u5236protobuf\u683c\u5f0f\u901a\u9053\u914d\u7f6e\u5757\u53d6\u4e86\u4e00\u4e2a\u540d\u79f0\nconfig_block.pb\n\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u8fd4\u56de\u7684protobuf\u548cJSON\u5bf9\u8c61\u7684\u547d\u540d\u7ea6\u5b9a\uff0c\u4f46\u662f\u4f60\u5e94\u8be5\u9075\u5faa\u4e00\u79cd\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u4e8e\u8fdb\u884c\u7b80\u5355\u76f4\u89c2\u7684\u8bc6\u522b\u3002  \n\n\n\u5f53\u4f60\u53d1\u51fa\npeer channel fetch\n\u547d\u4ee4\u7684\u65f6\u5019\uff0c\u7ec8\u7aef\u4e0a\u4f1a\u663e\u793a\u4e00\u4e9b\u8f93\u51fa\u3002\u65e5\u5fd7\u4e2d\u7684\u6700\u540e\u4e00\u884c\u5f88\u6709\u8da3\uff1a\n\n\n2017-11-07 17:17:57.383 UTC [channelCmd] readBlock -\n DEBU 011 Received block: 2\n\n\n\n\n\u8fd9\u662f\u544a\u8bc9\u6211\u4eec\nmychannel\n\u7684\u6700\u65b0\u914d\u7f6e\u533a\u5757\u662f\u533a\u57572\uff0c\n\u4e0d\u662f\n\u521d\u59cb\u533a\u5757\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\npeer channel fetch config\n\u547d\u4ee4\u8fd4\u56de\u76ee\u6807\u901a\u9053\u7684\u6700\u65b0\u914d\u7f6e\u533a\u5757\uff0c\u5728\u672c\u4f8b\u4e2d\u662f2\u53f7\u533a\u5757\u3002\u5f53BYFN\u573a\u666f\u8fd0\u884c\u65f6\uff0c\u5185\u5d4c\u811a\u672c\u6267\u884c\u4e86\u4e24\u4e2a\u5bf9\u901a\u9053\u7684\u9644\u52a0\u914d\u7f6e\u66f4\u65b0\u3002\u4e5f\u5c31\u662f\uff0c\u901a\u8fc7\u4e24\u4e2a\u901a\u9053\u66f4\u65b0\u4ea4\u6613\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7ec4\u7ec7\nOrg1\n\u548c\nOrg2\n\u7684\u951apeer\u3002\u8c61\u8fd9\u6837\uff0c\u6211\u4eec\u6709\u4e86\u5982\u4e0b\u914d\u7f6e\u5e8f\u5217\uff1a\u533a\u57570\uff0c\u521d\u59cb\u533a\u5757\uff1b\u533a\u57571\uff0cOrg1\u951apeer\u66f4\u65b0\uff1b\u533a\u57572\uff0cOrg2\u951apeer\u66f4\u65b0\u3002  \n\n\n\u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528\nconfigtxlator\n\u670d\u52a1\u5668\u5c06\u8fd9\u4e2a\u901a\u9053\u914d\u7f6e\u533a\u5757\u89e3\u7801\u4e3a\u4eba\u7c7b\u53ef\u4ee5\u8bfb\u5199\u7684JSON\u683c\u5f0f\u3002\n\n\ncurl -X POST --data-binary @config_block.pb \n$CONFIGTXLATOR_URL/protolator/decode/common.Block\n | jq . \n config_block.json\n\n\n\n\n\u6211\u4eec\u5c06\u7f16\u7801\u8f93\u51fa\u547d\u540d\u4e3a\nconfg_block.json\n\u3002\uff08\u518d\u6b21\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u547d\u540d\u4e60\u60ef\u6765\u64cd\u4f5c\u6b64\u6b65\u9aa4\u3002\uff09\u5982\u679c\u4f60\u5728CLI\u5bb9\u5668\u53d1\u51fa\nls\n\u547d\u4ee4\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u5bf9\u8c61\uff1a\u4e8c\u8fdb\u5236protobuff\u683c\u5f0f\u7684\u901a\u9053\u914d\u7f6e\u6587\u4ef6\nconfig_block.pb\n\u548cJSON\u683c\u5f0f\u5bf9\u8c61\nconfig_block.json\n\u3002  \n\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u786e\u5b9a\nconfig_block.json\n\u5bf9\u8c61\u7684\u8303\u56f4\uff0c\u5e76\u53bb\u6389\u6240\u6709\u7684\u5c01\u88c5\u5305\u88c5\u3002\u6211\u4eec\u4e0d\u5173\u5fc3\u6807\u9898\u3001\u5143\u6570\u636e\u3001\u521b\u5efa\u8005\u7b7e\u540d\u7b49\uff0c\u4f46\u5173\u5fc3\u4ea4\u6613\u4e2d\u7684\u914d\u7f6e\u5b9a\u4e49\u3002\u6211\u4eec\u901a\u8fc7\njq\n\u5de5\u5177\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a\n\n\njq .data.data[0].payload.data.config config_block.json \n config.json\n\n\n\n\n\u8fd9\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u4fee\u6574\u8fc7\u7684JSON\u5bf9\u8c61\nconfig.json\n\uff0c\u8fd9\u662f\u6211\u4eec\u4fee\u6539\u914d\u7f6e\u7684\u57fa\u7840\u3002\u6211\u4eec\u5c06\u518d\u6b21\u4f7f\u7528\njq\n\u5de5\u5177\u5c06Org3\u914d\u7f6e\u5b9a\u4e49\norg3.json\n\u9644\u52a0\u5230\u901a\u9053\u7684\u5e94\u7528\u7ec4\u5b57\u6bb5\uff0c\u5e76\u547d\u540d\u8f93\u51fa\u4e3a\nupdated_config.json\n\u3002\n\n\njq -s '.[0] * {\nchannel_group\n:{\ngroups\n:{\nApplication\n:{\ngroups\n: {\nOrg3MSP\n:.[1]}}}}}' config.json ./channel-artifacts/org3.json \n updated_config.json\n\n\n\n\n\u73b0\u5728\uff0c\u5728CLI\u5bb9\u5668\u4e2d\u6211\u4eec\u6709\u4e86\u4e24\u4e2aJSON\u6587\u4ef6\nconfig.json\n\u548c\nupdated_config.json\n\u3002\u521d\u59cb\u6587\u4ef6\u4ec5\u5305\u542bOrg1\u548cOrg2\u7684\u6750\u6599\uff0c\u800c\u201cupdated config\u201d\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5168\u90e83\u4e2a\u7ec4\u7ec7(Orgs)\u3002\u6b64\u65f6\uff0c\u53ea\u9700\u91cd\u65b0\u7f16\u7801\u8fd9\u4e24\u4e2aJSON\u6587\u4ef6\u5e76\u8ba1\u7b97\u589e\u91cf\u5373\u53ef\u3002  \n\n\n\u9996\u5148\uff0c\u7f16\u7801\nconfig.json\n\u4e3a\nconfig.pb\n\uff1a\n\n\ncurl -X POST --data-binary @config.json \n$CONFIGTXLATOR_URL/protolator/encode/common.Config\n \n config.pb\n\n\n\n\n\u5176\u6b21\uff0c\u7f16\u7801\nupdated_config.json\n\u4e3a\nupdated_config.pb\n\uff1a\n\n\ncurl -X POST --data-binary @updated_config.json \n$CONFIGTXLATOR_URL/protolator/encode/common.Config\n \n updated_config.pb\n\n\n\n\n\u73b0\u5728\uff0c\u4f7f\u7528\nconfigtxlator\n\u670d\u52a1\u5668\u6765\u8ba1\u7b97\u4e24\u4e2a\u914d\u7f6eproto\u4e4b\u95f4\u7684\u589e\u91cf\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u8f93\u51fa\u4e00\u4e2a\u65b0\u7684protobuf\u4e8c\u8fdb\u5236\u6587\u4ef6\nOrg3_update.pb\n\uff1a\n\n\ncurl -X POST -F channel=$CHANNEL_NAME -F \noriginal=@config.pb\n -F \nupdated=@updated_config.pb\n \n${CONFIGTXLATOR_URL}/configtxlator/compute/update-from-configs\n \n org3_update.pb\n\n\n\n\n\u8fd9\u4e2a\u65b0proto\norg3_update.pb\n\u5305\u542b\u4e86Org3\u5b9a\u4e49\u548c\u6307\u5411Org1\u548cOrg2\u6750\u6599\u7684\u9ad8\u7ea7\u6307\u9488\u3002\u6211\u4eec\u80fd\u591f\u653e\u5f03\u5927\u91cf\u7684Org1\u548cOrg2\u7684MSP\u6750\u6599\u548c\u4fee\u6539\u7b56\u7565\u4fe1\u606f\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u636e\u5df2\u7ecf\u5b58\u5728\u4e8e\u901a\u9053\u7684\u521d\u59cb\u533a\u5757\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e24\u4e2a\u914d\u7f6e\u7684\u589e\u91cf\u4fe1\u606f\u3002  \n\n\n\u5728\u9012\u4ea4\u901a\u9053\u66f4\u65b0\u524d\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u51e0\u4e2a\u6700\u540e\u7684\u6b65\u9aa4\u3002\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u89e3\u7801\u8fd9\u4e2a\u5bf9\u8c61\u5230\u53ef\u7f16\u8f91\u7684JSON\u683c\u5f0f\norg3_update.json\n:\n\n\ncurl -X POST --data-binary @org3_update.pb \n$CONFIGTXLATOR_URL/protolator/decode/common.ConfigUpdate\n | jq . \n org3_update.json\n\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u89e3\u7801\u7684\u66f4\u65b0\u6587\u4ef6\norg3_update.json\n\uff0c\u8fd9\u4e2a\u6587\u4ef6\u6211\u4eec\u9700\u8981\u5305\u88c5\u8fdb\u4e00\u4e2a\u4fe1\u5c01\u6d88\u606f\u4e2d\u3002\u8fd9\u4e00\u6b65\u9aa4\u7ed9\u56de\u6211\u4eec\u4e4b\u524d\u5265\u6389\u7684\u6807\u9898\u5b57\u6bb5\u3002\u6211\u4eec\u547d\u540d\u8fd9\u4e2a\u6587\u4ef6\u4e3a\norg3_update_in_envelope.json\n\uff1a\n\n\necho '{\npayload\n:{\nheader\n:{\nchannel_header\n:{\nchannel_id\n:\nmychannel\n, \ntype\n:2}},\ndata\n:{\nconfig_update\n:'$(cat org3_update.json)'}}}' | jq . \n org3_update_in_envelope.json\n\n\n\n\n\u4f7f\u7528\u6211\u4eec\u6b63\u786e\u6784\u5efa\u7684JSON\u6587\u4ef6\norg3_update_in_envelope.json\n\uff0c\u6211\u4eec\u5c06\u6700\u540e\u4e00\u6b21\u5229\u7528\nconfigtxlator\n\u8fd9\u4e2a\u5de5\u5177\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u8f6c\u6362\u4e3aFabric\u9700\u8981\u7684\u5b8c\u5168\u6210\u719f\u7684proto\u683c\u5f0f\u3002\u6211\u4eec\u5c06\u547d\u540d\u6211\u4eec\u7684\u6700\u7ec8\u66f4\u65b0\u5bf9\u8c61\u4e3a\norg3_update_in_envelope.pb\n\uff1a\n\n\ncurl -X POST --data-binary @org3_update_in_envelope.json \n$CONFIGTXLATOR_URL/protolator/encode/common.Envelope\n \n org3_update_in_envelope.pb\n\n\n\n\n\u51e0\u4e4e\u5b8c\u6210\uff01\u6211\u4eec\u73b0\u5728\u7684CLI\u5bb9\u5668\u4e2d\u6709\u4e86\u4e00\u4e2aprotobuf\u4e8c\u8fdb\u5236\u6587\u4ef6\norg3_update_in_envelope.pb\n\uff0c\u7136\u800c\u5728\u53ef\u4ee5\u6210\u529f\u9012\u4ea4\u8fd9\u4e2a\u66f4\u65b0\u524d\uff0c\u6211\u4eec\u9700\u8981\u5fc5\u8981\u7684Admin\u7528\u6237\u7b7e\u540d\u3002\u6211\u4eec\u901a\u9053\u7684\u66f4\u65b0\u7b56\u7565(mod_policy)\u88ab\u8bbe\u7f6e\u6210\u9ed8\u8ba4\u7684\u201cMAJORITY\u201d(\u591a\u6570)\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u6765\u81ea\u4e24\u4e2a\u521d\u59cb\u7ec4\u7ec7Org1\u548cOrg2\u7684\u7ba1\u7406\u5458\u7b7e\u7f72\u8fd9\u4e2a\u66f4\u65b0\u3002\u5982\u679c\u6211\u4eec\u6ca1\u6709\u83b7\u5f97\u8fd9\u4e24\u4e2a\u7b7e\u540d\uff0c\u5219\u6392\u5e8f\u670d\u52a1\u4f1a\u56e0\u65e0\u6cd5\u6ee1\u8db3\u7b56\u7565\u800c\u62d2\u7edd\u8fd9\u4e2a\u4ea4\u6613\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528Org1\u7684Admin\u7b7e\u7f72\u8fd9\u4e2a\u66f4\u65b0proto\u3002\u8bb0\u4f4fCLI\u5bb9\u5668\u662f\u7528Org1 MSP\u6750\u6599\u5f15\u5bfc\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u5730\u53d1\u9001\npeer channel signconfigtx\n\u547d\u4ee4\uff1a\n\n\npeer channel signconfigtx -f org3_update_in_envelope.pb\n\n\n\n\n\u6700\u540e\u4e00\u6b65\u662f\u5207\u6362CLI\u5bb9\u5668\u7684\u8eab\u4efd\u4e3aOrg2\u7684Admin\u7528\u6237\u3002\u6211\u4eec\u901a\u8fc7\u5bfc\u51fa\u5bf9\u5e94Org2 MSP\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u505a\u5230\u8fd9\u4e00\u70b9\u3002  \n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u4e0b\u9762\u7684\u6f14\u793a\u4e0d\u80fd\u53cd\u6620\u771f\u5b9e\u4e16\u754c\u7684\u64cd\u4f5c\u3002\u5355\u4e2a\u5bb9\u5668\u6c38\u8fdc\u4e0d\u5e94\u8be5\u88c5\u8f7d\u8fd9\u4e2a\u7f51\u7edc\u7684\u52a0\u5bc6\u6750\u6599\u3002\u76f8\u53cd\uff0c\u66f4\u65b0\u5bf9\u8c61\u9700\u8981\u5b89\u5168\u5730\u901a\u8fc7\u201c\u5e26\u5916\u201d(out-of-band)\u4f20\u9012\u7ed9Org2\u7ba1\u7406\u5458\u8fdb\u884c\u68c0\u67e5\u548c\u6279\u51c6\u3002  \n\n\n\n\n\n\n\u5bfc\u51faOrg2\u7684\u73af\u5883\u53d8\u91cf\uff1a\n\n\n# you can issue all of these commands at once\nexport CORE_PEER_LOCALMSPID=\nOrg2MSP\n\nexport CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt\nexport CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp\nexport CORE_PEER_ADDRESS=peer0.org2.example.com:7051\n\n\n\n\n\u6700\u540e\u6211\u4eec\u53d1\u51fa\npeer channel update\n\u547d\u4ee4\u3002Org2\u7ba1\u7406\u5458\u7b7e\u540d\u4f1a\u9644\u52a0\u5230\u8fd9\u4e2a\u547c\u53eb\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u624b\u5de5\u518d\u6b21\u7b7e\u7f72\u8fd9\u4e2aproto\uff1a  \n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u5373\u5c06\u5230\u6765\u7684\u5bf9\u6392\u5e8f\u670d\u52a1\u7684\u547c\u53eb\u4f1a\u7ecf\u5386\u4e00\u7cfb\u5217\u7cfb\u7edf\u7b7e\u540d\u548c\u7b56\u7565\u68c0\u67e5\u3002\u56e0\u6b64\uff0c\u4f60\u4f1a\u53d1\u73b0\u6d4f\u89c8\u548c\u67e5\u770b\u6392\u5e8f\u8282\u70b9\u7684\u65e5\u5fd7\u5f88\u6709\u7528\u3002\u4ece\u53e6\u4e00\u4e2a\u7ec8\u7aefshell\uff0c\u53d1\u9001\ndocker logs -f orderer.example.com\n\u547d\u4ee4\u6765\u663e\u793a\u5b83\u4eec\u3002 \n\n\n\n\n\n\n\u53d1\u9001\u66f4\u65b0\u547c\u53eb\uff1a\n\n\npeer channel update -f org3_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.example.com:7050 --tls --cafile $ORDERER_CA\n\n\n\n\n\u5982\u679c\u66f4\u65b0\u6210\u529f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u6d88\u606f\u6458\u8981\u6307\u793a\uff1a\n\n\n2017-11-07 21:50:17.435 UTC [msp/identity] Sign -\n DEBU 00f Sign: digest: 3207B24E40DE2FAB87A2E42BC004FEAA1E6FDCA42977CB78C64F05A88E556ABA\n\n\n\n\n\u6210\u529f\u7684\u901a\u9053\u66f4\u65b0\u547c\u53eb\u8fd4\u56de\u4e86\u4e00\u4e2a\u65b0\u7684\u533a\u5757\uff0c\u533a\u57575\uff0c\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u3002\u533a\u57570-2\u662f\u521d\u59cb\u901a\u9053\u914d\u7f6e\uff0c\u533a\u57573-4\u662f\u5b9e\u4f8b\u5316\u548c\u5bf9\u94fe\u7801\nmycc\n\u7684\u8c03\u7528\u3002\u540c\u6837\u7684\uff0c\u533a\u57575\u4f5c\u4e3a\u6700\u65b0\u7684\u901a\u9053\u914d\u7f6e\u5c06Org3\u5b9a\u4e49\u5230\u4e86\u901a\u9053\u4e0a\u3002  \n\n\n\u67e5\u770b\u5bb9\u5668\npeer0.org1.example.com\n\u7684\u65e5\u5fd7\uff1a\n\n\ndocker logs -f peer0.org1.example.com\n\n\n\n\n\u4f60\u770b\u5230\u7684\u8be6\u7ec6\u8f93\u51fa\u53cd\u5e94\u4e86\u786e\u8ba4\u68c0\u67e5\u548c\u5bf9peer\u72b6\u6001\u6570\u636e\u5e93\u7684\u66f4\u65b0(\u5173\u4e8e\u901a\u9053\u7684\u5f53\u524d\u914d\u7f6e)\u3002\u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u914d\u7f6e\u4ea4\u6613\u7684\u63d0\u4ea4\uff1a\n\n\n2017-11-15 15:41:05.000 UTC [kvledger] CommitWithPvtData -\n DEBU 774 Channel [mychannel]: Committing block [5] to storage\n\n\n\n\n\u5982\u679c\u60a8\u60f3\u67e5\u770b\u65b0\u914d\u7f6e\u533a\u5757\u7684\u5185\u5bb9\uff0c\u8bf7\u6309\u7167\u6f14\u793a\u8fc7\u7a0b\u83b7\u53d6\u5e76\u89e3\u7801\u65b0\u914d\u7f6e\u533a\u5757\u3002\u8ba9\u6211\u4eec\u7ee7\u7eed\n  \n\n\n\u5c06Org3\u52a0\u5165\u901a\u9053\n\n\n\u5728\u8fd9\u65f6\uff0c\u901a\u9053\u914d\u7f6e\u5df2\u7ecf\u66f4\u65b0\u5230\u5305\u542b\u4e86\u6211\u4eec\u7684\u65b0\u7ec4\u7ec7\nOrg3\n\uff0c\u8fd9\u610f\u5473\u7740\u6b64\u6210\u5458\u7684peer\u53ef\u4ee5\u6210\u529f\u52a0\u5165\u8fd9\u4e2a\u901a\u9053\u3002  \n\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u542f\u52a8\u5305\u542bOrg3 peer\u548cOrg3\u7279\u5b9aCLI\u7684\u5bb9\u5668\u3002\u4ece\nfirst-network\n\u76ee\u5f55\u542f\u52a8Org3 docker compose\uff1a\n\n\ndocker-compose -f docker-compose-org3.yaml up -d\n\n\n\n\n\u8fd9\u4e2a\u65b0compose\u6587\u4ef6\u5df2\u7ecf\u88ab\u914d\u7f6e\u4e3a\u53ef\u4ee5\u6865\u63a5\u6211\u4eec\u7684\u521d\u59cb\u7f51\u7edc\uff0c\u56e0\u6b64\u4e24\u4e2apeer\u548cCLI\u5bb9\u5668\u53ef\u4ee5\u89e3\u6790\u5df2\u7ecf\u5b58\u5728\u7684peer(\u6307Org1\u548cOrg2\u7684)\u548c\u6392\u5e8f\u8282\u70b9\u3002\u4e09\u4e2a\u65b0\u5bb9\u5668\u8fd0\u884c\u540e\uff0cexec\u8fdb\u5165Org3\u7279\u5b9aCLI\u5bb9\u5668\uff1a\n\n\ndocker exec -it Org3cli bash\n\n\n\n\n\u5c31\u50cf\u6211\u4eec\u5728\u521d\u59cbCLI\u5bb9\u5668\u4e2d\u505a\u7684\u90a3\u6837\uff0c\u5bfc\u51fa\u4e24\u4e2a\u5173\u952e\u73af\u5883\u53d8\u91cf\nORDERER_CA\n\u548c\nCHANNEL_NAME\n\uff1a\n\n\nexport ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \n export CHANNEL_NAME=mychannel\n\n\n\n\n\u68c0\u67e5\u4e00\u4e0b\u786e\u4fdd\u4e0b\u9762\u7684\u53d8\u91cf\u5df2\u7ecf\u88ab\u826f\u597d\u5730\u8bbe\u7f6e\uff1a\n\n\necho $ORDERER_CA \n echo $CHANNEL_NAME\n\n\n\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u53d1\u9001\u547c\u53eb\u5230\u6392\u5e8f\u670d\u52a1\uff0c\u8bf7\u6c42\nmychannel\n\u7684\u521d\u59cb\u533a\u5757\u3002\u7531\u4e8e\u6211\u4eec\u6210\u529f\u7684\u901a\u9053\u66f4\u65b0\uff0c\u8ba2\u8d2d\u670d\u52a1\u53ef\u4ee5\u9a8c\u8bc1\u9644\u52a0\u5230\u6b64\u547c\u53eb\u7684\u7b7e\u540d\u3002\u5982\u679cOrg3\u5c1a\u672a\u6210\u529f\u6dfb\u52a0\u5230\u901a\u9053\u914d\u7f6e\u4e2d\uff0c\u5219\u6392\u5e8f\u670d\u52a1\u4f1a\u62d2\u7edd\u6b64\u8bf7\u6c42\u3002  \n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u518d\u6b21\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u5f88\u6709\u7528\uff1a\u6d4f\u89c8\u6392\u5e8f\u8282\u70b9\u7684\u65e5\u5fd7\u67e5\u770b\u7b7e\u540d\u548c\u9a8c\u8bc1\u903b\u8f91\u548c\u7b56\u7565\u68c0\u67e5\u3002  \n\n\n\n\n\n\n\u4f7f\u7528\npeer channel fetch\n\u547d\u4ee4\u83b7\u53d6\u8fd9\u4e2a\u533a\u5757\uff1a\n\n\npeer channel fetch 0 mychannel.block -o orderer.example.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA\n\n\n\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u53d1\u9001\u4e86\u4e00\u4e2a\n0\n\u6765\u6307\u5b9a\u6211\u4eec\u8981\u83b7\u53d6\u7684\u901a\u9053\u8d26\u672c\u4e0a\u7684\u7b2c\u4e00\u4e2a\u533a\u5757\uff08\u5373\u521d\u59cb\u533a\u5757\uff09\u3002\u5982\u679c\u6211\u4eec\u7b80\u5355\u5730\u53d1\u9001\npeer channel fetch config\n\u547d\u4ee4\uff0c\u5219\u6211\u4eec\u4f1a\u63a5\u6536\u5230\u533a\u57575\uff0c\u5373\u5b9a\u4e49Org3\u7684\u66f4\u65b0\u914d\u7f6e\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u4e00\u4e2a\u4e0b\u6e38\u533a\u5757\u5f00\u59cb\u8d26\u672c\uff0c\u53cd\u800c\u9700\u8981\u52a0\u5165\u533a\u57570\u3002  \n\n\n\u53d1\u9001\npeer channel join\n\u547d\u4ee4\uff0c\u5e76\u4f20\u5165\u521d\u59cb\u533a\u5757\nmychannel.block\n\uff1a\n\n\npeer channel join -b mychannel.block\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u4e3aOrg3\u52a0\u5165\u7b2c\u4e8c\u4e2apeer\uff0c\u5c31\u5bfc\u51faTLS\u548cADDRESS\u53d8\u91cf\u5e76\u91cd\u65b0\u53d1\u51fa\npeer channel join\n\u547d\u4ee4\uff1a\n\n\nexport CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/tls/ca.crt \n export CORE_PEER_ADDRESS=peer1.org3.example.com:7051\npeer channel join -b mychannel.block\n\n\n\n\n\u5347\u7ea7\u548c\u8c03\u7528\n\n\n\u62fc\u56fe\u7684\u6700\u540e\u4e00\u5757\u662f\u589e\u52a0\u94fe\u7801\u7248\u672c\u548c\u66f4\u65b0\u80cc\u4e66\u7b56\u7565\u4ee5\u4fbf\u5305\u542bOrg3\u3002\u7559\u5728Org3 CLI\u5bb9\u5668\u4e2d\u5e76\u5b89\u88c5\u94fe\u7801\u3002\u7531\u4e8e\u6211\u4eec\u77e5\u9053\u5347\u7ea7\u5373\u5c06\u5230\u6765\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u5b89\u88c5\u94fe\u7801\u7248\u672c1\u7684\u5f92\u52b3\u884c\u4e3a\u3002\u6211\u4eec\u53ea\u5173\u5fc3Org3\u5c06\u6210\u4e3a\u80cc\u4e66\u7b56\u7565\u7684\u4e00\u90e8\u5206\u7684\u65b0\u7248\u672c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u76f4\u63a5\u8df3\u8f6c\u5230\u7248\u672c2\uff1a\n\n\npeer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u5728Org3\u7684\u7b2c\u4e8c\u4e2apeer\u4e0a\u5b89\u88c5\u94fe\u7801\uff0c\u4fee\u6539\u76f8\u5e94\u73af\u5883\u53d8\u91cf\u548c\u91cd\u65b0\u53d1\u9001\u547d\u4ee4\u3002\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u4e2a\u5b89\u88c5\u4e0d\u662f\u5f3a\u5236\u7684\uff0c\u56e0\u4e3a\u60a8\u53ea\u9700\u8981\u5728\u80cc\u4e66peer\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e0e\u8d26\u672c\u63a5\u53e3\u7684peer\uff08\u5373\u4ec5\u67e5\u8be2\uff09\u4e0a\u5b89\u88c5\u94fe\u63a5\u4ee3\u7801\u3002\u8fd9\u79cdpeer\u4e0a\u5c06\u4ecd\u7136\u8fd0\u884c\u786e\u8ba4\u903b\u8f91\u548c\u4f5c\u4e3a\u63d0\u4ea4\u8005\uff0c\u4f46\u6ca1\u6709\u8fd0\u884c\u94fe\u7801\u7684\u5bb9\u5668\u3002  \n\n\n\u73b0\u5728\u8df3\u56de\u5230\u539f\u59cbCLI\u5bb9\u5668\uff0c\u5e76\u5728Org1\u548cOrg2 peer\u4e0a\u5b89\u88c5\u65b0\u7248\u672c\u94fe\u7801\u3002\u6211\u4eec\u662f\u7528Org2\u7ba1\u7406\u5458\u8eab\u4efd\u9012\u4ea4\u7684\u901a\u9053\u66f4\u65b0\u547c\u53eb\uff0c\u6240\u4ee5\u5bb9\u5668\u4ecd\u4ee5\npeer0.org2\n\u7684\u8eab\u4efd\u8fd0\u884c\uff1a\n\n\npeer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/\n\n\n\n\n\u5207\u6362\u5230\npeer0.org1\n\u8eab\u4efd\uff1a\n\n\nexport CORE_PEER_LOCALMSPID=\nOrg1MSP\n\nexport CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\nexport CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nexport CORE_PEER_ADDRESS=peer0.org1.example.com:7051\n\n\n\n\n\u5e76\u91cd\u65b0\u5b89\u88c5\uff1a\n\n\npeer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/\n\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u51c6\u5907\u597d\u5347\u7ea7\u94fe\u7801\u3002\u8fd9\u91cc\u6ca1\u6709\u4fee\u6539\u5e95\u5c42\u6e90\u7801\uff0c\u6211\u4eec\u53ea\u662f\u7b80\u5355\u5730\u628aOrg3\u52a0\u5165\u5230\u901a\u9053\nmychannel\n\u7684\u94fe\u7801\nmycc\n\u7684\u80cc\u4e66\u7b56\u7565\u3002  \n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u4efb\u4f55\u6ee1\u8db3\u94fe\u7801\u5b9e\u4f8b\u5316\u7b56\u7565\u7684\u8eab\u4efd\u90fd\u53ef\u4ee5\u53d1\u51fa\u5347\u7ea7\u547c\u53eb\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8eab\u4efd\u662f\u901a\u9053\u7ba1\u7406\u5458\u3002  \n\n\n\n\n\n\n\u53d1\u9001\u547c\u53eb\uff1a\n\n\npeer chaincode upgrade -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 2.0 -c '{\nArgs\n:[\ninit\n,\na\n,\n90\n,\nb\n,\n210\n]}' -P \nOR ('Org1MSP.member','Org2MSP.member','Org3MSP.member')\n\n\n\n\n\n\u4f60\u53ef\u4ee5\u770b\u5230\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\nv\n\u6807\u5fd7\u6307\u5b9a\u4e86\u65b0\u7248\u672c\u3002\u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u80cc\u4e66\u7b56\u7565\u88ab\u66f4\u65b0\u5230\n-P \"OR ('Org1MSP.member','Org2MSP.member','Org3MSP.member')\"\n\uff0c\u51c6\u786e\u5730\u53cd\u6620\u4e86\u7b56\u7565\u589e\u52a0\u4e86Org3\u3002\uff08\u4e0a\u8ff0\u80cc\u4e66\u7b56\u7565\u7684\u542b\u4e49\u662f\u4e09\u4e2a\u7ec4\u7ec7\u7684\u4efb\u4f55\u4e00\u4e2a\u7b7e\u540d\u90fd\u53ef\u4ee5\u3002\uff09\u4ee4\u4eba\u611f\u5174\u8da3\u7684\u6700\u540e\u4e00\u9879\u662f\u6211\u4eec\u7528\nc\n\u6807\u5fd7\u6307\u5b9a\u7684\u6784\u9020\u51fd\u6570\u8bf7\u6c42\u3002\u4e0e\u5b9e\u4f8b\u5316\u8c03\u7528\u4e00\u6837\uff0c\u94fe\u5f0f\u4ee3\u7801\u5347\u7ea7\u9700\u8981\u4f7f\u7528\ninit\n\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u7684\u94fe\u7801\u9700\u8981\u4f20\u53c2\u6570\u8fdb\ninit\n\u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u63d0\u4f9b\u9002\u5f53\u7684\u952e\u503c\u5bf9\u6765\u91cd\u65b0\u521d\u59cb\u5316\u72b6\u6001\u3002\u8fd9\u4e0d\u662f\u63a8\u8350\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5347\u7ea7\u63d0\u4ea4\u8005\u53ef\u4ee5\u4efb\u610f\u6539\u5199\u4e16\u754c\u72b6\u6001\u3002\u76f8\u53cd\uff0c\u8bf7\u8003\u8651\u7f16\u8f91\u6e90\u4ee3\u7801\u4ee5\u5220\u9664\u53c2\u6570\u4f9d\u8d56\u9879\uff0c\u6216\u8005\u4ece\u5b9e\u4f8b\u5316\u65f6\u4e0d\u9700\u8981\u53c2\u6570\u7684\u94fe\u7801\u5f00\u59cb\u3002  \n\n\n\u5347\u7ea7\u547c\u53eb\u5c06\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u533a\u5757\uff08\u533a\u57576\uff09\u5230\u901a\u9053\u8d26\u672c\uff0c\u5e76\u5141\u8bb8Org3 peer\u5728\u80cc\u4e66\u9636\u6bb5\u6267\u884c\u4ea4\u6613\u3002\u8df3\u56de\u5230Org3 CLI\u5bb9\u5668\uff0c\u5e76\u53d1\u51fa\u4e00\u4e2a\u5bf9\na\n\u503c\u7684\u67e5\u8be2\u3002\u8fd9\u5c06\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u56e0\u4e3a\u94fe\u7801\u955c\u50cf\u9700\u8981\u4e3a\u76ee\u6807peer\u6784\u5efa\uff0c\u5e76\u4e14\u5bb9\u5668\u9700\u8981\u542f\u52a8\uff1a\n\n\npeer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}'\n\n\n\n\n\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u54cd\u5e94:\nQuery Result: 90\n\u3002  \n\n\n\u73b0\u5728\u53d1\u9001\u4e00\u4e2a\u8c03\u7528\uff0c\u4ece\na\n\u79fb\u52a8\n10\n\u4e2a\u6570\u91cf\u5230\nb\n\uff1a\n\n\npeer chaincode invoke -o orderer.example.com:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\ninvoke\n,\na\n,\nb\n,\n10\n]}'\n\n\n\n\n\u6700\u540e\u67e5\u8be2\u4e00\u4e0b\na\n\u7684\u503c\uff1a\n\n\npeer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}'\n\n\n\n\n\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u54cd\u5e94\uff1a\nQuery Result: 80\n\uff0c\u8fd9\u51c6\u786e\u53cd\u6620\u4e86\u8fd9\u4e2a\u94fe\u7801\u7684\u4e16\u754c\u72b6\u6001\u7684\u6539\u53d8\u3002  \n\n\n\u603b\u7ed3\n\n\n\u91cd\u65b0\u914d\u7f6e\u8fc7\u7a0b\u7684\u786e\u6d89\u53ca\u5f88\u591a\uff0c\u4f46\u662f\u5404\u4e2a\u6b65\u9aa4\u90fd\u6709\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6cd5\u3002\u6700\u7ec8\u76ee\u6807\u662f\u5f62\u6210\u4ee5protobuf\u4e8c\u8fdb\u5236\u683c\u5f0f\u8868\u793a\u7684\u589e\u91cf\u4ea4\u6613\u5bf9\u8c61\uff0c\u7136\u540e\u6536\u96c6\u5fc5\u8981\u6570\u91cf\u7684\u7ba1\u7406\u5458\u7b7e\u540d\uff0c\u4f7f\u5f97\u91cd\u65b0\u914d\u7f6e\u4ea4\u6613\u5904\u7406\u5b8c\u6210\u901a\u9053\u7684\u4fee\u6539\u7b56\u7565\u3002\nconfigtxlator\n\u548c\njq\n\u5de5\u5177\uff0c\u4e0e\u65e5\u76ca\u589e\u957f\npeer channel\n\u547d\u4ee4\u4e00\u8d77\uff0c\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\u6240\u9700\u7684\u529f\u80fd\u3002", 
            "title": "\u91cd\u65b0\u914d\u7f6e\u7b2c\u4e00\u4e2a\u7f51\u7edc"
        }, 
        {
            "location": "/channel_update_zh/#_1", 
            "text": "\u6ce8\u610f   \u672c\u7ae0\u7684\u8fd9\u4e9b\u6b65\u9aa4\u5728docker\u955c\u50cf 1.1.0-preview \u7248\u672c(tag)\u548c\u76f8\u5173\u5de5\u5177\u4e2d\u5df2\u7ecf\u9a8c\u8bc1\u8fc7\u3002\u786e\u4fdd\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u4e86\u9002\u5408\u7684\u955c\u50cf\u7248\u672c\u548c\u4e8c\u8fdb\u5236\u5305\uff0c\u6216\u8005\u4f60\u4ece\u6bd4Fabric\u201c1.1.0-preview\u201d\u6807\u7b7e\u66f4\u65b0\u7684\u5206\u652f\u4e0a\u6784\u5efa\u7684\u4e8c\u8fdb\u5236\u5305\u3002      \u672c\u7ae0\u662f \u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc \u7684\u540e\u7eed\uff0c\u4f1a\u6f14\u793a\u589e\u52a0\u4e00\u4e2a\u65b0\u7ec4\u7ec7 Org3 \u5230\u81ea\u52a8\u751f\u6210\u7684\u5e94\u7528\u901a\u9053 mychannel \u3002\u5b83\u5047\u5b9a\u4f60\u5df2\u7ecf\u5bf9 BYFN \u793a\u8303\u5f88\u61c2\u4e86\uff0c\u5305\u62ec\u4f1a\u4f7f\u7528\u5de5\u5177 cryptogen \u548c configtxgen \u3002    \u8fd9\u7bc7\u6587\u7ae0\u4ec5\u805a\u7126\u4e8e\u96c6\u6210\u4e00\u4e2a\u65b0\u7ec4\u7ec7\uff0c\u7136\u800c\u7528\u540c\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u66f4\u65b0\u5176\u4ed6\u901a\u9053\u914d\u7f6e\uff08\u5982\u66f4\u65b0\u4fee\u6539\u89c4\u5219\u3001\u6539\u53d8\u6279\u5927\u5c0f\u7b49\uff09\u3002\u793a\u8303\u7684\u64cd\u4f5c\u662f\u7ec4\u7ec7\u7ba1\u7406\u5458\u804c\u8d23\uff0c\u800c\u4e0d\u662f\u94fe\u7801\u6216\u5e94\u7528\u5f00\u53d1\u8005\u804c\u8d23\u3002   \u6ce8\u610f   \u786e\u4fdd\u5df2\u7ecf\u5b89\u88c5\u4e86\u5fc5\u8981\u7684Fabric\u955c\u50cf\u548c\u5b9e\u7528\u7a0b\u5e8f\uff0c\u5e76\u4e14\u81ea\u52a8\u5316\u811a\u672c byfn.sh \u5728\u7ee7\u7eed\u64cd\u4f5c\u524d\u5728\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u6ca1\u6709\u62a5\u9519\u3002\u5373\u5c06\u5230\u6765\u7684\u6b65\u9aa4\u4f9d\u8d56\u4e8e\u751f\u6210\u7684\u7f51\u7edc\u548c\u5de5\u4ef6\u3002\u5982\u679c\u5c1a\u672a\u914d\u7f6e\u673a\u5668\uff0c\u8bf7\u53c2\u9605 \u524d\u63d0\u6761\u4ef6 \u548c Hyperledger Fabric\u793a\u8303 \u6587\u6863\u3002\u63d0\u4f9b\u7684\u547d\u4ee4\u8fd8\u5047\u5b9aFabric\u5b9e\u7528\u7a0b\u5e8f\u5b58\u5728\u4e8e fabric-samples \u76ee\u5f55\u4e0b\u7684 bin \u6839\u76ee\u5f55\u4e2d\u3002\u5982\u679c\u5df2\u5c06\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6587\u4ef6\u8def\u5f84\u5bfc\u51fa\u5230\u4e86PATH\u53d8\u91cf\u4e2d\uff0c\u5219\u53ef\u4ee5\u76f8\u5e94\u5730\u4fee\u6539\u8fd9\u4e9b\u547d\u4ee4\uff0c\u800c\u4e0d\u5fc5\u4f20\u9012\u7edd\u5bf9\u8def\u5f84\u3002", 
            "title": "\u91cd\u65b0\u914d\u7f6e\u7b2c\u4e00\u4e2a\u7f51\u7edc"
        }, 
        {
            "location": "/channel_update_zh/#_2", 
            "text": "\u4e0b\u9762\u7684\u64cd\u4f5c\u5c06\u4f4d\u4e8e fabric-samples \u7684\u5b50\u76ee\u5f55 first-network \u4e2d\u3002\u66f4\u6362\u5230\u8fd9\u4e2a\u76ee\u5f55\u3002\u4f60\u53ef\u4ee5\u6253\u5f00\u81ea\u5df1\u559c\u6b22\u7684\u7ec8\u7aef\u7a97\u53e3\uff0c\u5982git-bash\u3002    \u9996\u5148\uff0c\u4f7f\u7528 byfn.sh \u811a\u672c\u6765\u8fdb\u884c\u6e05\u7406\u5de5\u4f5c\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6740\u6b7b\u6d3b\u52a8\u7684docker\u5bb9\u5668\u548c\u5220\u9664\u4e4b\u524d\u751f\u6210\u7684\u52a0\u5bc6\u6750\u6599\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4e3a\u4e86\u6267\u884c\u91cd\u65b0\u914d\u7f6e\u4efb\u52a1\u5e76\u4e0d\u4e00\u5b9a\u8981\u505c\u6b62Fabric\u7f51\u7edc\uff0c\u7136\u800c\u4e3a\u4e86\u8fd9\u4e2a\u6559\u7a0b\u7684\u76ee\u7684\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5df2\u77e5\u7684\u521d\u59cb\u72b6\u6001\u3002\u56e0\u6b64\u8ba9\u6211\u4eec\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u6e05\u7406\u4e4b\u524d\u7684\u73af\u5883\uff1a  ./byfn.sh -m down  \u73b0\u5728\u91cd\u65b0\u751f\u6210\u9ed8\u8ba4BYFN\u5de5\u4ef6\uff1a  ./byfn.sh -m generate  \u901a\u8fc7\u6267\u884cCLI\u5bb9\u5668\u4e2d\u811a\u672c\u542f\u52a8\u7f51\u7edc\uff1a  ./byfn.sh -m up  \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u5207\u6362\u5230 org3-artifacts \u5b50\u76ee\u5f55\u3002  cd org3-artifacts  \u5f53\u524d\u76ee\u5f55\u4e0b\u6709\u5174\u8da3\u7684\u6587\u4ef6\u6709\u4e24\u4e2a org3-crypto.yaml \u548c configtx.yaml \u3002\u9996\u5148\uff0c\u4e3aorg3\u751f\u6210\u52a0\u5bc6\u6750\u6599\uff1a  ../../bin/cryptogen generate --config=./org3-crypto.yaml  \u4e0a\u8ff0\u547d\u4ee4\u4f1a\u8bfb\u53d6\u65b0\u7684\u52a0\u5bc6yaml\u6587\u4ef6 org3-crypto.yaml \uff0c\u5229\u7528 cryptogen \u5de5\u5177\u4e3aOrg3\u4e2d\u95f4CA\u751f\u6210\u5bc6\u94a5\u548c\u8bc1\u4e66\uff0c\u5e76\u4e14\u6709\u4e24\u4e2apeer\u7ed1\u5b9a\u5230\u8fd9\u4e2a\u65b0\u7ec4\u7ec7\u3002\u4e0eBYFN\u5b9e\u73b0\u4e00\u8d77\uff0c\u8fd9\u4e2a\u52a0\u5bc6\u6750\u6599\u8f93\u51fa\u5230\u4e00\u4e2a\u65b0\u751f\u6210\u7684 crypto-config \u76ee\u5f55\u4e2d\u3002    \u73b0\u5728\u4f7f\u7528 configtxgen \u5de5\u5177\u8f93\u51faJSON\u683c\u5f0f\u7684Org3\u76f8\u5173\u914d\u7f6e\u6750\u6599\u3002\u4f5c\u4e3a\u5f00\u59cb\u7684\u547d\u4ee4\uff0c\u544a\u8bc9\u5de5\u5177\u4ece\u5f53\u524d\u76ee\u5f55\u4e0b\u8bfb\u53d6 configtx.yaml \u3002  export FABRIC_CFG_PATH=$PWD   ../../bin/configtxgen -printOrg Org3MSP   ../channel-artifacts/org3.json  \u4e0a\u9762\u7684\u547d\u4ee4\u4f1a\u521b\u5efa\u4e00\u4e2aJSON\u6587\u4ef6 org3.json \uff0c\u5e76\u628a\u5b83\u8f93\u51fa\u5230 first-network \u76ee\u5f55\u7684\u5b50\u76ee\u5f55 channel-artifacts \u4e0b\u9762\u3002\u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u4e3aOrg3\u5b9a\u4e49\u7684\u4fee\u6539\u7b56\u7565\uff0c\u4ee5\u53ca\u4e09\u4e2abase64\u683c\u5f0f\u7684\u91cd\u8981\u8bc1\u4e66\uff1a\u7ba1\u7406\u5458\u7528\u6237\u8bc1\u4e66\u3001CA\u6839\u8bc1\u4e66\u548cTLS\u6839\u8bc1\u4e66\u3002\u5728\u4e0b\u9762\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u5c06\u9644\u52a0\u8fd9\u4e2aJSON\u5bf9\u8c61\u5230\u901a\u9053\u914d\u7f6e\u4e2d\u3002    \u6211\u4eec\u6700\u540e\u4e00\u9879\u51c6\u5907\u5de5\u4f5c\u662f\u5c06Orderer\u7ec4\u7ec7MSP\u6750\u6599\u642c\u79fb\u5230Org3\u7684 crypto-config \u76ee\u5f55\u4e2d\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u5173\u6ce8Orderer\u7684TLS\u6839\u8bc1\u4e66\uff0c\u8fd9\u5c06\u5141\u8bb8Org3\u5b9e\u4f53\u548c\u7f51\u7edc\u7684orderer\u8282\u70b9\u4e4b\u95f4\u7684\u5b89\u5168\u901a\u4fe1\u3002  cd ../   cp -r crypto-config/ordererOrganizations org3-artifacts/crypto-config/  \u73b0\u5728\uff0c\u6211\u4eec\u51c6\u5907\u597d\u91cd\u65b0\u914d\u7f6e\u4e86\u3002", 
            "title": "\u914d\u7f6e\u73af\u5883\u53d8\u91cf"
        }, 
        {
            "location": "/channel_update_zh/#configtxlator", 
            "text": "\u66f4\u65b0\u8fc7\u7a0b\u4f7f\u7528\u914d\u7f6e\u8f6c\u6362\u5de5\u5177 configtxlator \u3002\u8fd9\u4e2a\u5de5\u5177\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7eaf\u65e0\u72b6\u6001REST API\uff0c\u4e0d\u4f9d\u8d56SDK\uff0c\u4f7fHyperledger Fabric\u7f51\u7edc\u7684\u914d\u7f6e\u5de5\u4f5c\u7b80\u5355\u5316\u3002\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u4e0d\u540c\u8868\u73b0/\u683c\u5f0f\u7684\u7b49\u4ef7\u6570\u636e\u3002\u4f8b\u5982\uff0c\u5728\u5de5\u5177\u64cd\u4f5c\u7684\u4e00\u79cd\u6a21\u5f0f\u4e2d\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u5c06\u4e8c\u8fdb\u5236protobuf\u683c\u5f0f\u8f6c\u6362\u5230\u4eba\u7c7b\u53ef\u8bfb\u7684JSON\u6587\u672c\u683c\u5f0f\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u6b64\u5916\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u6839\u636e\u4e24\u7ec4\u4e0d\u540c\u7684\u914d\u7f6e\u4ea4\u6613\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u8ba1\u7b97\u914d\u7f6e\u66f4\u65b0\u3002    \u9996\u5148\uff0c\u7528docker exec\u547d\u4ee4\u8fdb\u5165CLI\u5bb9\u5668\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u5bb9\u5668\u5df2\u7ecf\u5b89\u88c5\u4e86BYFN crypto-config \u5e93\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u8bbf\u95ee\u4e24\u4e2a\u539f\u6765\u7684peer\u7ec4\u7ec7\u548cOrderer\u7ec4\u7ec7\u7684MSP\u6750\u6599\u3002\u5f15\u5bfc\u8eab\u4efd\u662fOrg1\u7ba1\u7406\u5458\u7528\u6237\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u60f3\u8981\u4ee3\u8868Org2\u884c\u4e8b\u7684\u4efb\u4f55\u6b65\u9aa4\u90fd\u9700\u8981\u5bfc\u51faMSP\u7279\u5b9a\u7684\u73af\u5883\u53d8\u91cf\u3002  docker exec -it cli bash  \u5728\u9ed8\u8ba4\u8bbe\u7f6e\u4e0b\uff0cCLI\u5bb9\u5668\u4f1a\u572810000\u79d2\u540e\u9000\u51fa\u3002\u5982\u679c\u5bb9\u5668\u9000\u51fa\u4e86\uff0c\u786e\u4fdd\u5728\u7ee7\u7eed\u524d\u91cd\u65b0\u542f\u52a8\u5b83\u3002\u9996\u5148\uff0c\u68c0\u67e5\u4f60\u7684\u5bb9\u5668\u72b6\u6001\uff1a  docker ps -a  \u5982\u679c\u5fc5\u8981\uff0c\u91cd\u65b0\u542f\u52a8CLI:  docker start cli  \u73b0\u5728\u5728\u5bb9\u5668\u4e2d\u5b89\u88c5 jq \u5de5\u5177\u3002\u8fd9\u4e2a\u5de5\u5177\u5141\u8bb8\u6211\u4eec\u4e0e configtxlator \u5de5\u5177\u8fd4\u56de\u7684JSON\u5bf9\u8c61\u8fdb\u884c\u811a\u672c\u4ea4\u4e92\uff1a  # Press `y` when prompted by the command\napt update   apt install jq  \u542f\u52a8 configtxlator REST\u670d\u52a1\u5668(\u6700\u540e\u7684 \u7b26\u53f7\u4f7f\u952e\u76d8\u8f93\u5165\u4e0d\u9501\u4f4f)\uff1a  # Press enter twice\nconfigtxlator start    \u8bbe\u7f6eURL:  CONFIGTXLATOR_URL=http://127.0.0.1:7059  \u5bfc\u51fa ORDERER_CA``CHANNEL_NAME \u53d8\u91cf\uff1a  export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem    export CHANNEL_NAME=mychannel  \u68c0\u67e5\u4e00\u4e0b\u786e\u4fdd\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u6b63\u786e\uff1a  echo $ORDERER_CA   echo $CHANNEL_NAME   \u6ce8\u610f   \u5982\u679c\u4f60\u91cd\u542f\u4e86CLI\u5bb9\u5668\uff0c\u4f60\u9700\u8981\u91cd\u542fREST\u670d\u52a1\u5668\u548c\u91cd\u65b0\u5bfc\u51fa\u4e09\u4e2a\u73af\u5883\u53d8\u91cf CONFIGTXLATOR_URL \u3001 ORDERER_CA \u548c CHANNEL_NAME \u3002jq\u7684\u5b89\u88c5\u4f1a\u6301\u4e45\u5316\uff0c\u4e0d\u7528\u91cd\u65b0\u5b89\u88c5\u5b83\u3002*", 
            "title": "\u542f\u52a8configtxlator\u670d\u52a1\u5668"
        }, 
        {
            "location": "/channel_update_zh/#_3", 
            "text": "\u73b0\u5728\u6211\u4eec\u5728CLI\u5bb9\u5668\u4e2d\u6709\u4e86\u4e00\u4e2a\u8fd0\u884c\u4e2d\u7684REST\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u6211\u4eec\u5bfc\u51fa\u4e86\u4e24\u4e2a\u5173\u952e\u73af\u5883\u53d8\u91cf ORDERER_CA \u548c CHANNEL_NAME \u3002\u8ba9\u6211\u4eec\u63d0\u53d6\u901a\u9053 mychannel \u6700\u65b0\u914d\u7f6e\u533a\u5757\u3002  peer channel fetch config config_block.pb -o orderer.example.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA  \u4e0a\u9762\u7684\u547d\u4ee4\u5bf9\u751f\u6210\u7684\u4e8c\u8fdb\u5236protobuf\u683c\u5f0f\u901a\u9053\u914d\u7f6e\u5757\u53d6\u4e86\u4e00\u4e2a\u540d\u79f0 config_block.pb \u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u8fd4\u56de\u7684protobuf\u548cJSON\u5bf9\u8c61\u7684\u547d\u540d\u7ea6\u5b9a\uff0c\u4f46\u662f\u4f60\u5e94\u8be5\u9075\u5faa\u4e00\u79cd\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u4e8e\u8fdb\u884c\u7b80\u5355\u76f4\u89c2\u7684\u8bc6\u522b\u3002    \u5f53\u4f60\u53d1\u51fa peer channel fetch \u547d\u4ee4\u7684\u65f6\u5019\uff0c\u7ec8\u7aef\u4e0a\u4f1a\u663e\u793a\u4e00\u4e9b\u8f93\u51fa\u3002\u65e5\u5fd7\u4e2d\u7684\u6700\u540e\u4e00\u884c\u5f88\u6709\u8da3\uff1a  2017-11-07 17:17:57.383 UTC [channelCmd] readBlock -  DEBU 011 Received block: 2  \u8fd9\u662f\u544a\u8bc9\u6211\u4eec mychannel \u7684\u6700\u65b0\u914d\u7f6e\u533a\u5757\u662f\u533a\u57572\uff0c \u4e0d\u662f \u521d\u59cb\u533a\u5757\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c peer channel fetch config \u547d\u4ee4\u8fd4\u56de\u76ee\u6807\u901a\u9053\u7684\u6700\u65b0\u914d\u7f6e\u533a\u5757\uff0c\u5728\u672c\u4f8b\u4e2d\u662f2\u53f7\u533a\u5757\u3002\u5f53BYFN\u573a\u666f\u8fd0\u884c\u65f6\uff0c\u5185\u5d4c\u811a\u672c\u6267\u884c\u4e86\u4e24\u4e2a\u5bf9\u901a\u9053\u7684\u9644\u52a0\u914d\u7f6e\u66f4\u65b0\u3002\u4e5f\u5c31\u662f\uff0c\u901a\u8fc7\u4e24\u4e2a\u901a\u9053\u66f4\u65b0\u4ea4\u6613\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7ec4\u7ec7 Org1 \u548c Org2 \u7684\u951apeer\u3002\u8c61\u8fd9\u6837\uff0c\u6211\u4eec\u6709\u4e86\u5982\u4e0b\u914d\u7f6e\u5e8f\u5217\uff1a\u533a\u57570\uff0c\u521d\u59cb\u533a\u5757\uff1b\u533a\u57571\uff0cOrg1\u951apeer\u66f4\u65b0\uff1b\u533a\u57572\uff0cOrg2\u951apeer\u66f4\u65b0\u3002    \u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528 configtxlator \u670d\u52a1\u5668\u5c06\u8fd9\u4e2a\u901a\u9053\u914d\u7f6e\u533a\u5757\u89e3\u7801\u4e3a\u4eba\u7c7b\u53ef\u4ee5\u8bfb\u5199\u7684JSON\u683c\u5f0f\u3002  curl -X POST --data-binary @config_block.pb  $CONFIGTXLATOR_URL/protolator/decode/common.Block  | jq .   config_block.json  \u6211\u4eec\u5c06\u7f16\u7801\u8f93\u51fa\u547d\u540d\u4e3a confg_block.json \u3002\uff08\u518d\u6b21\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u547d\u540d\u4e60\u60ef\u6765\u64cd\u4f5c\u6b64\u6b65\u9aa4\u3002\uff09\u5982\u679c\u4f60\u5728CLI\u5bb9\u5668\u53d1\u51fa ls \u547d\u4ee4\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u5bf9\u8c61\uff1a\u4e8c\u8fdb\u5236protobuff\u683c\u5f0f\u7684\u901a\u9053\u914d\u7f6e\u6587\u4ef6 config_block.pb \u548cJSON\u683c\u5f0f\u5bf9\u8c61 config_block.json \u3002    \u73b0\u5728\u6211\u4eec\u9700\u8981\u786e\u5b9a config_block.json \u5bf9\u8c61\u7684\u8303\u56f4\uff0c\u5e76\u53bb\u6389\u6240\u6709\u7684\u5c01\u88c5\u5305\u88c5\u3002\u6211\u4eec\u4e0d\u5173\u5fc3\u6807\u9898\u3001\u5143\u6570\u636e\u3001\u521b\u5efa\u8005\u7b7e\u540d\u7b49\uff0c\u4f46\u5173\u5fc3\u4ea4\u6613\u4e2d\u7684\u914d\u7f6e\u5b9a\u4e49\u3002\u6211\u4eec\u901a\u8fc7 jq \u5de5\u5177\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a  jq .data.data[0].payload.data.config config_block.json   config.json  \u8fd9\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u4fee\u6574\u8fc7\u7684JSON\u5bf9\u8c61 config.json \uff0c\u8fd9\u662f\u6211\u4eec\u4fee\u6539\u914d\u7f6e\u7684\u57fa\u7840\u3002\u6211\u4eec\u5c06\u518d\u6b21\u4f7f\u7528 jq \u5de5\u5177\u5c06Org3\u914d\u7f6e\u5b9a\u4e49 org3.json \u9644\u52a0\u5230\u901a\u9053\u7684\u5e94\u7528\u7ec4\u5b57\u6bb5\uff0c\u5e76\u547d\u540d\u8f93\u51fa\u4e3a updated_config.json \u3002  jq -s '.[0] * { channel_group :{ groups :{ Application :{ groups : { Org3MSP :.[1]}}}}}' config.json ./channel-artifacts/org3.json   updated_config.json  \u73b0\u5728\uff0c\u5728CLI\u5bb9\u5668\u4e2d\u6211\u4eec\u6709\u4e86\u4e24\u4e2aJSON\u6587\u4ef6 config.json \u548c updated_config.json \u3002\u521d\u59cb\u6587\u4ef6\u4ec5\u5305\u542bOrg1\u548cOrg2\u7684\u6750\u6599\uff0c\u800c\u201cupdated config\u201d\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5168\u90e83\u4e2a\u7ec4\u7ec7(Orgs)\u3002\u6b64\u65f6\uff0c\u53ea\u9700\u91cd\u65b0\u7f16\u7801\u8fd9\u4e24\u4e2aJSON\u6587\u4ef6\u5e76\u8ba1\u7b97\u589e\u91cf\u5373\u53ef\u3002    \u9996\u5148\uff0c\u7f16\u7801 config.json \u4e3a config.pb \uff1a  curl -X POST --data-binary @config.json  $CONFIGTXLATOR_URL/protolator/encode/common.Config    config.pb  \u5176\u6b21\uff0c\u7f16\u7801 updated_config.json \u4e3a updated_config.pb \uff1a  curl -X POST --data-binary @updated_config.json  $CONFIGTXLATOR_URL/protolator/encode/common.Config    updated_config.pb  \u73b0\u5728\uff0c\u4f7f\u7528 configtxlator \u670d\u52a1\u5668\u6765\u8ba1\u7b97\u4e24\u4e2a\u914d\u7f6eproto\u4e4b\u95f4\u7684\u589e\u91cf\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u8f93\u51fa\u4e00\u4e2a\u65b0\u7684protobuf\u4e8c\u8fdb\u5236\u6587\u4ef6 Org3_update.pb \uff1a  curl -X POST -F channel=$CHANNEL_NAME -F  original=@config.pb  -F  updated=@updated_config.pb   ${CONFIGTXLATOR_URL}/configtxlator/compute/update-from-configs    org3_update.pb  \u8fd9\u4e2a\u65b0proto org3_update.pb \u5305\u542b\u4e86Org3\u5b9a\u4e49\u548c\u6307\u5411Org1\u548cOrg2\u6750\u6599\u7684\u9ad8\u7ea7\u6307\u9488\u3002\u6211\u4eec\u80fd\u591f\u653e\u5f03\u5927\u91cf\u7684Org1\u548cOrg2\u7684MSP\u6750\u6599\u548c\u4fee\u6539\u7b56\u7565\u4fe1\u606f\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u636e\u5df2\u7ecf\u5b58\u5728\u4e8e\u901a\u9053\u7684\u521d\u59cb\u533a\u5757\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e24\u4e2a\u914d\u7f6e\u7684\u589e\u91cf\u4fe1\u606f\u3002    \u5728\u9012\u4ea4\u901a\u9053\u66f4\u65b0\u524d\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u51e0\u4e2a\u6700\u540e\u7684\u6b65\u9aa4\u3002\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u89e3\u7801\u8fd9\u4e2a\u5bf9\u8c61\u5230\u53ef\u7f16\u8f91\u7684JSON\u683c\u5f0f org3_update.json :  curl -X POST --data-binary @org3_update.pb  $CONFIGTXLATOR_URL/protolator/decode/common.ConfigUpdate  | jq .   org3_update.json  \u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u89e3\u7801\u7684\u66f4\u65b0\u6587\u4ef6 org3_update.json \uff0c\u8fd9\u4e2a\u6587\u4ef6\u6211\u4eec\u9700\u8981\u5305\u88c5\u8fdb\u4e00\u4e2a\u4fe1\u5c01\u6d88\u606f\u4e2d\u3002\u8fd9\u4e00\u6b65\u9aa4\u7ed9\u56de\u6211\u4eec\u4e4b\u524d\u5265\u6389\u7684\u6807\u9898\u5b57\u6bb5\u3002\u6211\u4eec\u547d\u540d\u8fd9\u4e2a\u6587\u4ef6\u4e3a org3_update_in_envelope.json \uff1a  echo '{ payload :{ header :{ channel_header :{ channel_id : mychannel ,  type :2}}, data :{ config_update :'$(cat org3_update.json)'}}}' | jq .   org3_update_in_envelope.json  \u4f7f\u7528\u6211\u4eec\u6b63\u786e\u6784\u5efa\u7684JSON\u6587\u4ef6 org3_update_in_envelope.json \uff0c\u6211\u4eec\u5c06\u6700\u540e\u4e00\u6b21\u5229\u7528 configtxlator \u8fd9\u4e2a\u5de5\u5177\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u8f6c\u6362\u4e3aFabric\u9700\u8981\u7684\u5b8c\u5168\u6210\u719f\u7684proto\u683c\u5f0f\u3002\u6211\u4eec\u5c06\u547d\u540d\u6211\u4eec\u7684\u6700\u7ec8\u66f4\u65b0\u5bf9\u8c61\u4e3a org3_update_in_envelope.pb \uff1a  curl -X POST --data-binary @org3_update_in_envelope.json  $CONFIGTXLATOR_URL/protolator/encode/common.Envelope    org3_update_in_envelope.pb  \u51e0\u4e4e\u5b8c\u6210\uff01\u6211\u4eec\u73b0\u5728\u7684CLI\u5bb9\u5668\u4e2d\u6709\u4e86\u4e00\u4e2aprotobuf\u4e8c\u8fdb\u5236\u6587\u4ef6 org3_update_in_envelope.pb \uff0c\u7136\u800c\u5728\u53ef\u4ee5\u6210\u529f\u9012\u4ea4\u8fd9\u4e2a\u66f4\u65b0\u524d\uff0c\u6211\u4eec\u9700\u8981\u5fc5\u8981\u7684Admin\u7528\u6237\u7b7e\u540d\u3002\u6211\u4eec\u901a\u9053\u7684\u66f4\u65b0\u7b56\u7565(mod_policy)\u88ab\u8bbe\u7f6e\u6210\u9ed8\u8ba4\u7684\u201cMAJORITY\u201d(\u591a\u6570)\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u6765\u81ea\u4e24\u4e2a\u521d\u59cb\u7ec4\u7ec7Org1\u548cOrg2\u7684\u7ba1\u7406\u5458\u7b7e\u7f72\u8fd9\u4e2a\u66f4\u65b0\u3002\u5982\u679c\u6211\u4eec\u6ca1\u6709\u83b7\u5f97\u8fd9\u4e24\u4e2a\u7b7e\u540d\uff0c\u5219\u6392\u5e8f\u670d\u52a1\u4f1a\u56e0\u65e0\u6cd5\u6ee1\u8db3\u7b56\u7565\u800c\u62d2\u7edd\u8fd9\u4e2a\u4ea4\u6613\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528Org1\u7684Admin\u7b7e\u7f72\u8fd9\u4e2a\u66f4\u65b0proto\u3002\u8bb0\u4f4fCLI\u5bb9\u5668\u662f\u7528Org1 MSP\u6750\u6599\u5f15\u5bfc\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u5730\u53d1\u9001 peer channel signconfigtx \u547d\u4ee4\uff1a  peer channel signconfigtx -f org3_update_in_envelope.pb  \u6700\u540e\u4e00\u6b65\u662f\u5207\u6362CLI\u5bb9\u5668\u7684\u8eab\u4efd\u4e3aOrg2\u7684Admin\u7528\u6237\u3002\u6211\u4eec\u901a\u8fc7\u5bfc\u51fa\u5bf9\u5e94Org2 MSP\u76844\u4e2a\u73af\u5883\u53d8\u91cf\u505a\u5230\u8fd9\u4e00\u70b9\u3002     \u6ce8\u610f   \u4e0b\u9762\u7684\u6f14\u793a\u4e0d\u80fd\u53cd\u6620\u771f\u5b9e\u4e16\u754c\u7684\u64cd\u4f5c\u3002\u5355\u4e2a\u5bb9\u5668\u6c38\u8fdc\u4e0d\u5e94\u8be5\u88c5\u8f7d\u8fd9\u4e2a\u7f51\u7edc\u7684\u52a0\u5bc6\u6750\u6599\u3002\u76f8\u53cd\uff0c\u66f4\u65b0\u5bf9\u8c61\u9700\u8981\u5b89\u5168\u5730\u901a\u8fc7\u201c\u5e26\u5916\u201d(out-of-band)\u4f20\u9012\u7ed9Org2\u7ba1\u7406\u5458\u8fdb\u884c\u68c0\u67e5\u548c\u6279\u51c6\u3002      \u5bfc\u51faOrg2\u7684\u73af\u5883\u53d8\u91cf\uff1a  # you can issue all of these commands at once\nexport CORE_PEER_LOCALMSPID= Org2MSP \nexport CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt\nexport CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp\nexport CORE_PEER_ADDRESS=peer0.org2.example.com:7051  \u6700\u540e\u6211\u4eec\u53d1\u51fa peer channel update \u547d\u4ee4\u3002Org2\u7ba1\u7406\u5458\u7b7e\u540d\u4f1a\u9644\u52a0\u5230\u8fd9\u4e2a\u547c\u53eb\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u624b\u5de5\u518d\u6b21\u7b7e\u7f72\u8fd9\u4e2aproto\uff1a     \u6ce8\u610f   \u5373\u5c06\u5230\u6765\u7684\u5bf9\u6392\u5e8f\u670d\u52a1\u7684\u547c\u53eb\u4f1a\u7ecf\u5386\u4e00\u7cfb\u5217\u7cfb\u7edf\u7b7e\u540d\u548c\u7b56\u7565\u68c0\u67e5\u3002\u56e0\u6b64\uff0c\u4f60\u4f1a\u53d1\u73b0\u6d4f\u89c8\u548c\u67e5\u770b\u6392\u5e8f\u8282\u70b9\u7684\u65e5\u5fd7\u5f88\u6709\u7528\u3002\u4ece\u53e6\u4e00\u4e2a\u7ec8\u7aefshell\uff0c\u53d1\u9001 docker logs -f orderer.example.com \u547d\u4ee4\u6765\u663e\u793a\u5b83\u4eec\u3002     \u53d1\u9001\u66f4\u65b0\u547c\u53eb\uff1a  peer channel update -f org3_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.example.com:7050 --tls --cafile $ORDERER_CA  \u5982\u679c\u66f4\u65b0\u6210\u529f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u6d88\u606f\u6458\u8981\u6307\u793a\uff1a  2017-11-07 21:50:17.435 UTC [msp/identity] Sign -  DEBU 00f Sign: digest: 3207B24E40DE2FAB87A2E42BC004FEAA1E6FDCA42977CB78C64F05A88E556ABA  \u6210\u529f\u7684\u901a\u9053\u66f4\u65b0\u547c\u53eb\u8fd4\u56de\u4e86\u4e00\u4e2a\u65b0\u7684\u533a\u5757\uff0c\u533a\u57575\uff0c\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u3002\u533a\u57570-2\u662f\u521d\u59cb\u901a\u9053\u914d\u7f6e\uff0c\u533a\u57573-4\u662f\u5b9e\u4f8b\u5316\u548c\u5bf9\u94fe\u7801 mycc \u7684\u8c03\u7528\u3002\u540c\u6837\u7684\uff0c\u533a\u57575\u4f5c\u4e3a\u6700\u65b0\u7684\u901a\u9053\u914d\u7f6e\u5c06Org3\u5b9a\u4e49\u5230\u4e86\u901a\u9053\u4e0a\u3002    \u67e5\u770b\u5bb9\u5668 peer0.org1.example.com \u7684\u65e5\u5fd7\uff1a  docker logs -f peer0.org1.example.com  \u4f60\u770b\u5230\u7684\u8be6\u7ec6\u8f93\u51fa\u53cd\u5e94\u4e86\u786e\u8ba4\u68c0\u67e5\u548c\u5bf9peer\u72b6\u6001\u6570\u636e\u5e93\u7684\u66f4\u65b0(\u5173\u4e8e\u901a\u9053\u7684\u5f53\u524d\u914d\u7f6e)\u3002\u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u914d\u7f6e\u4ea4\u6613\u7684\u63d0\u4ea4\uff1a  2017-11-15 15:41:05.000 UTC [kvledger] CommitWithPvtData -  DEBU 774 Channel [mychannel]: Committing block [5] to storage  \u5982\u679c\u60a8\u60f3\u67e5\u770b\u65b0\u914d\u7f6e\u533a\u5757\u7684\u5185\u5bb9\uff0c\u8bf7\u6309\u7167\u6f14\u793a\u8fc7\u7a0b\u83b7\u53d6\u5e76\u89e3\u7801\u65b0\u914d\u7f6e\u533a\u5757\u3002\u8ba9\u6211\u4eec\u7ee7\u7eed", 
            "title": "\u5f62\u6210\u66f4\u65b0\u5bf9\u8c61\u548c\u91cd\u65b0\u914d\u7f6e\u901a\u9053"
        }, 
        {
            "location": "/channel_update_zh/#org3", 
            "text": "\u5728\u8fd9\u65f6\uff0c\u901a\u9053\u914d\u7f6e\u5df2\u7ecf\u66f4\u65b0\u5230\u5305\u542b\u4e86\u6211\u4eec\u7684\u65b0\u7ec4\u7ec7 Org3 \uff0c\u8fd9\u610f\u5473\u7740\u6b64\u6210\u5458\u7684peer\u53ef\u4ee5\u6210\u529f\u52a0\u5165\u8fd9\u4e2a\u901a\u9053\u3002    \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u542f\u52a8\u5305\u542bOrg3 peer\u548cOrg3\u7279\u5b9aCLI\u7684\u5bb9\u5668\u3002\u4ece first-network \u76ee\u5f55\u542f\u52a8Org3 docker compose\uff1a  docker-compose -f docker-compose-org3.yaml up -d  \u8fd9\u4e2a\u65b0compose\u6587\u4ef6\u5df2\u7ecf\u88ab\u914d\u7f6e\u4e3a\u53ef\u4ee5\u6865\u63a5\u6211\u4eec\u7684\u521d\u59cb\u7f51\u7edc\uff0c\u56e0\u6b64\u4e24\u4e2apeer\u548cCLI\u5bb9\u5668\u53ef\u4ee5\u89e3\u6790\u5df2\u7ecf\u5b58\u5728\u7684peer(\u6307Org1\u548cOrg2\u7684)\u548c\u6392\u5e8f\u8282\u70b9\u3002\u4e09\u4e2a\u65b0\u5bb9\u5668\u8fd0\u884c\u540e\uff0cexec\u8fdb\u5165Org3\u7279\u5b9aCLI\u5bb9\u5668\uff1a  docker exec -it Org3cli bash  \u5c31\u50cf\u6211\u4eec\u5728\u521d\u59cbCLI\u5bb9\u5668\u4e2d\u505a\u7684\u90a3\u6837\uff0c\u5bfc\u51fa\u4e24\u4e2a\u5173\u952e\u73af\u5883\u53d8\u91cf ORDERER_CA \u548c CHANNEL_NAME \uff1a  export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem   export CHANNEL_NAME=mychannel  \u68c0\u67e5\u4e00\u4e0b\u786e\u4fdd\u4e0b\u9762\u7684\u53d8\u91cf\u5df2\u7ecf\u88ab\u826f\u597d\u5730\u8bbe\u7f6e\uff1a  echo $ORDERER_CA   echo $CHANNEL_NAME  \u73b0\u5728\u8ba9\u6211\u4eec\u53d1\u9001\u547c\u53eb\u5230\u6392\u5e8f\u670d\u52a1\uff0c\u8bf7\u6c42 mychannel \u7684\u521d\u59cb\u533a\u5757\u3002\u7531\u4e8e\u6211\u4eec\u6210\u529f\u7684\u901a\u9053\u66f4\u65b0\uff0c\u8ba2\u8d2d\u670d\u52a1\u53ef\u4ee5\u9a8c\u8bc1\u9644\u52a0\u5230\u6b64\u547c\u53eb\u7684\u7b7e\u540d\u3002\u5982\u679cOrg3\u5c1a\u672a\u6210\u529f\u6dfb\u52a0\u5230\u901a\u9053\u914d\u7f6e\u4e2d\uff0c\u5219\u6392\u5e8f\u670d\u52a1\u4f1a\u62d2\u7edd\u6b64\u8bf7\u6c42\u3002     \u6ce8\u610f   \u518d\u6b21\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u5f88\u6709\u7528\uff1a\u6d4f\u89c8\u6392\u5e8f\u8282\u70b9\u7684\u65e5\u5fd7\u67e5\u770b\u7b7e\u540d\u548c\u9a8c\u8bc1\u903b\u8f91\u548c\u7b56\u7565\u68c0\u67e5\u3002      \u4f7f\u7528 peer channel fetch \u547d\u4ee4\u83b7\u53d6\u8fd9\u4e2a\u533a\u5757\uff1a  peer channel fetch 0 mychannel.block -o orderer.example.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA  \u6ce8\u610f\uff0c\u6211\u4eec\u53d1\u9001\u4e86\u4e00\u4e2a 0 \u6765\u6307\u5b9a\u6211\u4eec\u8981\u83b7\u53d6\u7684\u901a\u9053\u8d26\u672c\u4e0a\u7684\u7b2c\u4e00\u4e2a\u533a\u5757\uff08\u5373\u521d\u59cb\u533a\u5757\uff09\u3002\u5982\u679c\u6211\u4eec\u7b80\u5355\u5730\u53d1\u9001 peer channel fetch config \u547d\u4ee4\uff0c\u5219\u6211\u4eec\u4f1a\u63a5\u6536\u5230\u533a\u57575\uff0c\u5373\u5b9a\u4e49Org3\u7684\u66f4\u65b0\u914d\u7f6e\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u4e00\u4e2a\u4e0b\u6e38\u533a\u5757\u5f00\u59cb\u8d26\u672c\uff0c\u53cd\u800c\u9700\u8981\u52a0\u5165\u533a\u57570\u3002    \u53d1\u9001 peer channel join \u547d\u4ee4\uff0c\u5e76\u4f20\u5165\u521d\u59cb\u533a\u5757 mychannel.block \uff1a  peer channel join -b mychannel.block  \u5982\u679c\u4f60\u60f3\u4e3aOrg3\u52a0\u5165\u7b2c\u4e8c\u4e2apeer\uff0c\u5c31\u5bfc\u51faTLS\u548cADDRESS\u53d8\u91cf\u5e76\u91cd\u65b0\u53d1\u51fa peer channel join \u547d\u4ee4\uff1a  export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/tls/ca.crt   export CORE_PEER_ADDRESS=peer1.org3.example.com:7051\npeer channel join -b mychannel.block", 
            "title": "\u5c06Org3\u52a0\u5165\u901a\u9053"
        }, 
        {
            "location": "/channel_update_zh/#_4", 
            "text": "\u62fc\u56fe\u7684\u6700\u540e\u4e00\u5757\u662f\u589e\u52a0\u94fe\u7801\u7248\u672c\u548c\u66f4\u65b0\u80cc\u4e66\u7b56\u7565\u4ee5\u4fbf\u5305\u542bOrg3\u3002\u7559\u5728Org3 CLI\u5bb9\u5668\u4e2d\u5e76\u5b89\u88c5\u94fe\u7801\u3002\u7531\u4e8e\u6211\u4eec\u77e5\u9053\u5347\u7ea7\u5373\u5c06\u5230\u6765\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u5b89\u88c5\u94fe\u7801\u7248\u672c1\u7684\u5f92\u52b3\u884c\u4e3a\u3002\u6211\u4eec\u53ea\u5173\u5fc3Org3\u5c06\u6210\u4e3a\u80cc\u4e66\u7b56\u7565\u7684\u4e00\u90e8\u5206\u7684\u65b0\u7248\u672c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u76f4\u63a5\u8df3\u8f6c\u5230\u7248\u672c2\uff1a  peer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/  \u5982\u679c\u4f60\u60f3\u5728Org3\u7684\u7b2c\u4e8c\u4e2apeer\u4e0a\u5b89\u88c5\u94fe\u7801\uff0c\u4fee\u6539\u76f8\u5e94\u73af\u5883\u53d8\u91cf\u548c\u91cd\u65b0\u53d1\u9001\u547d\u4ee4\u3002\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u4e2a\u5b89\u88c5\u4e0d\u662f\u5f3a\u5236\u7684\uff0c\u56e0\u4e3a\u60a8\u53ea\u9700\u8981\u5728\u80cc\u4e66peer\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e0e\u8d26\u672c\u63a5\u53e3\u7684peer\uff08\u5373\u4ec5\u67e5\u8be2\uff09\u4e0a\u5b89\u88c5\u94fe\u63a5\u4ee3\u7801\u3002\u8fd9\u79cdpeer\u4e0a\u5c06\u4ecd\u7136\u8fd0\u884c\u786e\u8ba4\u903b\u8f91\u548c\u4f5c\u4e3a\u63d0\u4ea4\u8005\uff0c\u4f46\u6ca1\u6709\u8fd0\u884c\u94fe\u7801\u7684\u5bb9\u5668\u3002    \u73b0\u5728\u8df3\u56de\u5230\u539f\u59cbCLI\u5bb9\u5668\uff0c\u5e76\u5728Org1\u548cOrg2 peer\u4e0a\u5b89\u88c5\u65b0\u7248\u672c\u94fe\u7801\u3002\u6211\u4eec\u662f\u7528Org2\u7ba1\u7406\u5458\u8eab\u4efd\u9012\u4ea4\u7684\u901a\u9053\u66f4\u65b0\u547c\u53eb\uff0c\u6240\u4ee5\u5bb9\u5668\u4ecd\u4ee5 peer0.org2 \u7684\u8eab\u4efd\u8fd0\u884c\uff1a  peer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/  \u5207\u6362\u5230 peer0.org1 \u8eab\u4efd\uff1a  export CORE_PEER_LOCALMSPID= Org1MSP \nexport CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\nexport CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nexport CORE_PEER_ADDRESS=peer0.org1.example.com:7051  \u5e76\u91cd\u65b0\u5b89\u88c5\uff1a  peer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/  \u73b0\u5728\uff0c\u6211\u4eec\u51c6\u5907\u597d\u5347\u7ea7\u94fe\u7801\u3002\u8fd9\u91cc\u6ca1\u6709\u4fee\u6539\u5e95\u5c42\u6e90\u7801\uff0c\u6211\u4eec\u53ea\u662f\u7b80\u5355\u5730\u628aOrg3\u52a0\u5165\u5230\u901a\u9053 mychannel \u7684\u94fe\u7801 mycc \u7684\u80cc\u4e66\u7b56\u7565\u3002     \u6ce8\u610f   \u4efb\u4f55\u6ee1\u8db3\u94fe\u7801\u5b9e\u4f8b\u5316\u7b56\u7565\u7684\u8eab\u4efd\u90fd\u53ef\u4ee5\u53d1\u51fa\u5347\u7ea7\u547c\u53eb\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8eab\u4efd\u662f\u901a\u9053\u7ba1\u7406\u5458\u3002      \u53d1\u9001\u547c\u53eb\uff1a  peer chaincode upgrade -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 2.0 -c '{ Args :[ init , a , 90 , b , 210 ]}' -P  OR ('Org1MSP.member','Org2MSP.member','Org3MSP.member')   \u4f60\u53ef\u4ee5\u770b\u5230\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 v \u6807\u5fd7\u6307\u5b9a\u4e86\u65b0\u7248\u672c\u3002\u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u80cc\u4e66\u7b56\u7565\u88ab\u66f4\u65b0\u5230 -P \"OR ('Org1MSP.member','Org2MSP.member','Org3MSP.member')\" \uff0c\u51c6\u786e\u5730\u53cd\u6620\u4e86\u7b56\u7565\u589e\u52a0\u4e86Org3\u3002\uff08\u4e0a\u8ff0\u80cc\u4e66\u7b56\u7565\u7684\u542b\u4e49\u662f\u4e09\u4e2a\u7ec4\u7ec7\u7684\u4efb\u4f55\u4e00\u4e2a\u7b7e\u540d\u90fd\u53ef\u4ee5\u3002\uff09\u4ee4\u4eba\u611f\u5174\u8da3\u7684\u6700\u540e\u4e00\u9879\u662f\u6211\u4eec\u7528 c \u6807\u5fd7\u6307\u5b9a\u7684\u6784\u9020\u51fd\u6570\u8bf7\u6c42\u3002\u4e0e\u5b9e\u4f8b\u5316\u8c03\u7528\u4e00\u6837\uff0c\u94fe\u5f0f\u4ee3\u7801\u5347\u7ea7\u9700\u8981\u4f7f\u7528 init \u65b9\u6cd5\u3002\u5982\u679c\u4f60\u7684\u94fe\u7801\u9700\u8981\u4f20\u53c2\u6570\u8fdb init \u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u63d0\u4f9b\u9002\u5f53\u7684\u952e\u503c\u5bf9\u6765\u91cd\u65b0\u521d\u59cb\u5316\u72b6\u6001\u3002\u8fd9\u4e0d\u662f\u63a8\u8350\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5347\u7ea7\u63d0\u4ea4\u8005\u53ef\u4ee5\u4efb\u610f\u6539\u5199\u4e16\u754c\u72b6\u6001\u3002\u76f8\u53cd\uff0c\u8bf7\u8003\u8651\u7f16\u8f91\u6e90\u4ee3\u7801\u4ee5\u5220\u9664\u53c2\u6570\u4f9d\u8d56\u9879\uff0c\u6216\u8005\u4ece\u5b9e\u4f8b\u5316\u65f6\u4e0d\u9700\u8981\u53c2\u6570\u7684\u94fe\u7801\u5f00\u59cb\u3002    \u5347\u7ea7\u547c\u53eb\u5c06\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u533a\u5757\uff08\u533a\u57576\uff09\u5230\u901a\u9053\u8d26\u672c\uff0c\u5e76\u5141\u8bb8Org3 peer\u5728\u80cc\u4e66\u9636\u6bb5\u6267\u884c\u4ea4\u6613\u3002\u8df3\u56de\u5230Org3 CLI\u5bb9\u5668\uff0c\u5e76\u53d1\u51fa\u4e00\u4e2a\u5bf9 a \u503c\u7684\u67e5\u8be2\u3002\u8fd9\u5c06\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u56e0\u4e3a\u94fe\u7801\u955c\u50cf\u9700\u8981\u4e3a\u76ee\u6807peer\u6784\u5efa\uff0c\u5e76\u4e14\u5bb9\u5668\u9700\u8981\u542f\u52a8\uff1a  peer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , a ]}'  \u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u54cd\u5e94: Query Result: 90 \u3002    \u73b0\u5728\u53d1\u9001\u4e00\u4e2a\u8c03\u7528\uff0c\u4ece a \u79fb\u52a8 10 \u4e2a\u6570\u91cf\u5230 b \uff1a  peer chaincode invoke -o orderer.example.com:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{ Args :[ invoke , a , b , 10 ]}'  \u6700\u540e\u67e5\u8be2\u4e00\u4e0b a \u7684\u503c\uff1a  peer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , a ]}'  \u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u54cd\u5e94\uff1a Query Result: 80 \uff0c\u8fd9\u51c6\u786e\u53cd\u6620\u4e86\u8fd9\u4e2a\u94fe\u7801\u7684\u4e16\u754c\u72b6\u6001\u7684\u6539\u53d8\u3002", 
            "title": "\u5347\u7ea7\u548c\u8c03\u7528"
        }, 
        {
            "location": "/channel_update_zh/#_5", 
            "text": "\u91cd\u65b0\u914d\u7f6e\u8fc7\u7a0b\u7684\u786e\u6d89\u53ca\u5f88\u591a\uff0c\u4f46\u662f\u5404\u4e2a\u6b65\u9aa4\u90fd\u6709\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6cd5\u3002\u6700\u7ec8\u76ee\u6807\u662f\u5f62\u6210\u4ee5protobuf\u4e8c\u8fdb\u5236\u683c\u5f0f\u8868\u793a\u7684\u589e\u91cf\u4ea4\u6613\u5bf9\u8c61\uff0c\u7136\u540e\u6536\u96c6\u5fc5\u8981\u6570\u91cf\u7684\u7ba1\u7406\u5458\u7b7e\u540d\uff0c\u4f7f\u5f97\u91cd\u65b0\u914d\u7f6e\u4ea4\u6613\u5904\u7406\u5b8c\u6210\u901a\u9053\u7684\u4fee\u6539\u7b56\u7565\u3002 configtxlator \u548c jq \u5de5\u5177\uff0c\u4e0e\u65e5\u76ca\u589e\u957f peer channel \u547d\u4ee4\u4e00\u8d77\uff0c\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\u6240\u9700\u7684\u529f\u80fd\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/chaincode_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nDinghao Liu\n\n\nBei Wang\n\n\n\n\n\n\n\n\nChaincode \u6307\u5357\n\n\n\u4ec0\u4e48\u662fChaincode\uff1f\n\n\nChaincode\u662f\u4e00\u6bb5\u7531Go\u8bed\u8a00\u7f16\u5199\uff08\u652f\u6301\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982Java\uff09\uff0c\u5e76\u80fd\u5b9e\u73b0\u9884\u5b9a\u4e49\u63a5\u53e3\u7684\u7a0b\u5e8f\u3002Chaincode\u8fd0\u884c\u5728\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684Docker\u5bb9\u5668\u5f53\u4e2d\uff0c\u4e0e\u80cc\u4e66\u8282\u70b9\u7684\u8fd0\u884c\u4e92\u76f8\u9694\u79bb\u3002Chaincode\u53ef\u901a\u8fc7\u5e94\u7528\u63d0\u4ea4\u7684\u4ea4\u6613\u5bf9\u8d26\u672c\u72b6\u6001\u521d\u59cb\u5316\u5e76\u8fdb\u884c\u7ba1\u7406\u3002\n\n\n\u4e00\u6bb5chaincode\u901a\u5e38\u5904\u7406\u7531\u7f51\u7edc\u4e2d\u7684\u6210\u5458\u4e00\u81f4\u8ba4\u53ef\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6545\u6211\u4eec\u5f88\u53ef\u80fd\u7528\u201c\u667a\u80fd\u5408\u7ea6\u201d\u6765\u4ee3\u6307chaincode\u3002\u4e00\u6bb5chiancode\u521b\u5efa\u7684\uff08\u8d26\u672c\uff09\u72b6\u6001\u662f\u4e0e\u5176\u4ed6chaincode\u4e92\u76f8\u9694\u79bb\u7684\uff0c\u6545\u800c\u4e0d\u80fd\u88ab\u5176\u4ed6chaincode\u76f4\u63a5\u8bbf\u95ee\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u662f\u5728\u76f8\u540c\u7684\u7f51\u7edc\u4e2d\uff0c\u4e00\u6bb5chiancode\u5728\u83b7\u53d6\u76f8\u5e94\u8bb8\u53ef\u540e\u5219\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6chiancode\u6765\u8bbf\u95ee\u5b83\u7684\u8d26\u672c\u3002\n\n\n\u4e24\u7c7b\u89d2\u8272\n\n\n\u5173\u4e8echaincode\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u4e2a\u4e0d\u540c\u7684\u89c6\u89d2\u6765\u5ba1\u89c6\u5b83\u4eec\uff1a\u7b2c\u4e00\u4e2a\u662f\u533a\u5757\u94fe\u5e94\u7528/\u89e3\u51b3\u65b9\u6848\u7684\u5f00\u53d1\u8005\u7684\u89d2\u5ea6\uff0c\u8be6\u89c1\u300aChaincode \u5f00\u53d1\u624b\u518c\u300b\u90e8\u5206\uff1b\u53e6\u4e00\u4e2a\u662f\u533a\u5757\u94fe\u7f51\u7edc\u7684\u64cd\u4f5c\u8005\uff0c\u4ed6\u4eec\u4e5f\u8bb8\u5e76\u4e0d\u60f3\u6d89\u8db3chaincode\u5e94\u7528\u7684\u5f00\u53d1\uff0c\u4e0d\u8fc7\u5374\u9700\u8981\u80a9\u8d1f\u7ba1\u7406\u533a\u5757\u94fe\u7f51\u7edc\u7684\u8d23\u4efb\uff0c\u5e76\u8fd0\u7528Hyperledger Fabric API\u6765\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u4e0e\u5347\u7ea7chaincode\u3002\u8be5\u90e8\u5206\u8be6\u89c1\u300aChaincode \u64cd\u4f5c\u624b\u518c\u300b\u3002", 
            "title": "Chaincode \u6307\u5357"
        }, 
        {
            "location": "/chaincode_zh/#chaincode", 
            "text": "", 
            "title": "Chaincode \u6307\u5357"
        }, 
        {
            "location": "/chaincode_zh/#chaincode_1", 
            "text": "Chaincode\u662f\u4e00\u6bb5\u7531Go\u8bed\u8a00\u7f16\u5199\uff08\u652f\u6301\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982Java\uff09\uff0c\u5e76\u80fd\u5b9e\u73b0\u9884\u5b9a\u4e49\u63a5\u53e3\u7684\u7a0b\u5e8f\u3002Chaincode\u8fd0\u884c\u5728\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684Docker\u5bb9\u5668\u5f53\u4e2d\uff0c\u4e0e\u80cc\u4e66\u8282\u70b9\u7684\u8fd0\u884c\u4e92\u76f8\u9694\u79bb\u3002Chaincode\u53ef\u901a\u8fc7\u5e94\u7528\u63d0\u4ea4\u7684\u4ea4\u6613\u5bf9\u8d26\u672c\u72b6\u6001\u521d\u59cb\u5316\u5e76\u8fdb\u884c\u7ba1\u7406\u3002  \u4e00\u6bb5chaincode\u901a\u5e38\u5904\u7406\u7531\u7f51\u7edc\u4e2d\u7684\u6210\u5458\u4e00\u81f4\u8ba4\u53ef\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6545\u6211\u4eec\u5f88\u53ef\u80fd\u7528\u201c\u667a\u80fd\u5408\u7ea6\u201d\u6765\u4ee3\u6307chaincode\u3002\u4e00\u6bb5chiancode\u521b\u5efa\u7684\uff08\u8d26\u672c\uff09\u72b6\u6001\u662f\u4e0e\u5176\u4ed6chaincode\u4e92\u76f8\u9694\u79bb\u7684\uff0c\u6545\u800c\u4e0d\u80fd\u88ab\u5176\u4ed6chaincode\u76f4\u63a5\u8bbf\u95ee\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u662f\u5728\u76f8\u540c\u7684\u7f51\u7edc\u4e2d\uff0c\u4e00\u6bb5chiancode\u5728\u83b7\u53d6\u76f8\u5e94\u8bb8\u53ef\u540e\u5219\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6chiancode\u6765\u8bbf\u95ee\u5b83\u7684\u8d26\u672c\u3002", 
            "title": "\u4ec0\u4e48\u662fChaincode\uff1f"
        }, 
        {
            "location": "/chaincode_zh/#_1", 
            "text": "\u5173\u4e8echaincode\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u4e2a\u4e0d\u540c\u7684\u89c6\u89d2\u6765\u5ba1\u89c6\u5b83\u4eec\uff1a\u7b2c\u4e00\u4e2a\u662f\u533a\u5757\u94fe\u5e94\u7528/\u89e3\u51b3\u65b9\u6848\u7684\u5f00\u53d1\u8005\u7684\u89d2\u5ea6\uff0c\u8be6\u89c1\u300aChaincode \u5f00\u53d1\u624b\u518c\u300b\u90e8\u5206\uff1b\u53e6\u4e00\u4e2a\u662f\u533a\u5757\u94fe\u7f51\u7edc\u7684\u64cd\u4f5c\u8005\uff0c\u4ed6\u4eec\u4e5f\u8bb8\u5e76\u4e0d\u60f3\u6d89\u8db3chaincode\u5e94\u7528\u7684\u5f00\u53d1\uff0c\u4e0d\u8fc7\u5374\u9700\u8981\u80a9\u8d1f\u7ba1\u7406\u533a\u5757\u94fe\u7f51\u7edc\u7684\u8d23\u4efb\uff0c\u5e76\u8fd0\u7528Hyperledger Fabric API\u6765\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u4e0e\u5347\u7ea7chaincode\u3002\u8be5\u90e8\u5206\u8be6\u89c1\u300aChaincode \u64cd\u4f5c\u624b\u518c\u300b\u3002", 
            "title": "\u4e24\u7c7b\u89d2\u8272"
        }, 
        {
            "location": "/chaincode_developers_zh/", 
            "text": "\u539f\u6587\n  \n\n\n\u94fe\u7801\u6559\u7a0b:\u94fe\u7801\u5f00\u53d1\n\n\n\u539f\u6587\n  \n\n\u6bcf\u4e2a\u94fe\u7801\u7a0b\u5e8f\u90fd\u5fc5\u987b\u5b9e\u73b0\nChaincode\n\u63a5\u53e3\n\u3002\u4e0b\u9762\u662fGo\u8bed\u8a00\u7684\nChaincode\n\u63a5\u53e3\uff1a\n\n\ntype Chaincode interface {\n    // Init is called during Instantiate transaction after the chaincode container\n    // has been established for the first time, allowing the chaincode to\n    // initialize its internal data\n    Init(stub ChaincodeStubInterface) pb.Response\n\n    // Invoke is called to update or query the ledger in a proposal transaction.\n    // Updated state variables are not committed to the ledger until the\n    // transaction is committed.\n    Invoke(stub ChaincodeStubInterface) pb.Response\n}\n\n\n\n\nFabric\u901a\u8fc7\u8c03\u7528\u8fd9\u4e9b\u7ea6\u5b9a\u7684\u51fd\u6570\u6765\u8fd0\u884c\u4e8b\u52a1\u3002\u5728\u54cd\u5e94\u4e2d\u901a\u8fc7\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u63a5\u6536\u4e8b\u52a1\u3002\u5f53\u94fe\u7801\u6536\u5230\ninstantiate\n\u6216\nupgrade\n\u4e8b\u52a1\u65f6\uff0c\nInit\n\u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\uff0c\u4f7f\u94fe\u7801\u53ef\u4ee5\u6267\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\uff0c\u5305\u62ec\u5e94\u7528\u72b6\u6001\u521d\u59cb\u5316\u3002\u5728\u54cd\u5e94\u4e2d\u6536\u5230\ninvoke\n\u4e8b\u52a1\u65f6\nInvoke\n\u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\uff0c\u4f7f\u94fe\u7801\u53ef\u4ee5\u5904\u7406\u4e8b\u52a1\u63d0\u8bae(proposal)\u3002\n\n\u94fe\u7801\u7684\n\u201cshim\u201d\nAPI\u4e2d\u7684\u53e6\u4e00\u4e2a\u63a5\u53e3\u662f\nChaincodeStub\n\u63a5\u53e3\n)\u3002\u5b83\u7528\u4e8e\u8bbf\u95ee\u548c\u4fee\u6539\u8d26\u672c\uff0c\u4ee5\u53ca\u94fe\u7801\u95f4\u7684\u8c03\u7528\u3002\n\n\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u793a\u8303\u4f7f\u7528\u8fd9\u4e9bAPI\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u94fe\u7801\u5e94\u7528\uff0c\u6765\u7ba1\u7406\u7b80\u5355\u201c\u8d44\u4ea7\u201d\u3002   \n\n\n\u7b80\u5355\u8d44\u4ea7\u94fe\u7801\n\n\n\u6211\u4eec\u7684\u5e94\u7528\u662f\u4e00\u4e2a\u57fa\u672c\u793a\u8303\u94fe\u7801\uff0c\u7528\u6765\u5728\u8d26\u672c\u4e2d\u521b\u5efa\u8d44\u4ea7(\u952e\u503c\u5bf9)\u3002\n\n\u5047\u5b9a\nGOPATH=/opt/gopath\n\uff0c\u4e0b\u9762\u521b\u5efa\u793a\u8303\u4ee3\u7801\u7684\u5de5\u4f5c\u76ee\u5f55\uff1a\n\n\n$ mkdir -p $GOPATH/src/sacc \n cd $GOPATH/src/sacc\n$ touch sacc.go\n\n\n\n\ntouch\u547d\u4ee4\u521b\u5efa\u4e86\u4e00\u4e2a\u53ebsacc.go\u7684\u7a7a\u6587\u4ef6\u3002\u4e0b\u9762\u63cf\u5199\u5982\u4f55\u5411sacc.go\u4e2d\u6dfb\u52a0\u4ee3\u7801\u3002  \n\n\u9996\u5148\u7528go\u7684import\u8bed\u53e5\u6dfb\u52a0\u94fe\u7801\u7684\u5fc5\u8981\u4f9d\u8d56\uff0cshim\u5305\u548c\npeer protobuf\n\u5305\u3002\u7136\u540e\uff0c\u589e\u52a0\u4e00\u4e2a\nSimpleAsset\n\u7ed3\u6784\u4f5c\u4e3a\u94fe\u7801shim\u51fd\u6570\u7684\u63a5\u6536\u8005\u3002\n\n\npackage main\n\nimport (\n    \nfmt\n\n\n    \ngithub.com/hyperledger/fabric/core/chaincode/shim\n\n    \ngithub.com/hyperledger/fabric/protos/peer\n\n)\n\n// SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct {\n}\n\n\n\n\n\u5b9e\u73b0\nInit\n\u51fd\u6570\uff1a\n\n\n// Init is called during chaincode instantiation to initialize any data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n\n}\n\n\n\n\n\u521d\u59cb\u5316\n\n\n\u6ce8\u610f\uff0c\u94fe\u7801\u7684\u7a0b\u5e8f\u7248\u672c\u66f4\u65b0\u4e5f\u4f1a\u8c03\u7528\nInit\n\u51fd\u6570\u3002\uff08\u5728Fabric\u4e2d\u94fe\u7801\u7a0b\u5e8f\u66f4\u65b0\u4e5f\u662f\u901a\u8fc7\u4e8b\u52a1\uff0c\u540c\u4e0d\u540c\u4e8b\u52a1\u4e00\u6837\uff0c\u6240\u4ee5\u4f1a\u8c03\u7528\nInit\n\u51fd\u6570\u3002\uff09  \n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u8c03\u7528\nChaincodeStubInterface.GetStringArgs\n\u51fd\u6570\u53d6\u5f97\u8c03\u7528\nInit\n\u7684\u53c2\u6570\uff0c\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002\u5728\u6211\u4eec\u6848\u4f8b\u4e2d\uff0c\u4ec5\u4ec5\u9a8c\u8bc1\u4e00\u4e0b\u53c2\u6570\u662f\u5426\u4e3a\u952e\u503c\u5bf9\u3002  \n\n\n// Init is called during chaincode instantiation to initialize any\n// data. Note that chaincode upgrade also calls this function to reset\n// or to migrate data, so be careful to avoid a scenario where you\n// inadvertently clobber your ledger's data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n  // Get the args from the transaction proposal\n  args := stub.GetStringArgs()\n  if len(args) != 2 {\n    return shim.Error(\nIncorrect arguments. Expecting a key and a value\n)\n  }\n}\n\n\n\n\n\u8c03\u7528\u751f\u6548\u8bc1\u540e\uff0c\u6211\u4eec\u5c06\u521d\u59cb\u72b6\u6001\u4fdd\u5b58\u5230\u8d26\u672c\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u7528\u4f20\u5165\u7684\u952e\u503c\u5bf9\u5f53\u53c2\u6570\uff0c\u8c03\u7528\nChaincodeStubInterface.PutState\n\u3002\u5047\u5982\u4e00\u5207\u6b63\u5e38\uff0c\u8fd4\u56de\u4e00\u4e2apeer.Response\u5bf9\u8c61\u6765\u8868\u660e\u521d\u59cb\u5316\u6210\u529f\u3002  \n\n\n// Init is called during chaincode instantiation to initialize any\n// data. Note that chaincode upgrade also calls this function to reset\n// or to migrate data, so be careful to avoid a scenario where you\n// inadvertently clobber your ledger's data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n  // Get the args from the transaction proposal\n  args := stub.GetStringArgs()\n  if len(args) != 2 {\n    return shim.Error(\nIncorrect arguments. Expecting a key and a value\n)\n  }\n\n  // Set up any variables or assets here by calling stub.PutState()\n\n  // We store the key and the value on the ledger\n  err := stub.PutState(args[0], []byte(args[1]))\n  if err != nil {\n    return shim.Error(fmt.Sprintf(\nFailed to create asset: %s\n, args[0]))\n  }\n  return shim.Success(nil)\n}\n\n\n\n\n\u8c03\u7528\u94fe\u7801\n\n\n\u9996\u5148\uff0c\u6dfb\u52a0Invoke\u51fd\u6570\uff1a\n\n\n// Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The 'set'\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n\n}\n\n\n\n\n\u5c31\u50cf\u4e0a\u9762\u7684\nInit\n\u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u4ece\nChaincodeStubInterface\n\u4e2d\u53d6\u51fa\u53c2\u6570\u3002\nInvoke\n\u51fd\u6570\u7684\u53c2\u6570\u5c06\u4f1a\u662f\u94fe\u7801\u5e94\u7528\u7684\u51fd\u6570\u540d\u3002\u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\uff0c\u5e94\u7528\u53ea\u6709\u4e24\u4e2a\u51fd\u6570\uff1a\nset\n\u548c\nget\n\uff0c\u7528\u6765\u8bbe\u7f6e\u8d44\u4ea7\u503c\u6216\u53d6\u8d44\u4ea7\u7684\u5f53\u524d\u72b6\u6001\u3002\u6211\u4eec\u9996\u5148\u8c03\u7528\nChaincodeStubInterface.GetFunctionAndParameters\n\u6765\u83b7\u53d6\u94fe\u7801\u5e94\u7528\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570\u3002   \n\n\n// Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The Set\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n    // Extract the function and args from the transaction proposal\n    fn, args := stub.GetFunctionAndParameters()\n\n}\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u9a8c\u8bc1\u51fd\u6570\u540d\u662f\nset\n\u6216\nget\n\uff0c\u8c03\u7528\u8fd9\u4e9b\u94fe\u7801\u5e94\u7528\u51fd\u6570\uff0c\u901a\u8fc7\nshim.Success\n\u6216\nshim.Error\n\u8fd4\u56de\u76f8\u5e94\u7684\u54cd\u5e94\uff0c\u5b83\u4eec\u4f1a\u5c06\u54cd\u5e94\u4e32\u884c\u5316\u4e3agRPC protobuf\u6d88\u606f\u3002  \n\n\n// Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The Set\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n    // Extract the function and args from the transaction proposal\n    fn, args := stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn == \nset\n {\n            result, err = set(stub, args)\n    } else {\n            result, err = get(stub, args)\n    }\n    if err != nil {\n            return shim.Error(err.Error())\n    }\n\n    // Return the result as success payload\n    return shim.Success([]byte(result))\n}\n\n\n\n\n\u5b9e\u73b0\u94fe\u7801\u5e94\u7528\n\n\n\u6b63\u5982\u4e0a\u9762\u6307\u51fa\u7684\u90a3\u6837\uff0c\u6211\u4eec\u7684\u94fe\u7801\u5e94\u7528\u9700\u8981\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u4f1a\u88ab\nInvoke\n\u51fd\u6570\u8c03\u7528\u3002\u4e3a\u4e86\u8bbf\u95ee\u8d26\u672c\u72b6\u6001\uff0c\u6211\u4eec\u4f1a\u7528\u5230\u94fe\u7801shim API\u7684\nChaincodeStubInterface.PutState\n\u548c\nChaincodeStubInterface.GetState\n\u51fd\u6570\u3002  \n\n\n// Set stores the asset (both key and value) on the ledger. If the key exists,\n// it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 2 {\n            return \n, fmt.Errorf(\nIncorrect arguments. Expecting a key and a value\n)\n    }\n\n    err := stub.PutState(args[0], []byte(args[1]))\n    if err != nil {\n            return \n, fmt.Errorf(\nFailed to set asset: %s\n, args[0])\n    }\n    return args[1], nil\n}\n\n// Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 1 {\n            return \n, fmt.Errorf(\nIncorrect arguments. Expecting a key\n)\n    }\n\n    value, err := stub.GetState(args[0])\n    if err != nil {\n            return \n, fmt.Errorf(\nFailed to get asset: %s with error: %s\n, args[0], err)\n    }\n    if value == nil {\n            return \n, fmt.Errorf(\nAsset not found: %s\n, args[0])\n    }\n    return string(value), nil\n}\n\n\n\n\n\u653e\u5728\u4e00\u8d77\n\n\n\u6700\u540e\uff0c\u9700\u8981\u6dfb\u52a0\nmain\n\u51fd\u6570\uff0c\u5b83\u4f1a\u8c03\u7528\nshim.Start\n\u51fd\u6570\u3002\u4e0b\u9762\u662f\u94fe\u7801\u7684\u5b8c\u6574\u6e90\u7801\uff1a  \n\n\npackage main\n\nimport (\n    \nfmt\n\n\n    \ngithub.com/hyperledger/fabric/core/chaincode/shim\n\n    \ngithub.com/hyperledger/fabric/protos/peer\n\n)\n\n// SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct {\n}\n\n// Init is called during chaincode instantiation to initialize any\n// data. Note that chaincode upgrade also calls this function to reset\n// or to migrate data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n    // Get the args from the transaction proposal\n    args := stub.GetStringArgs()\n    if len(args) != 2 {\n            return shim.Error(\nIncorrect arguments. Expecting a key and a value\n)\n    }\n\n    // Set up any variables or assets here by calling stub.PutState()\n\n    // We store the key and the value on the ledger\n    err := stub.PutState(args[0], []byte(args[1]))\n    if err != nil {\n            return shim.Error(fmt.Sprintf(\nFailed to create asset: %s\n, args[0]))\n    }\n    return shim.Success(nil)\n}\n\n// Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The Set\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n    // Extract the function and args from the transaction proposal\n    fn, args := stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn == \nset\n {\n            result, err = set(stub, args)\n    } else { // assume 'get' even if fn is nil\n            result, err = get(stub, args)\n    }\n    if err != nil {\n            return shim.Error(err.Error())\n    }\n\n    // Return the result as success payload\n    return shim.Success([]byte(result))\n}\n\n// Set stores the asset (both key and value) on the ledger. If the key exists,\n// it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 2 {\n            return \n, fmt.Errorf(\nIncorrect arguments. Expecting a key and a value\n)\n    }\n\n    err := stub.PutState(args[0], []byte(args[1]))\n    if err != nil {\n            return \n, fmt.Errorf(\nFailed to set asset: %s\n, args[0])\n    }\n    return args[1], nil\n}\n\n// Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 1 {\n            return \n, fmt.Errorf(\nIncorrect arguments. Expecting a key\n)\n    }\n\n    value, err := stub.GetState(args[0])\n    if err != nil {\n            return \n, fmt.Errorf(\nFailed to get asset: %s with error: %s\n, args[0], err)\n    }\n    if value == nil {\n            return \n, fmt.Errorf(\nAsset not found: %s\n, args[0])\n    }\n    return string(value), nil\n}\n\n// main function starts up the chaincode in the container during instantiate\nfunc main() {\n    if err := shim.Start(new(SimpleAsset)); err != nil {\n            fmt.Printf(\nError starting SimpleAsset chaincode: %s\n, err)\n    }\n}\n\n\n\n\n\u6784\u5efa\u94fe\u7801\n\n\n\u7f16\u8bd1\u94fe\u7801\uff1a\n\n\n$ go get -u --tags nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim\n$ go build --tags nopkcs11\n\n\n\n\n\u6267\u884c\u4e0a\u8ff0\ngo get\n\u65f6\u78b0\u5230\u95ee\u9898\uff1a\n\n\n# cd /opt/gopath/src/github.com/hyperledger/fabric; git pull --ff-only\nerror: Your local changes to the following files would be overwritten by merge:\n        docs/source/kafka.rst\nPlease, commit your changes or stash them before you can merge.\n\n\n\n\n\u89e3\u51b3\u529e\u6cd5\u662f\uff1a\n\n\n$ cd /opt/gopath/src/github.com/hyperledger/fabric;\n$ git reset --hard\n\n\n\n\n\u4e0a\u8ff0\u547d\u4ee4\u7684\u542b\u4e49\u662f\u653e\u5f03\u672c\u5730\u7684\u4fee\u6539\uff0c\u4ee5\u7f51\u4e0a\u7248\u672c\u4e3a\u51c6\u3002\n\n\u56de\u5230\u539f\u6765\u7684\u76ee\u5f55\uff0c\u91cd\u65b0\u6267\u884c\ngo get\n\uff0c\u95ee\u9898\u89e3\u51b3\u3002  \n\n\n\u4f7f\u7528\u5f00\u53d1\u6a21\u5f0f\u6d4b\u8bd5\n\n\n\u901a\u5e38\u94fe\u7801\u7531peer\u542f\u52a8\u548c\u7ef4\u62a4\u3002\u4f46\u5728\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\u4e0b\uff0c\u94fe\u7801\u7531\u7528\u6237\u6784\u5efa\u548c\u542f\u52a8\u3002\u5728\u5feb\u901f\u4ee3\u7801/\u6784\u5efa/\u8fd0\u884c/\u8c03\u8bd5\u5468\u671f\u8f6c\u6362\u7684\u94fe\u7801\u5f00\u53d1\u9636\u6bb5\uff0c\u6b64\u6a21\u5f0f\u975e\u5e38\u6709\u7528\u3002\n\n\u6211\u4eec\u5229\u7528\u9884\u751f\u6210\u7684\u6392\u5e8f\u5668\u548c\u901a\u9053\u5de5\u4ef6\u542f\u52a8\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\uff0c\u83b7\u5f97\u4e00\u4e2a\u793a\u8303\u5f00\u53d1\u7f51\u7edc\u3002\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u7f16\u8bd1\u94fe\u7801\u8fc7\u7a0b\u548c\u9a71\u52a8\u8c03\u7528\u3002  \n\n\n\u8c03\u8bd5\u4e0e\u6d4b\u8bd5\n\n\n\u9700\u8981\u542f\u52a83\u4e2a\u7ec8\u7aef\u7a97\u53e3\u3002  \n\n\n\u7a97\u53e31\uff1a\u542f\u52a8\u7f51\u7edc\n\n\n$ cd /opt/fabric-samples/chaincode-docker-devmode\n$ docker-compose -f docker-compose-simple.yaml up\n\n\n\n\n\u4e0a\u9762\u7684\u547d\u4ee4\u7528\nSingleSampleMSPSolo\n\u6392\u5e8f\u5668profile\u542f\u52a8\u7f51\u7edc\uff0c\u5e76\u4ee5\u5f00\u53d1\u6a21\u5f0f\u542f\u52a8peer\u3002\u8fd8\u542f\u52a8\u4e86\u4e24\u4e2a\u9644\u52a0\u5bb9\u5668\uff0c\u4e00\u4e2a\u662f\u94fe\u7801\u73af\u5883\uff0c\u53e6\u4e00\u4e2a\u662f\u4e0e\u94fe\u7801\u4ea4\u4e92\u7684CLI\u3002\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053\u7684\u547d\u4ee4\u88ab\u5d4c\u5165\u5230CLI\u5bb9\u5668\u4e2d\uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u94fe\u7801\u3002  \n\n\n\u7a97\u53e32\uff1a\u6784\u5efa\u548c\u542f\u52a8\u94fe\u7801\n\n\n\u7528\u4e0b\u5217\u547d\u4ee4\u8fdb\u5165\nchaincode\n\u5bb9\u5668\u5185\u7684bash\u73af\u5883:\n\n\n$ docker exec -it chaincode bash\nroot@d2629980e76b:/opt/gopath/src/chaincode#\n\n\n\n\n\u867d\u7136\u770b\u4e0a\u53bb\u4e0e\u5bbf\u4e3b\u673a\u7c7b\u4f3c\uff0c\u5176\u5b9e\u5df2\u7ecf\u5728\nchaincode\n\u5bb9\u5668\u5185\u3002\u4e0b\u9762\u6267\u884c\u7684\u90fd\u662f\u8be5\u5bb9\u5668\u5185\u7684\u547d\u4ee4\u3002\u4e0b\u9762\u7f16\u8bd1\u4f60\u7684\u94fe\u7801\uff1a  \n\n\n$ cd sacc\n$ go build\n\n\n\n\n\u8fd0\u884c\u94fe\u7801\uff1a\n\n\n$ CORE_PEER_ADDRESS=peer:7051 CORE_CHAINCODE_ID_NAME=mycc:0 ./sacc\n\n\n\n\n\u4e0a\u8ff0\u94fe\u7801\u968fpeer\u542f\u52a8\uff0c\u94fe\u7801\u65e5\u5fd7\u8868\u793a\u5b83\u6210\u529f\u6ce8\u518c\u5230peer\u3002\u6ce8\u610f\uff0c\u73b0\u9636\u6bb5\u7684\u94fe\u7801\u8fd8\u6ca1\u6709\u4e0e\u901a\u9053\u5173\u8054\u3002\u8fd9\u4e2a\u4f1a\u5728\u540e\u7eed\u7684\u6b65\u9aa4\u4e2d\u901a\u8fc7\u5b9e\u4f8b\u5316\u547d\u4ee4\u505a\u5230\u3002  \n\n\n\u7a97\u53e33\uff1a\u4f7f\u7528\u94fe\u7801\n\n\n\u867d\u7136\u4f60\u5904\u4e8e\n--peer-chaincodedev\n\u6a21\u5f0f\uff0c\u4f60\u4ecd\u7136\u9700\u8981\u5b89\u88c5\u94fe\u7801\uff0c\u56e0\u6b64\u751f\u547d\u5468\u671f\u7cfb\u7edf\u94fe\u7801\u53ef\u4ee5\u50cf\u901a\u5e38\u4e00\u6837\u6267\u884c\u68c0\u67e5\u3002\u5c06\u6765\u8fd9\u4e2a\u9700\u6c42\u53ef\u80fd\u5728\n--peer-chaincodedev\n\u6a21\u5f0f\u4e0b\u79fb\u9664\u3002\n\n\u6211\u4eec\u5229\u7528CLI\u5bb9\u5668\u6267\u884c\u8fd9\u4e9b\u8c03\u7528\uff1a\n\n\n$ docker exec -it cli bash\n$ peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0\n$ peer chaincode instantiate -n mycc -v 0 -c '{\nArgs\n:[\na\n,\n10\n]}' -C myc\n\n\n\n\n\u73b0\u5728\u53d1\u51fa\u4e00\u4e2a\u8c03\u7528\u5c06\na\n\u7684\u503c\u6539\u6210\n20\n\u3002\n\n\n$ peer chaincode invoke -n mycc -c '{\nArgs\n:[\nset\n, \na\n, \n20\n]}' -C myc\n\n\n\n\n\u6700\u540e\uff0c\u67e5\u8be2\na\n\uff0c\u53ef\u4ee5\u770b\u5230\u503c\u662f\n20\n\u3002\n\n\n$ peer chaincode query -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}' -C myc\n\n\n\n\n\u6d4b\u8bd5\u65b0\u94fe\u7801\n\n\n\u9ed8\u8ba4\u6211\u4eec\u4ec5\u6302\u8f7d\nsacc\n\u3002\u7136\u800c\uff0c\u4f60\u901a\u8fc7\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\nchaincode\n\u5b50\u76ee\u5f55\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u94fe\u7801\uff08\u9700\u8981\u91cd\u542f\u7f51\u7edc\uff09\u3002\u4f60\u53ef\u4ee5\u5728\nchaincode\n\u5bb9\u5668\u4e2d\u8bbf\u95ee\u5b83\u4eec\u3002  \n\n\n\u94fe\u7801\u52a0\u5bc6\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9key\u5173\u8054\u7684\u5168\u90e8\u503c\u6216\u90e8\u5206\u503c\u8fdb\u884c\u52a0\u5bc6\u3002\u4f8b\u5982\uff0c\u5f53\u4e00\u4e2a\u4eba\u7684\u793e\u4f1a\u5b89\u5168\u53f7\u7801\u6216\u5730\u5740\u5728\u5199\u5165\u8d26\u672c\u65f6\uff0c\u53ef\u80fd\u4e0d\u5e0c\u671b\u8fd9\u4e9b\u6570\u636e\u4ee5\u660e\u6587\u5f62\u5f0f\u51fa\u73b0\u3002\u94fe\u7801\u52a0\u5bc6\u5229\u7528\n\u5b9e\u4f53\u6269\u5c55\n\uff0c\u5b83\u5185\u90e8\u5305\u88c5\u4e86BCCSP\uff0c\u652f\u6301\u52a0\u5bc6\u548c\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u52a0\u5bc6\uff0c\u94fe\u7801\u7684\u8c03\u7528\u8005\u901a\u8fc7\u4e34\u65f6\u5b57\u6bb5\u4f20\u5165\u52a0\u5bc6\u5bc6\u94a5\u3002\u7136\u540e\u53ef\u4ee5\u5c06\u76f8\u540c\u7684\u5bc6\u94a5\u7528\u4e8e\u968f\u540e\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u4ece\u800c\u5141\u8bb8\u5bf9\u52a0\u5bc6\u7684\u72b6\u6001\u503c\u8fdb\u884c\u89e3\u5bc6\u3002\n\n\n\u5bf9\u4e8e\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u548c\u793a\u8303\uff0c\u770b\nfabric/examples\n\u76ee\u5f55\u4e0b\u7684\nEncc Example\n\u3002\u7279\u522b\u6ce8\u610futils.go \u52a9\u624b\u7a0b\u5e8f\u3002\u8be5\u5b9e\u7528\u7a0b\u5e8f\u52a0\u8f7d\u94fe\u7801\u4ee3\u7801API\u548c\u5b9e\u4f53\u6269\u5c55\uff0c\u5e76\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u7c7b\uff08\u4f8b\u5982\nencryptAndPutState\n\uff06\ngetStateAndDecrypt\n\uff09\uff0c\u4ee5\u4fbf\u793a\u4f8b\u52a0\u5bc6\u94fe\u7801\u5229\u7528\u3002\u56e0\u6b64\uff0c\u94fe\u7801\u73b0\u5728\u53ef\u4ee5\u548c\u57fa\u672c\u7684shim API\u7ed3\u5408\u8d77\u6765\uff0c\u4f7f\nGet\n\u548c\nPut\n\u53ef\u4ee5\u6dfb\u52a0\u89e3\u5bc6\u548c\u52a0\u5bc6\u529f\u80fd\u3002", 
            "title": "Chaincode \u5f00\u53d1\u624b\u518c"
        }, 
        {
            "location": "/chaincode_developers_zh/#_1", 
            "text": "\u539f\u6587    \n\u6bcf\u4e2a\u94fe\u7801\u7a0b\u5e8f\u90fd\u5fc5\u987b\u5b9e\u73b0 Chaincode \u63a5\u53e3 \u3002\u4e0b\u9762\u662fGo\u8bed\u8a00\u7684 Chaincode \u63a5\u53e3\uff1a  type Chaincode interface {\n    // Init is called during Instantiate transaction after the chaincode container\n    // has been established for the first time, allowing the chaincode to\n    // initialize its internal data\n    Init(stub ChaincodeStubInterface) pb.Response\n\n    // Invoke is called to update or query the ledger in a proposal transaction.\n    // Updated state variables are not committed to the ledger until the\n    // transaction is committed.\n    Invoke(stub ChaincodeStubInterface) pb.Response\n}  Fabric\u901a\u8fc7\u8c03\u7528\u8fd9\u4e9b\u7ea6\u5b9a\u7684\u51fd\u6570\u6765\u8fd0\u884c\u4e8b\u52a1\u3002\u5728\u54cd\u5e94\u4e2d\u901a\u8fc7\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u63a5\u6536\u4e8b\u52a1\u3002\u5f53\u94fe\u7801\u6536\u5230 instantiate \u6216 upgrade \u4e8b\u52a1\u65f6\uff0c Init \u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\uff0c\u4f7f\u94fe\u7801\u53ef\u4ee5\u6267\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\uff0c\u5305\u62ec\u5e94\u7528\u72b6\u6001\u521d\u59cb\u5316\u3002\u5728\u54cd\u5e94\u4e2d\u6536\u5230 invoke \u4e8b\u52a1\u65f6 Invoke \u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\uff0c\u4f7f\u94fe\u7801\u53ef\u4ee5\u5904\u7406\u4e8b\u52a1\u63d0\u8bae(proposal)\u3002 \n\u94fe\u7801\u7684 \u201cshim\u201d API\u4e2d\u7684\u53e6\u4e00\u4e2a\u63a5\u53e3\u662f ChaincodeStub \u63a5\u53e3 )\u3002\u5b83\u7528\u4e8e\u8bbf\u95ee\u548c\u4fee\u6539\u8d26\u672c\uff0c\u4ee5\u53ca\u94fe\u7801\u95f4\u7684\u8c03\u7528\u3002 \n\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u793a\u8303\u4f7f\u7528\u8fd9\u4e9bAPI\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u94fe\u7801\u5e94\u7528\uff0c\u6765\u7ba1\u7406\u7b80\u5355\u201c\u8d44\u4ea7\u201d\u3002", 
            "title": "\u94fe\u7801\u6559\u7a0b:\u94fe\u7801\u5f00\u53d1"
        }, 
        {
            "location": "/chaincode_developers_zh/#_2", 
            "text": "\u6211\u4eec\u7684\u5e94\u7528\u662f\u4e00\u4e2a\u57fa\u672c\u793a\u8303\u94fe\u7801\uff0c\u7528\u6765\u5728\u8d26\u672c\u4e2d\u521b\u5efa\u8d44\u4ea7(\u952e\u503c\u5bf9)\u3002 \n\u5047\u5b9a GOPATH=/opt/gopath \uff0c\u4e0b\u9762\u521b\u5efa\u793a\u8303\u4ee3\u7801\u7684\u5de5\u4f5c\u76ee\u5f55\uff1a  $ mkdir -p $GOPATH/src/sacc   cd $GOPATH/src/sacc\n$ touch sacc.go  touch\u547d\u4ee4\u521b\u5efa\u4e86\u4e00\u4e2a\u53ebsacc.go\u7684\u7a7a\u6587\u4ef6\u3002\u4e0b\u9762\u63cf\u5199\u5982\u4f55\u5411sacc.go\u4e2d\u6dfb\u52a0\u4ee3\u7801\u3002   \n\u9996\u5148\u7528go\u7684import\u8bed\u53e5\u6dfb\u52a0\u94fe\u7801\u7684\u5fc5\u8981\u4f9d\u8d56\uff0cshim\u5305\u548c peer protobuf \u5305\u3002\u7136\u540e\uff0c\u589e\u52a0\u4e00\u4e2a SimpleAsset \u7ed3\u6784\u4f5c\u4e3a\u94fe\u7801shim\u51fd\u6570\u7684\u63a5\u6536\u8005\u3002  package main\n\nimport (\n     fmt \n\n     github.com/hyperledger/fabric/core/chaincode/shim \n     github.com/hyperledger/fabric/protos/peer \n)\n\n// SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct {\n}  \u5b9e\u73b0 Init \u51fd\u6570\uff1a  // Init is called during chaincode instantiation to initialize any data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n\n}", 
            "title": "\u7b80\u5355\u8d44\u4ea7\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_developers_zh/#_3", 
            "text": "\u6ce8\u610f\uff0c\u94fe\u7801\u7684\u7a0b\u5e8f\u7248\u672c\u66f4\u65b0\u4e5f\u4f1a\u8c03\u7528 Init \u51fd\u6570\u3002\uff08\u5728Fabric\u4e2d\u94fe\u7801\u7a0b\u5e8f\u66f4\u65b0\u4e5f\u662f\u901a\u8fc7\u4e8b\u52a1\uff0c\u540c\u4e0d\u540c\u4e8b\u52a1\u4e00\u6837\uff0c\u6240\u4ee5\u4f1a\u8c03\u7528 Init \u51fd\u6570\u3002\uff09    \u4e0b\u9762\uff0c\u6211\u4eec\u8c03\u7528 ChaincodeStubInterface.GetStringArgs \u51fd\u6570\u53d6\u5f97\u8c03\u7528 Init \u7684\u53c2\u6570\uff0c\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002\u5728\u6211\u4eec\u6848\u4f8b\u4e2d\uff0c\u4ec5\u4ec5\u9a8c\u8bc1\u4e00\u4e0b\u53c2\u6570\u662f\u5426\u4e3a\u952e\u503c\u5bf9\u3002    // Init is called during chaincode instantiation to initialize any\n// data. Note that chaincode upgrade also calls this function to reset\n// or to migrate data, so be careful to avoid a scenario where you\n// inadvertently clobber your ledger's data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n  // Get the args from the transaction proposal\n  args := stub.GetStringArgs()\n  if len(args) != 2 {\n    return shim.Error( Incorrect arguments. Expecting a key and a value )\n  }\n}  \u8c03\u7528\u751f\u6548\u8bc1\u540e\uff0c\u6211\u4eec\u5c06\u521d\u59cb\u72b6\u6001\u4fdd\u5b58\u5230\u8d26\u672c\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u7528\u4f20\u5165\u7684\u952e\u503c\u5bf9\u5f53\u53c2\u6570\uff0c\u8c03\u7528 ChaincodeStubInterface.PutState \u3002\u5047\u5982\u4e00\u5207\u6b63\u5e38\uff0c\u8fd4\u56de\u4e00\u4e2apeer.Response\u5bf9\u8c61\u6765\u8868\u660e\u521d\u59cb\u5316\u6210\u529f\u3002    // Init is called during chaincode instantiation to initialize any\n// data. Note that chaincode upgrade also calls this function to reset\n// or to migrate data, so be careful to avoid a scenario where you\n// inadvertently clobber your ledger's data!\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n  // Get the args from the transaction proposal\n  args := stub.GetStringArgs()\n  if len(args) != 2 {\n    return shim.Error( Incorrect arguments. Expecting a key and a value )\n  }\n\n  // Set up any variables or assets here by calling stub.PutState()\n\n  // We store the key and the value on the ledger\n  err := stub.PutState(args[0], []byte(args[1]))\n  if err != nil {\n    return shim.Error(fmt.Sprintf( Failed to create asset: %s , args[0]))\n  }\n  return shim.Success(nil)\n}", 
            "title": "\u521d\u59cb\u5316"
        }, 
        {
            "location": "/chaincode_developers_zh/#_4", 
            "text": "\u9996\u5148\uff0c\u6dfb\u52a0Invoke\u51fd\u6570\uff1a  // Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The 'set'\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n\n}  \u5c31\u50cf\u4e0a\u9762\u7684 Init \u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u4ece ChaincodeStubInterface \u4e2d\u53d6\u51fa\u53c2\u6570\u3002 Invoke \u51fd\u6570\u7684\u53c2\u6570\u5c06\u4f1a\u662f\u94fe\u7801\u5e94\u7528\u7684\u51fd\u6570\u540d\u3002\u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\uff0c\u5e94\u7528\u53ea\u6709\u4e24\u4e2a\u51fd\u6570\uff1a set \u548c get \uff0c\u7528\u6765\u8bbe\u7f6e\u8d44\u4ea7\u503c\u6216\u53d6\u8d44\u4ea7\u7684\u5f53\u524d\u72b6\u6001\u3002\u6211\u4eec\u9996\u5148\u8c03\u7528 ChaincodeStubInterface.GetFunctionAndParameters \u6765\u83b7\u53d6\u94fe\u7801\u5e94\u7528\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570\u3002     // Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The Set\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n    // Extract the function and args from the transaction proposal\n    fn, args := stub.GetFunctionAndParameters()\n\n}  \u7136\u540e\uff0c\u6211\u4eec\u9a8c\u8bc1\u51fd\u6570\u540d\u662f set \u6216 get \uff0c\u8c03\u7528\u8fd9\u4e9b\u94fe\u7801\u5e94\u7528\u51fd\u6570\uff0c\u901a\u8fc7 shim.Success \u6216 shim.Error \u8fd4\u56de\u76f8\u5e94\u7684\u54cd\u5e94\uff0c\u5b83\u4eec\u4f1a\u5c06\u54cd\u5e94\u4e32\u884c\u5316\u4e3agRPC protobuf\u6d88\u606f\u3002    // Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The Set\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n    // Extract the function and args from the transaction proposal\n    fn, args := stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn ==  set  {\n            result, err = set(stub, args)\n    } else {\n            result, err = get(stub, args)\n    }\n    if err != nil {\n            return shim.Error(err.Error())\n    }\n\n    // Return the result as success payload\n    return shim.Success([]byte(result))\n}", 
            "title": "\u8c03\u7528\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_developers_zh/#_5", 
            "text": "\u6b63\u5982\u4e0a\u9762\u6307\u51fa\u7684\u90a3\u6837\uff0c\u6211\u4eec\u7684\u94fe\u7801\u5e94\u7528\u9700\u8981\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u4f1a\u88ab Invoke \u51fd\u6570\u8c03\u7528\u3002\u4e3a\u4e86\u8bbf\u95ee\u8d26\u672c\u72b6\u6001\uff0c\u6211\u4eec\u4f1a\u7528\u5230\u94fe\u7801shim API\u7684 ChaincodeStubInterface.PutState \u548c ChaincodeStubInterface.GetState \u51fd\u6570\u3002    // Set stores the asset (both key and value) on the ledger. If the key exists,\n// it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 2 {\n            return  , fmt.Errorf( Incorrect arguments. Expecting a key and a value )\n    }\n\n    err := stub.PutState(args[0], []byte(args[1]))\n    if err != nil {\n            return  , fmt.Errorf( Failed to set asset: %s , args[0])\n    }\n    return args[1], nil\n}\n\n// Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 1 {\n            return  , fmt.Errorf( Incorrect arguments. Expecting a key )\n    }\n\n    value, err := stub.GetState(args[0])\n    if err != nil {\n            return  , fmt.Errorf( Failed to get asset: %s with error: %s , args[0], err)\n    }\n    if value == nil {\n            return  , fmt.Errorf( Asset not found: %s , args[0])\n    }\n    return string(value), nil\n}", 
            "title": "\u5b9e\u73b0\u94fe\u7801\u5e94\u7528"
        }, 
        {
            "location": "/chaincode_developers_zh/#_6", 
            "text": "\u6700\u540e\uff0c\u9700\u8981\u6dfb\u52a0 main \u51fd\u6570\uff0c\u5b83\u4f1a\u8c03\u7528 shim.Start \u51fd\u6570\u3002\u4e0b\u9762\u662f\u94fe\u7801\u7684\u5b8c\u6574\u6e90\u7801\uff1a    package main\n\nimport (\n     fmt \n\n     github.com/hyperledger/fabric/core/chaincode/shim \n     github.com/hyperledger/fabric/protos/peer \n)\n\n// SimpleAsset implements a simple chaincode to manage an asset\ntype SimpleAsset struct {\n}\n\n// Init is called during chaincode instantiation to initialize any\n// data. Note that chaincode upgrade also calls this function to reset\n// or to migrate data.\nfunc (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {\n    // Get the args from the transaction proposal\n    args := stub.GetStringArgs()\n    if len(args) != 2 {\n            return shim.Error( Incorrect arguments. Expecting a key and a value )\n    }\n\n    // Set up any variables or assets here by calling stub.PutState()\n\n    // We store the key and the value on the ledger\n    err := stub.PutState(args[0], []byte(args[1]))\n    if err != nil {\n            return shim.Error(fmt.Sprintf( Failed to create asset: %s , args[0]))\n    }\n    return shim.Success(nil)\n}\n\n// Invoke is called per transaction on the chaincode. Each transaction is\n// either a 'get' or a 'set' on the asset created by Init function. The Set\n// method may create a new asset by specifying a new key-value pair.\nfunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {\n    // Extract the function and args from the transaction proposal\n    fn, args := stub.GetFunctionAndParameters()\n\n    var result string\n    var err error\n    if fn ==  set  {\n            result, err = set(stub, args)\n    } else { // assume 'get' even if fn is nil\n            result, err = get(stub, args)\n    }\n    if err != nil {\n            return shim.Error(err.Error())\n    }\n\n    // Return the result as success payload\n    return shim.Success([]byte(result))\n}\n\n// Set stores the asset (both key and value) on the ledger. If the key exists,\n// it will override the value with the new one\nfunc set(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 2 {\n            return  , fmt.Errorf( Incorrect arguments. Expecting a key and a value )\n    }\n\n    err := stub.PutState(args[0], []byte(args[1]))\n    if err != nil {\n            return  , fmt.Errorf( Failed to set asset: %s , args[0])\n    }\n    return args[1], nil\n}\n\n// Get returns the value of the specified asset key\nfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) {\n    if len(args) != 1 {\n            return  , fmt.Errorf( Incorrect arguments. Expecting a key )\n    }\n\n    value, err := stub.GetState(args[0])\n    if err != nil {\n            return  , fmt.Errorf( Failed to get asset: %s with error: %s , args[0], err)\n    }\n    if value == nil {\n            return  , fmt.Errorf( Asset not found: %s , args[0])\n    }\n    return string(value), nil\n}\n\n// main function starts up the chaincode in the container during instantiate\nfunc main() {\n    if err := shim.Start(new(SimpleAsset)); err != nil {\n            fmt.Printf( Error starting SimpleAsset chaincode: %s , err)\n    }\n}", 
            "title": "\u653e\u5728\u4e00\u8d77"
        }, 
        {
            "location": "/chaincode_developers_zh/#_7", 
            "text": "\u7f16\u8bd1\u94fe\u7801\uff1a  $ go get -u --tags nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim\n$ go build --tags nopkcs11  \u6267\u884c\u4e0a\u8ff0 go get \u65f6\u78b0\u5230\u95ee\u9898\uff1a  # cd /opt/gopath/src/github.com/hyperledger/fabric; git pull --ff-only\nerror: Your local changes to the following files would be overwritten by merge:\n        docs/source/kafka.rst\nPlease, commit your changes or stash them before you can merge.  \u89e3\u51b3\u529e\u6cd5\u662f\uff1a  $ cd /opt/gopath/src/github.com/hyperledger/fabric;\n$ git reset --hard  \u4e0a\u8ff0\u547d\u4ee4\u7684\u542b\u4e49\u662f\u653e\u5f03\u672c\u5730\u7684\u4fee\u6539\uff0c\u4ee5\u7f51\u4e0a\u7248\u672c\u4e3a\u51c6\u3002 \n\u56de\u5230\u539f\u6765\u7684\u76ee\u5f55\uff0c\u91cd\u65b0\u6267\u884c go get \uff0c\u95ee\u9898\u89e3\u51b3\u3002", 
            "title": "\u6784\u5efa\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_developers_zh/#_8", 
            "text": "\u901a\u5e38\u94fe\u7801\u7531peer\u542f\u52a8\u548c\u7ef4\u62a4\u3002\u4f46\u5728\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\u4e0b\uff0c\u94fe\u7801\u7531\u7528\u6237\u6784\u5efa\u548c\u542f\u52a8\u3002\u5728\u5feb\u901f\u4ee3\u7801/\u6784\u5efa/\u8fd0\u884c/\u8c03\u8bd5\u5468\u671f\u8f6c\u6362\u7684\u94fe\u7801\u5f00\u53d1\u9636\u6bb5\uff0c\u6b64\u6a21\u5f0f\u975e\u5e38\u6709\u7528\u3002 \n\u6211\u4eec\u5229\u7528\u9884\u751f\u6210\u7684\u6392\u5e8f\u5668\u548c\u901a\u9053\u5de5\u4ef6\u542f\u52a8\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\uff0c\u83b7\u5f97\u4e00\u4e2a\u793a\u8303\u5f00\u53d1\u7f51\u7edc\u3002\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u7f16\u8bd1\u94fe\u7801\u8fc7\u7a0b\u548c\u9a71\u52a8\u8c03\u7528\u3002", 
            "title": "\u4f7f\u7528\u5f00\u53d1\u6a21\u5f0f\u6d4b\u8bd5"
        }, 
        {
            "location": "/chaincode_developers_zh/#_9", 
            "text": "\u9700\u8981\u542f\u52a83\u4e2a\u7ec8\u7aef\u7a97\u53e3\u3002", 
            "title": "\u8c03\u8bd5\u4e0e\u6d4b\u8bd5"
        }, 
        {
            "location": "/chaincode_developers_zh/#1", 
            "text": "$ cd /opt/fabric-samples/chaincode-docker-devmode\n$ docker-compose -f docker-compose-simple.yaml up  \u4e0a\u9762\u7684\u547d\u4ee4\u7528 SingleSampleMSPSolo \u6392\u5e8f\u5668profile\u542f\u52a8\u7f51\u7edc\uff0c\u5e76\u4ee5\u5f00\u53d1\u6a21\u5f0f\u542f\u52a8peer\u3002\u8fd8\u542f\u52a8\u4e86\u4e24\u4e2a\u9644\u52a0\u5bb9\u5668\uff0c\u4e00\u4e2a\u662f\u94fe\u7801\u73af\u5883\uff0c\u53e6\u4e00\u4e2a\u662f\u4e0e\u94fe\u7801\u4ea4\u4e92\u7684CLI\u3002\u521b\u5efa\u548c\u52a0\u5165\u901a\u9053\u7684\u547d\u4ee4\u88ab\u5d4c\u5165\u5230CLI\u5bb9\u5668\u4e2d\uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u94fe\u7801\u3002", 
            "title": "\u7a97\u53e31\uff1a\u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/chaincode_developers_zh/#2", 
            "text": "\u7528\u4e0b\u5217\u547d\u4ee4\u8fdb\u5165 chaincode \u5bb9\u5668\u5185\u7684bash\u73af\u5883:  $ docker exec -it chaincode bash\nroot@d2629980e76b:/opt/gopath/src/chaincode#  \u867d\u7136\u770b\u4e0a\u53bb\u4e0e\u5bbf\u4e3b\u673a\u7c7b\u4f3c\uff0c\u5176\u5b9e\u5df2\u7ecf\u5728 chaincode \u5bb9\u5668\u5185\u3002\u4e0b\u9762\u6267\u884c\u7684\u90fd\u662f\u8be5\u5bb9\u5668\u5185\u7684\u547d\u4ee4\u3002\u4e0b\u9762\u7f16\u8bd1\u4f60\u7684\u94fe\u7801\uff1a    $ cd sacc\n$ go build  \u8fd0\u884c\u94fe\u7801\uff1a  $ CORE_PEER_ADDRESS=peer:7051 CORE_CHAINCODE_ID_NAME=mycc:0 ./sacc  \u4e0a\u8ff0\u94fe\u7801\u968fpeer\u542f\u52a8\uff0c\u94fe\u7801\u65e5\u5fd7\u8868\u793a\u5b83\u6210\u529f\u6ce8\u518c\u5230peer\u3002\u6ce8\u610f\uff0c\u73b0\u9636\u6bb5\u7684\u94fe\u7801\u8fd8\u6ca1\u6709\u4e0e\u901a\u9053\u5173\u8054\u3002\u8fd9\u4e2a\u4f1a\u5728\u540e\u7eed\u7684\u6b65\u9aa4\u4e2d\u901a\u8fc7\u5b9e\u4f8b\u5316\u547d\u4ee4\u505a\u5230\u3002", 
            "title": "\u7a97\u53e32\uff1a\u6784\u5efa\u548c\u542f\u52a8\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_developers_zh/#3", 
            "text": "\u867d\u7136\u4f60\u5904\u4e8e --peer-chaincodedev \u6a21\u5f0f\uff0c\u4f60\u4ecd\u7136\u9700\u8981\u5b89\u88c5\u94fe\u7801\uff0c\u56e0\u6b64\u751f\u547d\u5468\u671f\u7cfb\u7edf\u94fe\u7801\u53ef\u4ee5\u50cf\u901a\u5e38\u4e00\u6837\u6267\u884c\u68c0\u67e5\u3002\u5c06\u6765\u8fd9\u4e2a\u9700\u6c42\u53ef\u80fd\u5728 --peer-chaincodedev \u6a21\u5f0f\u4e0b\u79fb\u9664\u3002 \n\u6211\u4eec\u5229\u7528CLI\u5bb9\u5668\u6267\u884c\u8fd9\u4e9b\u8c03\u7528\uff1a  $ docker exec -it cli bash\n$ peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0\n$ peer chaincode instantiate -n mycc -v 0 -c '{ Args :[ a , 10 ]}' -C myc  \u73b0\u5728\u53d1\u51fa\u4e00\u4e2a\u8c03\u7528\u5c06 a \u7684\u503c\u6539\u6210 20 \u3002  $ peer chaincode invoke -n mycc -c '{ Args :[ set ,  a ,  20 ]}' -C myc  \u6700\u540e\uff0c\u67e5\u8be2 a \uff0c\u53ef\u4ee5\u770b\u5230\u503c\u662f 20 \u3002  $ peer chaincode query -n mycc -c '{ Args :[ query , a ]}' -C myc", 
            "title": "\u7a97\u53e33\uff1a\u4f7f\u7528\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_developers_zh/#_10", 
            "text": "\u9ed8\u8ba4\u6211\u4eec\u4ec5\u6302\u8f7d sacc \u3002\u7136\u800c\uff0c\u4f60\u901a\u8fc7\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 chaincode \u5b50\u76ee\u5f55\u6765\u6d4b\u8bd5\u4e0d\u540c\u7684\u94fe\u7801\uff08\u9700\u8981\u91cd\u542f\u7f51\u7edc\uff09\u3002\u4f60\u53ef\u4ee5\u5728 chaincode \u5bb9\u5668\u4e2d\u8bbf\u95ee\u5b83\u4eec\u3002", 
            "title": "\u6d4b\u8bd5\u65b0\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_developers_zh/#_11", 
            "text": "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5bf9key\u5173\u8054\u7684\u5168\u90e8\u503c\u6216\u90e8\u5206\u503c\u8fdb\u884c\u52a0\u5bc6\u3002\u4f8b\u5982\uff0c\u5f53\u4e00\u4e2a\u4eba\u7684\u793e\u4f1a\u5b89\u5168\u53f7\u7801\u6216\u5730\u5740\u5728\u5199\u5165\u8d26\u672c\u65f6\uff0c\u53ef\u80fd\u4e0d\u5e0c\u671b\u8fd9\u4e9b\u6570\u636e\u4ee5\u660e\u6587\u5f62\u5f0f\u51fa\u73b0\u3002\u94fe\u7801\u52a0\u5bc6\u5229\u7528 \u5b9e\u4f53\u6269\u5c55 \uff0c\u5b83\u5185\u90e8\u5305\u88c5\u4e86BCCSP\uff0c\u652f\u6301\u52a0\u5bc6\u548c\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u52a0\u5bc6\uff0c\u94fe\u7801\u7684\u8c03\u7528\u8005\u901a\u8fc7\u4e34\u65f6\u5b57\u6bb5\u4f20\u5165\u52a0\u5bc6\u5bc6\u94a5\u3002\u7136\u540e\u53ef\u4ee5\u5c06\u76f8\u540c\u7684\u5bc6\u94a5\u7528\u4e8e\u968f\u540e\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u4ece\u800c\u5141\u8bb8\u5bf9\u52a0\u5bc6\u7684\u72b6\u6001\u503c\u8fdb\u884c\u89e3\u5bc6\u3002  \u5bf9\u4e8e\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u548c\u793a\u8303\uff0c\u770b fabric/examples \u76ee\u5f55\u4e0b\u7684 Encc Example \u3002\u7279\u522b\u6ce8\u610futils.go \u52a9\u624b\u7a0b\u5e8f\u3002\u8be5\u5b9e\u7528\u7a0b\u5e8f\u52a0\u8f7d\u94fe\u7801\u4ee3\u7801API\u548c\u5b9e\u4f53\u6269\u5c55\uff0c\u5e76\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u7c7b\uff08\u4f8b\u5982 encryptAndPutState \uff06 getStateAndDecrypt \uff09\uff0c\u4ee5\u4fbf\u793a\u4f8b\u52a0\u5bc6\u94fe\u7801\u5229\u7528\u3002\u56e0\u6b64\uff0c\u94fe\u7801\u73b0\u5728\u53ef\u4ee5\u548c\u57fa\u672c\u7684shim API\u7ed3\u5408\u8d77\u6765\uff0c\u4f7f Get \u548c Put \u53ef\u4ee5\u6dfb\u52a0\u89e3\u5bc6\u548c\u52a0\u5bc6\u529f\u80fd\u3002", 
            "title": "\u94fe\u7801\u52a0\u5bc6"
        }, 
        {
            "location": "/chaincode_operators_zh/", 
            "text": "\u539f\u6587\n  \n\n\n\u94fe\u7801\u8fd0\u7ef4\n\n\n\u539f\u6587\n\n\u94fe\u7801\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7528Go\u3001Node.js\u7f16\u5199(\u672a\u6765\u4f1a\u652f\u6301\u5176\u4ed6\u8bed\u8a00\uff0c\u5982Java)\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u89c4\u5b9a\u7684\u63a5\u53e3\u3002\u94fe\u7801\u8fd0\u884c\u5728\u5b89\u5168\u7684Docker\u5bb9\u5668\u4e2d\uff0c\u9694\u79bb\u4e8e\u80cc\u4e66peer\u8fc7\u7a0b\u3002\u94fe\u7801\u901a\u8fc7\u5e94\u7528\u63d0\u4ea4\u7684\u4e8b\u52a1\u6765\u521d\u59cb\u5316\u548c\u7ba1\u7406\u8d26\u672c\u72b6\u6001\u3002\n\n\u94fe\u7801\u5904\u7406\u7f51\u7edc\u6210\u5458\u90fd\u540c\u610f\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u201c\u667a\u80fd\u5408\u7ea6\u201d\u3002\u94fe\u7801\u521b\u5efa\u7684\u72b6\u6001\u662f\u4e0d\u80fd\u76f4\u63a5\u88ab\u5176\u4ed6\u94fe\u7801\u8bbf\u95ee\u7684\uff08scoped\uff09\u3002\u4f46\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u5185\uff08\u4e00\u822c\u6307\u901a\u9053\uff1f\uff09\uff0c\u901a\u8fc7\u9002\u5f53\u7684\u6388\u6743\uff0c\u4e00\u4e2a\u94fe\u7801\u53ef\u4ee5\u8c03\u7528\u5176\u5b83\u94fe\u7801\u800c\u4ece\u8bbf\u95ee\u5b83\u7684\u72b6\u6001\u3002\n\n\u672c\u7ae0\u5047\u5b9a\u4e86\u4e00\u4e2a\u53eb\u8bfa\u4e9a\u7684\u8fd0\u7ef4\u5de5\u7a0b\u5e08\uff0c\u901a\u8fc7\u4ed6\u7684\u89c6\u89d2\u5173\u6ce8\u94fe\u7801\u3002\u6839\u636e\u8bfa\u4e9a\u7684\u559c\u597d\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u94fe\u7801\u7684\u5168\u751f\u547d\u5468\u671f\u7ef4\u62a4\uff0c\u5373\u5305\u88c5\u3001\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u548c\u5347\u7ea7\u94fe\u7801\u7684\u8fc7\u7a0b\u3002  \n\n\n\u94fe\u7801\u751f\u547d\u5468\u671f\n\n\nHyperledger Fabric API\u5141\u8bb8\u4e0e\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684\u4e0d\u540c\u8282\u70b9(peer\u3001orderer\u548cMSP)\u4ea4\u4e92\uff0c\u5b83\u8fd8\u5141\u8bb8\u5728\u80cc\u4e66peer\u8282\u70b9\u4e0a\u6253\u5305\u3001\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u548c\u5347\u7ea7\u94fe\u7801\u3002Hyperledger Fabric\u5404\u8bed\u8a00SDK\u5bf9Hyperledger Fabric API\u8fdb\u884c\u62bd\u8c61\u4ee5\u5229\u4e8e\u5e94\u7528\u5f00\u53d1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u7528\u4e8e\u7ba1\u7406\u94fe\u7801\u751f\u547d\u5468\u671f\u3002\u6b64\u5916\uff0cHyperledger Fabric API\u8fd8\u53ef\u4ee5\u901a\u8fc7CLI\u76f4\u63a5\u8bbf\u95ee\uff0c\u8fd9\u5728\u672c\u7ae0\u6211\u4eec\u4f1a\u7528\u5230\u3002\n\n\u6211\u4eec\u63d0\u4f9b\u4e86\u56db\u4e2a\u547d\u4ee4\u53bb\u7ba1\u7406\u94fe\u7801\u751f\u547d\u5468\u671f\uff1a\npackage\n\u3001\ninstall\n\u3001\ninstantiate\n\u548c\nupgrade\n\u3002\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u6b63\u8003\u8651\u589e\u52a0\nstop\n\u548c\nstart\n\u4e8b\u52a1\u53bb\u7981\u7528\u548c\u91cd\u65b0\u542f\u7528\u94fe\u7801\uff0c\u800c\u4e0d\u7528\u5b9e\u9645\u5378\u8f7d\u5b83\u3002\u5728\u94fe\u7801\u88ab\u6210\u529f\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u540e\uff0c\u94fe\u7801\u662f\u6d3b\u8dc3\u72b6\u6001(\u8fd0\u884c\u4e2d)\uff0c\u53ef\u4ee5\u901a\u8fc7 \ninvoke\n\u4e8b\u52a1\u5904\u7406\u4e8b\u52a1\u3002\u94fe\u7801\u53ef\u4ee5\u5728\u5b89\u88c5\u540e\u591a\u6b21\u5347\u7ea7\uff08\u7248\u672c\u66f4\u65b0\uff09\u3002  \n\n\n\u6253\u5305\n\n\n\u94fe\u7801\u5305\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\n- \u94fe\u7801\uff0c\u5c31\u8c61\u5728\nChaincodeDeploymentSpec\n(\u7b80\u79f0CDS)\u4e2d\u5b9a\u4e49\u7684\u3002CDS\u901a\u8fc7code\u548c\u5176\u5b83\u5c5e\u6027(\u5982\u540d\u79f0\u548c\u7248\u672c)\u6765\u5b9a\u4e49\u94fe\u7801\u5305\n\n- \u4e00\u4e2a\u53ef\u9009\u7684\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u80cc\u4e66\u7b56\u7565\n\n- \u94fe\u7801\u201c\u62e5\u6709\u8005\u201d\uff08\u5b9e\u4f53\uff09\u7684\u4e00\u7ec4\u6570\u5b57\u7b7e\u540d  \n\n\n\u7b7e\u540d\u7528\u4e8e\u4ee5\u4e0b\u76ee\u7684\uff1a\n\n- \u5efa\u7acb\u94fe\u7801\u7684\u6240\u6709\u6743\n\n- \u5141\u8bb8\u9a8c\u8bc1\u5305\u88f9\u7684\u5185\u5bb9\n\n- \u5141\u8bb8\u68c0\u6d4b\u5305\u88f9\u7be1\u6539\n\n\u94fe\u7801\u5b9e\u4f8b\u5316\u4e8b\u52a1\u7684\u521b\u5efa\u8005\u9700\u8981\u901a\u8fc7\u94fe\u7801\u7684\u5b9e\u4f8b\u5316\u7b56\u7565\u7684\u9a8c\u8bc1\u3002  \n\n\n\u5efa\u5305\n\n\n\u6709\u4e24\u4e2a\u65b9\u6cd5\u5bf9\u94fe\u7801\u6253\u5305\uff0c\u590d\u6742\u7684\u548c\u7b80\u5355\u7684\u3002\u5f53\u94fe\u7801\u5177\u6709\u591a\u4e2a\u62e5\u6709\u8005\u65f6\uff0c\u5b83\u9700\u8981\u88ab\u591a\u4e2a\u8eab\u4efd\u7b7e\u540d\u3002\u8fd9\u9700\u8981\u6211\u4eec\u9996\u5148\u5efa\u7acb\u4e00\u4e2a\u7b7e\u540d\u7684\u94fe\u7801\u5305(\nSignedCDS\n)\uff0c\u7136\u540e\u53d1\u7ed9\u5176\u4ed6\u62e5\u6709\u8005\u8fdb\u884c\u7b7e\u540d\u3002\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u6d41\u7a0b\u3002\n\u7b80\u5316\u6d41\u7a0b\u662f\uff0c\u5f53\u4f60\u90e8\u7f72\u7684SignedCDS\u53ea\u6709\u4e00\u4e2a\u7b7e\u540d\uff0c\u800c\u4e14\u7b7e\u540d\u8005\u5c31\u662f\u5b89\u88c5\u4e8b\u52a1\u7684\u53d1\u8d77\u8005\u3002\uff08\u5373\u5b89\u88c5\u4e00\u4e2a\u81ea\u5df1\u7b7e\u540d\u7684\u5305\u5230\u81ea\u5df1\u7684peer\uff09\n\n\u5148\u8bb2\u590d\u6742\u6d41\u7a0b\u3002\n\n\u521b\u5efa\u4e00\u4e2a\u7b7e\u540d\u7684\u94fe\u7801\u5305\uff0c\u9002\u7528\u4e0b\u5217\u547d\u4ee4\uff1a  \n\n\n$ peer chaincode package -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 -s -S -i \nAND('OrgA.admin')\n ccpack.out\n\n\n\n\n-s\n\u9009\u9879\u8868\u793a\u521b\u5efa\u4e00\u4e2a\u591a\u62e5\u6709\u8005\u7b7e\u540d\u7684\u5305\uff0c\u5982\u679c\u4e0d\u52a0\u5c31\u7b80\u5355\u521b\u5efa\u4e00\u4e2a\u7eafCDS\u3002\u5f53\u6307\u5b9a\u4e86\n-s\n\u9009\u9879\uff0c\u5982\u679c\u6709\u5176\u4ed6\u62e5\u6709\u8005\u9700\u8981\u7b7e\u540d\uff0c\u5219\n-S\n \u9009\u9879\u5fc5\u987b\u8bbe\u7f6e\u3002\u5426\u5219\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u4ec5\u5305\u542b\u5b9e\u4f8b\u5316\u7b56\u7565\u7684SignedCDS\u3002\n\n\n-S\n\u9009\u9879\u4f7f\u5904\u7406\u6d41\u7a0b\u4f7f\u7528 \ncore.yaml\n\u6587\u4ef6\u4e2d\nlocalMspid\n\u5c5e\u6027\u4e0b\u5b9a\u4e49\u7684MSP\u8eab\u4efd\u5bf9\u5305\u8fdb\u884c\u7b7e\u540d\u3002\n\n\n-S\n\u9009\u9879\u4f7f\u53ef\u9009\u7684\u3002\u4f46\u5982\u679c\u4e00\u4e2a\u5305\u6ca1\u6709\u7b7e\u540d\uff0c\u5b83\u5c31\u4e0d\u80fd\u88ab\u5176\u4ed6\u62e5\u6709\u8005\u4f7f\u7528\nsignpackage\n\u547d\u4ee4\u8fdb\u884c\u7b7e\u540d\u3002\n\n\n-i\n\u9009\u9879\u7528\u4e8e\u4e3a\u94fe\u7801\u6307\u5b9a\u5b9e\u4f8b\u5316\u7b56\u7565\u3002\u5b9e\u4f8b\u5316\u7b56\u7565\u4e0e\u80cc\u4e66\u7b56\u7565\u7684\u683c\u5f0f\u76f8\u540c\uff0c\u90fd\u662f\u6307\u5b9a\u54ea\u4e9b\u8eab\u4efd\u53ef\u4ee5\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u94fe\u7801\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ea\u6709\nOrgA\n\u7684\u7ba1\u7406\u5458(admin)\u53ef\u4ee5\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u94fe\u7801\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u7b56\u7565\uff0c\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u7b56\u7565\uff0c\u5219\u53ea\u5141\u8bb8peer\u7684MSP\u7684\u7ba1\u7406\u5458\u8eab\u4efd\u53bb\u5b9e\u4f8b\u5316\u94fe\u7801\u3002  \n\n\n\u5305\u7b7e\u540d\n\n\n\u4e00\u4e2a\u521b\u5efa\u65f6\u7b7e\u540d\u7684\u94fe\u7801\u5305\u53ef\u4ee5\u88ab\u79fb\u4ea4\u7ed9\u5176\u4ed6\u62e5\u6709\u8005\u67e5\u770b\u548c\u7b7e\u540d\u3002\u6d41\u7a0b\u652f\u6301out-of-band\u5bf9\u94fe\u7801\u5305\u7b7e\u540d\u3002  \n\n\nChaincodeDeploymentSpec\n\u53ef\u4ee5\u9009\u62e9\u88ab\u96c6\u4f53\u62e5\u6709\u8005\u7b7e\u540d\uff0c\u800c\u4ece\u521b\u5efa\u4e00\u4e2a\nSignedChaincodeDeploymentSpec\n(\u6216\u53ebSignedCDS)\u3002SignedCDS\u5305\u542b3\u4e2a\u5143\u7d20\uff1a\n\n 1. CDS\u5305\u542b\u7684\u94fe\u7801\u6e90\u7801\u3001\u540d\u79f0\u548c\u7248\u672c\u53f7\u3002\n\n 2. \u4e00\u4e2a\u94fe\u7801\u7684\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u8868\u8ff0\u4e3a\u80cc\u4e66\u7b56\u7565\u3002\n\n 3. \u94fe\u7801\u62e5\u6709\u8005\u5217\u8868\uff0c\u901a\u8fc7\n\u80cc\u4e66\n\u5b9a\u4e49\u3002    \n\n\n\u3010\u6ce8\u610f\u3011\uff1a\u5f53\u94fe\u7801\u5728\u4e00\u4e9b\u901a\u9053\u5b9e\u4f8b\u5316\u65f6\uff0c\u8fd9\u4e2a\u80cc\u4e66\u7b56\u7565\u901a\u8fc7out-of-band\u786e\u5b9aMSP\u8eab\u4efd\u3002\u5982\u679c\u5b9e\u4f8b\u5316\u7b56\u7565\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u7b56\u7565\u662f\u901a\u9053\u7684\u4efb\u4f55MSP\u7ba1\u7406\u5458\u3002\n  \n\n\n\u6bcf\u4e2a\u62e5\u6709\u8005\u90fd\u5bf9\nChaincodeDeploymentSpec\n\u8fdb\u884c\u80cc\u4e66\uff0c\u80cc\u4e66\u65b9\u6cd5\u662f\u5bf9CDS\u4e0e\u62e5\u6709\u8005\u8eab\u4efd\uff08\u5982\u8bc1\u4e66\uff09\u7684\u7ec4\u5408\u7ed3\u679c\u8fdb\u884c\u7b7e\u540d(\u7b97\u6cd5\uff1asign(ProposalResponse.payload + endorser))\u3002\n\n\u4e00\u4e2a\u94fe\u7801\u62e5\u6709\u8005\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5bf9\u4ee5\u524d\u521b\u5efa\u7684\u7b7e\u540d\u5305\u8fdb\u884c\u7b7e\u540d\uff1a\n\n\n$ peer chaincode signpackage ccpack.out signedccpack.out\n\n\n\n\nccpack.out\n\u548c\nsignedccpack.out\n\u5206\u522b\u662f\u8f93\u5165\u5305\u548c\u8f93\u51fa\u5305\u3002\nsignedccpack.out\n\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u5bf9\u5305\u7684\u65b0\u589e\u7b7e\u540d\uff0c\u7b7e\u540d\u4f7f\u7528\u4e86\u672c\u5730MSP\u3002  \n\n\n\u5b89\u88c5\u94fe\u7801\n\n\n\u5b89\u88c5(\ninstall\n)\u4e8b\u52a1\u6309\u89c4\u5b9a\u683c\u5f0f\u5bf9\u94fe\u7801\u7684\u6e90\u7801\u8fdb\u884c\u6253\u5305\uff0c\u8fd9\u4e2a\u683c\u5f0f\u79f0\u4e3a\nChaincodeDeploymentSpec\n\uff08\u6216\u79f0CDS\uff09\uff0c\u8be5\u4e8b\u52a1\u5c06\u94fe\u7801\u5b89\u88c5\u5728\u5c06\u6765\u8981\u8fd0\u884c\u5b83\u7684peer\u8282\u70b9\u4e0a\u3002  \n\n\n\u3010\u6ce8\u610f\u3011\uff1a\u4f60\u5fc5\u987b\u5c06\u94fe\u7801\u5b89\u88c5\u5728\u8981\u8fd0\u884c\u94fe\u7801\u7684\u901a\u9053\u7684\u6bcf\u4e2a\u80cc\u4e66peer\u8282\u70b9\u4e0a\u3002\n  \n\n\n\u5f53\ninstall\nAPI\u7b80\u5355\u7ed9\u4e88\u4e86\u4e00\u4e2a\nChaincodeDeploymentSpec\n\uff0c\u5b83\u5c06\u4f7f\u7528\u9ed8\u8ba4\u5b9e\u4f8b\u5316\u7b56\u7565\u548c\u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u62e5\u6709\u8005\u5217\u8868\u3002  \n\n\n\u3010\u6ce8\u610f\u3011\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u94fe\u7801\u903b\u8f91\u5bf9\u7f51\u7edc\u4e0a\u7684\u5176\u4ed6\u6210\u5458\u4fdd\u5bc6\uff0c\u94fe\u7801\u53ea\u5b89\u88c5\u5728\u94fe\u7801\u62e5\u6709\u8005\u7684\u80cc\u4e66peer\u8282\u70b9\u4e0a\uff08\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u62e5\u6709\u8005\uff09\u3002\u54ea\u4e9b\u6ca1\u6709\u94fe\u7801\u7684\u6210\u5458\uff0c\u4e0d\u80fd\u662f\u94fe\u7801\u4e8b\u52a1\u7684\u80cc\u4e66\u8005\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u4e0d\u80fd\u6267\u884c\u94fe\u7801\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u4ecd\u7136\u53ef\u4ee5\u751f\u6548\u548c\u63d0\u4ea4\u4e8b\u52a1\u5230\u8d26\u672c\u3002\n  \n\n\n\u4e3a\u4e86\u5b89\u88c5\u94fe\u7801\uff0c\u53d1\u9001\u4e00\u4e2a\nSignedProposal\n\u5230\nlifecycle system chaincode\n(LSCC)(LSCC\u4f1a\u5728\n\u7cfb\u7edf\u94fe\u7801\n\u4e00\u8282\u4e2d\u63cf\u8ff0)\u3002\u4f8b\u5982\uff0c\u4f7f\u7528CLI\u5b89\u88c5\nsacc\n\u793a\u8303\u94fe\u7801\uff08\u524d\u6587\u5728\u201c\u94fe\u7801\u6559\u7a0b:\u94fe\u7801\u5f00\u53d1-\n\u8c03\u8bd5\u4e0e\u6d4b\u8bd5\n\u201d\u4e00\u8282\u4e2d\u63cf\u8ff0\u8fc7\uff09\u7684\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\n$ peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0\n\n\n\n\nCLI\u5185\u90e8\u4e3a\nsacc\n\u521b\u5efa\u4e00\u4e2a\nSignedChaincodeDeploymentSpec\n\uff0c\u5e76\u53d1\u9001\u5b83\u5230\u672c\u5730peer\uff0cpeer\u8c03\u7528LSCC\u4e0a\u7684\nInstall\n\u65b9\u6cd5\u3002\n-p\n\u9009\u9879\u6307\u5b9a\u4e86\u94fe\u7801\u7684\u8def\u5f84\uff0c\u5b83\u5fc5\u987b\u4f4d\u4e8e\u7528\u6237\nGOPATH\n\u7684\u6e90\u7801\u6811\u4e0a\uff0c\u5982\n$GOPATH/src/sacc\n\u3002\nCLI\n\u4e00\u8282\u6709\u8fd9\u4e2a\u547d\u4ee4\u9009\u9879\u7684\u8be6\u7ec6\u63cf\u8ff0\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u5b89\u88c5\u5728peer\u4e0a\uff0cSignedProposal\u7684\u7b7e\u540d\u5fc5\u987b\u6765\u81eapeer\u7684\u672c\u5730MSP\u7ba1\u7406\u5458\u4e4b\u4e00\u3002  \n\n\n\u5b9e\u4f8b\u5316\n\n\ninstantiate\n\u4e8b\u52a1\u8c03\u7528\nlifecycle System Chaincode\n(LSCC)\u5728\u4e00\u4e2a\u901a\u9053\u4e0a\u521b\u5efa\u548c\u5b9e\u4f8b\u5316\u67d0\u4e2a\u94fe\u7801\u3002\u8fd9\u662f\u4e00\u4e2a\u94fe\u7801-\u901a\u9053\u7ed1\u5b9a\u8fc7\u7a0b\uff1a\u4e00\u4e2a\u94fe\u7801\u53ef\u4ee5\u7ed1\u5b9a\u5230\u4efb\u610f\u6570\u91cf\u7684\u901a\u9053\uff0c\u72ec\u7acb\u548c\u4e92\u4e0d\u4f9d\u8d56\u5730\u8fd0\u884c\u5728\u6bcf\u4e2a\u901a\u9053\u4e0a\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u65e0\u8bba\u94fe\u7801\u5728\u591a\u5c11\u4e2a\u5176\u4ed6\u901a\u9053\u4e0a\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\uff0c\u5bf9\u4e8e\u63d0\u4ea4\u4e8b\u52a1\u7684\u901a\u9053\u72b6\u6001\u662f\u9694\u79bb\u7684\u3002\n\n\ninstantiate\n\u4e8b\u52a1\u7684\u521b\u5efa\u8005\u5fc5\u987b\u6ee1\u8db3\u5305\u542b\u5728SignedCDS\u4e2d\u7684\u94fe\u7801\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u5fc5\u987b\u8fd8\u662f\u901a\u9053\u7684\u5199\u5165\u8005\uff08\u8fd9\u662f\u901a\u9053\u521b\u5efa\u65f6\u7684\u914d\u7f6e\u4e4b\u4e00\uff09\u3002\u8fd9\u5bf9\u4e8e\u901a\u9053\u5b89\u5168\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u963b\u6b62\u6076\u610f\u5b9e\u4f53\u90e8\u7f72\u94fe\u7801\u548c\u6b3a\u9a97\u6210\u5458\u6267\u884c\u975e\u7ed1\u5b9a\u901a\u9053\u7684\u94fe\u7801\u3002\n\n\u4f8b\u5982\uff0c\u56de\u60f3\u4e00\u4e0b\uff0c\u9ed8\u8ba4\u5b9e\u4f8b\u5316\u7b56\u7565\u662f\u4efb\u4f55\u901a\u9053MSP\u7ba1\u7406\u5458\uff0c\u56e0\u6b64\u94fe\u7801\u5b9e\u4f8b\u5316\u4e8b\u52a1\u7684\u521b\u5efa\u8005\u5fc5\u987b\u662f\u901a\u9053\u7ba1\u7406\u5458\u7684\u6210\u5458\u3002\u4e8b\u52a1\u63d0\u8bae\u5230\u8fbe\u80cc\u4e66\u8005\u65f6\uff0c\u4f1a\u6839\u636e\u5b9e\u4f8b\u5316\u7b56\u7565\u9a8c\u8bc1\u521b\u5efa\u8005\u7684\u7b7e\u540d\u3002\u5728\u63d0\u4ea4\u5230\u8d26\u672c\u4e4b\u524d\uff0c\u5728\u4e8b\u52a1\u751f\u6548\u671f\u95f4\u518d\u6b21\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\n\u5b9e\u4f8b\u5316\u4e8b\u52a1\u8fd8\u4e3a\u901a\u9053\u4e0a\u7684\u94fe\u7801\u5efa\u7acb\u4e86\u80cc\u4e66\u7b56\u7565\u3002\u80cc\u4e66\u7b56\u7565\u63cf\u8ff0\u4e86\u4e8b\u52a1\u7ed3\u679c\u53ef\u4ee5\u88ab\u901a\u9053\u6210\u5458\u63a5\u53d7\u7684\u8bc1\u636e\u9700\u6c42\u3002\n\n\u4f8b\u5982\uff0c\u4f7f\u7528CLI\u5b9e\u4f8b\u5316\nsacc\n\u94fe\u7801\u548c\u7528\njohn\n\u548c\n0\n\u521d\u59cb\u5316\u72b6\u6001\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\n$ peer chaincode instantiate -n sacc -v 1.0 -c '{\nArgs\n:[\njohn\n,\n0\n]}' -P \nOR ('Org1.member','Org2.member')\n\n\n\n\n\n\u3010\u6ce8\u610f\u3011\u4e0a\u9762\u7684\u80cc\u4e66\u7b56\u7565(CLI\u4f7f\u7528\u6ce2\u5170\u8bed\u8868\u793a\u6cd5)\uff0c\u6240\u6709\u7684\nsacc\n\u4e8b\u52a1\u9700\u8981\u4e00\u4e2aOrg1\u6210\u5458\u6216Org2\u6210\u5458\u7684\u80cc\u4e66\u3002\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u4e8b\u52a1\u751f\u6548\uff0cOrg1\u6216Org2\u9700\u8981\u5bf9\u8c03\u7528(Invoke)\nsacc\n\u7684\u6267\u884c\u7ed3\u679c\u7b7e\u540d\u3002\n \n\n\u5b9e\u4f8b\u5316\u6210\u529f\u540e\uff0c\u901a\u9053\u4e2d\u7684\u94fe\u7801\u8fdb\u5165\u6d3b\u52a8\u72b6\u6001\uff0c\u51c6\u5907\u597d\u5904\u7406\u4efb\u610f\nENDORSER_TRANSACTION\n\u7c7b\u578b\u7684\u4e8b\u52a1\u63d0\u8bae\u3002\u5f53\u4e8b\u52a1\u5230\u8fbe\u80cc\u4e66peer\u65f6\uff0c\u5b83\u4eec\u4f1a\u88ab\u5e76\u53d1\u5904\u7406\u3002  \n\n\n\u7248\u672c\u66f4\u65b0\n\n\n\u94fe\u7801\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u95f4\u66f4\u65b0\u7248\u672c\uff0c\u7248\u672c\u662fSignedCDS\u7684\u7ec4\u6210\u90e8\u5206\u3002SignedCDS\u7684\u5176\u5b83\u90e8\u5206\uff0c\u5982\u62e5\u6709\u8005\u548c\u5b9e\u4f8b\u5316\u7b56\u7565\u662f\u53ef\u9009\u9879\u3002\u7136\u800c\uff0c\u94fe\u7801\u540d\u79f0\u5fc5\u987b\u76f8\u540c\uff0c\u5426\u5219\u5b83\u4f1a\u88ab\u89c6\u4e3a\u5b8c\u5168\u4e0d\u540c\u7684\u94fe\u7801\u3002\n\n\u7248\u672c\u66f4\u65b0\u524d\uff0c\u94fe\u7801\u7684\u65b0\u7248\u672c\u5fc5\u987b\u5df2\u7ecf\u5728\u80cc\u4e66\u8005\u8282\u70b9\u4e0a\u5b89\u88c5\u3002\u66f4\u65b0\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b9e\u4f8b\u5316\u7684\u4e8b\u52a1\uff0c\u5b83\u7ed1\u5b9a\u65b0\u7248\u672c\u7684\u94fe\u7801\u5230\u901a\u9053\u3002\u7ed1\u5b9a\u94fe\u7801\u65e7\u7248\u672c\u7684\u901a\u9053\u4ecd\u7136\u8fd0\u884c\u65e7\u7248\u672c\u3002\u8bdd\u53e5\u8bdd\u8bf4\uff0c\nupgrade\n\u4e8b\u52a1\u4ec5\u5f71\u54cd\u63d0\u4ea4\u4e86\u66f4\u65b0\u4e8b\u52a1\u7684\u901a\u9053\u3002  \n\n\n\u3010\u6ce8\u610f\u3011\uff0c\u7531\u4e8e\u94fe\u7801\u7684\u591a\u4e2a\u7248\u672c\u53ef\u80fd\u540c\u65f6\u6709\u6548\uff0c\u66f4\u65b0\u8fc7\u7a0b\u4e0d\u4f1a\u81ea\u52a8\u5220\u9664\u5c31\u7248\u672c\uff0c\u56e0\u6b64\u7528\u6237\u5fc5\u987b\u4e34\u65f6\u7ba1\u7406\u5b83\u3002\n  \n\n\n\u66f4\u65b0\u4e8b\u52a1\u8fd8\u662f\u4e0e\ninstantiate\n\u4e8b\u52a1\u7531\u7ec6\u5fae\u7684\u4e0d\u540c\uff1a\nupgrade\n\u4e8b\u52a1\u68c0\u67e5\u5f53\u524d\u94fe\u7801\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u4e0d\u662f\u65b0\u7b56\u7565(\u5982\u679c\u6307\u5b9a\u4e86\u7b56\u7565)\u3002\u8fd9\u786e\u4fdd\u4e86\u53ea\u6709\u5728\u5f53\u524d\u5b9e\u4f8b\u5316\u7b56\u7565\u4e2d\u5b58\u5728\u7684\u6210\u5458\u624d\u53ef\u4ee5\u66f4\u65b0\u94fe\u7801\u3002  \n\n\n\u3010\u6ce8\u610f\u3011\uff0c\u5728\u66f4\u65b0\u65f6\uff0c\u94fe\u7801\u7684\nInit\n\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u53bb\u6267\u884c\u76f8\u5173\u6570\u636e\u66f4\u65b0\u6216\u91cd\u65b0\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u94fe\u7801\u66f4\u65b0\u65f6\u8981\u5c0f\u5fc3\u907f\u514d\u91cd\u7f6e\u72b6\u6001\u3002\n  \n\n\n\u505c\u6b62\u548c\u542f\u52a8\n\n\n\u6ce8\u610f\nstop\n\u548c\nstart\n\u751f\u547d\u5468\u671f\u4e8b\u52a1\u8fd8\u6ca1\u6709\u88ab\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u624b\u5de5\u505c\u6b62\u94fe\u7801\uff0c\u529e\u6cd5\u662f\u4ece\u6bcf\u4e2a\u80cc\u4e66\u8005peer\u5220\u9664\u94fe\u7801\u5bb9\u5668\u548cSingedCDS\u5305\u3002\u5728\u6bcf\u4e2a\u8fd0\u884c\u80cc\u4e66peer\u8282\u70b9\u7684\u4e3b\u673a\u6216\u865a\u673a\u4e0a\u5220\u9664\u94fe\u7801\u5bb9\u5668\uff0c\u7136\u540e\u5220\u9664SignedCDS\u3002  \n\n\n(\u6ce8\u610f\uff0c\u4e3a\u4e86\u4ecepeer\u8282\u70b9\u5220\u9664CDS\uff0c\u4f60\u9700\u8981\u5148\u8fdb\u5165peer\u8282\u70b9\u7684\u5bb9\u5668\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u5e72\u8fd9\u4e2a\u7684\u5de5\u5177\u811a\u672c)\n$ docker rm -f \ncontainer id\n\n$ rm /var/hyperledger/production/chaincodes/\nccname\n:\nccversion\n\n\n\n\n\n\u505c\u6b62\u5728\u7528\u4e8e\u4ee5\u53d7\u63a7\u65b9\u5f0f\u8fdb\u884c\u5347\u7ea7\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u662f\u6709\u7528\u7684\uff0c\u5176\u4e2d\u94fe\u7801\u53ef\u4ee5\u5728\u53d1\u5e03\u5347\u7ea7\u4e4b\u524d\u5728\u6240\u6709peer\u7684\u4fe1\u9053\u4e0a\u505c\u6b62\u3002  \n\n\nCLI\n\n\n\u3010\u6ce8\u610f\u3011\uff1a\u6211\u4eec\u6b63\u5728\u8bc4\u4f30\u662f\u5426\u53d1\u5e03\u5e73\u53f0\u4e13\u5c5eHyperledger Fabric peer\u4e8c\u8fdb\u5236\u5305\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2adocker\u5bb9\u5668\u4e2d\u7b80\u5355\u8c03\u7528\u547d\u4ee4\u3002\n  \n\n\n\u4e3a\u4e86\u663e\u793a\u5f53\u524d\u53ef\u7528\u7684CLI\u547d\u4ee4\uff0c\u5728\u8fd0\u884c\u4e2d\u7684\nfabric-peer\nDocker\u5bb9\u5668\u4e2d\u6267\u884c\u4e0b\u5217\u547d\u4ee4\uff1a\n\n\n$ docker run -it hyperledger/fabric-peer bash\n(peer chaincode --help)\n\n\n\n\n\u5b83\u5c06\u663e\u793a\u7c7b\u4f3c\u7684\u4ee5\u4e0b\u8f93\u51fa\uff1a\n\n\nUsage:\n  peer chaincode [command]\n\nAvailable Commands:\n  install     Package the specified chaincode into a deployment spec and save it on the peer's path.\n  instantiate Deploy the specified chaincode to the network.\n  invoke      Invoke the specified chaincode.\n  list        Get the instantiated chaincodes on a channel or installed chaincodes on a peer.\n  package     Package the specified chaincode into a deployment spec.\n  query       Query using the specified chaincode.\n  signpackage Sign the specified chaincode package\n  upgrade     Upgrade chaincode.\n\nFlags:\n    --cafile string      Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint\n-h, --help               help for chaincode\n-o, --orderer string     Ordering service endpoint\n    --tls                Use TLS when communicating with the orderer endpoint\n    --transient string   Transient map of arguments in JSON encoding\n\n\n\n\n\u4e3a\u4e86\u65b9\u4fbf\u5728\u811a\u672c\u5f0f\u5e94\u7528\u4e2d\u4f7f\u7528\uff0c\npeer\n\u547d\u4ee4\u5728\u5931\u8d25\u4e8b\u4ef6\u4e2d\u603b\u662f\u4ea7\u751f\u975e\u96f6\u7684\u8fd4\u56de\u7801\u3002\n\n\u94fe\u7801\u547d\u4ee4\u7684\u4f8b\u5b50\uff1a  \n\n\npeer chaincode install -n mycc -v 0 -p path/to/my/chaincode/v0\npeer chaincode instantiate -n mycc -v 0 -c '{\nArgs\n:[\na\n, \nb\n, \nc\n]}' -C mychannel\npeer chaincode install -n mycc -v 1 -p path/to/my/chaincode/v1\npeer chaincode upgrade -n mycc -v 1 -c '{\nArgs\n:[\nd\n, \ne\n, \nf\n]}' -C mychannel\npeer chaincode query -C mychannel -n mycc -c '{\nArgs\n:[\nquery\n,\ne\n]}'\npeer chaincode invoke -o orderer.example.com:7050  --tls --cafile $ORDERER_CA -C mychannel -n mycc -c '{\nArgs\n:[\ninvoke\n,\na\n,\nb\n,\n10\n]}'\n\n\n\n\n\u7cfb\u7edf\u94fe\u7801\n\n\n\u7cfb\u7edf\u94fe\u7801\u4e0e\u666e\u901a\u94fe\u7801\u5177\u6709\u76f8\u540c\u7684\u7f16\u7a0b\u6a21\u578b\uff0c\u77e5\u8bc6\u5b83\u8fd0\u884c\u5728peer\u8fdb\u7a0b\u4e2d\uff0c\u800c\u4e0d\u662f\u5728\u9694\u79bb\u7684\u5bb9\u5668\u4e2d\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u94fe\u7801\u6784\u5efa\u5728peer\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u5b83\u4e0d\u4f1a\u9075\u5faa\u4e0a\u8ff0\u540c\u6837\u7684\u751f\u547d\u5468\u671f\u3002\u7279\u522b\u662f\uff0c\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u548c\u7248\u672c\u66f4\u65b0\u4e0d\u4f1a\u7528\u5728\u7cfb\u7edf\u94fe\u7801\u4e0a\u3002\n\n\u7cfb\u7edf\u94fe\u7801\u7684\u76ee\u7684\u662f\u51cf\u5c11peer\u548c\u94fe\u7801\u95f4gRPC\u901a\u4fe1\u6210\u672c\uff0c\u548c\u7ba1\u7406\u7075\u6d3b\u6027\u7684\u6298\u4e2d\u3002\u4f8b\u5982\uff0c\u7cfb\u7edf\u94fe\u7801\u53ea\u80fd\u4e0epeer\u7a0b\u5e8f\u4e00\u8d77\u66f4\u65b0\u3002\u5b83\u5fc5\u987b\u4ee5\u4e00\u5957\u56fa\u5b9a\u53c2\u6570\u6ce8\u518c\uff0c\u4e14\u4e0d\u80fd\u6709\u80cc\u4e66\u7b56\u7565\u6216\u80cc\u4e66\u7b56\u7565\u51fd\u6570\u3002\n\nHyperledger Fabric\u4e2d\u4f7f\u7528\u7cfb\u7edf\u94fe\u4ee3\u7801\u6765\u5b9e\u73b0\u8bb8\u591a\u7cfb\u7edf\u884c\u4e3a\uff0c\u4ee5\u4fbf\u7cfb\u7edf\u96c6\u6210\u5546\u53ef\u4ee5\u6839\u636e\u9700\u8981\u66ff\u6362\u6216\u4fee\u6539\u5b83\u4eec\u3002\n\n\u5f53\u524d\u7cfb\u7edf\u94fe\u7801\u7684\u5217\u8868\uff1a\n\n1. \nLSCC\n \u751f\u547d\u5468\u671f\u7cfb\u7edf\u94fe\u7801\uff0c\u5904\u7406\u4e0a\u8ff0\u7684\u751f\u547d\u5468\u671f\u8bf7\u6c42\u3002\n\n2. \nCSCC\n \u914d\u7f6e\u7cfb\u7edf\u94fe\u7801\uff0c\u5904\u7406peer\u7aef\u7684\u901a\u9053\u914d\u7f6e\u3002\n\n3. \nQSCC\n \u67e5\u8be2\u7cfb\u7edf\u94fe\u7801\uff0c\u63d0\u4f9b\u8d26\u672c\u67e5\u8be2API\uff0c\u4f8b\u5982\u83b7\u53d6\u533a\u5757\u548c\u4e8b\u52a1\u3002\n\n4. \nESCC\n \u80cc\u4e66\u7cfb\u7edf\u94fe\u7801\uff0c\u901a\u8fc7\u7b7e\u7f72\u4e8b\u52a1\u63d0\u8bae\u54cd\u5e94\u6765\u5904\u7406\u80cc\u4e66\u3002\n\n5. \nVSCC\n \u751f\u6548\u7cfb\u7edf\u94fe\u7801\uff0c\u5904\u7406\u4e8b\u52a1\u751f\u6548\uff0c\u5305\u62ec\u68c0\u67e5\u80cc\u4e66\u7b56\u7565\u548c\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\u3002  \n\n\n\u66f4\u6539\u6216\u8986\u76d6\u8fd9\u4e9b\u7cfb\u7edf\u94fe\u7801\u8981\u5c0f\u5fc3\uff0c\u7279\u522b\u662fLSCC\u3001ESCC\u548cVSCC\uff0c\u56e0\u4e3a\u5b83\u4eec\u5904\u5728\u4e3b\u4e8b\u52a1\u7684\u8fd0\u884c\u8def\u5f84\u4e0a\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cVSCC\u5c06\u533a\u5757\u5c06\u63d0\u4ea4\u5230\u8d26\u672c\u4e4b\u524d\u7684\u751f\u6548\u9a8c\u8bc1\uff0c\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u8ba1\u7b97\u76f8\u540c\u7684\u751f\u6548\u9a8c\u8bc1\u4ee5\u907f\u514d\u8d26\u672c\u5206\u6b67\uff08\u975e\u786e\u5b9a\u6027\uff09\u662f\u5f88\u91cd\u8981\u7684\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4fee\u6539\u6216\u66f4\u6362VSCC\uff0c\u9700\u8981\u7279\u522b\u5c0f\u5fc3\u3002", 
            "title": "Chaincode \u64cd\u4f5c\u624b\u518c"
        }, 
        {
            "location": "/chaincode_operators_zh/#_1", 
            "text": "\u539f\u6587 \n\u94fe\u7801\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7528Go\u3001Node.js\u7f16\u5199(\u672a\u6765\u4f1a\u652f\u6301\u5176\u4ed6\u8bed\u8a00\uff0c\u5982Java)\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u89c4\u5b9a\u7684\u63a5\u53e3\u3002\u94fe\u7801\u8fd0\u884c\u5728\u5b89\u5168\u7684Docker\u5bb9\u5668\u4e2d\uff0c\u9694\u79bb\u4e8e\u80cc\u4e66peer\u8fc7\u7a0b\u3002\u94fe\u7801\u901a\u8fc7\u5e94\u7528\u63d0\u4ea4\u7684\u4e8b\u52a1\u6765\u521d\u59cb\u5316\u548c\u7ba1\u7406\u8d26\u672c\u72b6\u6001\u3002 \n\u94fe\u7801\u5904\u7406\u7f51\u7edc\u6210\u5458\u90fd\u540c\u610f\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u201c\u667a\u80fd\u5408\u7ea6\u201d\u3002\u94fe\u7801\u521b\u5efa\u7684\u72b6\u6001\u662f\u4e0d\u80fd\u76f4\u63a5\u88ab\u5176\u4ed6\u94fe\u7801\u8bbf\u95ee\u7684\uff08scoped\uff09\u3002\u4f46\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u5185\uff08\u4e00\u822c\u6307\u901a\u9053\uff1f\uff09\uff0c\u901a\u8fc7\u9002\u5f53\u7684\u6388\u6743\uff0c\u4e00\u4e2a\u94fe\u7801\u53ef\u4ee5\u8c03\u7528\u5176\u5b83\u94fe\u7801\u800c\u4ece\u8bbf\u95ee\u5b83\u7684\u72b6\u6001\u3002 \n\u672c\u7ae0\u5047\u5b9a\u4e86\u4e00\u4e2a\u53eb\u8bfa\u4e9a\u7684\u8fd0\u7ef4\u5de5\u7a0b\u5e08\uff0c\u901a\u8fc7\u4ed6\u7684\u89c6\u89d2\u5173\u6ce8\u94fe\u7801\u3002\u6839\u636e\u8bfa\u4e9a\u7684\u559c\u597d\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u94fe\u7801\u7684\u5168\u751f\u547d\u5468\u671f\u7ef4\u62a4\uff0c\u5373\u5305\u88c5\u3001\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u548c\u5347\u7ea7\u94fe\u7801\u7684\u8fc7\u7a0b\u3002", 
            "title": "\u94fe\u7801\u8fd0\u7ef4"
        }, 
        {
            "location": "/chaincode_operators_zh/#_2", 
            "text": "Hyperledger Fabric API\u5141\u8bb8\u4e0e\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684\u4e0d\u540c\u8282\u70b9(peer\u3001orderer\u548cMSP)\u4ea4\u4e92\uff0c\u5b83\u8fd8\u5141\u8bb8\u5728\u80cc\u4e66peer\u8282\u70b9\u4e0a\u6253\u5305\u3001\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u548c\u5347\u7ea7\u94fe\u7801\u3002Hyperledger Fabric\u5404\u8bed\u8a00SDK\u5bf9Hyperledger Fabric API\u8fdb\u884c\u62bd\u8c61\u4ee5\u5229\u4e8e\u5e94\u7528\u5f00\u53d1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u7528\u4e8e\u7ba1\u7406\u94fe\u7801\u751f\u547d\u5468\u671f\u3002\u6b64\u5916\uff0cHyperledger Fabric API\u8fd8\u53ef\u4ee5\u901a\u8fc7CLI\u76f4\u63a5\u8bbf\u95ee\uff0c\u8fd9\u5728\u672c\u7ae0\u6211\u4eec\u4f1a\u7528\u5230\u3002 \n\u6211\u4eec\u63d0\u4f9b\u4e86\u56db\u4e2a\u547d\u4ee4\u53bb\u7ba1\u7406\u94fe\u7801\u751f\u547d\u5468\u671f\uff1a package \u3001 install \u3001 instantiate \u548c upgrade \u3002\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u6b63\u8003\u8651\u589e\u52a0 stop \u548c start \u4e8b\u52a1\u53bb\u7981\u7528\u548c\u91cd\u65b0\u542f\u7528\u94fe\u7801\uff0c\u800c\u4e0d\u7528\u5b9e\u9645\u5378\u8f7d\u5b83\u3002\u5728\u94fe\u7801\u88ab\u6210\u529f\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u540e\uff0c\u94fe\u7801\u662f\u6d3b\u8dc3\u72b6\u6001(\u8fd0\u884c\u4e2d)\uff0c\u53ef\u4ee5\u901a\u8fc7  invoke \u4e8b\u52a1\u5904\u7406\u4e8b\u52a1\u3002\u94fe\u7801\u53ef\u4ee5\u5728\u5b89\u88c5\u540e\u591a\u6b21\u5347\u7ea7\uff08\u7248\u672c\u66f4\u65b0\uff09\u3002", 
            "title": "\u94fe\u7801\u751f\u547d\u5468\u671f"
        }, 
        {
            "location": "/chaincode_operators_zh/#_3", 
            "text": "\u94fe\u7801\u5305\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\n- \u94fe\u7801\uff0c\u5c31\u8c61\u5728 ChaincodeDeploymentSpec (\u7b80\u79f0CDS)\u4e2d\u5b9a\u4e49\u7684\u3002CDS\u901a\u8fc7code\u548c\u5176\u5b83\u5c5e\u6027(\u5982\u540d\u79f0\u548c\u7248\u672c)\u6765\u5b9a\u4e49\u94fe\u7801\u5305 \n- \u4e00\u4e2a\u53ef\u9009\u7684\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u80cc\u4e66\u7b56\u7565 \n- \u94fe\u7801\u201c\u62e5\u6709\u8005\u201d\uff08\u5b9e\u4f53\uff09\u7684\u4e00\u7ec4\u6570\u5b57\u7b7e\u540d    \u7b7e\u540d\u7528\u4e8e\u4ee5\u4e0b\u76ee\u7684\uff1a \n- \u5efa\u7acb\u94fe\u7801\u7684\u6240\u6709\u6743 \n- \u5141\u8bb8\u9a8c\u8bc1\u5305\u88f9\u7684\u5185\u5bb9 \n- \u5141\u8bb8\u68c0\u6d4b\u5305\u88f9\u7be1\u6539 \n\u94fe\u7801\u5b9e\u4f8b\u5316\u4e8b\u52a1\u7684\u521b\u5efa\u8005\u9700\u8981\u901a\u8fc7\u94fe\u7801\u7684\u5b9e\u4f8b\u5316\u7b56\u7565\u7684\u9a8c\u8bc1\u3002", 
            "title": "\u6253\u5305"
        }, 
        {
            "location": "/chaincode_operators_zh/#_4", 
            "text": "\u6709\u4e24\u4e2a\u65b9\u6cd5\u5bf9\u94fe\u7801\u6253\u5305\uff0c\u590d\u6742\u7684\u548c\u7b80\u5355\u7684\u3002\u5f53\u94fe\u7801\u5177\u6709\u591a\u4e2a\u62e5\u6709\u8005\u65f6\uff0c\u5b83\u9700\u8981\u88ab\u591a\u4e2a\u8eab\u4efd\u7b7e\u540d\u3002\u8fd9\u9700\u8981\u6211\u4eec\u9996\u5148\u5efa\u7acb\u4e00\u4e2a\u7b7e\u540d\u7684\u94fe\u7801\u5305( SignedCDS )\uff0c\u7136\u540e\u53d1\u7ed9\u5176\u4ed6\u62e5\u6709\u8005\u8fdb\u884c\u7b7e\u540d\u3002\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u6d41\u7a0b\u3002\n\u7b80\u5316\u6d41\u7a0b\u662f\uff0c\u5f53\u4f60\u90e8\u7f72\u7684SignedCDS\u53ea\u6709\u4e00\u4e2a\u7b7e\u540d\uff0c\u800c\u4e14\u7b7e\u540d\u8005\u5c31\u662f\u5b89\u88c5\u4e8b\u52a1\u7684\u53d1\u8d77\u8005\u3002\uff08\u5373\u5b89\u88c5\u4e00\u4e2a\u81ea\u5df1\u7b7e\u540d\u7684\u5305\u5230\u81ea\u5df1\u7684peer\uff09 \n\u5148\u8bb2\u590d\u6742\u6d41\u7a0b\u3002 \n\u521b\u5efa\u4e00\u4e2a\u7b7e\u540d\u7684\u94fe\u7801\u5305\uff0c\u9002\u7528\u4e0b\u5217\u547d\u4ee4\uff1a    $ peer chaincode package -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 -s -S -i  AND('OrgA.admin')  ccpack.out  -s \u9009\u9879\u8868\u793a\u521b\u5efa\u4e00\u4e2a\u591a\u62e5\u6709\u8005\u7b7e\u540d\u7684\u5305\uff0c\u5982\u679c\u4e0d\u52a0\u5c31\u7b80\u5355\u521b\u5efa\u4e00\u4e2a\u7eafCDS\u3002\u5f53\u6307\u5b9a\u4e86 -s \u9009\u9879\uff0c\u5982\u679c\u6709\u5176\u4ed6\u62e5\u6709\u8005\u9700\u8981\u7b7e\u540d\uff0c\u5219 -S  \u9009\u9879\u5fc5\u987b\u8bbe\u7f6e\u3002\u5426\u5219\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u4ec5\u5305\u542b\u5b9e\u4f8b\u5316\u7b56\u7565\u7684SignedCDS\u3002  -S \u9009\u9879\u4f7f\u5904\u7406\u6d41\u7a0b\u4f7f\u7528  core.yaml \u6587\u4ef6\u4e2d localMspid \u5c5e\u6027\u4e0b\u5b9a\u4e49\u7684MSP\u8eab\u4efd\u5bf9\u5305\u8fdb\u884c\u7b7e\u540d\u3002  -S \u9009\u9879\u4f7f\u53ef\u9009\u7684\u3002\u4f46\u5982\u679c\u4e00\u4e2a\u5305\u6ca1\u6709\u7b7e\u540d\uff0c\u5b83\u5c31\u4e0d\u80fd\u88ab\u5176\u4ed6\u62e5\u6709\u8005\u4f7f\u7528 signpackage \u547d\u4ee4\u8fdb\u884c\u7b7e\u540d\u3002  -i \u9009\u9879\u7528\u4e8e\u4e3a\u94fe\u7801\u6307\u5b9a\u5b9e\u4f8b\u5316\u7b56\u7565\u3002\u5b9e\u4f8b\u5316\u7b56\u7565\u4e0e\u80cc\u4e66\u7b56\u7565\u7684\u683c\u5f0f\u76f8\u540c\uff0c\u90fd\u662f\u6307\u5b9a\u54ea\u4e9b\u8eab\u4efd\u53ef\u4ee5\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u94fe\u7801\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ea\u6709 OrgA \u7684\u7ba1\u7406\u5458(admin)\u53ef\u4ee5\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u94fe\u7801\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u7b56\u7565\uff0c\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u7b56\u7565\uff0c\u5219\u53ea\u5141\u8bb8peer\u7684MSP\u7684\u7ba1\u7406\u5458\u8eab\u4efd\u53bb\u5b9e\u4f8b\u5316\u94fe\u7801\u3002", 
            "title": "\u5efa\u5305"
        }, 
        {
            "location": "/chaincode_operators_zh/#_5", 
            "text": "\u4e00\u4e2a\u521b\u5efa\u65f6\u7b7e\u540d\u7684\u94fe\u7801\u5305\u53ef\u4ee5\u88ab\u79fb\u4ea4\u7ed9\u5176\u4ed6\u62e5\u6709\u8005\u67e5\u770b\u548c\u7b7e\u540d\u3002\u6d41\u7a0b\u652f\u6301out-of-band\u5bf9\u94fe\u7801\u5305\u7b7e\u540d\u3002    ChaincodeDeploymentSpec \u53ef\u4ee5\u9009\u62e9\u88ab\u96c6\u4f53\u62e5\u6709\u8005\u7b7e\u540d\uff0c\u800c\u4ece\u521b\u5efa\u4e00\u4e2a SignedChaincodeDeploymentSpec (\u6216\u53ebSignedCDS)\u3002SignedCDS\u5305\u542b3\u4e2a\u5143\u7d20\uff1a \n 1. CDS\u5305\u542b\u7684\u94fe\u7801\u6e90\u7801\u3001\u540d\u79f0\u548c\u7248\u672c\u53f7\u3002 \n 2. \u4e00\u4e2a\u94fe\u7801\u7684\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u8868\u8ff0\u4e3a\u80cc\u4e66\u7b56\u7565\u3002 \n 3. \u94fe\u7801\u62e5\u6709\u8005\u5217\u8868\uff0c\u901a\u8fc7 \u80cc\u4e66 \u5b9a\u4e49\u3002      \u3010\u6ce8\u610f\u3011\uff1a\u5f53\u94fe\u7801\u5728\u4e00\u4e9b\u901a\u9053\u5b9e\u4f8b\u5316\u65f6\uff0c\u8fd9\u4e2a\u80cc\u4e66\u7b56\u7565\u901a\u8fc7out-of-band\u786e\u5b9aMSP\u8eab\u4efd\u3002\u5982\u679c\u5b9e\u4f8b\u5316\u7b56\u7565\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u7b56\u7565\u662f\u901a\u9053\u7684\u4efb\u4f55MSP\u7ba1\u7406\u5458\u3002     \u6bcf\u4e2a\u62e5\u6709\u8005\u90fd\u5bf9 ChaincodeDeploymentSpec \u8fdb\u884c\u80cc\u4e66\uff0c\u80cc\u4e66\u65b9\u6cd5\u662f\u5bf9CDS\u4e0e\u62e5\u6709\u8005\u8eab\u4efd\uff08\u5982\u8bc1\u4e66\uff09\u7684\u7ec4\u5408\u7ed3\u679c\u8fdb\u884c\u7b7e\u540d(\u7b97\u6cd5\uff1asign(ProposalResponse.payload + endorser))\u3002 \n\u4e00\u4e2a\u94fe\u7801\u62e5\u6709\u8005\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5bf9\u4ee5\u524d\u521b\u5efa\u7684\u7b7e\u540d\u5305\u8fdb\u884c\u7b7e\u540d\uff1a  $ peer chaincode signpackage ccpack.out signedccpack.out  ccpack.out \u548c signedccpack.out \u5206\u522b\u662f\u8f93\u5165\u5305\u548c\u8f93\u51fa\u5305\u3002 signedccpack.out \u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u5bf9\u5305\u7684\u65b0\u589e\u7b7e\u540d\uff0c\u7b7e\u540d\u4f7f\u7528\u4e86\u672c\u5730MSP\u3002", 
            "title": "\u5305\u7b7e\u540d"
        }, 
        {
            "location": "/chaincode_operators_zh/#_6", 
            "text": "\u5b89\u88c5( install )\u4e8b\u52a1\u6309\u89c4\u5b9a\u683c\u5f0f\u5bf9\u94fe\u7801\u7684\u6e90\u7801\u8fdb\u884c\u6253\u5305\uff0c\u8fd9\u4e2a\u683c\u5f0f\u79f0\u4e3a ChaincodeDeploymentSpec \uff08\u6216\u79f0CDS\uff09\uff0c\u8be5\u4e8b\u52a1\u5c06\u94fe\u7801\u5b89\u88c5\u5728\u5c06\u6765\u8981\u8fd0\u884c\u5b83\u7684peer\u8282\u70b9\u4e0a\u3002    \u3010\u6ce8\u610f\u3011\uff1a\u4f60\u5fc5\u987b\u5c06\u94fe\u7801\u5b89\u88c5\u5728\u8981\u8fd0\u884c\u94fe\u7801\u7684\u901a\u9053\u7684\u6bcf\u4e2a\u80cc\u4e66peer\u8282\u70b9\u4e0a\u3002     \u5f53 install API\u7b80\u5355\u7ed9\u4e88\u4e86\u4e00\u4e2a ChaincodeDeploymentSpec \uff0c\u5b83\u5c06\u4f7f\u7528\u9ed8\u8ba4\u5b9e\u4f8b\u5316\u7b56\u7565\u548c\u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u62e5\u6709\u8005\u5217\u8868\u3002    \u3010\u6ce8\u610f\u3011\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u94fe\u7801\u903b\u8f91\u5bf9\u7f51\u7edc\u4e0a\u7684\u5176\u4ed6\u6210\u5458\u4fdd\u5bc6\uff0c\u94fe\u7801\u53ea\u5b89\u88c5\u5728\u94fe\u7801\u62e5\u6709\u8005\u7684\u80cc\u4e66peer\u8282\u70b9\u4e0a\uff08\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u62e5\u6709\u8005\uff09\u3002\u54ea\u4e9b\u6ca1\u6709\u94fe\u7801\u7684\u6210\u5458\uff0c\u4e0d\u80fd\u662f\u94fe\u7801\u4e8b\u52a1\u7684\u80cc\u4e66\u8005\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u4e0d\u80fd\u6267\u884c\u94fe\u7801\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u4ecd\u7136\u53ef\u4ee5\u751f\u6548\u548c\u63d0\u4ea4\u4e8b\u52a1\u5230\u8d26\u672c\u3002     \u4e3a\u4e86\u5b89\u88c5\u94fe\u7801\uff0c\u53d1\u9001\u4e00\u4e2a SignedProposal \u5230 lifecycle system chaincode (LSCC)(LSCC\u4f1a\u5728 \u7cfb\u7edf\u94fe\u7801 \u4e00\u8282\u4e2d\u63cf\u8ff0)\u3002\u4f8b\u5982\uff0c\u4f7f\u7528CLI\u5b89\u88c5 sacc \u793a\u8303\u94fe\u7801\uff08\u524d\u6587\u5728\u201c\u94fe\u7801\u6559\u7a0b:\u94fe\u7801\u5f00\u53d1- \u8c03\u8bd5\u4e0e\u6d4b\u8bd5 \u201d\u4e00\u8282\u4e2d\u63cf\u8ff0\u8fc7\uff09\u7684\u547d\u4ee4\u5982\u4e0b\uff1a  $ peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0  CLI\u5185\u90e8\u4e3a sacc \u521b\u5efa\u4e00\u4e2a SignedChaincodeDeploymentSpec \uff0c\u5e76\u53d1\u9001\u5b83\u5230\u672c\u5730peer\uff0cpeer\u8c03\u7528LSCC\u4e0a\u7684 Install \u65b9\u6cd5\u3002 -p \u9009\u9879\u6307\u5b9a\u4e86\u94fe\u7801\u7684\u8def\u5f84\uff0c\u5b83\u5fc5\u987b\u4f4d\u4e8e\u7528\u6237 GOPATH \u7684\u6e90\u7801\u6811\u4e0a\uff0c\u5982 $GOPATH/src/sacc \u3002 CLI \u4e00\u8282\u6709\u8fd9\u4e2a\u547d\u4ee4\u9009\u9879\u7684\u8be6\u7ec6\u63cf\u8ff0\u3002 \n\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u5b89\u88c5\u5728peer\u4e0a\uff0cSignedProposal\u7684\u7b7e\u540d\u5fc5\u987b\u6765\u81eapeer\u7684\u672c\u5730MSP\u7ba1\u7406\u5458\u4e4b\u4e00\u3002", 
            "title": "\u5b89\u88c5\u94fe\u7801"
        }, 
        {
            "location": "/chaincode_operators_zh/#_7", 
            "text": "instantiate \u4e8b\u52a1\u8c03\u7528 lifecycle System Chaincode (LSCC)\u5728\u4e00\u4e2a\u901a\u9053\u4e0a\u521b\u5efa\u548c\u5b9e\u4f8b\u5316\u67d0\u4e2a\u94fe\u7801\u3002\u8fd9\u662f\u4e00\u4e2a\u94fe\u7801-\u901a\u9053\u7ed1\u5b9a\u8fc7\u7a0b\uff1a\u4e00\u4e2a\u94fe\u7801\u53ef\u4ee5\u7ed1\u5b9a\u5230\u4efb\u610f\u6570\u91cf\u7684\u901a\u9053\uff0c\u72ec\u7acb\u548c\u4e92\u4e0d\u4f9d\u8d56\u5730\u8fd0\u884c\u5728\u6bcf\u4e2a\u901a\u9053\u4e0a\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u65e0\u8bba\u94fe\u7801\u5728\u591a\u5c11\u4e2a\u5176\u4ed6\u901a\u9053\u4e0a\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\uff0c\u5bf9\u4e8e\u63d0\u4ea4\u4e8b\u52a1\u7684\u901a\u9053\u72b6\u6001\u662f\u9694\u79bb\u7684\u3002  instantiate \u4e8b\u52a1\u7684\u521b\u5efa\u8005\u5fc5\u987b\u6ee1\u8db3\u5305\u542b\u5728SignedCDS\u4e2d\u7684\u94fe\u7801\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u5fc5\u987b\u8fd8\u662f\u901a\u9053\u7684\u5199\u5165\u8005\uff08\u8fd9\u662f\u901a\u9053\u521b\u5efa\u65f6\u7684\u914d\u7f6e\u4e4b\u4e00\uff09\u3002\u8fd9\u5bf9\u4e8e\u901a\u9053\u5b89\u5168\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u963b\u6b62\u6076\u610f\u5b9e\u4f53\u90e8\u7f72\u94fe\u7801\u548c\u6b3a\u9a97\u6210\u5458\u6267\u884c\u975e\u7ed1\u5b9a\u901a\u9053\u7684\u94fe\u7801\u3002 \n\u4f8b\u5982\uff0c\u56de\u60f3\u4e00\u4e0b\uff0c\u9ed8\u8ba4\u5b9e\u4f8b\u5316\u7b56\u7565\u662f\u4efb\u4f55\u901a\u9053MSP\u7ba1\u7406\u5458\uff0c\u56e0\u6b64\u94fe\u7801\u5b9e\u4f8b\u5316\u4e8b\u52a1\u7684\u521b\u5efa\u8005\u5fc5\u987b\u662f\u901a\u9053\u7ba1\u7406\u5458\u7684\u6210\u5458\u3002\u4e8b\u52a1\u63d0\u8bae\u5230\u8fbe\u80cc\u4e66\u8005\u65f6\uff0c\u4f1a\u6839\u636e\u5b9e\u4f8b\u5316\u7b56\u7565\u9a8c\u8bc1\u521b\u5efa\u8005\u7684\u7b7e\u540d\u3002\u5728\u63d0\u4ea4\u5230\u8d26\u672c\u4e4b\u524d\uff0c\u5728\u4e8b\u52a1\u751f\u6548\u671f\u95f4\u518d\u6b21\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \n\u5b9e\u4f8b\u5316\u4e8b\u52a1\u8fd8\u4e3a\u901a\u9053\u4e0a\u7684\u94fe\u7801\u5efa\u7acb\u4e86\u80cc\u4e66\u7b56\u7565\u3002\u80cc\u4e66\u7b56\u7565\u63cf\u8ff0\u4e86\u4e8b\u52a1\u7ed3\u679c\u53ef\u4ee5\u88ab\u901a\u9053\u6210\u5458\u63a5\u53d7\u7684\u8bc1\u636e\u9700\u6c42\u3002 \n\u4f8b\u5982\uff0c\u4f7f\u7528CLI\u5b9e\u4f8b\u5316 sacc \u94fe\u7801\u548c\u7528 john \u548c 0 \u521d\u59cb\u5316\u72b6\u6001\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a  $ peer chaincode instantiate -n sacc -v 1.0 -c '{ Args :[ john , 0 ]}' -P  OR ('Org1.member','Org2.member')   \u3010\u6ce8\u610f\u3011\u4e0a\u9762\u7684\u80cc\u4e66\u7b56\u7565(CLI\u4f7f\u7528\u6ce2\u5170\u8bed\u8868\u793a\u6cd5)\uff0c\u6240\u6709\u7684 sacc \u4e8b\u52a1\u9700\u8981\u4e00\u4e2aOrg1\u6210\u5458\u6216Org2\u6210\u5458\u7684\u80cc\u4e66\u3002\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u4e8b\u52a1\u751f\u6548\uff0cOrg1\u6216Org2\u9700\u8981\u5bf9\u8c03\u7528(Invoke) sacc \u7684\u6267\u884c\u7ed3\u679c\u7b7e\u540d\u3002   \n\u5b9e\u4f8b\u5316\u6210\u529f\u540e\uff0c\u901a\u9053\u4e2d\u7684\u94fe\u7801\u8fdb\u5165\u6d3b\u52a8\u72b6\u6001\uff0c\u51c6\u5907\u597d\u5904\u7406\u4efb\u610f ENDORSER_TRANSACTION \u7c7b\u578b\u7684\u4e8b\u52a1\u63d0\u8bae\u3002\u5f53\u4e8b\u52a1\u5230\u8fbe\u80cc\u4e66peer\u65f6\uff0c\u5b83\u4eec\u4f1a\u88ab\u5e76\u53d1\u5904\u7406\u3002", 
            "title": "\u5b9e\u4f8b\u5316"
        }, 
        {
            "location": "/chaincode_operators_zh/#_8", 
            "text": "\u94fe\u7801\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u95f4\u66f4\u65b0\u7248\u672c\uff0c\u7248\u672c\u662fSignedCDS\u7684\u7ec4\u6210\u90e8\u5206\u3002SignedCDS\u7684\u5176\u5b83\u90e8\u5206\uff0c\u5982\u62e5\u6709\u8005\u548c\u5b9e\u4f8b\u5316\u7b56\u7565\u662f\u53ef\u9009\u9879\u3002\u7136\u800c\uff0c\u94fe\u7801\u540d\u79f0\u5fc5\u987b\u76f8\u540c\uff0c\u5426\u5219\u5b83\u4f1a\u88ab\u89c6\u4e3a\u5b8c\u5168\u4e0d\u540c\u7684\u94fe\u7801\u3002 \n\u7248\u672c\u66f4\u65b0\u524d\uff0c\u94fe\u7801\u7684\u65b0\u7248\u672c\u5fc5\u987b\u5df2\u7ecf\u5728\u80cc\u4e66\u8005\u8282\u70b9\u4e0a\u5b89\u88c5\u3002\u66f4\u65b0\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b9e\u4f8b\u5316\u7684\u4e8b\u52a1\uff0c\u5b83\u7ed1\u5b9a\u65b0\u7248\u672c\u7684\u94fe\u7801\u5230\u901a\u9053\u3002\u7ed1\u5b9a\u94fe\u7801\u65e7\u7248\u672c\u7684\u901a\u9053\u4ecd\u7136\u8fd0\u884c\u65e7\u7248\u672c\u3002\u8bdd\u53e5\u8bdd\u8bf4\uff0c upgrade \u4e8b\u52a1\u4ec5\u5f71\u54cd\u63d0\u4ea4\u4e86\u66f4\u65b0\u4e8b\u52a1\u7684\u901a\u9053\u3002    \u3010\u6ce8\u610f\u3011\uff0c\u7531\u4e8e\u94fe\u7801\u7684\u591a\u4e2a\u7248\u672c\u53ef\u80fd\u540c\u65f6\u6709\u6548\uff0c\u66f4\u65b0\u8fc7\u7a0b\u4e0d\u4f1a\u81ea\u52a8\u5220\u9664\u5c31\u7248\u672c\uff0c\u56e0\u6b64\u7528\u6237\u5fc5\u987b\u4e34\u65f6\u7ba1\u7406\u5b83\u3002     \u66f4\u65b0\u4e8b\u52a1\u8fd8\u662f\u4e0e instantiate \u4e8b\u52a1\u7531\u7ec6\u5fae\u7684\u4e0d\u540c\uff1a upgrade \u4e8b\u52a1\u68c0\u67e5\u5f53\u524d\u94fe\u7801\u5b9e\u4f8b\u5316\u7b56\u7565\uff0c\u4e0d\u662f\u65b0\u7b56\u7565(\u5982\u679c\u6307\u5b9a\u4e86\u7b56\u7565)\u3002\u8fd9\u786e\u4fdd\u4e86\u53ea\u6709\u5728\u5f53\u524d\u5b9e\u4f8b\u5316\u7b56\u7565\u4e2d\u5b58\u5728\u7684\u6210\u5458\u624d\u53ef\u4ee5\u66f4\u65b0\u94fe\u7801\u3002    \u3010\u6ce8\u610f\u3011\uff0c\u5728\u66f4\u65b0\u65f6\uff0c\u94fe\u7801\u7684 Init \u51fd\u6570\u5c06\u88ab\u8c03\u7528\u53bb\u6267\u884c\u76f8\u5173\u6570\u636e\u66f4\u65b0\u6216\u91cd\u65b0\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u94fe\u7801\u66f4\u65b0\u65f6\u8981\u5c0f\u5fc3\u907f\u514d\u91cd\u7f6e\u72b6\u6001\u3002", 
            "title": "\u7248\u672c\u66f4\u65b0"
        }, 
        {
            "location": "/chaincode_operators_zh/#_9", 
            "text": "\u6ce8\u610f stop \u548c start \u751f\u547d\u5468\u671f\u4e8b\u52a1\u8fd8\u6ca1\u6709\u88ab\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u624b\u5de5\u505c\u6b62\u94fe\u7801\uff0c\u529e\u6cd5\u662f\u4ece\u6bcf\u4e2a\u80cc\u4e66\u8005peer\u5220\u9664\u94fe\u7801\u5bb9\u5668\u548cSingedCDS\u5305\u3002\u5728\u6bcf\u4e2a\u8fd0\u884c\u80cc\u4e66peer\u8282\u70b9\u7684\u4e3b\u673a\u6216\u865a\u673a\u4e0a\u5220\u9664\u94fe\u7801\u5bb9\u5668\uff0c\u7136\u540e\u5220\u9664SignedCDS\u3002    (\u6ce8\u610f\uff0c\u4e3a\u4e86\u4ecepeer\u8282\u70b9\u5220\u9664CDS\uff0c\u4f60\u9700\u8981\u5148\u8fdb\u5165peer\u8282\u70b9\u7684\u5bb9\u5668\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u5e72\u8fd9\u4e2a\u7684\u5de5\u5177\u811a\u672c)\n$ docker rm -f  container id \n$ rm /var/hyperledger/production/chaincodes/ ccname : ccversion   \u505c\u6b62\u5728\u7528\u4e8e\u4ee5\u53d7\u63a7\u65b9\u5f0f\u8fdb\u884c\u5347\u7ea7\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u662f\u6709\u7528\u7684\uff0c\u5176\u4e2d\u94fe\u7801\u53ef\u4ee5\u5728\u53d1\u5e03\u5347\u7ea7\u4e4b\u524d\u5728\u6240\u6709peer\u7684\u4fe1\u9053\u4e0a\u505c\u6b62\u3002", 
            "title": "\u505c\u6b62\u548c\u542f\u52a8"
        }, 
        {
            "location": "/chaincode_operators_zh/#cli", 
            "text": "\u3010\u6ce8\u610f\u3011\uff1a\u6211\u4eec\u6b63\u5728\u8bc4\u4f30\u662f\u5426\u53d1\u5e03\u5e73\u53f0\u4e13\u5c5eHyperledger Fabric peer\u4e8c\u8fdb\u5236\u5305\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2adocker\u5bb9\u5668\u4e2d\u7b80\u5355\u8c03\u7528\u547d\u4ee4\u3002     \u4e3a\u4e86\u663e\u793a\u5f53\u524d\u53ef\u7528\u7684CLI\u547d\u4ee4\uff0c\u5728\u8fd0\u884c\u4e2d\u7684 fabric-peer Docker\u5bb9\u5668\u4e2d\u6267\u884c\u4e0b\u5217\u547d\u4ee4\uff1a  $ docker run -it hyperledger/fabric-peer bash\n(peer chaincode --help)  \u5b83\u5c06\u663e\u793a\u7c7b\u4f3c\u7684\u4ee5\u4e0b\u8f93\u51fa\uff1a  Usage:\n  peer chaincode [command]\n\nAvailable Commands:\n  install     Package the specified chaincode into a deployment spec and save it on the peer's path.\n  instantiate Deploy the specified chaincode to the network.\n  invoke      Invoke the specified chaincode.\n  list        Get the instantiated chaincodes on a channel or installed chaincodes on a peer.\n  package     Package the specified chaincode into a deployment spec.\n  query       Query using the specified chaincode.\n  signpackage Sign the specified chaincode package\n  upgrade     Upgrade chaincode.\n\nFlags:\n    --cafile string      Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint\n-h, --help               help for chaincode\n-o, --orderer string     Ordering service endpoint\n    --tls                Use TLS when communicating with the orderer endpoint\n    --transient string   Transient map of arguments in JSON encoding  \u4e3a\u4e86\u65b9\u4fbf\u5728\u811a\u672c\u5f0f\u5e94\u7528\u4e2d\u4f7f\u7528\uff0c peer \u547d\u4ee4\u5728\u5931\u8d25\u4e8b\u4ef6\u4e2d\u603b\u662f\u4ea7\u751f\u975e\u96f6\u7684\u8fd4\u56de\u7801\u3002 \n\u94fe\u7801\u547d\u4ee4\u7684\u4f8b\u5b50\uff1a    peer chaincode install -n mycc -v 0 -p path/to/my/chaincode/v0\npeer chaincode instantiate -n mycc -v 0 -c '{ Args :[ a ,  b ,  c ]}' -C mychannel\npeer chaincode install -n mycc -v 1 -p path/to/my/chaincode/v1\npeer chaincode upgrade -n mycc -v 1 -c '{ Args :[ d ,  e ,  f ]}' -C mychannel\npeer chaincode query -C mychannel -n mycc -c '{ Args :[ query , e ]}'\npeer chaincode invoke -o orderer.example.com:7050  --tls --cafile $ORDERER_CA -C mychannel -n mycc -c '{ Args :[ invoke , a , b , 10 ]}'", 
            "title": "CLI"
        }, 
        {
            "location": "/chaincode_operators_zh/#_10", 
            "text": "\u7cfb\u7edf\u94fe\u7801\u4e0e\u666e\u901a\u94fe\u7801\u5177\u6709\u76f8\u540c\u7684\u7f16\u7a0b\u6a21\u578b\uff0c\u77e5\u8bc6\u5b83\u8fd0\u884c\u5728peer\u8fdb\u7a0b\u4e2d\uff0c\u800c\u4e0d\u662f\u5728\u9694\u79bb\u7684\u5bb9\u5668\u4e2d\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u94fe\u7801\u6784\u5efa\u5728peer\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u5b83\u4e0d\u4f1a\u9075\u5faa\u4e0a\u8ff0\u540c\u6837\u7684\u751f\u547d\u5468\u671f\u3002\u7279\u522b\u662f\uff0c\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u548c\u7248\u672c\u66f4\u65b0\u4e0d\u4f1a\u7528\u5728\u7cfb\u7edf\u94fe\u7801\u4e0a\u3002 \n\u7cfb\u7edf\u94fe\u7801\u7684\u76ee\u7684\u662f\u51cf\u5c11peer\u548c\u94fe\u7801\u95f4gRPC\u901a\u4fe1\u6210\u672c\uff0c\u548c\u7ba1\u7406\u7075\u6d3b\u6027\u7684\u6298\u4e2d\u3002\u4f8b\u5982\uff0c\u7cfb\u7edf\u94fe\u7801\u53ea\u80fd\u4e0epeer\u7a0b\u5e8f\u4e00\u8d77\u66f4\u65b0\u3002\u5b83\u5fc5\u987b\u4ee5\u4e00\u5957\u56fa\u5b9a\u53c2\u6570\u6ce8\u518c\uff0c\u4e14\u4e0d\u80fd\u6709\u80cc\u4e66\u7b56\u7565\u6216\u80cc\u4e66\u7b56\u7565\u51fd\u6570\u3002 \nHyperledger Fabric\u4e2d\u4f7f\u7528\u7cfb\u7edf\u94fe\u4ee3\u7801\u6765\u5b9e\u73b0\u8bb8\u591a\u7cfb\u7edf\u884c\u4e3a\uff0c\u4ee5\u4fbf\u7cfb\u7edf\u96c6\u6210\u5546\u53ef\u4ee5\u6839\u636e\u9700\u8981\u66ff\u6362\u6216\u4fee\u6539\u5b83\u4eec\u3002 \n\u5f53\u524d\u7cfb\u7edf\u94fe\u7801\u7684\u5217\u8868\uff1a \n1.  LSCC  \u751f\u547d\u5468\u671f\u7cfb\u7edf\u94fe\u7801\uff0c\u5904\u7406\u4e0a\u8ff0\u7684\u751f\u547d\u5468\u671f\u8bf7\u6c42\u3002 \n2.  CSCC  \u914d\u7f6e\u7cfb\u7edf\u94fe\u7801\uff0c\u5904\u7406peer\u7aef\u7684\u901a\u9053\u914d\u7f6e\u3002 \n3.  QSCC  \u67e5\u8be2\u7cfb\u7edf\u94fe\u7801\uff0c\u63d0\u4f9b\u8d26\u672c\u67e5\u8be2API\uff0c\u4f8b\u5982\u83b7\u53d6\u533a\u5757\u548c\u4e8b\u52a1\u3002 \n4.  ESCC  \u80cc\u4e66\u7cfb\u7edf\u94fe\u7801\uff0c\u901a\u8fc7\u7b7e\u7f72\u4e8b\u52a1\u63d0\u8bae\u54cd\u5e94\u6765\u5904\u7406\u80cc\u4e66\u3002 \n5.  VSCC  \u751f\u6548\u7cfb\u7edf\u94fe\u7801\uff0c\u5904\u7406\u4e8b\u52a1\u751f\u6548\uff0c\u5305\u62ec\u68c0\u67e5\u80cc\u4e66\u7b56\u7565\u548c\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\u3002    \u66f4\u6539\u6216\u8986\u76d6\u8fd9\u4e9b\u7cfb\u7edf\u94fe\u7801\u8981\u5c0f\u5fc3\uff0c\u7279\u522b\u662fLSCC\u3001ESCC\u548cVSCC\uff0c\u56e0\u4e3a\u5b83\u4eec\u5904\u5728\u4e3b\u4e8b\u52a1\u7684\u8fd0\u884c\u8def\u5f84\u4e0a\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cVSCC\u5c06\u533a\u5757\u5c06\u63d0\u4ea4\u5230\u8d26\u672c\u4e4b\u524d\u7684\u751f\u6548\u9a8c\u8bc1\uff0c\u901a\u9053\u4e2d\u7684\u6240\u6709peer\u8ba1\u7b97\u76f8\u540c\u7684\u751f\u6548\u9a8c\u8bc1\u4ee5\u907f\u514d\u8d26\u672c\u5206\u6b67\uff08\u975e\u786e\u5b9a\u6027\uff09\u662f\u5f88\u91cd\u8981\u7684\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4fee\u6539\u6216\u66f4\u6362VSCC\uff0c\u9700\u8981\u7279\u522b\u5c0f\u5fc3\u3002", 
            "title": "\u7cfb\u7edf\u94fe\u7801"
        }, 
        {
            "location": "/msp_zh/", 
            "text": "\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005(MSP)\n\n\n\u539f\u6587\n\n\u672c\u6587\u63d0\u4f9b\u4e86\u6709\u5173MSP\u7684\u8bbe\u7f6e\u548c\u6700\u4f73\u5b9e\u8df5\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n\n\n\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u5546\uff08MSP\uff09\u662f\u4e00\u4e2a\u65e8\u5728\u63d0\u4f9b\u6210\u5458\u7ef4\u62a4\u4f53\u7cfb\u7ed3\u6784\u62bd\u8c61\u7684\u7ec4\u4ef6\u3002\n\n\n\u7279\u522b\u662f\uff0cMSP\u5c06\u53d1\u5e03\u548c\u9a8c\u8bc1\u8bc1\u4e66\u80cc\u540e\u7684\u6240\u6709\u5bc6\u7801\u5b66\u673a\u5236\u548c\u534f\u8bae\u4ee5\u53ca\u7528\u6237\u8ba4\u8bc1\u62bd\u8c61\u51fa\u6765\u3002MSP\u53ef\u4ee5\u5b9a\u4e49\u4ed6\u4eec\u81ea\u5df1\u7684\u8eab\u4efd\u6982\u5ff5\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u8eab\u4efd\u7ba1\u7406\uff08\u8eab\u4efd\u9a8c\u8bc1\uff09\u548c\u8ba4\u8bc1\uff08\u7b7e\u540d\u751f\u6210\u548c\u9a8c\u8bc1\uff09\u7684\u89c4\u5219\u3002\n\n\nHyperledger Fabric\u533a\u5757\u94fe\u7f51\u7edc\u53ef\u4ee5\u7531\u4e00\u4e2a\u6216\u591a\u4e2aMSP\u7ba1\u7406\u3002\u8fd9\u63d0\u4f9b\u4e86\u6210\u5458\u8d44\u683c\u7ef4\u62a4\u7684\u6a21\u5757\u5316\uff0c\u4ee5\u53ca\u8de8\u4e0d\u540c\u6210\u5458\u6807\u51c6\u548c\u4f53\u7cfb\u7ed3\u6784\u7684\u4e92\u64cd\u4f5c\u6027\u3002\n\n\n\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u7531Hyperledger Fabric\u652f\u6301\u7684MSP\u5b9e\u73b0\u7684\u8bbe\u7f6e\uff0c\u5e76\u8ba8\u8bba\u5173\u4e8e\u5176\u4f7f\u7528\u7684\u6700\u4f73\u5b9e\u8df5\u3002\n\n\nMSP\u914d\u7f6e\n\n\n\u8981\u521b\u5efa\u4e00\u4e2aMSP\u5b9e\u4f8b\uff0c\u9700\u8981\u5728\u6bcf\u4e2apeer\u548corderer\u7684\u672c\u5730\u6307\u5b9a\u5176\u914d\u7f6e\u3002\n\n\n\u5bf9\u4e8e\u6bcf\u4e2aMSP\uff0c\u4e3a\u4e86\u5728\u7f51\u7edc\u4e2d\u5f15\u7528\u5b83\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u540d\u79f0\uff08\u5982msp1\uff0corg2\u548corg3.divA\uff09\u3002\u8fd9\u662f\u4e00\u4e2a\u540d\u79f0\uff0c\u901a\u8fc7\u540d\u79f0\u4e00\u4e2aMSP\u7684\u6210\u5458\u89c4\u5219\u53ef\u4ee5\u8868\u73b0\u4e3a\u4e00\u4e2a\u8054\u76df\u3001\u7ec4\u7ec7\u6216\u7ec4\u7ec7\u5355\u5143(OU)\u5728\u901a\u9053\u4e2d\u88ab\u5f15\u7528\u3002\u8fd9\u8fd8\u88ab\u63cf\u8ff0\u4e3aMSP\u8eab\u4efd\u6216MSP ID\u3002MSP\u8eab\u4efd\u5728\u6bcf\u4e2aMSP\u5b9e\u4f8b\u4e2d\u5fc5\u987b\u552f\u4e00\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e24\u4e2aMSP\u7684\u5b9e\u4f8b\u5177\u6709\u76f8\u540c\u7684\u8eab\u4efd\u5728\u7cfb\u7edf\u901a\u9053\u521b\u4e16\u533a\u5757\u4e2d\u88ab\u68c0\u6d4b\u5230\uff0coderer\u7684\u5efa\u7acb\u4f1a\u5931\u8d25\u3002\n\n\nMSP\u7684\u9ed8\u8ba4\u5b9e\u73b0\u4e2d\uff0c\u9700\u8981\u6307\u5b9a\u4e00\u7ec4\u7528\u4e8e\u8eab\u4efd(\u8bc1\u4e66)\u9a8c\u8bc1\u548c\u7b7e\u540d\u9a8c\u8bc1\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u5728\nRFC5280\n\u4e2d\u63cf\u8ff0\u3002\u5305\u62ec\uff1a\n- \u4e00\u4e2a\u81ea\u7b7e\u540d(X.509)\u8bc1\u4e66\u5217\u8868\uff0c\u6784\u6210\u4e86\n\u4fe1\u4efb\u6839(root of trust)\n\n- \u4e00\u4e2a\u8868\u793a\u4e2d\u95f4CA\u7684X.509\u8bc1\u4e66\u5217\u8868\uff1b\u8fd9\u4e9b\u8fd9\u8bc1\u4e66\u5e94\u5f53\u88ab\n\u4fe1\u4efb\u6839\n\u7684\u67d0\u4e2a\u8bc1\u4e66\u6240\u8bc1\u660e(\u7b7e\u7f72)\uff1b\u4e2d\u95f4CA\u662f\u53ef\u9009\u53c2\u6570\n\n- \u4e00\u4e2aX.509\u8bc1\u4e66\u5217\u8868\uff0c\u8bc1\u4e66\u9a8c\u8bc1\u8def\u5f84\u5e94\u6b63\u786e\u5730\u6307\u5411\u67d0\u4e2a\u4fe1\u4efb\u6839\u8bc1\u4e66\uff0c\u5b83\u4ee3\u8868MSP\u7684\u7ba1\u7406\u5458\uff1b\u8fd9\u4e9b\u8bc1\u4e66\u7684\u62e5\u6709\u8005\u88ab\u6388\u6743\u53ef\u4ee5\u8bf7\u6c42\u53d8\u66f4\u8fd9\u4e2aMSP\u7684\u914d\u7f6e\uff08\u5982\u6839CA\u3001\u4e2d\u95f4CA\uff09\n\n- \u4e00\u4e2a\u7ec4\u7ec7\u5355\u5143(OU)\u5217\u8868\uff0c\u5b83\u4eec\u662f\u5e94\u8be5\u88ab\u5305\u542b\u5728X.509\u8bc1\u4e66\u4e2d\u8fd9\u4e2aMSP\u7684\u6709\u6548\u6210\u5458\uff1b\u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u914d\u7f6e\u53c2\u6570\uff0c\u4f8b\u5982\u53ef\u7528\u4e8e\uff0c\u591a\u4e2a\u7ec4\u7ec7\u5229\u7528\u540c\u4e00\u4e2a\u4fe1\u4efb\u6839\u6216\u4e2d\u95f4CA\uff0c\u5b83\u4eec\u4e3a\u6210\u5458\u4fdd\u7559\u4e86\u4e00\u4e2aOU\u5b57\u6bb5\u3002\n\n- \u4e00\u4e2a\u64a4\u9500\u8bc1\u4e66(CRL)\u5217\u8868\uff0c\u6bcf\u4e2a\u5bf9\u5e94\u4e86\u4e00\u4e2aMSP CA(\u6839\u6216\u4e2d\u95f4\u8bc1\u4e66)\uff1b\u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570 \n\n- \u4e00\u4e2a\u81ea\u7b7e\u540d\u8bc1\u4e66(X.509)\u5217\u8868\uff0c\u7ec4\u6210TLS\u8bc1\u4e66\u7684\u4fe1\u4efb\u6839\n\n- \u4e00\u4e2a\u4ee3\u8868\u4e2d\u95f4TLS CA\u7684X.509\u8bc1\u4e66\u5217\u8868\uff1b\u8fd9\u4e9b\u8bc1\u4e66\u5e94\u5f53\u88abTLS\u4fe1\u4efb\u6839\u7684\u67d0\u4e2a\u8bc1\u4e66\u8bc1\u660e\uff1b\u4e2d\u95f4CA\u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\u3002    \n\n\n\u5bf9\u4e8e\u8fd9\u4e2aMSP\u5b9e\u4f8b\u7684\u6709\u6548\u8eab\u4efd\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n- \u5b83\u4eec\u662fX.509\u683c\u5f0f\u8bc1\u4e66\uff0c\u5e26\u6765\u4e00\u4e2a\u53ef\u9a8c\u8bc1\u8bc1\u4e66\u8def\u5f84\u5230\u67d0\u4e2a\u4fe1\u4efb\u6839\u8bc1\u4e66\uff1b\n\n- \u5b83\u4eec\u6ca1\u6709\u5305\u542b\u5728\u4efb\u4f55CRL\u4e2d\uff1b\n\n- \u5b83\u4eec\u7684X.509\u8bc1\u4e66\u7ed3\u6784\u7684\nOU\n\u5b57\u6bb5\u88ab\u5b9a\u4e49\u5728MSP\u914d\u7f6e\u6587\u4ef6\u7684\u7ec4\u7ec7\u5355\u5143\u4e2d.  \n\n\n\u66f4\u591a\u5bf9\u4e8e\u5f53\u524dMSP\u5b9e\u73b0\u7684\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nMSP\u8eab\u4efd\u6709\u6548\u6027\u89c4\u5219\n\u3002  \n\n\n\u9664\u4e86\u4e0e\u9a8c\u8bc1\u76f8\u5173\u7684\u53c2\u6570\u4e4b\u5916\uff0c\u4e3a\u4e86\u4f7fMSP\u80fd\u591f\u5c06\u5176\u5b9e\u4f8b\u5316\u7684\u8282\u70b9\u7b7e\u540d\u6216\u8ba4\u8bc1\uff0c\u9700\u8981\u6307\u5b9a\uff1a\n- \u7528\u4e8e\u8282\u70b9\u7b7e\u540d\u7684\u7b7e\u540dkey(\u5f53\u524d\u4ec5\u652f\u6301ECDSA key)\n\n- \u8282\u70b9\u7684X.509\u8bc1\u4e66\uff0c\u8fd9\u5728MSP\u7684\u9a8c\u8bc1\u53c2\u6570\u4e2d\u662f\u4e00\u4e2a\u6709\u6548\u8eab\u4efd  \n\n\n\u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0cMSP\u8eab\u4efd\u6c38\u4e0d\u8fc7\u671f\uff1b\u4f60\u53ea\u80fd\u901a\u8fc7\u5c06\u8eab\u4efd\u52a0\u5165CRL\u6765\u53d6\u6d88\u5b83\u3002\u53e6\u5916\uff0c\u5f53\u524d\u4e0d\u652f\u6301TLS\u8bc1\u4e66\u7684\u5f3a\u5236\u64a4\u56de\u3002  \n\n\n\u600e\u6837\u751f\u6210MSP\u8bc1\u4e66\u548c\u5bc6\u94a5?\n\n\n\u751f\u6210X.509\u8bc1\u4e66\u4ee5\u63d0\u4f9b\u7ed9MSP\u914d\u7f6e\uff0c\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\nOpenssl\n\u3002\u6211\u4eec\u9700\u8981\u5f3a\u8c03\u7684\u662fHyperledger Fabric\u4e0d\u652f\u6301RSA\u5bc6\u94a5\u8bc1\u4e66\u3002\n\n\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528\ncryptogen\n\u5de5\u5177\uff0c\u5b83\u7684\u64cd\u4f5c\u5df2\u7ecf\u5728\n\u5feb\u901f\u5f00\u59cb\n\u4e2d\u89e3\u91ca\u8fc7\u3002\n\n\nHyperledger Fabric CA\n\u4e5f\u53ef\u4ee5\u751f\u6210\u914d\u7f6eMSP\u9700\u8981\u7684\u5bc6\u94a5\u548c\u8bc1\u4e66\u3002  \n\n\n\u5728peer\noderer\u7aef\u5efa\u7acbMSP\n\n\n\u4e3apeer\u6216oderer\u5efa\u7acb\u4e00\u4e2a\u672c\u5730MSP\uff0c\u7ba1\u7406\u5458\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939(\u5982\n$MY_PATH/mspconfig\n)\uff0c\u4e0b\u9762\u5305\u542b6\u4e2a\u5b50\u6587\u4ef6\u5939\u548c\u4e00\u4e2a\u6587\u4ef6\uff1a\n\n1. \u4e00\u4e2a\nadmincerts\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u7ba1\u7406\u5458\u8bc1\u4e66\n\n2. \u4e00\u4e2a\ncacerts\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u5230\u4e00\u4e2a\u6839CA\u8bc1\u4e66\n3. (\u53ef\u9009)\u4e00\u4e2a\nintermediatecerts\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u95f4CA\u8bc1\u4e66\n\n4. (\u53ef\u9009)\u4e00\u4e2a\nconfig.yaml\n\u6587\u4ef6\uff0c\u5305\u542b\u6240\u8003\u8651\u7684OU\u7684\u4fe1\u606f\uff1bOU\u4fe1\u606f\u88ab\u5b9a\u4e49\u5728\u4e00\u4e2a\u53eb\nOrganizationalUnitIdentifiers\n\u7684yaml\u6570\u7ec4\u6761\u76ee\u4e0b\u7684\u952e\u503c\u5bf9(\nCertificate, OrganizationalUnitIdentifier\n)\uff0c\u8fd9\u91cc\nCertificate\n\u662fCA\u8bc1\u4e66\u7684\u76f8\u5bf9\u8def\u5f84(\u6839\u6216\u4e2d\u95f4)\uff0c\u7528\u6765\u8bc1\u660e\u8fd9\u4e2a\u7ec4\u7ec7\u5355\u5143\u6210\u5458(\u5982\n. ./cacerts/cacert.pem\n)\uff0c\u800c\nOrganizationalUnitIdentifier\n\u8868\u793a\u51fa\u73b0\u5728X.509\u8bc1\u4e66\u4e2d\u7684OU\u5b57\u6bb5(\u4f8b\u5982\nCOP\n)\n\n5. (\u53ef\u9009)\u4e00\u4e2a\ncrls\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e86\u64a4\u9500\u8bc1\u4e66\u5217\u8868(CRL)\n\n6. \u4e00\u4e2a\nkeystore\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e00\u4e2aPEM\u6587\u4ef6\uff0c\u662f\u8282\u70b9\u7684\u7b7e\u540d\u5bc6\u94a5\uff1b\u518d\u6b21\u5f3a\u8c03\uff0c\u4e0d\u652f\u6301RSA\u5bc6\u94a5\n\n7. \u4e00\u4e2a\nsigncerts\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e00\u4e2aPEM\u6587\u4ef6\uff0c\u662f\u8282\u70b9\u7684X.509\u8bc1\u4e66\n\n8. (\u53ef\u9009)\u4e00\u4e2a\ntlscacerts\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5bf9\u5e94\u5230\u4e00\u4e2aTLS\u6839CA\u8bc1\u4e66\n\n9. (\u53ef\u9009)\u4e00\u4e2a\ntlsintermediatecerts\n\u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u95f4TLS CA\u8bc1\u4e66   \n\n\n\u5728\u8282\u70b9\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d(\u5bf9peer\u662fcore.yaml\uff0c\u5bf9orderer\u662forderer.yaml)\uff0c\u9700\u8981\u6307\u5b9a\u5230mspconfig\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff0c\u548c\u8282\u70b9MSP\u7684\u8eab\u4efd(Id)\u3002\u5230msconfig\u7684\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\nFABRIC_CFG_PATH\n\uff0c\u5bf9\u4e8epeer\u7531\u53c2\u6570\nmspConfigPath\n\u7684\u503c\u5b9a\u4e49\uff0c\u5bf9\u4e8eorderer\u7531\u53c2\u6570\nLocalMSPDir\n\u503c\u5b9a\u4e49\u3002\u8282\u70b9MSP\u7684\u8eab\u4efd\uff0c\u5bf9\u4e8epeer\u7531\u53c2\u6570\nlocalMspId\n\u7684\u503c\u5b9a\u4e49\uff0c\u5bf9\u4e8eorderer\u7531\u53c2\u6570\nLocalMSPID\n\u7684\u503c\u5b9a\u4e49\u3002\n\n\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u88ab\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff0c\u5bf9\u4e8epeer\u8282\u70b9\u7531\u524d\u7f00\u4e3aCORE\u7684\u73af\u5883\u53d8\u91cf\u8986\u76d6(\u5982CORE_PEER_LOCALMSPID)\uff0c\u5bf9\u4e8eorderer\u8282\u70b9\u7531\u524d\u7f00\u4e3aORDERER\u7684\u73af\u5883\u53d8\u91cf\u8986\u76d6(\u5982ORDERER_GENERAL_LOCALMSPID)\u3002\n\n\u6ce8\u610f\uff0c\u5bf9\u4e8e\u5efa\u7acborderer\uff0c\u9700\u8981\u751f\u6210\u548c\u63d0\u4f9b\u7cfb\u7edf\u901a\u9053\u7684\u521b\u4e16\u533a\u5757(genesis block)\u5230orderer\u8282\u70b9\u3002MSP\u914d\u7f6e\u5bf9\u8fd9\u4e2a\u533a\u5757\u7684\u9700\u6c42\u5728\u4e0b\u4e00\u8282\u8bb2\u5230\u3002\n\n\u91cd\u65b0\u914d\u7f6e\u4e00\u4e2a\u201c\u672c\u5730\u201dMSP\u53ea\u80fd\u624b\u5de5\u8fdb\u884c\uff0c\u9700\u8981peer\u548corderer\u8fdb\u7a0b\u91cd\u542f\u3002\u5728\u540e\u7eed\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u5728\u7ebf/\u52a8\u6001\u91cd\u65b0\u914d\u7f6e\uff08\u5373\u4f7f\u7528\u4e00\u4e2a\u7528\u8282\u70b9\u7ba1\u7406\u7cfb\u7edf\u94fe\u7801\u6765\u907f\u514d\u505c\u6b62\u8282\u70b9\uff09\u3002\n\n\n\u901a\u9053MSP\u5efa\u7acb\n\n\n\u5728\u521b\u5efa\u7cfb\u7edf\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u51fa\u73b0\u5728\u7f51\u7edc\u4e2d\u7684\u6240\u6709MSP\u7684\u9a8c\u8bc1\u53c2\u6570\uff0c\u5e76\u4e14\u5305\u62ec\u5728\u7cfb\u7edf\u901a\u9053\u7684\u521b\u4e16\u533a\u5757\u4e2d\u3002\u56de\u60f3\u4e00\u4e0b\u524d\u6587\u8bb2\u5230\u7684\u7ec4\u6210MSP\u8eab\u4efd\u7684MSP\u9a8c\u8bc1\u53c2\u6570\uff0c\u4fe1\u4efb\u8bc1\u4e66\u7684\u6839\u3001\u4e2d\u95f4CA\u548c\u7ba1\u7406\u5458\u8bc1\u4e66\uff0c\u8fd8\u6709OU\u89c4\u8303\u548cCRL\u3002\u7cfb\u7edf\u521b\u4e16\u533a\u5757\u88ab\u63d0\u4f9b\u7ed9orderer\uff08\u5728orderer\u7684\u521b\u5efa\u9636\u6bb5\uff09\uff0c\u5141\u8bb8\u5b83\u4eec\u8ba4\u8bc1\u901a\u9053\u521b\u5efa\u8bf7\u6c42\u3002\u5982\u679c\u533a\u5757\u5305\u62ec\u4e24\u4e2a\u76f8\u540c\u8eab\u4efd\u7684MSP\uff0coderer\u4f1a\u62d2\u7edd\uff0c\u4f7f\u7f51\u7edc\u81ea\u4e3e\u5931\u8d25\u3002\n\n\u5bf9\u4e8e\u5e94\u7528\u901a\u9053\uff0c\u901a\u9053\u7684\u521b\u4e16\u533a\u5757\u5305\u542b\u4e86\u7ba1\u7406\u901a\u9053\u7684MSP\u9a8c\u8bc1\u7ec4\u4ef6\u3002\u6211\u4eec\u5f3a\u8c03\u8fd9\u662f\n\u5e94\u7528\u7684\u8d23\u4efb\n\uff1a\u786e\u4fdd\u5728\u6307\u793a\u5176\u4e00\u4e2a\u6216\u591a\u4e2apeer\u52a0\u5165\u901a\u9053\u4e4b\u524d\uff0c\u901a\u9053\u7684\u521b\u4e16\u533a\u5757(\u6216\u6700\u65b0\u7684\u914d\u7f6e\u533a\u5757)\u4e2d\u5305\u542b\u4e86\u6b63\u786e\u7684MSP\u914d\u7f6e\u4fe1\u606f\u3002\n\n\u5728\u4f7f\u7528\nconfigtxgen\n\u5de5\u5177\u542f\u52a8\u4e00\u4e2a\u901a\u9053\u65f6\uff0c\u9700\u8981\u914d\u7f6e\u901a\u9053MSP\uff0c\u529e\u6cd5\u662f\u5c06MSP\u7684\u9a8c\u8bc1\u53c2\u6570\u5305\u542b\u5728\nmspconfig\n\u6587\u4ef6\u5939\uff0c\u6709\u5728\nconfigtx.yaml\n\u7684\u76f8\u5e94\u7ae0\u8282\u8bbe\u7f6e\u6587\u4ef6\u5939\u8def\u5f84\u3002\n\n\u91cd\u65b0\u914d\u7f6e\u901a\u9053\u7684MSP\uff0c\u5305\u62ecMSP\u7684CA\u66f4\u65b0CRL\u516c\u544a\uff0c\u901a\u8fc7MSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\u4e4b\u4e00\u7684\u6240\u6709\u8005\u521b\u5efa\nconfig_update\n\u5bf9\u8c61\u6765\u5b9e\u73b0\u3002\u7ba1\u7406\u5458\u7ba1\u7406\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u4f1a\u5c06\u8fd9\u4e2a\u66f4\u65b0\u5e7f\u64ad\u5230MSP\u51fa\u73b0\u7684\u901a\u9053\u4e2d\u3002  \n\n\n\u6700\u4f73\u5b9e\u8df5\n\n\n\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5728\u5e38\u89c1\u60c5\u51b5\u4e0bMSP\u914d\u7f6e\u7684\u6700\u4f73\u5b9e\u8df5\u3002  \n\n\n1)\u7ec4\u7ec7/\u516c\u53f8\u548cMSP\u4e4b\u95f4\u7684\u6620\u5c04\n\n\n\u6211\u4eec\u5efa\u8bae\u7ec4\u7ec7\u548cMSP\u4e4b\u95f4\u6709\u4e00\u5bf9\u4e00\u7684\u6620\u5c04\u3002\u5982\u679c\u9009\u62e9\u4e0d\u540c\u7684\u6620\u5c04\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u5219\u9700\u8981\u8003\u8651\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\u4e00\u4e2a\u7ec4\u7ec7\u91c7\u7528\u591a\u4e2aMSP\n\u3002\u8fd9\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u7ec4\u7ec7\u5305\u542b\u591a\u4e2a\u90e8\u95e8\u7684\u60c5\u51b5\uff0c\u6bcf\u4e2a\u90e8\u95e8\u5bf9\u5e94\u81ea\u5df1\u7684MSP\uff0c\u65e0\u8bba\u51fa\u4e8e\u7ba1\u7406\u72ec\u7acb\u6027\u539f\u56e0\u6216\u51fa\u4e8e\u9690\u79c1\u539f\u56e0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2apeer\u53ea\u80fd\u7531\u4e00\u4e2aMSP\u62e5\u6709\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u6765\u81ea\u5176\u4ed6MSP\u7684\u8eab\u4efd\u7684peer\u8bc6\u522b\u4e3a\u540c\u4e00\u7ec4\u7ec7\u7684peer\u3002\u5176\u542b\u4e49\u662f\uff0cpeer\u53ef\u4ee5\u4e0e\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5206\u652f\u7684peer\u5206\u4eab\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4e0e\u7ec4\u7ec7\u7684\u5168\u90e8peer\u5206\u4eab\u6570\u636e\u3002  \n\n\n\u591a\u4e2a\u7ec4\u7ec7\u4f7f\u7528\u5355\u4e2aMSP\n\u3002\u8fd9\u5bf9\u5e94\u4e8e\u5177\u6709\u76f8\u4f3c\u6210\u5458\u7ba1\u7406\u67b6\u6784\u7684\u591a\u7ec4\u7ec7\u8054\u76df\u7684\u60c5\u51b5\u3002\u8fd9\u91cc\u9700\u8981\u77e5\u9053\u7684\u662f\uff0cpeer\u5c06\u7ec4\u7ec7\u8303\u56f4\u7684\u6d88\u606f\u4f20\u64ad\u7ed9\u5177\u6709\u540c\u4e00MSP\u4e0b\u7684peer\uff0c\u800c\u4e0d\u7ba1\u4ed6\u4eec\u662f\u5426\u5c5e\u4e8e\u76f8\u540c\u7684\u5b9e\u9645\u7ec4\u7ec7\u3002\u8fd9\u662fMSP\u5b9a\u4e49\u548c/\u6216peer\u914d\u7f6e\u7c92\u5ea6\u7684\u9650\u5236\u3002\n\n\n\n\n2)\u4e00\u4e2a\u7ec4\u7ec7\u6709\u4e0d\u540c\u7684\u90e8\u95e8\uff08\u53c8\u53eb\u7ec4\u7ec7\u5355\u5143\uff09\uff0c \u5e0c\u671b\u6388\u4e88\u4ed6\u4eec\u5bf9\u4e0d\u540c\u901a\u9053\u7684\u8bbf\u95ee\u6743\u9650\u3002\n\n\n\u6709\u4e24\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u4e2a\u60c5\u51b5\uff1a\n\n\n\n\n\u5b9a\u4e49\u4e00\u4e2aMSP\u6765\u5bb9\u7eb3\u6240\u6709\u7ec4\u7ec7\u6210\u5458\u7684\u6210\u5458\u8d44\u683c\n\u3002\u8be5MSP\u7684\u914d\u7f6e\u5c06\u5305\u62ec\u6839CA\uff0c\u4e2d\u95f4CA\u548c\u7ba1\u7406\u5458\u8bc1\u4e66\u7684\u5217\u8868; \u6210\u5458\u8eab\u4efdid\u5c06\u5305\u62ec\u6210\u5458\u6240\u5c5e\u7684\u7ec4\u7ec7\u5355\u4f4d(\nOU\n)\u3002\u7136\u540e\u53ef\u4ee5\u5b9a\u4e49\u7b56\u7565\u6765\u6355\u83b7\u5177\u4f53\u7684\u6210\u5458OU\uff0c\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u6784\u6210\u901a\u9053\u7684\u8bfb/\u5199\u7b56\u7565\u6216\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u5c40\u9650\u6027\u662f\uff0cgossip peer\u4f1a\u628a\u672c\u5730MSP\u4e0b\u7684\u6210\u5458\u8eab\u4efd\u540c\u884c\u89c6\u4e3a\u540c\u4e00\u7ec4\u7ec7\u7684\u6210\u5458\uff0c\u5e76\u56e0\u6b64\u4f1a\u4e0e\u5b83\u4eec\u9891\u7e41gossip\u7ec4\u7ec7\u8303\u56f4\u7684\u6570\u636e\uff08\u4f8b\u5982\u4ed6\u4eec\u7684\u72b6\u6001\uff09\u3002  \n\n\n\u5b9a\u4e49\u4e00\u4e2aMSP\u6765\u4ee3\u8868\u6bcf\u4e2a\u90e8\u95e8\n\u3002\u8fd9\u5c06\u5bfc\u81f4\u4e3a\u6bcf\u4e2a\u90e8\u95e8\u6307\u5b9a\u6839CA\uff0c\u4e2d\u95f4CA\u548c\u7ba1\u7406\u5458\u8bc1\u4e66\u7684\u4e00\u7ec4\u8bc1\u4e66\uff0c\u4ece\u800c\u4e0d\u5b58\u5728\u8de8MSP\u7684\u8bc1\u4e66\u8def\u5f84\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4f8b\u5982\uff0c\u6bcf\u4e2a\u90e8\u95e8\u90fd\u9700\u8981\u5efa\u7acb\u72ec\u7acb\u7684\u4e2d\u95f4CA\u3002\u8fd9\u91cc\u7684\u7f3a\u70b9\u662f\u7ba1\u7406\u591a\u4e2aMSP\u800c\u4e0d\u662f\u4e00\u4e2a\uff0c\u4f46\u662f\u8fd9\u6837\u89c4\u907f\u4e86\u4ee5\u524d\u65b9\u6cd5\u4e2d\u5b58\u5728\u7684\u95ee\u9898\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5229\u7528MSP\u914d\u7f6e\u7684OU\u6269\u5c55\u6765\u4e3a\u6bcf\u4e2a\u90e8\u95e8\u5b9a\u4e49\u4e00\u4e2aMSP\u3002\n\n\n\n\n3)\u5c06\u5ba2\u6237\u7aef\u4e0e\u540c\u4e00\u7ec4\u7ec7\u7684peer\u5206\u5f00\u3002\n\n\n\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u8eab\u4efd\u7684\u201c\u7c7b\u578b\u201d\u53ef\u4ee5\u4ece\u8eab\u4efd\u672c\u8eab\u4e2d\u83b7\u53d6\uff08\u4f8b\u5982\uff0c\u53ef\u80fd\u9700\u8981\u80cc\u4e66\u4fdd\u8bc1\u7531peer\u83b7\u5f97\uff0c\u800c\u4e0d\u662f\u5ba2\u6237\u7aef\u6216\u8005\u4ec5\u4f5c\u4e3aorderer\u7684\u8282\u70b9\uff09\u3002\n\n\n\u5bf9\u8fd9\u4e9b\u9700\u6c42\u7684\u652f\u6301\u6709\u9650\u3002\n\n\n\u4e00\u79cd\u5206\u5f00\u7684\u65b9\u6cd5\u662f\u4e3a\u6bcf\u79cd\u8282\u70b9\u7c7b\u578b\u521b\u5efa\u5355\u72ec\u7684\u4e2d\u95f4CA\n\u4e00\u4e2a\u7528\u4e8e\u5ba2\u6237\u7aef\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8epeer/orderer; \u5e76\u914d\u7f6e\u4e24\u4e2a\u4e0d\u540c\u7684MSP - \u4e00\u4e2a\u7528\u4e8e\u5ba2\u6237\u7aef\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8epeer/orderer\u3002\u8fd9\u4e2a\u7ec4\u7ec7\u5e94\u8be5\u8bbf\u95ee\u7684\u901a\u9053\u5c06\u9700\u8981\u5305\u62ec\u4e24\u4e2aMSP\uff0c\u800c\u80cc\u4e66\u7b56\u7565\u5c06\u53ea\u4f7f\u7528\u6307\u5411peer\u7684MSP\u3002\u8fd9\u6700\u7ec8\u4f1a\u5bfc\u81f4\u7ec4\u7ec7\u88ab\u6620\u5c04\u5230\u4e24\u4e2aMSP\u5b9e\u4f8b\uff0c\u5e76\u4e14\u4f1a\u5bf9peer\u548c\u5ba2\u6237\u7aef\u7684\u4ea4\u4e92\u65b9\u5f0f\u4ea7\u751f\u4e00\u5b9a\u7684\u5f71\u54cd\u3002\n\n\n\u7531\u4e8e\u540c\u4e00\u7ec4\u7ec7\u7684\u6240\u6709peer\u4ecd\u7136\u5c5e\u4e8e\u4e00\u4e2aMSP\uff0c\u6240\u4ee5gossip\u4e0d\u4f1a\u53d7\u5230\u4e25\u91cd\u7684\u5f71\u54cd\u3002peer\u53ef\u4ee5\u5c06\u67d0\u4e9b\u7cfb\u7edf\u94fe\u7801\u7684\u6267\u884c\u9650\u5236\u5728\u672c\u5730\u57fa\u4e8eMSP\u7684\u7b56\u7565\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u7531\u672c\u5730MSP\uff08\u53ea\u80fd\u662f\u5ba2\u6237\u7aef\uff09\u7684\u7ba1\u7406\u5458\u7b7e\u540d\uff08\u6700\u7ec8\u7528\u6237\u5e94\u8be5\u4f4d\u4e8e\u8bf7\u6c42\u7684\u8d77\u6e90\u5904\uff09\uff0c\u90a3\u4e48peer\u53ea\u4f1a\u6267\u884c\u201cjoinChannel\u201d\u8bf7\u6c42\u3002\u5982\u679c\u6211\u4eec\u63a5\u53d7\u4f5c\u4e3apeer/ordererMSP\u6210\u5458\u7684\u552f\u4e00\u5ba2\u6237\u5c06\u662f\u8be5MSP\u7684\u7ba1\u7406\u5458\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u79cd\u4e0d\u4e00\u81f4\u3002\n\n\n\u8fd9\u79cd\u65b9\u6cd5\u8981\u8003\u8651\u7684\u53e6\u4e00\u70b9\u662f\uff0cpeer\u6839\u636e\u5176\u672c\u5730MSP\u4e2d\u8bf7\u6c42\u53d1\u8d77\u8005\u7684\u6210\u5458\u8d44\u683c\u6765\u6388\u6743\u4e8b\u4ef6\u6ce8\u518c\u8bf7\u6c42\u3002\u663e\u7136\uff0c\u7531\u4e8e\u8bf7\u6c42\u7684\u53d1\u8d77\u8005\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u6240\u4ee5\u8bf7\u6c42\u59cb\u53d1\u8005\u603b\u662f\u80af\u5b9a\u4e0e\u6240\u8bf7\u6c42\u7684peer\u5c5e\u4e8e\u4e0d\u540c\u7684MSP\uff0c\u5e76\u4e14peer\u5c06\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002\n\n\n4)\u7ba1\u7406\u5458\u548cCA\u8bc1\u4e66\u3002\n\n\n\u5c06MSP\u7ba1\u7406\u5458\u8bc1\u4e66\u8bbe\u7f6e\u4e3a\u4e0eMSP\u6839\u4fe1\u4efb\u6216\u4e2d\u95f4CA\u7684\u4efb\u4f55\u8bc1\u4e66\u4e0d\u540c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u5c06\u6210\u5458\u8eab\u4efd\u7ec4\u4ef6\u7684\u7ba1\u7406\u804c\u8d23\u4e0e\u9881\u53d1\u65b0\u8bc1\u4e66\u548c(\u6216)\u9a8c\u8bc1\u73b0\u6709\u8bc1\u4e66\u7684\u804c\u8d23\u5206\u5f00\uff0c\u662f\u5e38\u89c1\uff08\u5b89\u5168\uff09\u505a\u6cd5\u3002\n\n\n5)\u5c06\u4e2d\u95f4CA\u5217\u5165\u9ed1\u540d\u5355\u3002\n\n\n\u5982\u524d\u6240\u8ff0\uff0c\u901a\u8fc7\u91cd\u65b0\u914d\u7f6e\u673a\u5236\u6765\u5b9e\u73b0MSP\u7684\u91cd\u65b0\u914d\u7f6e\uff08\u5bf9\u672c\u5730MSP\u5b9e\u4f8b\u7684\u624b\u52a8\u91cd\u65b0\u914d\u7f6e\uff0c\u53ca\u901a\u8fc7\u5bf9\u901a\u9053\u7684MSP\u5b9e\u4f8b\u6784\u5efa\u9002\u5f53\u7684\nconfig_update\n\u6d88\u606f\uff09\u3002\u663e\u7136\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u5728MSP\u4e2d\u8003\u8651\u7684\u4e2d\u95f4CA\u4e0d\u518d\u7528\u4e8eMSP\u7684\u8eab\u4efd\u9a8c\u8bc1\uff1a\n\n\n\n\n\u5c06MSP\u91cd\u65b0\u914d\u7f6e\uff0c\u5728\u53ef\u4fe1\u4e2d\u95f4CA\u8bc1\u4e66\u5217\u8868\u4e2d\u7684\u5220\u9664\u67d0\u4e9b\u4e2d\u95f4\u8bc1\u4e66\u3002\u5bf9\u4e8e\u672c\u5730\u914d\u7f6e\u7684MSP\uff0c\u8fd9\u610f\u5473\u7740\u8be5CA\u7684\u8bc1\u4e66\u5c06\u4ece\u8be5\nintermediatecerts\n\u6587\u4ef6\u5939\u4e2d\u5220\u9664\u3002  \n\n\n\u91cd\u65b0\u914d\u7f6eMSP\uff0c\u5305\u542b\u4e00\u4e2a\u7531\u4fe1\u4efb\u6839\u4ea7\u751f\u7684CRL\uff0c\u8be5CRL\u5305\u542b\u63d0\u5230\u7684\u4e2d\u95f4CA\u7684\u8bc1\u4e66\u3002  \n\n\n\n\n\u5728\u5f53\u524d\u7684MSP\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u53ea\u652f\u6301\u65b9\u6cd5(1)\uff0c\u56e0\u4e3a\u5b83\u66f4\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u5c06\u4e0d\u518d\u8003\u8651\u7684\u4e2d\u95f4CA\u5217\u5165\u9ed1\u540d\u5355\u3002\n\n\n6)CA\u548cTLS CA\n\n\nMSP\u8eab\u4efd\u7684\u6839CA\u548cMSP TLS\u8bc1\u4e66\u7684\u6839CA\uff08\u548c\u76f8\u5173\u7684\u4e2d\u95f4CA\uff09\u9700\u8981\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u4e2d\u58f0\u660e\u3002\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u4e0d\u540c\u7c7b\u522b\u8bc1\u4e66\u4e4b\u95f4\u7684\u6df7\u6dc6\u3002\u4e0d\u7981\u6b62\u4e3aMSP\u8eab\u4efd\u548cTLS\u8bc1\u4e66\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684CA\uff0c\u4f46\u662f\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae\u5728\u751f\u4ea7\u4e2d\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002", 
            "title": "MSP"
        }, 
        {
            "location": "/msp_zh/#msp", 
            "text": "\u539f\u6587 \n\u672c\u6587\u63d0\u4f9b\u4e86\u6709\u5173MSP\u7684\u8bbe\u7f6e\u548c\u6700\u4f73\u5b9e\u8df5\u7684\u8be6\u7ec6\u4fe1\u606f\u3002  \u6210\u5458\u670d\u52a1\u63d0\u4f9b\u5546\uff08MSP\uff09\u662f\u4e00\u4e2a\u65e8\u5728\u63d0\u4f9b\u6210\u5458\u7ef4\u62a4\u4f53\u7cfb\u7ed3\u6784\u62bd\u8c61\u7684\u7ec4\u4ef6\u3002  \u7279\u522b\u662f\uff0cMSP\u5c06\u53d1\u5e03\u548c\u9a8c\u8bc1\u8bc1\u4e66\u80cc\u540e\u7684\u6240\u6709\u5bc6\u7801\u5b66\u673a\u5236\u548c\u534f\u8bae\u4ee5\u53ca\u7528\u6237\u8ba4\u8bc1\u62bd\u8c61\u51fa\u6765\u3002MSP\u53ef\u4ee5\u5b9a\u4e49\u4ed6\u4eec\u81ea\u5df1\u7684\u8eab\u4efd\u6982\u5ff5\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u8eab\u4efd\u7ba1\u7406\uff08\u8eab\u4efd\u9a8c\u8bc1\uff09\u548c\u8ba4\u8bc1\uff08\u7b7e\u540d\u751f\u6210\u548c\u9a8c\u8bc1\uff09\u7684\u89c4\u5219\u3002  Hyperledger Fabric\u533a\u5757\u94fe\u7f51\u7edc\u53ef\u4ee5\u7531\u4e00\u4e2a\u6216\u591a\u4e2aMSP\u7ba1\u7406\u3002\u8fd9\u63d0\u4f9b\u4e86\u6210\u5458\u8d44\u683c\u7ef4\u62a4\u7684\u6a21\u5757\u5316\uff0c\u4ee5\u53ca\u8de8\u4e0d\u540c\u6210\u5458\u6807\u51c6\u548c\u4f53\u7cfb\u7ed3\u6784\u7684\u4e92\u64cd\u4f5c\u6027\u3002  \u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u7531Hyperledger Fabric\u652f\u6301\u7684MSP\u5b9e\u73b0\u7684\u8bbe\u7f6e\uff0c\u5e76\u8ba8\u8bba\u5173\u4e8e\u5176\u4f7f\u7528\u7684\u6700\u4f73\u5b9e\u8df5\u3002", 
            "title": "\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005(MSP)"
        }, 
        {
            "location": "/msp_zh/#msp_1", 
            "text": "\u8981\u521b\u5efa\u4e00\u4e2aMSP\u5b9e\u4f8b\uff0c\u9700\u8981\u5728\u6bcf\u4e2apeer\u548corderer\u7684\u672c\u5730\u6307\u5b9a\u5176\u914d\u7f6e\u3002  \u5bf9\u4e8e\u6bcf\u4e2aMSP\uff0c\u4e3a\u4e86\u5728\u7f51\u7edc\u4e2d\u5f15\u7528\u5b83\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u540d\u79f0\uff08\u5982msp1\uff0corg2\u548corg3.divA\uff09\u3002\u8fd9\u662f\u4e00\u4e2a\u540d\u79f0\uff0c\u901a\u8fc7\u540d\u79f0\u4e00\u4e2aMSP\u7684\u6210\u5458\u89c4\u5219\u53ef\u4ee5\u8868\u73b0\u4e3a\u4e00\u4e2a\u8054\u76df\u3001\u7ec4\u7ec7\u6216\u7ec4\u7ec7\u5355\u5143(OU)\u5728\u901a\u9053\u4e2d\u88ab\u5f15\u7528\u3002\u8fd9\u8fd8\u88ab\u63cf\u8ff0\u4e3aMSP\u8eab\u4efd\u6216MSP ID\u3002MSP\u8eab\u4efd\u5728\u6bcf\u4e2aMSP\u5b9e\u4f8b\u4e2d\u5fc5\u987b\u552f\u4e00\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e24\u4e2aMSP\u7684\u5b9e\u4f8b\u5177\u6709\u76f8\u540c\u7684\u8eab\u4efd\u5728\u7cfb\u7edf\u901a\u9053\u521b\u4e16\u533a\u5757\u4e2d\u88ab\u68c0\u6d4b\u5230\uff0coderer\u7684\u5efa\u7acb\u4f1a\u5931\u8d25\u3002  MSP\u7684\u9ed8\u8ba4\u5b9e\u73b0\u4e2d\uff0c\u9700\u8981\u6307\u5b9a\u4e00\u7ec4\u7528\u4e8e\u8eab\u4efd(\u8bc1\u4e66)\u9a8c\u8bc1\u548c\u7b7e\u540d\u9a8c\u8bc1\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u5728 RFC5280 \u4e2d\u63cf\u8ff0\u3002\u5305\u62ec\uff1a\n- \u4e00\u4e2a\u81ea\u7b7e\u540d(X.509)\u8bc1\u4e66\u5217\u8868\uff0c\u6784\u6210\u4e86 \u4fe1\u4efb\u6839(root of trust) \n- \u4e00\u4e2a\u8868\u793a\u4e2d\u95f4CA\u7684X.509\u8bc1\u4e66\u5217\u8868\uff1b\u8fd9\u4e9b\u8fd9\u8bc1\u4e66\u5e94\u5f53\u88ab \u4fe1\u4efb\u6839 \u7684\u67d0\u4e2a\u8bc1\u4e66\u6240\u8bc1\u660e(\u7b7e\u7f72)\uff1b\u4e2d\u95f4CA\u662f\u53ef\u9009\u53c2\u6570 \n- \u4e00\u4e2aX.509\u8bc1\u4e66\u5217\u8868\uff0c\u8bc1\u4e66\u9a8c\u8bc1\u8def\u5f84\u5e94\u6b63\u786e\u5730\u6307\u5411\u67d0\u4e2a\u4fe1\u4efb\u6839\u8bc1\u4e66\uff0c\u5b83\u4ee3\u8868MSP\u7684\u7ba1\u7406\u5458\uff1b\u8fd9\u4e9b\u8bc1\u4e66\u7684\u62e5\u6709\u8005\u88ab\u6388\u6743\u53ef\u4ee5\u8bf7\u6c42\u53d8\u66f4\u8fd9\u4e2aMSP\u7684\u914d\u7f6e\uff08\u5982\u6839CA\u3001\u4e2d\u95f4CA\uff09 \n- \u4e00\u4e2a\u7ec4\u7ec7\u5355\u5143(OU)\u5217\u8868\uff0c\u5b83\u4eec\u662f\u5e94\u8be5\u88ab\u5305\u542b\u5728X.509\u8bc1\u4e66\u4e2d\u8fd9\u4e2aMSP\u7684\u6709\u6548\u6210\u5458\uff1b\u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u914d\u7f6e\u53c2\u6570\uff0c\u4f8b\u5982\u53ef\u7528\u4e8e\uff0c\u591a\u4e2a\u7ec4\u7ec7\u5229\u7528\u540c\u4e00\u4e2a\u4fe1\u4efb\u6839\u6216\u4e2d\u95f4CA\uff0c\u5b83\u4eec\u4e3a\u6210\u5458\u4fdd\u7559\u4e86\u4e00\u4e2aOU\u5b57\u6bb5\u3002 \n- \u4e00\u4e2a\u64a4\u9500\u8bc1\u4e66(CRL)\u5217\u8868\uff0c\u6bcf\u4e2a\u5bf9\u5e94\u4e86\u4e00\u4e2aMSP CA(\u6839\u6216\u4e2d\u95f4\u8bc1\u4e66)\uff1b\u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570  \n- \u4e00\u4e2a\u81ea\u7b7e\u540d\u8bc1\u4e66(X.509)\u5217\u8868\uff0c\u7ec4\u6210TLS\u8bc1\u4e66\u7684\u4fe1\u4efb\u6839 \n- \u4e00\u4e2a\u4ee3\u8868\u4e2d\u95f4TLS CA\u7684X.509\u8bc1\u4e66\u5217\u8868\uff1b\u8fd9\u4e9b\u8bc1\u4e66\u5e94\u5f53\u88abTLS\u4fe1\u4efb\u6839\u7684\u67d0\u4e2a\u8bc1\u4e66\u8bc1\u660e\uff1b\u4e2d\u95f4CA\u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\u3002      \u5bf9\u4e8e\u8fd9\u4e2aMSP\u5b9e\u4f8b\u7684\u6709\u6548\u8eab\u4efd\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n- \u5b83\u4eec\u662fX.509\u683c\u5f0f\u8bc1\u4e66\uff0c\u5e26\u6765\u4e00\u4e2a\u53ef\u9a8c\u8bc1\u8bc1\u4e66\u8def\u5f84\u5230\u67d0\u4e2a\u4fe1\u4efb\u6839\u8bc1\u4e66\uff1b \n- \u5b83\u4eec\u6ca1\u6709\u5305\u542b\u5728\u4efb\u4f55CRL\u4e2d\uff1b \n- \u5b83\u4eec\u7684X.509\u8bc1\u4e66\u7ed3\u6784\u7684 OU \u5b57\u6bb5\u88ab\u5b9a\u4e49\u5728MSP\u914d\u7f6e\u6587\u4ef6\u7684\u7ec4\u7ec7\u5355\u5143\u4e2d.    \u66f4\u591a\u5bf9\u4e8e\u5f53\u524dMSP\u5b9e\u73b0\u7684\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 MSP\u8eab\u4efd\u6709\u6548\u6027\u89c4\u5219 \u3002    \u9664\u4e86\u4e0e\u9a8c\u8bc1\u76f8\u5173\u7684\u53c2\u6570\u4e4b\u5916\uff0c\u4e3a\u4e86\u4f7fMSP\u80fd\u591f\u5c06\u5176\u5b9e\u4f8b\u5316\u7684\u8282\u70b9\u7b7e\u540d\u6216\u8ba4\u8bc1\uff0c\u9700\u8981\u6307\u5b9a\uff1a\n- \u7528\u4e8e\u8282\u70b9\u7b7e\u540d\u7684\u7b7e\u540dkey(\u5f53\u524d\u4ec5\u652f\u6301ECDSA key) \n- \u8282\u70b9\u7684X.509\u8bc1\u4e66\uff0c\u8fd9\u5728MSP\u7684\u9a8c\u8bc1\u53c2\u6570\u4e2d\u662f\u4e00\u4e2a\u6709\u6548\u8eab\u4efd    \u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0cMSP\u8eab\u4efd\u6c38\u4e0d\u8fc7\u671f\uff1b\u4f60\u53ea\u80fd\u901a\u8fc7\u5c06\u8eab\u4efd\u52a0\u5165CRL\u6765\u53d6\u6d88\u5b83\u3002\u53e6\u5916\uff0c\u5f53\u524d\u4e0d\u652f\u6301TLS\u8bc1\u4e66\u7684\u5f3a\u5236\u64a4\u56de\u3002", 
            "title": "MSP\u914d\u7f6e"
        }, 
        {
            "location": "/msp_zh/#msp_2", 
            "text": "\u751f\u6210X.509\u8bc1\u4e66\u4ee5\u63d0\u4f9b\u7ed9MSP\u914d\u7f6e\uff0c\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528 Openssl \u3002\u6211\u4eec\u9700\u8981\u5f3a\u8c03\u7684\u662fHyperledger Fabric\u4e0d\u652f\u6301RSA\u5bc6\u94a5\u8bc1\u4e66\u3002 \n\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528 cryptogen \u5de5\u5177\uff0c\u5b83\u7684\u64cd\u4f5c\u5df2\u7ecf\u5728 \u5feb\u901f\u5f00\u59cb \u4e2d\u89e3\u91ca\u8fc7\u3002  Hyperledger Fabric CA \u4e5f\u53ef\u4ee5\u751f\u6210\u914d\u7f6eMSP\u9700\u8981\u7684\u5bc6\u94a5\u548c\u8bc1\u4e66\u3002", 
            "title": "\u600e\u6837\u751f\u6210MSP\u8bc1\u4e66\u548c\u5bc6\u94a5?"
        }, 
        {
            "location": "/msp_zh/#peeroderermsp", 
            "text": "\u4e3apeer\u6216oderer\u5efa\u7acb\u4e00\u4e2a\u672c\u5730MSP\uff0c\u7ba1\u7406\u5458\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939(\u5982 $MY_PATH/mspconfig )\uff0c\u4e0b\u9762\u5305\u542b6\u4e2a\u5b50\u6587\u4ef6\u5939\u548c\u4e00\u4e2a\u6587\u4ef6\uff1a \n1. \u4e00\u4e2a admincerts \u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u7ba1\u7406\u5458\u8bc1\u4e66 \n2. \u4e00\u4e2a cacerts \u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u5230\u4e00\u4e2a\u6839CA\u8bc1\u4e66\n3. (\u53ef\u9009)\u4e00\u4e2a intermediatecerts \u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u95f4CA\u8bc1\u4e66 \n4. (\u53ef\u9009)\u4e00\u4e2a config.yaml \u6587\u4ef6\uff0c\u5305\u542b\u6240\u8003\u8651\u7684OU\u7684\u4fe1\u606f\uff1bOU\u4fe1\u606f\u88ab\u5b9a\u4e49\u5728\u4e00\u4e2a\u53eb OrganizationalUnitIdentifiers \u7684yaml\u6570\u7ec4\u6761\u76ee\u4e0b\u7684\u952e\u503c\u5bf9( Certificate, OrganizationalUnitIdentifier )\uff0c\u8fd9\u91cc Certificate \u662fCA\u8bc1\u4e66\u7684\u76f8\u5bf9\u8def\u5f84(\u6839\u6216\u4e2d\u95f4)\uff0c\u7528\u6765\u8bc1\u660e\u8fd9\u4e2a\u7ec4\u7ec7\u5355\u5143\u6210\u5458(\u5982 . ./cacerts/cacert.pem )\uff0c\u800c OrganizationalUnitIdentifier \u8868\u793a\u51fa\u73b0\u5728X.509\u8bc1\u4e66\u4e2d\u7684OU\u5b57\u6bb5(\u4f8b\u5982 COP ) \n5. (\u53ef\u9009)\u4e00\u4e2a crls \u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e86\u64a4\u9500\u8bc1\u4e66\u5217\u8868(CRL) \n6. \u4e00\u4e2a keystore \u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e00\u4e2aPEM\u6587\u4ef6\uff0c\u662f\u8282\u70b9\u7684\u7b7e\u540d\u5bc6\u94a5\uff1b\u518d\u6b21\u5f3a\u8c03\uff0c\u4e0d\u652f\u6301RSA\u5bc6\u94a5 \n7. \u4e00\u4e2a signcerts \u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e00\u4e2aPEM\u6587\u4ef6\uff0c\u662f\u8282\u70b9\u7684X.509\u8bc1\u4e66 \n8. (\u53ef\u9009)\u4e00\u4e2a tlscacerts \u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5bf9\u5e94\u5230\u4e00\u4e2aTLS\u6839CA\u8bc1\u4e66 \n9. (\u53ef\u9009)\u4e00\u4e2a tlsintermediatecerts \u6587\u4ef6\u5939\uff0c\u5305\u542b\u51e0\u4e2aPEM\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u95f4TLS CA\u8bc1\u4e66     \u5728\u8282\u70b9\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d(\u5bf9peer\u662fcore.yaml\uff0c\u5bf9orderer\u662forderer.yaml)\uff0c\u9700\u8981\u6307\u5b9a\u5230mspconfig\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff0c\u548c\u8282\u70b9MSP\u7684\u8eab\u4efd(Id)\u3002\u5230msconfig\u7684\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e FABRIC_CFG_PATH \uff0c\u5bf9\u4e8epeer\u7531\u53c2\u6570 mspConfigPath \u7684\u503c\u5b9a\u4e49\uff0c\u5bf9\u4e8eorderer\u7531\u53c2\u6570 LocalMSPDir \u503c\u5b9a\u4e49\u3002\u8282\u70b9MSP\u7684\u8eab\u4efd\uff0c\u5bf9\u4e8epeer\u7531\u53c2\u6570 localMspId \u7684\u503c\u5b9a\u4e49\uff0c\u5bf9\u4e8eorderer\u7531\u53c2\u6570 LocalMSPID \u7684\u503c\u5b9a\u4e49\u3002 \n\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u88ab\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff0c\u5bf9\u4e8epeer\u8282\u70b9\u7531\u524d\u7f00\u4e3aCORE\u7684\u73af\u5883\u53d8\u91cf\u8986\u76d6(\u5982CORE_PEER_LOCALMSPID)\uff0c\u5bf9\u4e8eorderer\u8282\u70b9\u7531\u524d\u7f00\u4e3aORDERER\u7684\u73af\u5883\u53d8\u91cf\u8986\u76d6(\u5982ORDERER_GENERAL_LOCALMSPID)\u3002 \n\u6ce8\u610f\uff0c\u5bf9\u4e8e\u5efa\u7acborderer\uff0c\u9700\u8981\u751f\u6210\u548c\u63d0\u4f9b\u7cfb\u7edf\u901a\u9053\u7684\u521b\u4e16\u533a\u5757(genesis block)\u5230orderer\u8282\u70b9\u3002MSP\u914d\u7f6e\u5bf9\u8fd9\u4e2a\u533a\u5757\u7684\u9700\u6c42\u5728\u4e0b\u4e00\u8282\u8bb2\u5230\u3002 \n\u91cd\u65b0\u914d\u7f6e\u4e00\u4e2a\u201c\u672c\u5730\u201dMSP\u53ea\u80fd\u624b\u5de5\u8fdb\u884c\uff0c\u9700\u8981peer\u548corderer\u8fdb\u7a0b\u91cd\u542f\u3002\u5728\u540e\u7eed\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u5728\u7ebf/\u52a8\u6001\u91cd\u65b0\u914d\u7f6e\uff08\u5373\u4f7f\u7528\u4e00\u4e2a\u7528\u8282\u70b9\u7ba1\u7406\u7cfb\u7edf\u94fe\u7801\u6765\u907f\u514d\u505c\u6b62\u8282\u70b9\uff09\u3002", 
            "title": "\u5728peer&amp;oderer\u7aef\u5efa\u7acbMSP"
        }, 
        {
            "location": "/msp_zh/#msp_3", 
            "text": "\u5728\u521b\u5efa\u7cfb\u7edf\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u51fa\u73b0\u5728\u7f51\u7edc\u4e2d\u7684\u6240\u6709MSP\u7684\u9a8c\u8bc1\u53c2\u6570\uff0c\u5e76\u4e14\u5305\u62ec\u5728\u7cfb\u7edf\u901a\u9053\u7684\u521b\u4e16\u533a\u5757\u4e2d\u3002\u56de\u60f3\u4e00\u4e0b\u524d\u6587\u8bb2\u5230\u7684\u7ec4\u6210MSP\u8eab\u4efd\u7684MSP\u9a8c\u8bc1\u53c2\u6570\uff0c\u4fe1\u4efb\u8bc1\u4e66\u7684\u6839\u3001\u4e2d\u95f4CA\u548c\u7ba1\u7406\u5458\u8bc1\u4e66\uff0c\u8fd8\u6709OU\u89c4\u8303\u548cCRL\u3002\u7cfb\u7edf\u521b\u4e16\u533a\u5757\u88ab\u63d0\u4f9b\u7ed9orderer\uff08\u5728orderer\u7684\u521b\u5efa\u9636\u6bb5\uff09\uff0c\u5141\u8bb8\u5b83\u4eec\u8ba4\u8bc1\u901a\u9053\u521b\u5efa\u8bf7\u6c42\u3002\u5982\u679c\u533a\u5757\u5305\u62ec\u4e24\u4e2a\u76f8\u540c\u8eab\u4efd\u7684MSP\uff0coderer\u4f1a\u62d2\u7edd\uff0c\u4f7f\u7f51\u7edc\u81ea\u4e3e\u5931\u8d25\u3002 \n\u5bf9\u4e8e\u5e94\u7528\u901a\u9053\uff0c\u901a\u9053\u7684\u521b\u4e16\u533a\u5757\u5305\u542b\u4e86\u7ba1\u7406\u901a\u9053\u7684MSP\u9a8c\u8bc1\u7ec4\u4ef6\u3002\u6211\u4eec\u5f3a\u8c03\u8fd9\u662f \u5e94\u7528\u7684\u8d23\u4efb \uff1a\u786e\u4fdd\u5728\u6307\u793a\u5176\u4e00\u4e2a\u6216\u591a\u4e2apeer\u52a0\u5165\u901a\u9053\u4e4b\u524d\uff0c\u901a\u9053\u7684\u521b\u4e16\u533a\u5757(\u6216\u6700\u65b0\u7684\u914d\u7f6e\u533a\u5757)\u4e2d\u5305\u542b\u4e86\u6b63\u786e\u7684MSP\u914d\u7f6e\u4fe1\u606f\u3002 \n\u5728\u4f7f\u7528 configtxgen \u5de5\u5177\u542f\u52a8\u4e00\u4e2a\u901a\u9053\u65f6\uff0c\u9700\u8981\u914d\u7f6e\u901a\u9053MSP\uff0c\u529e\u6cd5\u662f\u5c06MSP\u7684\u9a8c\u8bc1\u53c2\u6570\u5305\u542b\u5728 mspconfig \u6587\u4ef6\u5939\uff0c\u6709\u5728 configtx.yaml \u7684\u76f8\u5e94\u7ae0\u8282\u8bbe\u7f6e\u6587\u4ef6\u5939\u8def\u5f84\u3002 \n\u91cd\u65b0\u914d\u7f6e\u901a\u9053\u7684MSP\uff0c\u5305\u62ecMSP\u7684CA\u66f4\u65b0CRL\u516c\u544a\uff0c\u901a\u8fc7MSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\u4e4b\u4e00\u7684\u6240\u6709\u8005\u521b\u5efa config_update \u5bf9\u8c61\u6765\u5b9e\u73b0\u3002\u7ba1\u7406\u5458\u7ba1\u7406\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u4f1a\u5c06\u8fd9\u4e2a\u66f4\u65b0\u5e7f\u64ad\u5230MSP\u51fa\u73b0\u7684\u901a\u9053\u4e2d\u3002", 
            "title": "\u901a\u9053MSP\u5efa\u7acb"
        }, 
        {
            "location": "/msp_zh/#_1", 
            "text": "\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5728\u5e38\u89c1\u60c5\u51b5\u4e0bMSP\u914d\u7f6e\u7684\u6700\u4f73\u5b9e\u8df5\u3002", 
            "title": "\u6700\u4f73\u5b9e\u8df5"
        }, 
        {
            "location": "/msp_zh/#1msp", 
            "text": "\u6211\u4eec\u5efa\u8bae\u7ec4\u7ec7\u548cMSP\u4e4b\u95f4\u6709\u4e00\u5bf9\u4e00\u7684\u6620\u5c04\u3002\u5982\u679c\u9009\u62e9\u4e0d\u540c\u7684\u6620\u5c04\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u5219\u9700\u8981\u8003\u8651\u4ee5\u4e0b\u5185\u5bb9\uff1a   \u4e00\u4e2a\u7ec4\u7ec7\u91c7\u7528\u591a\u4e2aMSP \u3002\u8fd9\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u7ec4\u7ec7\u5305\u542b\u591a\u4e2a\u90e8\u95e8\u7684\u60c5\u51b5\uff0c\u6bcf\u4e2a\u90e8\u95e8\u5bf9\u5e94\u81ea\u5df1\u7684MSP\uff0c\u65e0\u8bba\u51fa\u4e8e\u7ba1\u7406\u72ec\u7acb\u6027\u539f\u56e0\u6216\u51fa\u4e8e\u9690\u79c1\u539f\u56e0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2apeer\u53ea\u80fd\u7531\u4e00\u4e2aMSP\u62e5\u6709\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u6765\u81ea\u5176\u4ed6MSP\u7684\u8eab\u4efd\u7684peer\u8bc6\u522b\u4e3a\u540c\u4e00\u7ec4\u7ec7\u7684peer\u3002\u5176\u542b\u4e49\u662f\uff0cpeer\u53ef\u4ee5\u4e0e\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5206\u652f\u7684peer\u5206\u4eab\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4e0e\u7ec4\u7ec7\u7684\u5168\u90e8peer\u5206\u4eab\u6570\u636e\u3002    \u591a\u4e2a\u7ec4\u7ec7\u4f7f\u7528\u5355\u4e2aMSP \u3002\u8fd9\u5bf9\u5e94\u4e8e\u5177\u6709\u76f8\u4f3c\u6210\u5458\u7ba1\u7406\u67b6\u6784\u7684\u591a\u7ec4\u7ec7\u8054\u76df\u7684\u60c5\u51b5\u3002\u8fd9\u91cc\u9700\u8981\u77e5\u9053\u7684\u662f\uff0cpeer\u5c06\u7ec4\u7ec7\u8303\u56f4\u7684\u6d88\u606f\u4f20\u64ad\u7ed9\u5177\u6709\u540c\u4e00MSP\u4e0b\u7684peer\uff0c\u800c\u4e0d\u7ba1\u4ed6\u4eec\u662f\u5426\u5c5e\u4e8e\u76f8\u540c\u7684\u5b9e\u9645\u7ec4\u7ec7\u3002\u8fd9\u662fMSP\u5b9a\u4e49\u548c/\u6216peer\u914d\u7f6e\u7c92\u5ea6\u7684\u9650\u5236\u3002", 
            "title": "1)\u7ec4\u7ec7/\u516c\u53f8\u548cMSP\u4e4b\u95f4\u7684\u6620\u5c04"
        }, 
        {
            "location": "/msp_zh/#2", 
            "text": "\u6709\u4e24\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u4e2a\u60c5\u51b5\uff1a   \u5b9a\u4e49\u4e00\u4e2aMSP\u6765\u5bb9\u7eb3\u6240\u6709\u7ec4\u7ec7\u6210\u5458\u7684\u6210\u5458\u8d44\u683c \u3002\u8be5MSP\u7684\u914d\u7f6e\u5c06\u5305\u62ec\u6839CA\uff0c\u4e2d\u95f4CA\u548c\u7ba1\u7406\u5458\u8bc1\u4e66\u7684\u5217\u8868; \u6210\u5458\u8eab\u4efdid\u5c06\u5305\u62ec\u6210\u5458\u6240\u5c5e\u7684\u7ec4\u7ec7\u5355\u4f4d( OU )\u3002\u7136\u540e\u53ef\u4ee5\u5b9a\u4e49\u7b56\u7565\u6765\u6355\u83b7\u5177\u4f53\u7684\u6210\u5458OU\uff0c\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u6784\u6210\u901a\u9053\u7684\u8bfb/\u5199\u7b56\u7565\u6216\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u5c40\u9650\u6027\u662f\uff0cgossip peer\u4f1a\u628a\u672c\u5730MSP\u4e0b\u7684\u6210\u5458\u8eab\u4efd\u540c\u884c\u89c6\u4e3a\u540c\u4e00\u7ec4\u7ec7\u7684\u6210\u5458\uff0c\u5e76\u56e0\u6b64\u4f1a\u4e0e\u5b83\u4eec\u9891\u7e41gossip\u7ec4\u7ec7\u8303\u56f4\u7684\u6570\u636e\uff08\u4f8b\u5982\u4ed6\u4eec\u7684\u72b6\u6001\uff09\u3002    \u5b9a\u4e49\u4e00\u4e2aMSP\u6765\u4ee3\u8868\u6bcf\u4e2a\u90e8\u95e8 \u3002\u8fd9\u5c06\u5bfc\u81f4\u4e3a\u6bcf\u4e2a\u90e8\u95e8\u6307\u5b9a\u6839CA\uff0c\u4e2d\u95f4CA\u548c\u7ba1\u7406\u5458\u8bc1\u4e66\u7684\u4e00\u7ec4\u8bc1\u4e66\uff0c\u4ece\u800c\u4e0d\u5b58\u5728\u8de8MSP\u7684\u8bc1\u4e66\u8def\u5f84\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4f8b\u5982\uff0c\u6bcf\u4e2a\u90e8\u95e8\u90fd\u9700\u8981\u5efa\u7acb\u72ec\u7acb\u7684\u4e2d\u95f4CA\u3002\u8fd9\u91cc\u7684\u7f3a\u70b9\u662f\u7ba1\u7406\u591a\u4e2aMSP\u800c\u4e0d\u662f\u4e00\u4e2a\uff0c\u4f46\u662f\u8fd9\u6837\u89c4\u907f\u4e86\u4ee5\u524d\u65b9\u6cd5\u4e2d\u5b58\u5728\u7684\u95ee\u9898\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5229\u7528MSP\u914d\u7f6e\u7684OU\u6269\u5c55\u6765\u4e3a\u6bcf\u4e2a\u90e8\u95e8\u5b9a\u4e49\u4e00\u4e2aMSP\u3002", 
            "title": "2)\u4e00\u4e2a\u7ec4\u7ec7\u6709\u4e0d\u540c\u7684\u90e8\u95e8\uff08\u53c8\u53eb\u7ec4\u7ec7\u5355\u5143\uff09\uff0c \u5e0c\u671b\u6388\u4e88\u4ed6\u4eec\u5bf9\u4e0d\u540c\u901a\u9053\u7684\u8bbf\u95ee\u6743\u9650\u3002"
        }, 
        {
            "location": "/msp_zh/#3peer", 
            "text": "\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u8eab\u4efd\u7684\u201c\u7c7b\u578b\u201d\u53ef\u4ee5\u4ece\u8eab\u4efd\u672c\u8eab\u4e2d\u83b7\u53d6\uff08\u4f8b\u5982\uff0c\u53ef\u80fd\u9700\u8981\u80cc\u4e66\u4fdd\u8bc1\u7531peer\u83b7\u5f97\uff0c\u800c\u4e0d\u662f\u5ba2\u6237\u7aef\u6216\u8005\u4ec5\u4f5c\u4e3aorderer\u7684\u8282\u70b9\uff09\u3002  \u5bf9\u8fd9\u4e9b\u9700\u6c42\u7684\u652f\u6301\u6709\u9650\u3002  \u4e00\u79cd\u5206\u5f00\u7684\u65b9\u6cd5\u662f\u4e3a\u6bcf\u79cd\u8282\u70b9\u7c7b\u578b\u521b\u5efa\u5355\u72ec\u7684\u4e2d\u95f4CA \u4e00\u4e2a\u7528\u4e8e\u5ba2\u6237\u7aef\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8epeer/orderer; \u5e76\u914d\u7f6e\u4e24\u4e2a\u4e0d\u540c\u7684MSP - \u4e00\u4e2a\u7528\u4e8e\u5ba2\u6237\u7aef\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8epeer/orderer\u3002\u8fd9\u4e2a\u7ec4\u7ec7\u5e94\u8be5\u8bbf\u95ee\u7684\u901a\u9053\u5c06\u9700\u8981\u5305\u62ec\u4e24\u4e2aMSP\uff0c\u800c\u80cc\u4e66\u7b56\u7565\u5c06\u53ea\u4f7f\u7528\u6307\u5411peer\u7684MSP\u3002\u8fd9\u6700\u7ec8\u4f1a\u5bfc\u81f4\u7ec4\u7ec7\u88ab\u6620\u5c04\u5230\u4e24\u4e2aMSP\u5b9e\u4f8b\uff0c\u5e76\u4e14\u4f1a\u5bf9peer\u548c\u5ba2\u6237\u7aef\u7684\u4ea4\u4e92\u65b9\u5f0f\u4ea7\u751f\u4e00\u5b9a\u7684\u5f71\u54cd\u3002  \u7531\u4e8e\u540c\u4e00\u7ec4\u7ec7\u7684\u6240\u6709peer\u4ecd\u7136\u5c5e\u4e8e\u4e00\u4e2aMSP\uff0c\u6240\u4ee5gossip\u4e0d\u4f1a\u53d7\u5230\u4e25\u91cd\u7684\u5f71\u54cd\u3002peer\u53ef\u4ee5\u5c06\u67d0\u4e9b\u7cfb\u7edf\u94fe\u7801\u7684\u6267\u884c\u9650\u5236\u5728\u672c\u5730\u57fa\u4e8eMSP\u7684\u7b56\u7565\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u7531\u672c\u5730MSP\uff08\u53ea\u80fd\u662f\u5ba2\u6237\u7aef\uff09\u7684\u7ba1\u7406\u5458\u7b7e\u540d\uff08\u6700\u7ec8\u7528\u6237\u5e94\u8be5\u4f4d\u4e8e\u8bf7\u6c42\u7684\u8d77\u6e90\u5904\uff09\uff0c\u90a3\u4e48peer\u53ea\u4f1a\u6267\u884c\u201cjoinChannel\u201d\u8bf7\u6c42\u3002\u5982\u679c\u6211\u4eec\u63a5\u53d7\u4f5c\u4e3apeer/ordererMSP\u6210\u5458\u7684\u552f\u4e00\u5ba2\u6237\u5c06\u662f\u8be5MSP\u7684\u7ba1\u7406\u5458\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u79cd\u4e0d\u4e00\u81f4\u3002  \u8fd9\u79cd\u65b9\u6cd5\u8981\u8003\u8651\u7684\u53e6\u4e00\u70b9\u662f\uff0cpeer\u6839\u636e\u5176\u672c\u5730MSP\u4e2d\u8bf7\u6c42\u53d1\u8d77\u8005\u7684\u6210\u5458\u8d44\u683c\u6765\u6388\u6743\u4e8b\u4ef6\u6ce8\u518c\u8bf7\u6c42\u3002\u663e\u7136\uff0c\u7531\u4e8e\u8bf7\u6c42\u7684\u53d1\u8d77\u8005\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u6240\u4ee5\u8bf7\u6c42\u59cb\u53d1\u8005\u603b\u662f\u80af\u5b9a\u4e0e\u6240\u8bf7\u6c42\u7684peer\u5c5e\u4e8e\u4e0d\u540c\u7684MSP\uff0c\u5e76\u4e14peer\u5c06\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002", 
            "title": "3)\u5c06\u5ba2\u6237\u7aef\u4e0e\u540c\u4e00\u7ec4\u7ec7\u7684peer\u5206\u5f00\u3002"
        }, 
        {
            "location": "/msp_zh/#4ca", 
            "text": "\u5c06MSP\u7ba1\u7406\u5458\u8bc1\u4e66\u8bbe\u7f6e\u4e3a\u4e0eMSP\u6839\u4fe1\u4efb\u6216\u4e2d\u95f4CA\u7684\u4efb\u4f55\u8bc1\u4e66\u4e0d\u540c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u5c06\u6210\u5458\u8eab\u4efd\u7ec4\u4ef6\u7684\u7ba1\u7406\u804c\u8d23\u4e0e\u9881\u53d1\u65b0\u8bc1\u4e66\u548c(\u6216)\u9a8c\u8bc1\u73b0\u6709\u8bc1\u4e66\u7684\u804c\u8d23\u5206\u5f00\uff0c\u662f\u5e38\u89c1\uff08\u5b89\u5168\uff09\u505a\u6cd5\u3002", 
            "title": "4)\u7ba1\u7406\u5458\u548cCA\u8bc1\u4e66\u3002"
        }, 
        {
            "location": "/msp_zh/#5ca", 
            "text": "\u5982\u524d\u6240\u8ff0\uff0c\u901a\u8fc7\u91cd\u65b0\u914d\u7f6e\u673a\u5236\u6765\u5b9e\u73b0MSP\u7684\u91cd\u65b0\u914d\u7f6e\uff08\u5bf9\u672c\u5730MSP\u5b9e\u4f8b\u7684\u624b\u52a8\u91cd\u65b0\u914d\u7f6e\uff0c\u53ca\u901a\u8fc7\u5bf9\u901a\u9053\u7684MSP\u5b9e\u4f8b\u6784\u5efa\u9002\u5f53\u7684 config_update \u6d88\u606f\uff09\u3002\u663e\u7136\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u5728MSP\u4e2d\u8003\u8651\u7684\u4e2d\u95f4CA\u4e0d\u518d\u7528\u4e8eMSP\u7684\u8eab\u4efd\u9a8c\u8bc1\uff1a   \u5c06MSP\u91cd\u65b0\u914d\u7f6e\uff0c\u5728\u53ef\u4fe1\u4e2d\u95f4CA\u8bc1\u4e66\u5217\u8868\u4e2d\u7684\u5220\u9664\u67d0\u4e9b\u4e2d\u95f4\u8bc1\u4e66\u3002\u5bf9\u4e8e\u672c\u5730\u914d\u7f6e\u7684MSP\uff0c\u8fd9\u610f\u5473\u7740\u8be5CA\u7684\u8bc1\u4e66\u5c06\u4ece\u8be5 intermediatecerts \u6587\u4ef6\u5939\u4e2d\u5220\u9664\u3002    \u91cd\u65b0\u914d\u7f6eMSP\uff0c\u5305\u542b\u4e00\u4e2a\u7531\u4fe1\u4efb\u6839\u4ea7\u751f\u7684CRL\uff0c\u8be5CRL\u5305\u542b\u63d0\u5230\u7684\u4e2d\u95f4CA\u7684\u8bc1\u4e66\u3002     \u5728\u5f53\u524d\u7684MSP\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u53ea\u652f\u6301\u65b9\u6cd5(1)\uff0c\u56e0\u4e3a\u5b83\u66f4\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u5c06\u4e0d\u518d\u8003\u8651\u7684\u4e2d\u95f4CA\u5217\u5165\u9ed1\u540d\u5355\u3002", 
            "title": "5)\u5c06\u4e2d\u95f4CA\u5217\u5165\u9ed1\u540d\u5355\u3002"
        }, 
        {
            "location": "/msp_zh/#6catls-ca", 
            "text": "MSP\u8eab\u4efd\u7684\u6839CA\u548cMSP TLS\u8bc1\u4e66\u7684\u6839CA\uff08\u548c\u76f8\u5173\u7684\u4e2d\u95f4CA\uff09\u9700\u8981\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u4e2d\u58f0\u660e\u3002\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u4e0d\u540c\u7c7b\u522b\u8bc1\u4e66\u4e4b\u95f4\u7684\u6df7\u6dc6\u3002\u4e0d\u7981\u6b62\u4e3aMSP\u8eab\u4efd\u548cTLS\u8bc1\u4e66\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684CA\uff0c\u4f46\u662f\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae\u5728\u751f\u4ea7\u4e2d\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002", 
            "title": "6)CA\u548cTLS CA"
        }, 
        {
            "location": "/configtx_zh/", 
            "text": "\u901a\u9053\u914d\u7f6e(configtx)\n\n\n\u539f\u6587\n\nHyperledger Fabric\u533a\u5757\u94fe\u7f51\u7edc\u7684\u5171\u4eab\u914d\u7f6e\u88ab\u4fdd\u5b58\u5728\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\u96c6\u5408\u4e2d\uff0c\u6bcf\u4e2a\u901a\u9053\u4e00\u4e2a\u3002\u6bcf\u4e2a\u914d\u7f6e\u4ea4\u6613\u901a\u5e38\u53eb\u505a\nconfigtx\n\u3002\n\n\u901a\u9053\u914d\u7f6e\u6709\u5982\u4e0b\u91cd\u8981\u5c5e\u6027\uff1a\n1. \u7248\u672c(\nVersioned\n)\uff1a\u914d\u7f6e\u7684\u6240\u6709\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u5173\u8054\u7684\u7248\u672c\uff0c\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u66f4\u65b0\u3002\u6b64\u5916\uff0c\u6bcf\u6b21\u66f4\u65b0\u914d\u7f6e\u90fd\u4f1a\u6536\u5230\u4e00\u4e2a\u987a\u5e8f\u53f7\u3002\n\n2. \u6743\u9650(\nPermissioned\n)\uff1a\u914d\u7f6e\u7684\u6bcf\u4e2a\u5143\u7d20\u6709\u4e00\u4e2a\u5173\u8054\u7684\u7b56\u7565\uff0c\u7528\u4e8e\u7ba1\u7406\u662f\u5426\u5141\u8bb8\u5bf9\u8be5\u5143\u7d20\u8fdb\u884c\u4fee\u6539\u3002\u4efb\u4f55\u62e5\u6709\u4ee5\u524dconfigtx\u526f\u672c\uff08\u5e76\u4e14\u6ca1\u6709\u5176\u4ed6\u4fe1\u606f\uff09\u7684\u4eba\u90fd\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u7b56\u7565\u9a8c\u8bc1\u65b0\u914d\u7f6e\u7684\u6709\u6548\u6027\u3002\n3. \u5c42\u6b21(\nHierarchical\n)\uff1a\u6839\u914d\u7f6e\u7ec4\u5305\u542b\u5b50\u7ec4\uff0c\u6bcf\u4e2a\u5c42\u6b21\u7ec4\u90fd\u6709\u5173\u8054\u7684\u503c\u548c\u7b56\u7565\u3002\u8fd9\u4e9b\u653f\u7b56\u53ef\u4ee5\u5229\u7528\u5c42\u6b21\u7ed3\u6784\u4ece\u4e0b\u5c42\u7b56\u7565\u4e2d\u63a8\u5bfc\u51fa\u4e00\u4e2a\u5c42\u6b21\u7684\u7b56\u7565\u3002\n\n\n\u89e3\u5256\u4e00\u4e2a\u914d\u7f6e\n\n\n\u914d\u7f6e\u88ab\u4fdd\u5b58\u5728\u533a\u5757\u7684\u4e00\u4e2a\u7c7b\u578b\u4e3a\nHeaderType_CONFIG\n\u7684\u4ea4\u6613\u4e2d\uff0c\u8be5\u533a\u5757\u4e2d\u6ca1\u6709\u5176\u4ed6\u4ea4\u6613\u3002\u8fd9\u4e9b\u533a\u5757\u88ab\u79f0\u4e3a\n\u914d\u7f6e\u533a\u5757\n\uff0c\u7b2c\u4e00\u4e2a\u533a\u5757\u88ab\u79f0\u4e3a\n\u521b\u4e16\u533a\u5757\n(Genesis Block)\u3002\n\n\u914d\u7f6e\u7684proto\u7ed3\u6784\u5b58\u50a8\u5728\nfabric/protos/common/configtx.proto\n\u3002\u5c01\u88c5\u7c7b\u578b\nHeaderType_CONFIG\n\u7f16\u7801\u4e86\u4e00\u4e2a\nConfigEnvelope\n\u6d88\u606f\uff0c\u4f5c\u4e3a\nPayload``data\n\u5b57\u6bb5\u3002\nConfigEnvelope\n\u7684proto\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nmessage ConfigEnvelope {\n    Config config = 1;\n    Envelope last_update = 2;\n}\n\n\n\n\n(\u4e0a\u9762\u7684\n1``2\n\u662fgo\u8bed\u8a00\u7ed3\u6784\u7684\u5c5e\u6027tag)\n\n\nlast_update\n\u5b57\u6bb5\u5b9a\u4e49\u5728\u4e0b\u9762\u7684\nUpdates to configuration\n\u90e8\u5206\uff0c\u4f46\u4ec5\u5728\u9a8c\u8bc1\u914d\u7f6e\u65f6\u9700\u8981\uff0c\u4e0d\u4f1a\u8bfb\u5b83\u3002\u76f8\u53cd\uff0c\u5f53\u524d\u63d0\u4ea4\u7684\u914d\u7f6e\u88ab\u5b58\u50a8\u5728\nconfig\n\u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\nConfig\n\u6d88\u606f\u3002\n\n\nmessage Config {\n    uint64 sequence = 1;\n    ConfigGroup channel_group = 2;\n}\n\n\n\n\nsequence\n\u6570\u5b57\u5728\u6bcf\u6b21\u914d\u7f6e\u63d0\u4ea4\u540e\u4f1a\u589e\u957f\u3002\nchannel_group\n\u5b57\u6bb5\u662f\u5305\u542b\u914d\u7f6e\u7684\u6839\u7ec4(root group)\u3002\u3002\nConfigGroup\n\u7ed3\u6784\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u7ec4\u6570\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u503c\u548c\u7b56\u7565\u3002\u5b83\u662f\u5982\u4e0b\u5b9a\u4e49\u7684\uff1a\n\n\nmessage ConfigGroup {\n    uint64 version = 1;\n    map\nstring,ConfigGroup\n groups = 2;\n    map\nstring,ConfigValue\n values = 3;\n    map\nstring,ConfigPolicy\n policies = 4;\n    string mod_policy = 5;\n}\n\n\n\n\n\u56e0\u4e3a\nConfigGroup\n\u662f\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u5b83\u662f\u6309\u5c42\u6b21\u6574\u7406\u7684\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u7528go\u8bed\u8a00\u7b26\u53f7\u8868\u793a\u7684\u3002\n\n\n// Assume the following groups are defined\nvar root, child1, child2, grandChild1, grandChild2, grandChild3 *ConfigGroup\n\n// Set the following values\nroot.Groups[\nchild1\n] = child1\nroot.Groups[\nchild2\n] = child2\nchild1.Groups[\ngrandChild1\n] = grandChild1\nchild2.Groups[\ngrandChild2\n] = grandChild2\nchild2.Groups[\ngrandChild3\n] = grandChild3\n\n// The resulting config structure of groups looks like:\n// root:\n//     child1:\n//         grandChild1\n//     child2:\n//         grandChild2\n//         grandChild3\n\n\n\n\n\u6bcf\u4e2a\u7ec4\u5728\u914d\u7f6e\u5c42\u6b21\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ea7\u522b\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u6709\u4e00\u7ec4\u5173\u8054\u7684\u503c\uff08\u7531\u5b57\u7b26\u4e32\u7c7b\u578b\u7684key\u7d22\u5f15\uff09\u548c\u7b56\u7565\uff08\u4e5f\u7531\u5b57\u7b26\u4e32\u7c7b\u578b\u7684key\u7d22\u5f15\uff09\u3002  \n\n\nValue\u88ab\u4e0b\u5217\u7ed3\u6784\u5b9a\u4e49\uff1a\n\n\nmessage ConfigValue {\n    uint64 version = 1;\n    bytes value = 2;\n    string mod_policy = 3;\n}\n\n\n\n\nPolicy\u7531\u4e0b\u5217\u7ed3\u6784\u5b9a\u4e49\uff1a\n\n\nmessage ConfigPolicy {\n    uint64 version = 1;\n    Policy policy = 2;\n    string mod_policy = 3;\n}\n\n\n\n\n\u8bf7\u6ce8\u610f\uff0cValue\u3001Policy\u548cGroup\u90fd\u6709\u4e00\u4e2a\nversion\n\u548c\u4e00\u4e2a\nmod_policy\n\u3002\u5143\u7d20\u7684\nversion\n\u7684\u503c\u4f1a\u5728\u5143\u7d20\u88ab\u4fee\u6539\u65f6\u9012\u589e\u3002\nmod_policy\n\u7528\u6765\u7ba1\u7406\u4fee\u6539\u5143\u7d20\u6240\u9700\u7684\u7b7e\u540d\u3002\n\n\n\u5bf9\u4e8eGroup\uff0c\u4fee\u6539\u5c31\u662f\u5411Value\u3001Policy\u6216Group\u6620\u5c04\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\uff08\u6216\u66f4\u6539\nmod_policy\n\uff09\u3002\u5bf9\u4e8eValue\u548cPolicy\uff0c\u4fee\u6539\u5c31\u662f\u5206\u522b\u6539\u53d8Value\u548cPolicy\u5b57\u6bb5\uff08\u6216\u6539\u53d8\nmod_policy\n\uff09\u3002\n\n\n\u6bcf\u4e2a\u5143\u7d20\u7684\nmod_policy\n\u90fd\u5728\u5f53\u524d\u914d\u7f6e\u7ea7\u522b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fdb\u884c\u8bc4\u4f30\u3002\u8003\u8651\u5728\u4e0b\u9762\u4f8b\u5b50\u7684\nmod_policy\n\u5b9a\u4e49\u5728\nChannel.Groups[\"Application\"]\n\uff08\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528golang\u6620\u5c04\u5f15\u7528\u8bed\u6cd5\uff0c\u6240\u4ee5\nChannel.Groups[\"Application\"].Policies[\"policy1\"]\n\u5f15\u7528\u4e86\u57fa\u7840\nChannel\n\u7ec4\u7684\nApplication\n\u7ec4\u7684\nPolicies\n\u6620\u5c04\u7684\npolicy1\n\u7b56\u7565\u3002\uff09\n\n\n\n\npolicy1\n\u6620\u5c04\u5230\nChannel.Groups[\"Application\"].Policies[\"policy1\"]\n  \n\n\nOrg1/policy2\n\u6620\u5c04\u5230\nChannel.Groups[\"Application\"].Groups[\"Org1\"].Policies[\"policy2\"]\n  \n\n\n/Channel/policy3\n\u6620\u5c04\u5230\nChannel.Policies[\"policy3\"]\n  \n\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\nmod_policy\n\u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7b56\u7565\uff0c\u5219\u8be5\u9879\u76ee\u4e0d\u4f1a\u88ab\u4fee\u6539\u3002  \n\n\n\u914d\u7f6e\u66f4\u65b0\n\n\n\u914d\u7f6e\u66f4\u65b0\u4f1a\u9012\u4ea4\u4e00\u4e2a\nHeaderType_CONFIG_UPDAT\n\u7c7b\u578b\u7684\nEnvelope\n\u6d88\u606f\u3002\u4ea4\u6613\u7684\nPayload``data\n\u662f\u4e00\u4e2amarshaled\nConfigUpdateEnvelope\n\u3002\nConfigUpdateEnvelope\n\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nmessage ConfigUpdateEnvelope {\n    bytes config_update = 1;\n    repeated ConfigSignature signatures = 2;\n}\n\n\n\n\n\u7b7e\u540d\u5b57\u6bb5\u5305\u542b\u4e86\u4e00\u7ec4\u6388\u6743\u914d\u7f6e\u66f4\u65b0\u7684\u7b7e\u540d\u3002\u5b83\u7684\u6d88\u606f\u5b9a\u4e49\u662f\uff1a\n\n\nmessage ConfigSignature {\n    bytes signature_header = 1;\n    bytes signature = 2;\n}\n\n\n\n\nsignature_header\n\u662f\u6807\u51c6\u4ea4\u6613\u7684\u5b9a\u4e49\uff0c\u800c\nsignature\n\u662f\nsignature_header\n\u5b57\u8282\u548c\nConfigUpdateEnvelope\n\u6d88\u606f\u7684\nconfig_update\n\u5b57\u8282\u4e32\u8fde\u540e\u7684\u7b7e\u540d\u3002\n\n\nConfigUpdateEnvelope\n\u7684\nconfig_update\n\u5b57\u8282\u662f\u4e00\u4e2amarshaled\nConfigUpdate\n\u6d88\u606f\uff0c\u8be5\u6d88\u606f\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nmessage ConfigUpdate {\n    string channel_id = 1;\n    ConfigGroup read_set = 2;\n    ConfigGroup write_set = 3;\n}\n\n\n\n\n\u8fd9\nchannel_id\n\u662f\u66f4\u65b0\u8981\u7ed1\u5b9a\u7684\u901a\u9053ID\uff0c\u8fd9\u5bf9\u4e8e\u9650\u5b9a\u6b64\u91cd\u65b0\u914d\u7f6e\u7684\u7b7e\u540d\u8303\u56f4\u662f\u5fc5\u8981\u7684\u3002\n\n\n\u5728\nread_set\n\u6307\u5b9a\u4e86\u73b0\u6709\u7684\u914d\u7f6e\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5b83\u6697\u793a\u4e86\u53ea\u6709\nversion\n\u5b57\u6bb5\u5fc5\u987b\u63d0\u4f9b\u7684\uff0c\u800c\u4e14\u5b57\u6bb5\u662f\u53ef\u9009\u5219\u3002\u5b57\u6bb5\nConfigValue``value\n\u6216 \nConfigPolicy``policy\n\u4e0d\u5141\u8bb8\u51fa\u73b0\u5728\nread_set\n\u3002\nConfigGroup\n\u53ef\u4ee5\u586b\u5145\u5b83\u6620\u5c04\u5b57\u6bb5\u7684\u5b50\u96c6\uff0c\u4ee5\u4fbf\u5f15\u7528\u5728\u914d\u7f6e\u6811\u66f4\u6df1\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u8981\nread_set\n\u4e2d\u5305\u62ec\nApplication\n\u7ec4\uff0c\u5219\u5b83\u7684\u6bcd\u5143\u7d20\uff08\u8be5\nChannel\n\u7ec4\uff09\u4e5f\u5fc5\u987b\u5305\u542b\u5728\nread_set\n\u4e2d\uff0c\u4f46\u662f\uff0c\u8be5\nChannel\n\u7ec4\u5e76\u4e0d\u9700\u8981\u586b\u5145\u6240\u6709\u7684key\uff0c\u5982\nOrderer``group\nkey\uff0c\u6216\u4efb\u4f55\nvalues\n\u6216\npolicies\nkey\u3002\n\n\nwrite_set\n\u5b9a\u4e49\u4e86\u914d\u7f6e\u7684\u88ab\u4fee\u6539\u90e8\u5206\u3002\u7531\u4e8e\u914d\u7f6e\u7684\u5c42\u6b21\u6027\uff0c\u5bf9\u5c42\u6b21\u7ed3\u6784\u4e2d\u6df1\u5c42\u5143\u7d20\u7684\u5199\u5165\u64cd\u4f5c\u4e5f\u5fc5\u987b\u5728\nwrite_set\n\u4ece\u5305\u542b\u5176\u66f4\u9ad8\u5c42\u6b21\u7684\u5143\u7d20\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\nwrite_set\n\u4e2d\u4efb\u4f55\u5143\u7d20\uff0c\u5982\u679c\u4e5f\u51fa\u73b0\u5728\nread_set\n\u4e2d\u4e14\u7248\u672c\u76f8\u540c\uff0c\u5219\u4f1a\u88ab\u66f4\u65b0\u5ffd\u7565\uff08\uff1f\uff09\u3002\n\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u914d\u7f6e\uff1a\n\n\nChannel: (version 0)\n    Orderer (version 0)\n    Appplication (version 3)\n       Org1 (version 2)\n\n\n\n\n\u53bb\u9012\u4ea4\u4e00\u4e2a\u6539\u53d8\nOrg1\n\u7684\u914d\u7f6e\u66f4\u65b0\uff0c\nread_set\n\u4f1a\u662f\uff1a\n\n\nChannel: (version 0)\n    Application: (version 3)\n\n\n\n\n\u800c\u5b83\u7684\nwrite_set\n\u4f1a\u662f\uff1a\n\n\nChannel: (version 0)\n    Application: (version 3)\n        Org1 (version 3)\n\n\n\n\n\u5f53\u6536\u5230\nCONFIG_UPDATE\n\uff0corderer\u4f1a\u6309\u4e0b\u9762\u7684\u6b65\u9aa4\u8ba1\u7b97\u7ed3\u679c\u96c6\nCONFIG\n\uff1a\n1. \u68c0\u9a8c\nchannel_id\n\u548c\nread_set\n\u3002\u6240\u6709\nread_set\n\u4e2d\u5143\u7d20\u5fc5\u987b\u5b58\u5728\u4e14\u7248\u672c\u53f7\u76f8\u540c\u3002\n\n2. \u901a\u8fc7\u6bd4\u8f83\u5b58\u5728\u4e8e\nwrite_set\n\u4e2d\u800c\u4e0d\u5b58\u5728\u4e8e\nread_set\n\u4e2d\u4e14\u7248\u672c\u53f7\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5f97\u5230\u66f4\u65b0\u5143\u7d20\u96c6\u3002\n\n3. \u68c0\u9a8c\u66f4\u65b0\u5143\u7d20\u96c6\u4e2d\u7684\u5143\u7d20\u7248\u672c\u53f7\uff0c\u786e\u4fdd\u53ea\u589e\u957f\u4e861\u3002\n\n4. \u5bf9\u66f4\u65b0\u5143\u7d20\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u68c0\u9a8c\u9488\u5bf9\nConfigUpdateEnvelope\n\u7684\u7b7e\u540d\u96c6\uff0c\u786e\u4fdd\u7b26\u5408\nmod_policy\n\u3002\n\n5. \u901a\u8fc7\u5c06\u66f4\u65b0\u96c6\u5e94\u7528\u5230\u5f53\u524d\u914d\u7f6e\uff0c\u8ba1\u7b97\u51fa\u914d\u7f6e\u7684\u4e00\u4e2a\u65b0\u5b8c\u5168\u7248\u672c\u3002\n\n6. \u5c06\u65b0\u914d\u7f6e\u5199\u5165\nConfigEnvelope\n\uff0c\u5c06\nCONFIG_UPDATE\n\u4f5c\u4e3a\nthe last_update\n\u5b57\u6bb5\uff0c\u5e76\u4e0e\u589e\u957f\u7684\nsequence\n\u503c\u4e00\u8d77\u5c06\u65b0\u914d\u7f6e\u7f16\u7801\u5165\nconfig\n\u5b57\u6bb5\u3002\n\n7. \u5c06\u4e00\u4e2a\u65b0\u7684\nConfigEnvelope\n\u4ee5\u7c7b\u578b\nCONFIG\n\u5199\u5165\nEnvelope\n\uff0c\u6700\u540e\u5c06\u8fd9\u4e2a\u4f5c\u4e3a\u552f\u4e00\u4ea4\u6613\u5199\u5165\u4e00\u4e2a\u65b0\u914d\u7f6e\u533a\u5757\u3002  \n\n\n\u5f53\u65b0\u7684peer(\u6216\u4efb\u4f55\u5176\u4ed6\u7684\nDeliver\n\u63a5\u6536\u8005)\u63a5\u6536\u5230\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\uff0c\u5b83\u4f1a\u6821\u9a8c\u8fd9\u4e2a\u914d\u7f6e\uff0c\u65b9\u6cd5\u662f\u5c06\nlast_update\n\u6d88\u606f\u5e94\u7528\u5230\u5f53\u524d\u914d\u7f6e\uff0c\u786e\u4fddorderer\u8ba1\u7b97\u51fa\u6765\u7684\nconfig\n\u5b57\u6bb5\u5305\u542b\u4e86\u6b63\u786e\u7684\u65b0\u914d\u7f6e\u3002  \n\n\n\u5141\u8bb8\u7684\u914d\u7f6e\u7ec4(group)\u548c\u503c(value)\n\n\n\u4efb\u4f55\u6709\u6548\u7684\u914d\u7f6e\u90fd\u662f\u4e0b\u9762\u914d\u7f6e\u7684\u5b50\u96c6\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7b26\u53f7\npeer.\nMSG\n\u6765\u5b9a\u4e49\u4e00\u4e2a\nConfigValue\n\uff0c\u5b83\u7684\nvalue\n\u5b57\u6bb5\u662f\u4e00\u4e2a\u540d\u4e3a\nMSG\n\u7684marshaled proto\u6d88\u606f\uff08\u5b9a\u4e49\u5728\nfabric/protos/peer/configuration.proto\n\uff09\u3002\u7b26\u53f7\ncommon.\nMSG\n\u3001\nmsp.\nMSG\n\u548c\norderer.\nMSG\n\u542b\u4e49\u7c7b\u4f3c\uff0c\u53ea\u662f\u5b83\u4eec\u7684\u6d88\u606f\u5206\u522b\u5b9a\u4e49\u5728\nfabric/protos/common/configuration.proto\n\u3001\nfabric/protos/msp/mspconfig.proto\n\u548c\nfabric/protos/orderer/configuration.proto\n\u3002  \n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662fkey\n{{org_name}}\n\u548c\n{{consortium_name}}\n\u53ef\u4ee5\u662f\u4efb\u610f\u540d\u5b57\uff0c\u8fd9\u8868\u660e\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u4ee5\u4efb\u4f55\u540d\u5b57\u91cd\u590d\u51fa\u73b0\u3002  \n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \nApplication\n:\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \nMSP\n:msp.MSPConfig,\n                        \nAnchorPeers\n:peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n        \nOrderer\n:\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \nMSP\n:msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map\nstring, *ConfigValue\n {\n                \nConsensusType\n:orderer.ConsensusType,\n                \nBatchSize\n:orderer.BatchSize,\n                \nBatchTimeout\n:orderer.BatchTimeout,\n                \nKafkaBrokers\n:orderer.KafkaBrokers,\n            },\n        },\n        \nConsortiums\n:\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{consortium_name}}:\nConfigGroup{\n                    Groups:map\nstring, *ConfigGroup\n {\n                        {{org_name}}:\nConfigGroup{\n                            Values:map\nstring, *ConfigValue\n{\n                                \nMSP\n:msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map\nstring, *ConfigValue\n {\n                        \nChannelCreationPolicy\n:common.Policy,\n                    }\n                },\n            },\n        },\n    },\n\n    Values: map\nstring, *ConfigValue\n {\n        \nHashingAlgorithm\n:common.HashingAlgorithm,\n        \nBlockHashingDataStructure\n:common.BlockDataHashingStructure,\n        \nConsortium\n:common.Consortium,\n        \nOrdererAddresses\n:common.OrdererAddresses,\n    },\n}\n\n\n\n\n\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u914d\u7f6e\n\n\n\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u9700\u8981\u5b9a\u4e49\u6392\u5e8f\u53c2\u6570\uff0c\u548c\u521b\u5efa\u901a\u9053\u7684\u8054\u76df\u3002\u5bf9\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u5fc5\u987b\u5b58\u5728\u4e00\u4e2a\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\uff0c\u5b83\u662f\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\uff08\u66f4\u51c6\u786e\u5730\u8bf4\u662f\u5f15\u5bfc\u65f6\u521b\u5efa\uff09\u3002\u5efa\u8bae\u4e0d\u8981\u5728\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u7684\u521b\u4e16\u914d\u7f6e\u4e2d\u5b9a\u4e49\u5e94\u7528\u90e8\u5206\uff08\u7684\u901a\u9053\uff09\uff0c\u4f46\u53ef\u4ee5\u5728\u6d4b\u8bd5\u65f6\u8fd9\u6837\u505a\u3002\u6ce8\u610f\uff0c\u5bf9\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u5177\u6709\u8bfb\u6743\u9650\u7684\u6210\u5458\u53ef\u4ee5\u770b\u5230\u6240\u6709\u901a\u9053\uff08\u7cfb\u7edf\u7684\u548c\u5e94\u7528\u7684\u6240\u6709\u901a\u9053\uff09\u7684\u521b\u5efa\uff0c\u6240\u4ee5\u8fd9\u4e2a\u901a\u9053\u7684\u8bbf\u95ee\u6743\u9650\u9700\u8981\u4e25\u683c\u63a7\u5236\u3002\n\n\n\u6392\u5e8f\u53c2\u6570\u7528\u4e0b\u9762\u914d\u7f6e\u7684\u5b50\u96c6\u6765\u5b9a\u4e49\uff1a\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \nOrderer\n:\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \nMSP\n:msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map\nstring, *ConfigValue\n {\n                \nConsensusType\n:orderer.ConsensusType,\n                \nBatchSize\n:orderer.BatchSize,\n                \nBatchTimeout\n:orderer.BatchTimeout,\n                \nKafkaBrokers\n:orderer.KafkaBrokers,\n            },\n        },\n    },\n\n\n\n\n\u53c2\u4e0e\u6392\u5e8f\u7684\u6bcf\u4e2a\u7ec4\u7ec7\u5728\nOrderer\n\u7ec4\u4e0b\u90fd\u6709\u4e00\u4e2a\u7ec4\u5143\u7d20\u3002\u8fd9\u4e2a\u7ec4\u5b9a\u4e49\u4e00\u4e2a\nMSP\n\u53c2\u6570\uff0c\u5b83\u5305\u542b\u4e86\u7ec4\u7ec7\u7684\u5bc6\u94a5id\u4fe1\u606f\u3002\nOrderer\n\u7ec4\u7684\nValues\n\u786e\u5b9a\u4e86\u6392\u5e8f\u8282\u70b9\u7684\u529f\u80fd\u3002\u5b83\u4eec\u5b58\u5728\u4e8e\u6bcf\u4e2a\u901a\u9053\uff0c\u6240\u4ee5\u5b9e\u4f8b\u7684\norderer.BatchTimeout\n\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u901a\u9053\u5b9a\u4e49\u4e0d\u540c\u7684\u503c\u3002\n\n\n\u542f\u52a8\u65f6\uff0corderer\u4f1a\u9762\u5bf9\u4e00\u4e2a\u5305\u542b\u4e86\u591a\u4e2a\u901a\u9053\u4fe1\u606f\u7684\u6587\u4ef6\u7cfb\u7edf\u3002orderer\u6839\u636e\u8054\u76df\u7ec4\u901a\u9053\u5b9a\u4e49\u51fa\u7cfb\u7edf\u901a\u9053\u3002\u8054\u76df\u7ec4\u5177\u6709\u4e0b\u9762\u7684\u7ed3\u6784\uff1a\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \nConsortiums\n:\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{consortium_name}}:\nConfigGroup{\n                    Groups:map\nstring, *ConfigGroup\n {\n                        {{org_name}}:\nConfigGroup{\n                            Values:map\nstring, *ConfigValue\n{\n                                \nMSP\n:msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map\nstring, *ConfigValue\n {\n                        \nChannelCreationPolicy\n:common.Policy,\n                    }\n                },\n            },\n        },\n    },\n},\n\n\n\n\n\u6ce8\u610f\uff0c\u6bcf\u4e2a\u8054\u76df\u5b9a\u4e49\u4e86\u4e00\u7ec4\u6210\u5458\uff0c\u5c31\u50cf\u6392\u5e8f\u7ec4\u7ec7\u6210\u5458\u4e00\u6837\u3002\u6bcf\u4e2a\u8054\u76df\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2aChannelCreationPolicy\u3002\u8fd9\u4e2a\u7b56\u7565\u7528\u4e8e\u5bf9\u901a\u9053\u521b\u5efa\u8bf7\u6c42\u8fdb\u884c\u6388\u6743\u3002\u901a\u5e38\uff0c\u8fd9\u4e2a\u503c\u88ab\u8bbe\u4e3a\nImplicitMetaPolicy\n\uff0c\u610f\u601d\u662f\u8981\u6c42\u901a\u9053\u7684\u65b0\u6210\u5458\u7b7e\u540d\u4ee5\u6388\u6743\u9891\u9053\u521b\u5efa(\u4e2a\u4eba\u7406\u89e3\uff1a\u6253\u7b97\u521b\u5efa\u4e00\u4e2a\u5305\u542bN\u4e2a\u7ec4\u7ec7\u7684\u901a\u9053\uff0c\u90a3\u4e48\u8fd9N\u4e2a\u7ec4\u7ec7\u90fd\u5f97\u7b7e\u540d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u5426\u51b3\u6743\uff0c\u6709\u7ec4\u7ec7\u4e0d\u540c\u610f\uff0c\u65b0\u901a\u9053\u5c31\u5efa\u4e0d\u8d77\u6765)\u3002\u5173\u4e8e\u901a\u9053\u521b\u5efa\u7684\u66f4\u591a\u5185\u5bb9\u5728\u6587\u7ae0\u7684\u540e\u9762\u8fd8\u6709\u3002\n\n\n\u5e94\u7528\u901a\u9053\u914d\u7f6e\n\n\n\u901a\u9053\u7684\u5e94\u7528\u914d\u7f6e\u88ab\u8bbe\u8ba1\u7528\u4e8e\u5e94\u7528\u7c7b\u578b\u7684\u4ea4\u6613\u3002\u5b83\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \nApplication\n:\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \nMSP\n:msp.MSPConfig,\n                        \nAnchorPeers\n:peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n    },\n}\n\n\n\n\n\u5f88\u50cf\nOrderer\n\u90e8\u5206\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u7ec4(group)\u3002\u7136\u800c\uff0c\u4e0d\u4ec5\u4ec5\u7f16\u7801\u4e86\nMSP\nid\u4fe1\u606f\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u9644\u52a0\u7f16\u7801\u4e86\u4e00\u4e2a\nAnchorPeers\n\u5217\u8868\u3002\u8fd9\u662f\u4e00\u4e2a\u5141\u8bb8\u4e0d\u540c\u7ec4\u7ec7\u4e4b\u95f4\u901a\u8fc7peer gossip\u7f51\u7edc\u4e92\u76f8\u8054\u7cfb\u7684peer\u5217\u8868\uff08\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684peer\u624d\u53ef\u4ee5\u88ab\u5176\u4ed6\u7ec4\u7ec7\u7684peer\u201c\u770b\u5230\u201d\uff09\u3002\n\n\n\u5e94\u7528\u901a\u9053\u7f16\u7801\u4e86\u4e00\u4e2aorderer\u7ec4\u7ec7\u7684\u526f\u672c\uff0c\u548c\u7528\u4e8e\u786e\u5b9a\u53d8\u66f4\u8fd9\u4e9b\u53c2\u6570\u7684\u5171\u8bc6\u9009\u9879\uff0c\u6240\u4ee5\u5305\u542b\u4e86\u7cfb\u7edf\u901a\u9053\u914d\u7f6e\u7684\nOrderer\n\u90e8\u5206\u7684\u76f8\u540c\u5185\u5bb9\u3002\u7136\u800c\uff0c\u4ece\u5e94\u7528\u7684\u89c2\u70b9\u8fd9\u53ef\u4ee5\u88ab\u5927\u5927\u5ffd\u7565\u3002  \n\n\n\u901a\u9053\u521b\u5efa\n\n\n\u5f53\u6392\u5e8f\u8282\u70b9\u6536\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u901a\u9053\u7684\nCONFIG_UPDATE\n\uff0c\u6392\u5e8f\u8282\u70b9\u5c31\u5047\u5b9a\u8fd9\u662f\u4e2a\u901a\u9053\u521b\u5efa\u8bf7\u6c42\uff0c\u7136\u540e\u6267\u884c\u4e0b\u5217\u64cd\u4f5c\uff1a\n1. orderer\u786e\u5b9a\u53d1\u51fa\u901a\u9053\u521b\u5efa\u8bf7\u6c42\u7684\u8054\u76df\u8eab\u4efd\u3002\u5b83\u901a\u8fc7\u67e5\u770b\u9876\u5c42group\u7684\nConsortium\n\u503c\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\n2. orderer\u9a8c\u8bc1\u5305\u542b\u5728\nApplication\n\u7ec4\u7684\u7ec4\u7ec7\uff0c\u786e\u4fdd\u8fd9\u4e9b\u7ec4\u7ec7\u662f\u8054\u76df\u4e0b\u5c5e(\u5b50\u96c6)\uff0c\u800c\u4e14\nApplicationGroup\n\u88ab\u8bbe\u7f6e\u4e3a\nversion``1\n\u3002\n\n3. orderer\u9a8c\u8bc1\u8054\u76df\u662f\u5426\u6709\u6210\u5458\uff0c\u4ece\u800c\u65b0\u901a\u9053\u4f1a\u6709\u5e94\u7528\u6210\u5458(\u521b\u5efa\u6ca1\u6709\u6210\u5458\u7684\u8054\u76df\u548c\u901a\u9053\u4ec5\u7528\u4e8e\u6d4b\u8bd5)\u3002\n\n4. orderer\u901a\u8fc7\u4ece\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u4e2d\u53d6\u5f97\nOrderer\n\u7ec4\u6765\u521b\u5efa\u4e00\u4e2a\u6a21\u677f\u914d\u7f6e\uff0c\u7528\u65b0\u7684\u6210\u5458\u521b\u5efa\u4e00\u4e2a\nApplication\n\u7ec4\u5e76\u6307\u5b9a\nmod_policy\n\u4e3a\u8054\u76df\u914d\u7f6e\u91cc\u7684\nChannelCreationPolicy\n\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7b56\u7565\u662f\u5728\u65b0\u914d\u7f6e\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u8bc4\u4f30\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u9700\u8981\nALL\n\u6210\u5458\u7684\u7b56\u7565\u4ec5\u9700\u8981\u5168\u90e8\u65b0\u901a\u9053\u6210\u5458\u7684\u7b7e\u540d\uff0c\u800c\u4e0d\u662f\u8054\u76df\u7684\u6240\u6709\u6210\u5458\u7b7e\u540d\u3002\n\n5. orderer\u5c06\nCONFIG_UPDATE\n\u4f5c\u4e3a\u4e00\u4e2a\u66f4\u65b0\u5e94\u7528\u5230\u8fd9\u4e2a\u6a21\u677f\u914d\u7f6e\u3002\u56e0\u4e3a\u8fd9\u4e2a\nCONFIG_UPDATE\n\u5e94\u7528\u53d8\u66f4\u5230\nApplication\n\u7ec4(\u5b83\u7684\nversion\n\u662f\n1\n)\uff0c\u914d\u7f6e\u4ee3\u7801\u7528\nChannelCreationPolicy\n\u9a8c\u8bc1\u8fd9\u4e9b\u66f4\u65b0\u3002\u5982\u679c\u901a\u9053\u521b\u5efa\u5305\u542b\u5176\u4ed6\u53d8\u66f4\uff0c\u5982\u4e2a\u522b\u7ec4\u7ec7\u7684\u951apeer\uff0c\u5143\u7d20\u7684\u76f8\u5e94mod policy\u4f1a\u88ab\u8c03\u7528\u3002\n\n6. \u4e3a\u4e86\u6392\u5e8f\uff0c\u542b\u6709\u65b0\u901a\u9053\u914d\u7f6e\u7684\u65b0\nCONFIG\n\u4ea4\u6613\u4f1a\u88ab\u5305\u88c5\u548c\u53d1\u9001\u5230\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u3002\u6392\u5e8f\u540e\uff0c\u901a\u9053\u5c31\u521b\u5efa\u4e86\u3002", 
            "title": "Channel \u914d\u7f6e(configtx)"
        }, 
        {
            "location": "/configtx_zh/#configtx", 
            "text": "\u539f\u6587 \nHyperledger Fabric\u533a\u5757\u94fe\u7f51\u7edc\u7684\u5171\u4eab\u914d\u7f6e\u88ab\u4fdd\u5b58\u5728\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\u96c6\u5408\u4e2d\uff0c\u6bcf\u4e2a\u901a\u9053\u4e00\u4e2a\u3002\u6bcf\u4e2a\u914d\u7f6e\u4ea4\u6613\u901a\u5e38\u53eb\u505a configtx \u3002 \n\u901a\u9053\u914d\u7f6e\u6709\u5982\u4e0b\u91cd\u8981\u5c5e\u6027\uff1a\n1. \u7248\u672c( Versioned )\uff1a\u914d\u7f6e\u7684\u6240\u6709\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u5173\u8054\u7684\u7248\u672c\uff0c\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u66f4\u65b0\u3002\u6b64\u5916\uff0c\u6bcf\u6b21\u66f4\u65b0\u914d\u7f6e\u90fd\u4f1a\u6536\u5230\u4e00\u4e2a\u987a\u5e8f\u53f7\u3002 \n2. \u6743\u9650( Permissioned )\uff1a\u914d\u7f6e\u7684\u6bcf\u4e2a\u5143\u7d20\u6709\u4e00\u4e2a\u5173\u8054\u7684\u7b56\u7565\uff0c\u7528\u4e8e\u7ba1\u7406\u662f\u5426\u5141\u8bb8\u5bf9\u8be5\u5143\u7d20\u8fdb\u884c\u4fee\u6539\u3002\u4efb\u4f55\u62e5\u6709\u4ee5\u524dconfigtx\u526f\u672c\uff08\u5e76\u4e14\u6ca1\u6709\u5176\u4ed6\u4fe1\u606f\uff09\u7684\u4eba\u90fd\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u7b56\u7565\u9a8c\u8bc1\u65b0\u914d\u7f6e\u7684\u6709\u6548\u6027\u3002\n3. \u5c42\u6b21( Hierarchical )\uff1a\u6839\u914d\u7f6e\u7ec4\u5305\u542b\u5b50\u7ec4\uff0c\u6bcf\u4e2a\u5c42\u6b21\u7ec4\u90fd\u6709\u5173\u8054\u7684\u503c\u548c\u7b56\u7565\u3002\u8fd9\u4e9b\u653f\u7b56\u53ef\u4ee5\u5229\u7528\u5c42\u6b21\u7ed3\u6784\u4ece\u4e0b\u5c42\u7b56\u7565\u4e2d\u63a8\u5bfc\u51fa\u4e00\u4e2a\u5c42\u6b21\u7684\u7b56\u7565\u3002", 
            "title": "\u901a\u9053\u914d\u7f6e(configtx)"
        }, 
        {
            "location": "/configtx_zh/#_1", 
            "text": "\u914d\u7f6e\u88ab\u4fdd\u5b58\u5728\u533a\u5757\u7684\u4e00\u4e2a\u7c7b\u578b\u4e3a HeaderType_CONFIG \u7684\u4ea4\u6613\u4e2d\uff0c\u8be5\u533a\u5757\u4e2d\u6ca1\u6709\u5176\u4ed6\u4ea4\u6613\u3002\u8fd9\u4e9b\u533a\u5757\u88ab\u79f0\u4e3a \u914d\u7f6e\u533a\u5757 \uff0c\u7b2c\u4e00\u4e2a\u533a\u5757\u88ab\u79f0\u4e3a \u521b\u4e16\u533a\u5757 (Genesis Block)\u3002 \n\u914d\u7f6e\u7684proto\u7ed3\u6784\u5b58\u50a8\u5728 fabric/protos/common/configtx.proto \u3002\u5c01\u88c5\u7c7b\u578b HeaderType_CONFIG \u7f16\u7801\u4e86\u4e00\u4e2a ConfigEnvelope \u6d88\u606f\uff0c\u4f5c\u4e3a Payload``data \u5b57\u6bb5\u3002 ConfigEnvelope \u7684proto\u5b9a\u4e49\u5982\u4e0b\uff1a  message ConfigEnvelope {\n    Config config = 1;\n    Envelope last_update = 2;\n}  (\u4e0a\u9762\u7684 1``2 \u662fgo\u8bed\u8a00\u7ed3\u6784\u7684\u5c5e\u6027tag)  last_update \u5b57\u6bb5\u5b9a\u4e49\u5728\u4e0b\u9762\u7684 Updates to configuration \u90e8\u5206\uff0c\u4f46\u4ec5\u5728\u9a8c\u8bc1\u914d\u7f6e\u65f6\u9700\u8981\uff0c\u4e0d\u4f1a\u8bfb\u5b83\u3002\u76f8\u53cd\uff0c\u5f53\u524d\u63d0\u4ea4\u7684\u914d\u7f6e\u88ab\u5b58\u50a8\u5728 config \u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a Config \u6d88\u606f\u3002  message Config {\n    uint64 sequence = 1;\n    ConfigGroup channel_group = 2;\n}  sequence \u6570\u5b57\u5728\u6bcf\u6b21\u914d\u7f6e\u63d0\u4ea4\u540e\u4f1a\u589e\u957f\u3002 channel_group \u5b57\u6bb5\u662f\u5305\u542b\u914d\u7f6e\u7684\u6839\u7ec4(root group)\u3002\u3002 ConfigGroup \u7ed3\u6784\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u7ec4\u6570\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u503c\u548c\u7b56\u7565\u3002\u5b83\u662f\u5982\u4e0b\u5b9a\u4e49\u7684\uff1a  message ConfigGroup {\n    uint64 version = 1;\n    map string,ConfigGroup  groups = 2;\n    map string,ConfigValue  values = 3;\n    map string,ConfigPolicy  policies = 4;\n    string mod_policy = 5;\n}  \u56e0\u4e3a ConfigGroup \u662f\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u5b83\u662f\u6309\u5c42\u6b21\u6574\u7406\u7684\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u7528go\u8bed\u8a00\u7b26\u53f7\u8868\u793a\u7684\u3002  // Assume the following groups are defined\nvar root, child1, child2, grandChild1, grandChild2, grandChild3 *ConfigGroup\n\n// Set the following values\nroot.Groups[ child1 ] = child1\nroot.Groups[ child2 ] = child2\nchild1.Groups[ grandChild1 ] = grandChild1\nchild2.Groups[ grandChild2 ] = grandChild2\nchild2.Groups[ grandChild3 ] = grandChild3\n\n// The resulting config structure of groups looks like:\n// root:\n//     child1:\n//         grandChild1\n//     child2:\n//         grandChild2\n//         grandChild3  \u6bcf\u4e2a\u7ec4\u5728\u914d\u7f6e\u5c42\u6b21\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ea7\u522b\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u6709\u4e00\u7ec4\u5173\u8054\u7684\u503c\uff08\u7531\u5b57\u7b26\u4e32\u7c7b\u578b\u7684key\u7d22\u5f15\uff09\u548c\u7b56\u7565\uff08\u4e5f\u7531\u5b57\u7b26\u4e32\u7c7b\u578b\u7684key\u7d22\u5f15\uff09\u3002    Value\u88ab\u4e0b\u5217\u7ed3\u6784\u5b9a\u4e49\uff1a  message ConfigValue {\n    uint64 version = 1;\n    bytes value = 2;\n    string mod_policy = 3;\n}  Policy\u7531\u4e0b\u5217\u7ed3\u6784\u5b9a\u4e49\uff1a  message ConfigPolicy {\n    uint64 version = 1;\n    Policy policy = 2;\n    string mod_policy = 3;\n}  \u8bf7\u6ce8\u610f\uff0cValue\u3001Policy\u548cGroup\u90fd\u6709\u4e00\u4e2a version \u548c\u4e00\u4e2a mod_policy \u3002\u5143\u7d20\u7684 version \u7684\u503c\u4f1a\u5728\u5143\u7d20\u88ab\u4fee\u6539\u65f6\u9012\u589e\u3002 mod_policy \u7528\u6765\u7ba1\u7406\u4fee\u6539\u5143\u7d20\u6240\u9700\u7684\u7b7e\u540d\u3002  \u5bf9\u4e8eGroup\uff0c\u4fee\u6539\u5c31\u662f\u5411Value\u3001Policy\u6216Group\u6620\u5c04\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\uff08\u6216\u66f4\u6539 mod_policy \uff09\u3002\u5bf9\u4e8eValue\u548cPolicy\uff0c\u4fee\u6539\u5c31\u662f\u5206\u522b\u6539\u53d8Value\u548cPolicy\u5b57\u6bb5\uff08\u6216\u6539\u53d8 mod_policy \uff09\u3002  \u6bcf\u4e2a\u5143\u7d20\u7684 mod_policy \u90fd\u5728\u5f53\u524d\u914d\u7f6e\u7ea7\u522b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fdb\u884c\u8bc4\u4f30\u3002\u8003\u8651\u5728\u4e0b\u9762\u4f8b\u5b50\u7684 mod_policy \u5b9a\u4e49\u5728 Channel.Groups[\"Application\"] \uff08\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528golang\u6620\u5c04\u5f15\u7528\u8bed\u6cd5\uff0c\u6240\u4ee5 Channel.Groups[\"Application\"].Policies[\"policy1\"] \u5f15\u7528\u4e86\u57fa\u7840 Channel \u7ec4\u7684 Application \u7ec4\u7684 Policies \u6620\u5c04\u7684 policy1 \u7b56\u7565\u3002\uff09   policy1 \u6620\u5c04\u5230 Channel.Groups[\"Application\"].Policies[\"policy1\"]     Org1/policy2 \u6620\u5c04\u5230 Channel.Groups[\"Application\"].Groups[\"Org1\"].Policies[\"policy2\"]     /Channel/policy3 \u6620\u5c04\u5230 Channel.Policies[\"policy3\"]      \u8bf7\u6ce8\u610f\uff0c\u5982\u679c mod_policy \u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7b56\u7565\uff0c\u5219\u8be5\u9879\u76ee\u4e0d\u4f1a\u88ab\u4fee\u6539\u3002", 
            "title": "\u89e3\u5256\u4e00\u4e2a\u914d\u7f6e"
        }, 
        {
            "location": "/configtx_zh/#_2", 
            "text": "\u914d\u7f6e\u66f4\u65b0\u4f1a\u9012\u4ea4\u4e00\u4e2a HeaderType_CONFIG_UPDAT \u7c7b\u578b\u7684 Envelope \u6d88\u606f\u3002\u4ea4\u6613\u7684 Payload``data \u662f\u4e00\u4e2amarshaled ConfigUpdateEnvelope \u3002 ConfigUpdateEnvelope \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a  message ConfigUpdateEnvelope {\n    bytes config_update = 1;\n    repeated ConfigSignature signatures = 2;\n}  \u7b7e\u540d\u5b57\u6bb5\u5305\u542b\u4e86\u4e00\u7ec4\u6388\u6743\u914d\u7f6e\u66f4\u65b0\u7684\u7b7e\u540d\u3002\u5b83\u7684\u6d88\u606f\u5b9a\u4e49\u662f\uff1a  message ConfigSignature {\n    bytes signature_header = 1;\n    bytes signature = 2;\n}  signature_header \u662f\u6807\u51c6\u4ea4\u6613\u7684\u5b9a\u4e49\uff0c\u800c signature \u662f signature_header \u5b57\u8282\u548c ConfigUpdateEnvelope \u6d88\u606f\u7684 config_update \u5b57\u8282\u4e32\u8fde\u540e\u7684\u7b7e\u540d\u3002  ConfigUpdateEnvelope \u7684 config_update \u5b57\u8282\u662f\u4e00\u4e2amarshaled ConfigUpdate \u6d88\u606f\uff0c\u8be5\u6d88\u606f\u5b9a\u4e49\u5982\u4e0b\uff1a  message ConfigUpdate {\n    string channel_id = 1;\n    ConfigGroup read_set = 2;\n    ConfigGroup write_set = 3;\n}  \u8fd9 channel_id \u662f\u66f4\u65b0\u8981\u7ed1\u5b9a\u7684\u901a\u9053ID\uff0c\u8fd9\u5bf9\u4e8e\u9650\u5b9a\u6b64\u91cd\u65b0\u914d\u7f6e\u7684\u7b7e\u540d\u8303\u56f4\u662f\u5fc5\u8981\u7684\u3002  \u5728 read_set \u6307\u5b9a\u4e86\u73b0\u6709\u7684\u914d\u7f6e\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5b83\u6697\u793a\u4e86\u53ea\u6709 version \u5b57\u6bb5\u5fc5\u987b\u63d0\u4f9b\u7684\uff0c\u800c\u4e14\u5b57\u6bb5\u662f\u53ef\u9009\u5219\u3002\u5b57\u6bb5 ConfigValue``value \u6216  ConfigPolicy``policy \u4e0d\u5141\u8bb8\u51fa\u73b0\u5728 read_set \u3002 ConfigGroup \u53ef\u4ee5\u586b\u5145\u5b83\u6620\u5c04\u5b57\u6bb5\u7684\u5b50\u96c6\uff0c\u4ee5\u4fbf\u5f15\u7528\u5728\u914d\u7f6e\u6811\u66f4\u6df1\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u8981 read_set \u4e2d\u5305\u62ec Application \u7ec4\uff0c\u5219\u5b83\u7684\u6bcd\u5143\u7d20\uff08\u8be5 Channel \u7ec4\uff09\u4e5f\u5fc5\u987b\u5305\u542b\u5728 read_set \u4e2d\uff0c\u4f46\u662f\uff0c\u8be5 Channel \u7ec4\u5e76\u4e0d\u9700\u8981\u586b\u5145\u6240\u6709\u7684key\uff0c\u5982 Orderer``group key\uff0c\u6216\u4efb\u4f55 values \u6216 policies key\u3002  write_set \u5b9a\u4e49\u4e86\u914d\u7f6e\u7684\u88ab\u4fee\u6539\u90e8\u5206\u3002\u7531\u4e8e\u914d\u7f6e\u7684\u5c42\u6b21\u6027\uff0c\u5bf9\u5c42\u6b21\u7ed3\u6784\u4e2d\u6df1\u5c42\u5143\u7d20\u7684\u5199\u5165\u64cd\u4f5c\u4e5f\u5fc5\u987b\u5728 write_set \u4ece\u5305\u542b\u5176\u66f4\u9ad8\u5c42\u6b21\u7684\u5143\u7d20\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e write_set \u4e2d\u4efb\u4f55\u5143\u7d20\uff0c\u5982\u679c\u4e5f\u51fa\u73b0\u5728 read_set \u4e2d\u4e14\u7248\u672c\u76f8\u540c\uff0c\u5219\u4f1a\u88ab\u66f4\u65b0\u5ffd\u7565\uff08\uff1f\uff09\u3002  \u4f8b\u5982\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u914d\u7f6e\uff1a  Channel: (version 0)\n    Orderer (version 0)\n    Appplication (version 3)\n       Org1 (version 2)  \u53bb\u9012\u4ea4\u4e00\u4e2a\u6539\u53d8 Org1 \u7684\u914d\u7f6e\u66f4\u65b0\uff0c read_set \u4f1a\u662f\uff1a  Channel: (version 0)\n    Application: (version 3)  \u800c\u5b83\u7684 write_set \u4f1a\u662f\uff1a  Channel: (version 0)\n    Application: (version 3)\n        Org1 (version 3)  \u5f53\u6536\u5230 CONFIG_UPDATE \uff0corderer\u4f1a\u6309\u4e0b\u9762\u7684\u6b65\u9aa4\u8ba1\u7b97\u7ed3\u679c\u96c6 CONFIG \uff1a\n1. \u68c0\u9a8c channel_id \u548c read_set \u3002\u6240\u6709 read_set \u4e2d\u5143\u7d20\u5fc5\u987b\u5b58\u5728\u4e14\u7248\u672c\u53f7\u76f8\u540c\u3002 \n2. \u901a\u8fc7\u6bd4\u8f83\u5b58\u5728\u4e8e write_set \u4e2d\u800c\u4e0d\u5b58\u5728\u4e8e read_set \u4e2d\u4e14\u7248\u672c\u53f7\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5f97\u5230\u66f4\u65b0\u5143\u7d20\u96c6\u3002 \n3. \u68c0\u9a8c\u66f4\u65b0\u5143\u7d20\u96c6\u4e2d\u7684\u5143\u7d20\u7248\u672c\u53f7\uff0c\u786e\u4fdd\u53ea\u589e\u957f\u4e861\u3002 \n4. \u5bf9\u66f4\u65b0\u5143\u7d20\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u68c0\u9a8c\u9488\u5bf9 ConfigUpdateEnvelope \u7684\u7b7e\u540d\u96c6\uff0c\u786e\u4fdd\u7b26\u5408 mod_policy \u3002 \n5. \u901a\u8fc7\u5c06\u66f4\u65b0\u96c6\u5e94\u7528\u5230\u5f53\u524d\u914d\u7f6e\uff0c\u8ba1\u7b97\u51fa\u914d\u7f6e\u7684\u4e00\u4e2a\u65b0\u5b8c\u5168\u7248\u672c\u3002 \n6. \u5c06\u65b0\u914d\u7f6e\u5199\u5165 ConfigEnvelope \uff0c\u5c06 CONFIG_UPDATE \u4f5c\u4e3a the last_update \u5b57\u6bb5\uff0c\u5e76\u4e0e\u589e\u957f\u7684 sequence \u503c\u4e00\u8d77\u5c06\u65b0\u914d\u7f6e\u7f16\u7801\u5165 config \u5b57\u6bb5\u3002 \n7. \u5c06\u4e00\u4e2a\u65b0\u7684 ConfigEnvelope \u4ee5\u7c7b\u578b CONFIG \u5199\u5165 Envelope \uff0c\u6700\u540e\u5c06\u8fd9\u4e2a\u4f5c\u4e3a\u552f\u4e00\u4ea4\u6613\u5199\u5165\u4e00\u4e2a\u65b0\u914d\u7f6e\u533a\u5757\u3002    \u5f53\u65b0\u7684peer(\u6216\u4efb\u4f55\u5176\u4ed6\u7684 Deliver \u63a5\u6536\u8005)\u63a5\u6536\u5230\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\uff0c\u5b83\u4f1a\u6821\u9a8c\u8fd9\u4e2a\u914d\u7f6e\uff0c\u65b9\u6cd5\u662f\u5c06 last_update \u6d88\u606f\u5e94\u7528\u5230\u5f53\u524d\u914d\u7f6e\uff0c\u786e\u4fddorderer\u8ba1\u7b97\u51fa\u6765\u7684 config \u5b57\u6bb5\u5305\u542b\u4e86\u6b63\u786e\u7684\u65b0\u914d\u7f6e\u3002", 
            "title": "\u914d\u7f6e\u66f4\u65b0"
        }, 
        {
            "location": "/configtx_zh/#groupvalue", 
            "text": "\u4efb\u4f55\u6709\u6548\u7684\u914d\u7f6e\u90fd\u662f\u4e0b\u9762\u914d\u7f6e\u7684\u5b50\u96c6\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7b26\u53f7 peer. MSG \u6765\u5b9a\u4e49\u4e00\u4e2a ConfigValue \uff0c\u5b83\u7684 value \u5b57\u6bb5\u662f\u4e00\u4e2a\u540d\u4e3a MSG \u7684marshaled proto\u6d88\u606f\uff08\u5b9a\u4e49\u5728 fabric/protos/peer/configuration.proto \uff09\u3002\u7b26\u53f7 common. MSG \u3001 msp. MSG \u548c orderer. MSG \u542b\u4e49\u7c7b\u4f3c\uff0c\u53ea\u662f\u5b83\u4eec\u7684\u6d88\u606f\u5206\u522b\u5b9a\u4e49\u5728 fabric/protos/common/configuration.proto \u3001 fabric/protos/msp/mspconfig.proto \u548c fabric/protos/orderer/configuration.proto \u3002    \u9700\u8981\u6ce8\u610f\u7684\u662fkey {{org_name}} \u548c {{consortium_name}} \u53ef\u4ee5\u662f\u4efb\u610f\u540d\u5b57\uff0c\u8fd9\u8868\u660e\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u4ee5\u4efb\u4f55\u540d\u5b57\u91cd\u590d\u51fa\u73b0\u3002    ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n         Application : ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                         MSP :msp.MSPConfig,\n                         AnchorPeers :peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n         Orderer : ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                         MSP :msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map string, *ConfigValue  {\n                 ConsensusType :orderer.ConsensusType,\n                 BatchSize :orderer.BatchSize,\n                 BatchTimeout :orderer.BatchTimeout,\n                 KafkaBrokers :orderer.KafkaBrokers,\n            },\n        },\n         Consortiums : ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{consortium_name}}: ConfigGroup{\n                    Groups:map string, *ConfigGroup  {\n                        {{org_name}}: ConfigGroup{\n                            Values:map string, *ConfigValue {\n                                 MSP :msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map string, *ConfigValue  {\n                         ChannelCreationPolicy :common.Policy,\n                    }\n                },\n            },\n        },\n    },\n\n    Values: map string, *ConfigValue  {\n         HashingAlgorithm :common.HashingAlgorithm,\n         BlockHashingDataStructure :common.BlockDataHashingStructure,\n         Consortium :common.Consortium,\n         OrdererAddresses :common.OrdererAddresses,\n    },\n}", 
            "title": "\u5141\u8bb8\u7684\u914d\u7f6e\u7ec4(group)\u548c\u503c(value)"
        }, 
        {
            "location": "/configtx_zh/#_3", 
            "text": "\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u9700\u8981\u5b9a\u4e49\u6392\u5e8f\u53c2\u6570\uff0c\u548c\u521b\u5efa\u901a\u9053\u7684\u8054\u76df\u3002\u5bf9\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u5fc5\u987b\u5b58\u5728\u4e00\u4e2a\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\uff0c\u5b83\u662f\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\uff08\u66f4\u51c6\u786e\u5730\u8bf4\u662f\u5f15\u5bfc\u65f6\u521b\u5efa\uff09\u3002\u5efa\u8bae\u4e0d\u8981\u5728\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u7684\u521b\u4e16\u914d\u7f6e\u4e2d\u5b9a\u4e49\u5e94\u7528\u90e8\u5206\uff08\u7684\u901a\u9053\uff09\uff0c\u4f46\u53ef\u4ee5\u5728\u6d4b\u8bd5\u65f6\u8fd9\u6837\u505a\u3002\u6ce8\u610f\uff0c\u5bf9\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u5177\u6709\u8bfb\u6743\u9650\u7684\u6210\u5458\u53ef\u4ee5\u770b\u5230\u6240\u6709\u901a\u9053\uff08\u7cfb\u7edf\u7684\u548c\u5e94\u7528\u7684\u6240\u6709\u901a\u9053\uff09\u7684\u521b\u5efa\uff0c\u6240\u4ee5\u8fd9\u4e2a\u901a\u9053\u7684\u8bbf\u95ee\u6743\u9650\u9700\u8981\u4e25\u683c\u63a7\u5236\u3002  \u6392\u5e8f\u53c2\u6570\u7528\u4e0b\u9762\u914d\u7f6e\u7684\u5b50\u96c6\u6765\u5b9a\u4e49\uff1a  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n         Orderer : ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                         MSP :msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map string, *ConfigValue  {\n                 ConsensusType :orderer.ConsensusType,\n                 BatchSize :orderer.BatchSize,\n                 BatchTimeout :orderer.BatchTimeout,\n                 KafkaBrokers :orderer.KafkaBrokers,\n            },\n        },\n    },  \u53c2\u4e0e\u6392\u5e8f\u7684\u6bcf\u4e2a\u7ec4\u7ec7\u5728 Orderer \u7ec4\u4e0b\u90fd\u6709\u4e00\u4e2a\u7ec4\u5143\u7d20\u3002\u8fd9\u4e2a\u7ec4\u5b9a\u4e49\u4e00\u4e2a MSP \u53c2\u6570\uff0c\u5b83\u5305\u542b\u4e86\u7ec4\u7ec7\u7684\u5bc6\u94a5id\u4fe1\u606f\u3002 Orderer \u7ec4\u7684 Values \u786e\u5b9a\u4e86\u6392\u5e8f\u8282\u70b9\u7684\u529f\u80fd\u3002\u5b83\u4eec\u5b58\u5728\u4e8e\u6bcf\u4e2a\u901a\u9053\uff0c\u6240\u4ee5\u5b9e\u4f8b\u7684 orderer.BatchTimeout \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u901a\u9053\u5b9a\u4e49\u4e0d\u540c\u7684\u503c\u3002  \u542f\u52a8\u65f6\uff0corderer\u4f1a\u9762\u5bf9\u4e00\u4e2a\u5305\u542b\u4e86\u591a\u4e2a\u901a\u9053\u4fe1\u606f\u7684\u6587\u4ef6\u7cfb\u7edf\u3002orderer\u6839\u636e\u8054\u76df\u7ec4\u901a\u9053\u5b9a\u4e49\u51fa\u7cfb\u7edf\u901a\u9053\u3002\u8054\u76df\u7ec4\u5177\u6709\u4e0b\u9762\u7684\u7ed3\u6784\uff1a  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n         Consortiums : ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{consortium_name}}: ConfigGroup{\n                    Groups:map string, *ConfigGroup  {\n                        {{org_name}}: ConfigGroup{\n                            Values:map string, *ConfigValue {\n                                 MSP :msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map string, *ConfigValue  {\n                         ChannelCreationPolicy :common.Policy,\n                    }\n                },\n            },\n        },\n    },\n},  \u6ce8\u610f\uff0c\u6bcf\u4e2a\u8054\u76df\u5b9a\u4e49\u4e86\u4e00\u7ec4\u6210\u5458\uff0c\u5c31\u50cf\u6392\u5e8f\u7ec4\u7ec7\u6210\u5458\u4e00\u6837\u3002\u6bcf\u4e2a\u8054\u76df\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2aChannelCreationPolicy\u3002\u8fd9\u4e2a\u7b56\u7565\u7528\u4e8e\u5bf9\u901a\u9053\u521b\u5efa\u8bf7\u6c42\u8fdb\u884c\u6388\u6743\u3002\u901a\u5e38\uff0c\u8fd9\u4e2a\u503c\u88ab\u8bbe\u4e3a ImplicitMetaPolicy \uff0c\u610f\u601d\u662f\u8981\u6c42\u901a\u9053\u7684\u65b0\u6210\u5458\u7b7e\u540d\u4ee5\u6388\u6743\u9891\u9053\u521b\u5efa(\u4e2a\u4eba\u7406\u89e3\uff1a\u6253\u7b97\u521b\u5efa\u4e00\u4e2a\u5305\u542bN\u4e2a\u7ec4\u7ec7\u7684\u901a\u9053\uff0c\u90a3\u4e48\u8fd9N\u4e2a\u7ec4\u7ec7\u90fd\u5f97\u7b7e\u540d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u5426\u51b3\u6743\uff0c\u6709\u7ec4\u7ec7\u4e0d\u540c\u610f\uff0c\u65b0\u901a\u9053\u5c31\u5efa\u4e0d\u8d77\u6765)\u3002\u5173\u4e8e\u901a\u9053\u521b\u5efa\u7684\u66f4\u591a\u5185\u5bb9\u5728\u6587\u7ae0\u7684\u540e\u9762\u8fd8\u6709\u3002", 
            "title": "\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u914d\u7f6e"
        }, 
        {
            "location": "/configtx_zh/#_4", 
            "text": "\u901a\u9053\u7684\u5e94\u7528\u914d\u7f6e\u88ab\u8bbe\u8ba1\u7528\u4e8e\u5e94\u7528\u7c7b\u578b\u7684\u4ea4\u6613\u3002\u5b83\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n         Application : ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                         MSP :msp.MSPConfig,\n                         AnchorPeers :peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n    },\n}  \u5f88\u50cf Orderer \u90e8\u5206\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u7ec4(group)\u3002\u7136\u800c\uff0c\u4e0d\u4ec5\u4ec5\u7f16\u7801\u4e86 MSP id\u4fe1\u606f\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u9644\u52a0\u7f16\u7801\u4e86\u4e00\u4e2a AnchorPeers \u5217\u8868\u3002\u8fd9\u662f\u4e00\u4e2a\u5141\u8bb8\u4e0d\u540c\u7ec4\u7ec7\u4e4b\u95f4\u901a\u8fc7peer gossip\u7f51\u7edc\u4e92\u76f8\u8054\u7cfb\u7684peer\u5217\u8868\uff08\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684peer\u624d\u53ef\u4ee5\u88ab\u5176\u4ed6\u7ec4\u7ec7\u7684peer\u201c\u770b\u5230\u201d\uff09\u3002  \u5e94\u7528\u901a\u9053\u7f16\u7801\u4e86\u4e00\u4e2aorderer\u7ec4\u7ec7\u7684\u526f\u672c\uff0c\u548c\u7528\u4e8e\u786e\u5b9a\u53d8\u66f4\u8fd9\u4e9b\u53c2\u6570\u7684\u5171\u8bc6\u9009\u9879\uff0c\u6240\u4ee5\u5305\u542b\u4e86\u7cfb\u7edf\u901a\u9053\u914d\u7f6e\u7684 Orderer \u90e8\u5206\u7684\u76f8\u540c\u5185\u5bb9\u3002\u7136\u800c\uff0c\u4ece\u5e94\u7528\u7684\u89c2\u70b9\u8fd9\u53ef\u4ee5\u88ab\u5927\u5927\u5ffd\u7565\u3002", 
            "title": "\u5e94\u7528\u901a\u9053\u914d\u7f6e"
        }, 
        {
            "location": "/configtx_zh/#_5", 
            "text": "\u5f53\u6392\u5e8f\u8282\u70b9\u6536\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u901a\u9053\u7684 CONFIG_UPDATE \uff0c\u6392\u5e8f\u8282\u70b9\u5c31\u5047\u5b9a\u8fd9\u662f\u4e2a\u901a\u9053\u521b\u5efa\u8bf7\u6c42\uff0c\u7136\u540e\u6267\u884c\u4e0b\u5217\u64cd\u4f5c\uff1a\n1. orderer\u786e\u5b9a\u53d1\u51fa\u901a\u9053\u521b\u5efa\u8bf7\u6c42\u7684\u8054\u76df\u8eab\u4efd\u3002\u5b83\u901a\u8fc7\u67e5\u770b\u9876\u5c42group\u7684 Consortium \u503c\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \n2. orderer\u9a8c\u8bc1\u5305\u542b\u5728 Application \u7ec4\u7684\u7ec4\u7ec7\uff0c\u786e\u4fdd\u8fd9\u4e9b\u7ec4\u7ec7\u662f\u8054\u76df\u4e0b\u5c5e(\u5b50\u96c6)\uff0c\u800c\u4e14 ApplicationGroup \u88ab\u8bbe\u7f6e\u4e3a version``1 \u3002 \n3. orderer\u9a8c\u8bc1\u8054\u76df\u662f\u5426\u6709\u6210\u5458\uff0c\u4ece\u800c\u65b0\u901a\u9053\u4f1a\u6709\u5e94\u7528\u6210\u5458(\u521b\u5efa\u6ca1\u6709\u6210\u5458\u7684\u8054\u76df\u548c\u901a\u9053\u4ec5\u7528\u4e8e\u6d4b\u8bd5)\u3002 \n4. orderer\u901a\u8fc7\u4ece\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u4e2d\u53d6\u5f97 Orderer \u7ec4\u6765\u521b\u5efa\u4e00\u4e2a\u6a21\u677f\u914d\u7f6e\uff0c\u7528\u65b0\u7684\u6210\u5458\u521b\u5efa\u4e00\u4e2a Application \u7ec4\u5e76\u6307\u5b9a mod_policy \u4e3a\u8054\u76df\u914d\u7f6e\u91cc\u7684 ChannelCreationPolicy \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7b56\u7565\u662f\u5728\u65b0\u914d\u7f6e\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u8bc4\u4f30\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u9700\u8981 ALL \u6210\u5458\u7684\u7b56\u7565\u4ec5\u9700\u8981\u5168\u90e8\u65b0\u901a\u9053\u6210\u5458\u7684\u7b7e\u540d\uff0c\u800c\u4e0d\u662f\u8054\u76df\u7684\u6240\u6709\u6210\u5458\u7b7e\u540d\u3002 \n5. orderer\u5c06 CONFIG_UPDATE \u4f5c\u4e3a\u4e00\u4e2a\u66f4\u65b0\u5e94\u7528\u5230\u8fd9\u4e2a\u6a21\u677f\u914d\u7f6e\u3002\u56e0\u4e3a\u8fd9\u4e2a CONFIG_UPDATE \u5e94\u7528\u53d8\u66f4\u5230 Application \u7ec4(\u5b83\u7684 version \u662f 1 )\uff0c\u914d\u7f6e\u4ee3\u7801\u7528 ChannelCreationPolicy \u9a8c\u8bc1\u8fd9\u4e9b\u66f4\u65b0\u3002\u5982\u679c\u901a\u9053\u521b\u5efa\u5305\u542b\u5176\u4ed6\u53d8\u66f4\uff0c\u5982\u4e2a\u522b\u7ec4\u7ec7\u7684\u951apeer\uff0c\u5143\u7d20\u7684\u76f8\u5e94mod policy\u4f1a\u88ab\u8c03\u7528\u3002 \n6. \u4e3a\u4e86\u6392\u5e8f\uff0c\u542b\u6709\u65b0\u901a\u9053\u914d\u7f6e\u7684\u65b0 CONFIG \u4ea4\u6613\u4f1a\u88ab\u5305\u88c5\u548c\u53d1\u9001\u5230\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u3002\u6392\u5e8f\u540e\uff0c\u901a\u9053\u5c31\u521b\u5efa\u4e86\u3002", 
            "title": "\u901a\u9053\u521b\u5efa"
        }, 
        {
            "location": "/configtxgen_zh/", 
            "text": "\u901a\u9053\u914d\u7f6e(configtxgen)\n\n\n\u672c\u6587\u6863\u4ecb\u7ecd\u4e86\nconfigtxgen\n\u7684\u7528\u6cd5\uff0c\u5b83\u662f\u64cd\u4f5cHyperledger Fabric\u901a\u9053\u914d\u7f6e\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002\n\n\n\u76ee\u524d\uff0c\u8be5\u5de5\u5177\u4e3b\u8981\u4fa7\u91cd\u4e8e\u751f\u6210\u7528\u4e8e\u5f15\u5bfcorderer\u7684\u521b\u4e16\u533a\u5757\uff0c\u4f46\u662f\u5c06\u6765\u8981\u589e\u5f3a\u751f\u6210\u65b0\u7684\u901a\u9053\u914d\u7f6e\u4ee5\u53ca\u91cd\u65b0\u914d\u7f6e\u73b0\u6709\u901a\u9053\u3002  \n\n\n\u914d\u7f6eprofile\n\n\n\u4e3a\nconfigtxgen\n\u5de5\u5177\u63d0\u4f9b\u914d\u7f6e\u53c2\u6570\u7684\u4e3b\u8981\u4f9b\u7ed9\u662f\u6587\u4ef6\nconfigtx.yaml\n\u3002\u8fd9\u4e2a\u4f4d\u4e8efabric.git\u5e93\u7684\nfabric/sampleconfig/configtx.yaml\n\u4f4d\u7f6e\u3002\n\n\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u5206\u4e3a\u4e09\u90e8\u5206\uff1a\n\n\n\n\nProfiles\n\u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u90e8\u5206\u5305\u542b\u4e00\u4e9b\u53ef\u4ee5\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u573a\u666f\u793a\u8303\u914d\u7f6e\uff0c\u4f7f\u7528\u4e86fabric.git\u6811\u4e2d\u7684\u5bc6\u94a5\u6750\u6599\u3002\u8fd9\u4e9bprofile\u5bf9\u4e8e\u7ec4\u7ec7\u4e00\u4e2a\u5b9e\u9645\u7684\u90e8\u7f72profile\u662f\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\nconfigtxgen\n\u5de5\u5177\u5141\u8bb8\u4f60\u7528\n-profile\n\u6807\u5fd7\u6765\u6307\u5b9aprofile\u3002profile\u53ef\u4ee5\u660e\u786e\u5730\u8868\u660e\u6240\u6709\u914d\u7f6e\uff0c\u4f46\u901a\u5e38\u4ece\u7b2c3\u90e8\u5206(\u9ed8\u8ba4\u90e8\u5206)\u7ee7\u627f\u914d\u7f6e\u3002  \n\n\nOrganizations\n\u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90e8\u5206\u5305\u542b\u6307\u5411sampleconfig MSP\u5b9a\u4e49\u7684\u4e00\u4e2a\u7b80\u5355\u5f15\u7528\u3002\u5bf9\u4e8e\u751f\u4ea7\u90e8\u7f72\uff0c\u793a\u8303\u7ec4\u7ec7\u4f1a\u88ab\u79fb\u9664\uff0c\u7f51\u7edc\u6210\u5458\u7684MSP\u5b9a\u4e49\u4f1a\u88ab\u5f15\u7528\u548c\u5b9a\u4e49\u3002\nOrganizations\n\u90e8\u5206\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u6253\u4e0a\u4e00\u4e2a\u951a\u70b9\u6807\u7b7e\u5982\norgName\n\uff0c\u8fd9\u5141\u8bb8\u8fd9\u4e2a\u5b9a\u4e49\u88ab\nProfiles\n\u90e8\u5206\u5f15\u7528\u3002  \n\n\n\u9ed8\u8ba4\u90e8\u5206\u3002\u8fd9\u91cc\u6709\nOrderer\n\u548c\nApplication\n\u90e8\u5206\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5305\u62ec\u8c61\nBatchTimeout\n\u8fd9\u6837\u7684\u5c5e\u6027\u548c\u901a\u5e38\u7528\u4f5cprofile\u7684\u57fa\u672c\u7ee7\u627f\u503c\u7684\u5c5e\u6027\u3002  \n\n\n\n\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u88ab\u7f16\u8f91\uff0c\u6216\u8005\u5355\u4e2a\u5c5e\u6027\u53ef\u80fd\u88ab\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff0c\u6bd4\u5982\nCONFIGTX_ORDERER_ORDERERTYPE=kafka\n\u3002\u8bf7\u6ce8\u610f\uff0c\nProfiles\n \u5143\u7d20\u548cprofile\u540d\u79f0\u4e0d\u9700\u8981\u6307\u5b9a\u3002\n\n\n\u5f15\u5bfcorderer\n\n\n\u521b\u5efa\u4e00\u4e2a\u671f\u671b\u7684\u914d\u7f6eprofile\uff0c\u7b80\u5355\u8c03\u7528\uff1a\n\n\n$ configtxgen -profile \nprofile_name\n -outputBlock orderer_genesisblock.pb\n\n\n\n\n\u5c06\u5728\u5f53\u9762\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\norderer_genesisblock.pb\n\u6587\u4ef6\u3002\u8fd9\u4e2a\u521b\u4e16\u533a\u5757\u88ab\u7528\u4e8e\u5f15\u5bfc\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\uff0c\u8be5\u901a\u9053\u88aborderer\u7528\u4e8e\u6388\u6743\u548c\u7f16\u6392\u5176\u4ed6\u901a\u9053\u7684\u521b\u5efa\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531\nconfigtxgen\n\u751f\u6210\uff0c\u7f16\u7801\u8fdb\u521b\u4e16\u533a\u5757\u7684\u901a\u9053ID\u662f\ntestchainid\n\u3002\u5efa\u8bae\u4f60\u4fee\u6539\u8fd9\u4e2a\u503c\u4e3a\u67d0\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u503c\u3002  \n\n\n\u4e3a\u4e86\u5229\u7528\u751f\u6210\u7684\u521b\u4e16\u533a\u5757\uff0c\u5728\u542f\u52a8orderer\u4e4b\u524d\uff0c\u9700\u8981\u8bbe\u5b9a\u73af\u5883\u53d8\u91cf\uff1a\n\n\nORDERER_GENERAL_GENESISMETHOD=file\nORDERER_GENERAL_GENESISFILE=$PWD/orderer_genesisblock.pb\n\n\n\n\n\u6216\u8005\u4fee\u6539\u914d\u7f6e\u6587\u4ef6orderer.yaml\uff0c\u5c06\u4e0a\u8ff0\u503c\u5305\u542b\u8fdb\u6587\u4ef6\u4e2d\u3002  \n\n\n\u521b\u5efa\u4e00\u4e2a\u901a\u9053\n\n\n\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u8f93\u51fa\u4e00\u4e2a\u901a\u9053\u521b\u5efatx\uff1a\n\n\n$ configtxgen -profile \nprofile_name\n -channelID \nchannel_name\n -outputCreateChannelTx \ntx_filename\n\n\n\n\n\n\u8fd9\u4f1a\u8f93\u51fa\u4e00\u4e2a\u53ef\u4ee5\u5e7f\u64ad\u51fa\u53bb\u521b\u5efa\u901a\u9053\u7684marshaled \nEnvelope\n\u6d88\u606f\u3002\n\n\n\u663e\u793a\u4e00\u4e2a\u914d\u7f6e\n\n\n\u9664\u4e86\u751f\u6210\u914d\u7f6e\u4ee5\u5916\uff0c\nconfigtxgen\n\u5de5\u5177\u8fd8\u6709\u67e5\u770b\u914d\u7f6e\u7684\u80fd\u529b\u3002\n\n\u5b83\u652f\u6301\u67e5\u770b\u914d\u7f6e\u533a\u5757\u548c\u914d\u7f6e\u4ea4\u6613\u3002\u53ef\u4ee5\u5206\u522b\u4f7f\u7528\u67e5\u770b\u6807\u5fd7\n-inspectBlock\n\u548c\n-inspectChannelCreateTx\n\u5e76\u5728\u540e\u9762\u9644\u52a0\u6587\u4ef6\u8def\u5f84\u6765\u8f93\u51fa\u4e00\u4e2aJSON\u4e32\u6765\u663e\u793a\u914d\u7f6e\u4fe1\u606f\u3002\n\n\u8fd8\u53ef\u4ee5\u5bf9\u67e5\u770b\u6807\u5fd7\u8fdb\u884c\u7ec4\u5408\uff0c\u4f8b\u5982\uff1a\n\n\n$ configtxgen -channelID foo -outputBlock foo_genesisblock.pb -inspectBlock foo_genesisblock.pb\n2017-11-02 17:56:04.489 EDT [common/tools/configtxgen] main -\n INFO 001 Loading configuration\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doOutputBlock -\n INFO 002 Generating genesis block\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doOutputBlock -\n INFO 003 Writing genesis block\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doInspectBlock -\n INFO 004 Inspecting block\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doInspectBlock -\n INFO 005 Parsing genesis block\n{\n  \ndata\n: {\n    \ndata\n: [\n      {\n        \npayload\n: {\n          \ndata\n: {\n            \nconfig\n: {\n              \nchannel_group\n: {\n                \ngroups\n: {\n                  \nConsortiums\n: {\n                    \ngroups\n: {\n                      \nSampleConsortium\n: {\n                        \nmod_policy\n: \n/Channel/Orderer/Admins\n,\n                        \nvalues\n: {\n                          \nChannelCreationPolicy\n: {\n                            \nmod_policy\n: \n/Channel/Orderer/Admins\n,\n                            \nvalue\n: {\n                              \ntype\n: 3,\n                              \nvalue\n: {\n                                \nrule\n: \nANY\n,\n                                \nsub_policy\n: \nAdmins\n\n                              }\n                            },\n                            \nversion\n: \n0\n\n                          }\n                        },\n                        \nversion\n: \n0\n\n                      }\n                    },\n                    \nmod_policy\n: \n/Channel/Orderer/Admins\n,\n                    \npolicies\n: {\n                      \nAdmins\n: {\n                        \nmod_policy\n: \n/Channel/Orderer/Admins\n,\n                        \npolicy\n: {\n                          \ntype\n: 1,\n                          \nvalue\n: {\n                            \nrule\n: {\n                              \nn_out_of\n: {\n                                \nn\n: 0\n                              }\n                            },\n                            \nversion\n: 0\n                          }\n                        },\n                        \nversion\n: \n0\n\n                      }\n                    },\n                    \nversion\n: \n0\n\n                  },\n                  \nOrderer\n: {\n                    \nmod_policy\n: \nAdmins\n,\n                    \npolicies\n: {\n                      \nAdmins\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \npolicy\n: {\n                          \ntype\n: 3,\n                          \nvalue\n: {\n                            \nrule\n: \nMAJORITY\n,\n                            \nsub_policy\n: \nAdmins\n\n                          }\n                        },\n                        \nversion\n: \n0\n\n                      },\n                      \nBlockValidation\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \npolicy\n: {\n                          \ntype\n: 3,\n                          \nvalue\n: {\n                            \nrule\n: \nANY\n,\n                            \nsub_policy\n: \nWriters\n\n                          }\n                        },\n                        \nversion\n: \n0\n\n                      },\n                      \nReaders\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \npolicy\n: {\n                          \ntype\n: 3,\n                          \nvalue\n: {\n                            \nrule\n: \nANY\n,\n                            \nsub_policy\n: \nReaders\n\n                          }\n                        },\n                        \nversion\n: \n0\n\n                      },\n                      \nWriters\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \npolicy\n: {\n                          \ntype\n: 3,\n                          \nvalue\n: {\n                            \nrule\n: \nANY\n,\n                            \nsub_policy\n: \nWriters\n\n                          }\n                        },\n                        \nversion\n: \n0\n\n                      }\n                    },\n                    \nvalues\n: {\n                      \nBatchSize\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \nvalue\n: {\n                          \nabsolute_max_bytes\n: 10485760,\n                          \nmax_message_count\n: 10,\n                          \npreferred_max_bytes\n: 524288\n                        },\n                        \nversion\n: \n0\n\n                      },\n                      \nBatchTimeout\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \nvalue\n: {\n                          \ntimeout\n: \n2s\n\n                        },\n                        \nversion\n: \n0\n\n                      },\n                      \nChannelRestrictions\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \nversion\n: \n0\n\n                      },\n                      \nConsensusType\n: {\n                        \nmod_policy\n: \nAdmins\n,\n                        \nvalue\n: {\n                          \ntype\n: \nsolo\n\n                        },\n                        \nversion\n: \n0\n\n                      }\n                    },\n                    \nversion\n: \n0\n\n                  }\n                },\n                \nmod_policy\n: \nAdmins\n,\n                \npolicies\n: {\n                  \nAdmins\n: {\n                    \nmod_policy\n: \nAdmins\n,\n                    \npolicy\n: {\n                      \ntype\n: 3,\n                      \nvalue\n: {\n                        \nrule\n: \nMAJORITY\n,\n                        \nsub_policy\n: \nAdmins\n\n                      }\n                    },\n                    \nversion\n: \n0\n\n                  },\n                  \nReaders\n: {\n                    \nmod_policy\n: \nAdmins\n,\n                    \npolicy\n: {\n                      \ntype\n: 3,\n                      \nvalue\n: {\n                        \nrule\n: \nANY\n,\n                        \nsub_policy\n: \nReaders\n\n                      }\n                    },\n                    \nversion\n: \n0\n\n                  },\n                  \nWriters\n: {\n                    \nmod_policy\n: \nAdmins\n,\n                    \npolicy\n: {\n                      \ntype\n: 3,\n                      \nvalue\n: {\n                        \nrule\n: \nANY\n,\n                        \nsub_policy\n: \nWriters\n\n                      }\n                    },\n                    \nversion\n: \n0\n\n                  }\n                },\n                \nvalues\n: {\n                  \nBlockDataHashingStructure\n: {\n                    \nmod_policy\n: \nAdmins\n,\n                    \nvalue\n: {\n                      \nwidth\n: 4294967295\n                    },\n                    \nversion\n: \n0\n\n                  },\n                  \nHashingAlgorithm\n: {\n                    \nmod_policy\n: \nAdmins\n,\n                    \nvalue\n: {\n                      \nname\n: \nSHA256\n\n                    },\n                    \nversion\n: \n0\n\n                  },\n                  \nOrdererAddresses\n: {\n                    \nmod_policy\n: \n/Channel/Orderer/Admins\n,\n                    \nvalue\n: {\n                      \naddresses\n: [\n                        \n127.0.0.1:7050\n\n                      ]\n                    },\n                    \nversion\n: \n0\n\n                  }\n                },\n                \nversion\n: \n0\n\n              },\n              \nsequence\n: \n0\n,\n              \ntype\n: 0\n            }\n          },\n          \nheader\n: {\n            \nchannel_header\n: {\n              \nchannel_id\n: \nfoo\n,\n              \nepoch\n: \n0\n,\n              \ntimestamp\n: \n2017-11-02T21:56:04.000Z\n,\n              \ntx_id\n: \n6acfe1257c23a4f844cc299cbf53acc7bf8fa8bcf8aae8d049193098fe982eab\n,\n              \ntype\n: 1,\n              \nversion\n: 1\n            },\n            \nsignature_header\n: {\n              \nnonce\n: \neZOKru6jmeiWykBtSDwnkGjyQt69GwuS\n\n            }\n          }\n        }\n      }\n    ]\n  },\n  \nheader\n: {\n    \ndata_hash\n: \n/86I/7NScbH/bHcDcYG0/9qTmVPWVoVVfSN8NKMARKI=\n,\n    \nnumber\n: \n0\n\n  },\n  \nmetadata\n: {\n    \nmetadata\n: [\n      \n,\n      \n,\n      \n,\n      \n\n    ]\n  }\n}\n\n\n\n\n\u4e0a\u8ff0\u547d\u4ee4\u5148\u751f\u6210\u533a\u5757\uff0c\u518d\u663e\u793a\u5b83\u3002", 
            "title": "Channel \u914d\u7f6e(configtxgen)"
        }, 
        {
            "location": "/configtxgen_zh/#configtxgen", 
            "text": "\u672c\u6587\u6863\u4ecb\u7ecd\u4e86 configtxgen \u7684\u7528\u6cd5\uff0c\u5b83\u662f\u64cd\u4f5cHyperledger Fabric\u901a\u9053\u914d\u7f6e\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002  \u76ee\u524d\uff0c\u8be5\u5de5\u5177\u4e3b\u8981\u4fa7\u91cd\u4e8e\u751f\u6210\u7528\u4e8e\u5f15\u5bfcorderer\u7684\u521b\u4e16\u533a\u5757\uff0c\u4f46\u662f\u5c06\u6765\u8981\u589e\u5f3a\u751f\u6210\u65b0\u7684\u901a\u9053\u914d\u7f6e\u4ee5\u53ca\u91cd\u65b0\u914d\u7f6e\u73b0\u6709\u901a\u9053\u3002", 
            "title": "\u901a\u9053\u914d\u7f6e(configtxgen)"
        }, 
        {
            "location": "/configtxgen_zh/#profile", 
            "text": "\u4e3a configtxgen \u5de5\u5177\u63d0\u4f9b\u914d\u7f6e\u53c2\u6570\u7684\u4e3b\u8981\u4f9b\u7ed9\u662f\u6587\u4ef6 configtx.yaml \u3002\u8fd9\u4e2a\u4f4d\u4e8efabric.git\u5e93\u7684 fabric/sampleconfig/configtx.yaml \u4f4d\u7f6e\u3002  \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u5206\u4e3a\u4e09\u90e8\u5206\uff1a   Profiles \u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u90e8\u5206\u5305\u542b\u4e00\u4e9b\u53ef\u4ee5\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u573a\u666f\u793a\u8303\u914d\u7f6e\uff0c\u4f7f\u7528\u4e86fabric.git\u6811\u4e2d\u7684\u5bc6\u94a5\u6750\u6599\u3002\u8fd9\u4e9bprofile\u5bf9\u4e8e\u7ec4\u7ec7\u4e00\u4e2a\u5b9e\u9645\u7684\u90e8\u7f72profile\u662f\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002 configtxgen \u5de5\u5177\u5141\u8bb8\u4f60\u7528 -profile \u6807\u5fd7\u6765\u6307\u5b9aprofile\u3002profile\u53ef\u4ee5\u660e\u786e\u5730\u8868\u660e\u6240\u6709\u914d\u7f6e\uff0c\u4f46\u901a\u5e38\u4ece\u7b2c3\u90e8\u5206(\u9ed8\u8ba4\u90e8\u5206)\u7ee7\u627f\u914d\u7f6e\u3002    Organizations \u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90e8\u5206\u5305\u542b\u6307\u5411sampleconfig MSP\u5b9a\u4e49\u7684\u4e00\u4e2a\u7b80\u5355\u5f15\u7528\u3002\u5bf9\u4e8e\u751f\u4ea7\u90e8\u7f72\uff0c\u793a\u8303\u7ec4\u7ec7\u4f1a\u88ab\u79fb\u9664\uff0c\u7f51\u7edc\u6210\u5458\u7684MSP\u5b9a\u4e49\u4f1a\u88ab\u5f15\u7528\u548c\u5b9a\u4e49\u3002 Organizations \u90e8\u5206\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u6253\u4e0a\u4e00\u4e2a\u951a\u70b9\u6807\u7b7e\u5982 orgName \uff0c\u8fd9\u5141\u8bb8\u8fd9\u4e2a\u5b9a\u4e49\u88ab Profiles \u90e8\u5206\u5f15\u7528\u3002    \u9ed8\u8ba4\u90e8\u5206\u3002\u8fd9\u91cc\u6709 Orderer \u548c Application \u90e8\u5206\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5305\u62ec\u8c61 BatchTimeout \u8fd9\u6837\u7684\u5c5e\u6027\u548c\u901a\u5e38\u7528\u4f5cprofile\u7684\u57fa\u672c\u7ee7\u627f\u503c\u7684\u5c5e\u6027\u3002     \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u88ab\u7f16\u8f91\uff0c\u6216\u8005\u5355\u4e2a\u5c5e\u6027\u53ef\u80fd\u88ab\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff0c\u6bd4\u5982 CONFIGTX_ORDERER_ORDERERTYPE=kafka \u3002\u8bf7\u6ce8\u610f\uff0c Profiles  \u5143\u7d20\u548cprofile\u540d\u79f0\u4e0d\u9700\u8981\u6307\u5b9a\u3002", 
            "title": "\u914d\u7f6eprofile"
        }, 
        {
            "location": "/configtxgen_zh/#orderer", 
            "text": "\u521b\u5efa\u4e00\u4e2a\u671f\u671b\u7684\u914d\u7f6eprofile\uff0c\u7b80\u5355\u8c03\u7528\uff1a  $ configtxgen -profile  profile_name  -outputBlock orderer_genesisblock.pb  \u5c06\u5728\u5f53\u9762\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a orderer_genesisblock.pb \u6587\u4ef6\u3002\u8fd9\u4e2a\u521b\u4e16\u533a\u5757\u88ab\u7528\u4e8e\u5f15\u5bfc\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\uff0c\u8be5\u901a\u9053\u88aborderer\u7528\u4e8e\u6388\u6743\u548c\u7f16\u6392\u5176\u4ed6\u901a\u9053\u7684\u521b\u5efa\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531 configtxgen \u751f\u6210\uff0c\u7f16\u7801\u8fdb\u521b\u4e16\u533a\u5757\u7684\u901a\u9053ID\u662f testchainid \u3002\u5efa\u8bae\u4f60\u4fee\u6539\u8fd9\u4e2a\u503c\u4e3a\u67d0\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u503c\u3002    \u4e3a\u4e86\u5229\u7528\u751f\u6210\u7684\u521b\u4e16\u533a\u5757\uff0c\u5728\u542f\u52a8orderer\u4e4b\u524d\uff0c\u9700\u8981\u8bbe\u5b9a\u73af\u5883\u53d8\u91cf\uff1a  ORDERER_GENERAL_GENESISMETHOD=file\nORDERER_GENERAL_GENESISFILE=$PWD/orderer_genesisblock.pb  \u6216\u8005\u4fee\u6539\u914d\u7f6e\u6587\u4ef6orderer.yaml\uff0c\u5c06\u4e0a\u8ff0\u503c\u5305\u542b\u8fdb\u6587\u4ef6\u4e2d\u3002", 
            "title": "\u5f15\u5bfcorderer"
        }, 
        {
            "location": "/configtxgen_zh/#_1", 
            "text": "\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u8f93\u51fa\u4e00\u4e2a\u901a\u9053\u521b\u5efatx\uff1a  $ configtxgen -profile  profile_name  -channelID  channel_name  -outputCreateChannelTx  tx_filename   \u8fd9\u4f1a\u8f93\u51fa\u4e00\u4e2a\u53ef\u4ee5\u5e7f\u64ad\u51fa\u53bb\u521b\u5efa\u901a\u9053\u7684marshaled  Envelope \u6d88\u606f\u3002", 
            "title": "\u521b\u5efa\u4e00\u4e2a\u901a\u9053"
        }, 
        {
            "location": "/configtxgen_zh/#_2", 
            "text": "\u9664\u4e86\u751f\u6210\u914d\u7f6e\u4ee5\u5916\uff0c configtxgen \u5de5\u5177\u8fd8\u6709\u67e5\u770b\u914d\u7f6e\u7684\u80fd\u529b\u3002 \n\u5b83\u652f\u6301\u67e5\u770b\u914d\u7f6e\u533a\u5757\u548c\u914d\u7f6e\u4ea4\u6613\u3002\u53ef\u4ee5\u5206\u522b\u4f7f\u7528\u67e5\u770b\u6807\u5fd7 -inspectBlock \u548c -inspectChannelCreateTx \u5e76\u5728\u540e\u9762\u9644\u52a0\u6587\u4ef6\u8def\u5f84\u6765\u8f93\u51fa\u4e00\u4e2aJSON\u4e32\u6765\u663e\u793a\u914d\u7f6e\u4fe1\u606f\u3002 \n\u8fd8\u53ef\u4ee5\u5bf9\u67e5\u770b\u6807\u5fd7\u8fdb\u884c\u7ec4\u5408\uff0c\u4f8b\u5982\uff1a  $ configtxgen -channelID foo -outputBlock foo_genesisblock.pb -inspectBlock foo_genesisblock.pb\n2017-11-02 17:56:04.489 EDT [common/tools/configtxgen] main -  INFO 001 Loading configuration\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doOutputBlock -  INFO 002 Generating genesis block\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doOutputBlock -  INFO 003 Writing genesis block\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doInspectBlock -  INFO 004 Inspecting block\n2017-11-02 17:56:04.564 EDT [common/tools/configtxgen] doInspectBlock -  INFO 005 Parsing genesis block\n{\n   data : {\n     data : [\n      {\n         payload : {\n           data : {\n             config : {\n               channel_group : {\n                 groups : {\n                   Consortiums : {\n                     groups : {\n                       SampleConsortium : {\n                         mod_policy :  /Channel/Orderer/Admins ,\n                         values : {\n                           ChannelCreationPolicy : {\n                             mod_policy :  /Channel/Orderer/Admins ,\n                             value : {\n                               type : 3,\n                               value : {\n                                 rule :  ANY ,\n                                 sub_policy :  Admins \n                              }\n                            },\n                             version :  0 \n                          }\n                        },\n                         version :  0 \n                      }\n                    },\n                     mod_policy :  /Channel/Orderer/Admins ,\n                     policies : {\n                       Admins : {\n                         mod_policy :  /Channel/Orderer/Admins ,\n                         policy : {\n                           type : 1,\n                           value : {\n                             rule : {\n                               n_out_of : {\n                                 n : 0\n                              }\n                            },\n                             version : 0\n                          }\n                        },\n                         version :  0 \n                      }\n                    },\n                     version :  0 \n                  },\n                   Orderer : {\n                     mod_policy :  Admins ,\n                     policies : {\n                       Admins : {\n                         mod_policy :  Admins ,\n                         policy : {\n                           type : 3,\n                           value : {\n                             rule :  MAJORITY ,\n                             sub_policy :  Admins \n                          }\n                        },\n                         version :  0 \n                      },\n                       BlockValidation : {\n                         mod_policy :  Admins ,\n                         policy : {\n                           type : 3,\n                           value : {\n                             rule :  ANY ,\n                             sub_policy :  Writers \n                          }\n                        },\n                         version :  0 \n                      },\n                       Readers : {\n                         mod_policy :  Admins ,\n                         policy : {\n                           type : 3,\n                           value : {\n                             rule :  ANY ,\n                             sub_policy :  Readers \n                          }\n                        },\n                         version :  0 \n                      },\n                       Writers : {\n                         mod_policy :  Admins ,\n                         policy : {\n                           type : 3,\n                           value : {\n                             rule :  ANY ,\n                             sub_policy :  Writers \n                          }\n                        },\n                         version :  0 \n                      }\n                    },\n                     values : {\n                       BatchSize : {\n                         mod_policy :  Admins ,\n                         value : {\n                           absolute_max_bytes : 10485760,\n                           max_message_count : 10,\n                           preferred_max_bytes : 524288\n                        },\n                         version :  0 \n                      },\n                       BatchTimeout : {\n                         mod_policy :  Admins ,\n                         value : {\n                           timeout :  2s \n                        },\n                         version :  0 \n                      },\n                       ChannelRestrictions : {\n                         mod_policy :  Admins ,\n                         version :  0 \n                      },\n                       ConsensusType : {\n                         mod_policy :  Admins ,\n                         value : {\n                           type :  solo \n                        },\n                         version :  0 \n                      }\n                    },\n                     version :  0 \n                  }\n                },\n                 mod_policy :  Admins ,\n                 policies : {\n                   Admins : {\n                     mod_policy :  Admins ,\n                     policy : {\n                       type : 3,\n                       value : {\n                         rule :  MAJORITY ,\n                         sub_policy :  Admins \n                      }\n                    },\n                     version :  0 \n                  },\n                   Readers : {\n                     mod_policy :  Admins ,\n                     policy : {\n                       type : 3,\n                       value : {\n                         rule :  ANY ,\n                         sub_policy :  Readers \n                      }\n                    },\n                     version :  0 \n                  },\n                   Writers : {\n                     mod_policy :  Admins ,\n                     policy : {\n                       type : 3,\n                       value : {\n                         rule :  ANY ,\n                         sub_policy :  Writers \n                      }\n                    },\n                     version :  0 \n                  }\n                },\n                 values : {\n                   BlockDataHashingStructure : {\n                     mod_policy :  Admins ,\n                     value : {\n                       width : 4294967295\n                    },\n                     version :  0 \n                  },\n                   HashingAlgorithm : {\n                     mod_policy :  Admins ,\n                     value : {\n                       name :  SHA256 \n                    },\n                     version :  0 \n                  },\n                   OrdererAddresses : {\n                     mod_policy :  /Channel/Orderer/Admins ,\n                     value : {\n                       addresses : [\n                         127.0.0.1:7050 \n                      ]\n                    },\n                     version :  0 \n                  }\n                },\n                 version :  0 \n              },\n               sequence :  0 ,\n               type : 0\n            }\n          },\n           header : {\n             channel_header : {\n               channel_id :  foo ,\n               epoch :  0 ,\n               timestamp :  2017-11-02T21:56:04.000Z ,\n               tx_id :  6acfe1257c23a4f844cc299cbf53acc7bf8fa8bcf8aae8d049193098fe982eab ,\n               type : 1,\n               version : 1\n            },\n             signature_header : {\n               nonce :  eZOKru6jmeiWykBtSDwnkGjyQt69GwuS \n            }\n          }\n        }\n      }\n    ]\n  },\n   header : {\n     data_hash :  /86I/7NScbH/bHcDcYG0/9qTmVPWVoVVfSN8NKMARKI= ,\n     number :  0 \n  },\n   metadata : {\n     metadata : [\n       ,\n       ,\n       ,\n       \n    ]\n  }\n}  \u4e0a\u8ff0\u547d\u4ee4\u5148\u751f\u6210\u533a\u5757\uff0c\u518d\u663e\u793a\u5b83\u3002", 
            "title": "\u663e\u793a\u4e00\u4e2a\u914d\u7f6e"
        }, 
        {
            "location": "/configtxlator_zh/", 
            "text": "\u7528configtxlator\u91cd\u65b0\u914d\u7f6e\n\n\n\u539f\u6587\n  \n\n\n\u6982\u8ff0\n\n\n\u521b\u5efa\nconfigtxlator\n\u5de5\u5177\u7684\u76ee\u7684\u662f\u652f\u6301\u4e0d\u4f9d\u8d56SDK\u7684\u91cd\u65b0\u914d\u7f6e\u3002\u901a\u9053\u914d\u7f6e\u88ab\u5f53\u4f5c\u4e00\u4e2a\u4ea4\u6613\u5b58\u50a8\u5728\u901a\u9053\u7684\u914d\u7f6e\u533a\u5757\u4e2d\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u64cd\u4f5c\uff0c\u5982\u5728bdd\u884c\u4e3a\u6d4b\u8bd5\u4e2d\u3002\u4e0d\u8fc7\uff0c\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0cSDK\u672c\u8eab\u4e0d\u652f\u6301\u76f4\u63a5\u64cd\u4f5c\u914d\u7f6e\uff0c\u56e0\u6b64\u8be5configtxlator\u5de5\u5177\u65e8\u5728\u63d0\u4f9bAPI\uff0c\u4f9b\u4efb\u4f55SDK\u7684\u4f7f\u7528\u8005\u4e0e\u4e4b\u4ea4\u4e92\u4ee5\u534f\u52a9\u914d\u7f6e\u66f4\u65b0\u3002\n\n\n\u5de5\u5177\u540d\u79f0\u662fconfigtx\u548ctranslator\u7684\u6df7\u5408\uff0c\u65e8\u5728\u8868\u8fbe\u8be5\u5de5\u5177\u53ea\u662f\u5728\u4e24\u8005\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u5b83\u4e0d\u4f1a\u751f\u6210\u914d\u7f6e\u3002\u5b83\u4e0d\u9012\u4ea4\u6216\u68c0\u7d22\u914d\u7f6e\u3002\u5b83\u4e0d\u4f1a\u81ea\u5df1\u4fee\u6539\u914d\u7f6e\uff0c\u5b83\u53ea\u662f\u5728configtx\u683c\u5f0f\u7684\u4e0d\u540c\u89c6\u56fe\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e9b\u53cc\u5411\u64cd\u4f5c\u3002\n\n\n\u6807\u51c6\u7528\u6cd5\u4e3a\uff1a\n\n\n\n\nSDK\u68c0\u7d22\u6700\u65b0\u7684\u914d\u7f6e  \n\n\nconfigtxlator\n \u4ea7\u751f\u4eba\u7c7b\u53ef\u8bfb\u7684\u914d\u7f6e\u7248\u672c  \n\n\n\u7528\u6237\u6216\u5e94\u7528\u7a0b\u5e8f\u7f16\u8f91\u914d\u7f6e  \n\n\nconfigtxlator\n\u7528\u4e8e\u8ba1\u7b97\u914d\u7f6e\u7684\u53d8\u66f4  \n\n\nSDK\u9012\u4ea4\u7b7e\u540d\u548c\u9012\u4ea4\u914d\u7f6e  \n\n\n\n\nconfigtxlator\n\u5de5\u5177\u66b4\u9732\u4e86\u4e00\u4e2a\u771f\u6b63\u7684\u65e0\u72b6\u6001\u7684REST API\u6765\u4e0e\u914d\u7f6e\u5143\u7d20\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u4e9bREST\u7ec4\u4ef6\u652f\u6301\u5c06\u539f\u751f\u914d\u7f6e\u683c\u5f0f\u8f6c\u6362\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u7684JSON\u683c\u5f0f\uff0c\u6216\u8005\u6839\u636e\u4e24\u79cd\u914d\u7f6e\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u8ba1\u7b97\u914d\u7f6e\u53d8\u66f4\u3002\n\n\n\u7531\u4e8e\nconfigtxlator\n\u670d\u52a1\u6545\u610f\u4e0d\u5305\u542b\u4efb\u4f55\u5bc6\u94a5\u6750\u6599\u6216\u5176\u4ed6\u79d8\u5bc6\u4fe1\u606f\uff0c\u56e0\u6b64\u4e0d\u5305\u542b\u4efb\u4f55\u6388\u6743\u6216\u8bbf\u95ee\u63a7\u5236\u3002\u9884\u671f\u7684\u5178\u578b\u90e8\u7f72\u5c06\u5728\u672c\u5730\u4e0e\u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u4f5c\u4e3a\u6c99\u76d2\u5bb9\u5668\u6765\u8fd0\u884c\uff0c\u56e0\u800c\nconfigtxlator\n\u662f\u4e2a\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u7684\u4e13\u7528\u8fdb\u7a0b\u3002\n\n\n\u8fd0\u884cconfigtxlator\n\n\nconfigtxlator\n\u5de5\u5177\u53ef\u4ee5\u4e0e\u5176\u4ed6Hyperledger Fabric\u5e73\u53f0\u76f8\u5173\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u8d77\u4e0b\u8f7d\u3002 \u8be6\u7ec6\u4fe1\u606f\u67e5\u770bdownload-platform-specific-binaries\u3002\n\n\n\u8be5\u5de5\u5177\u53ef\u80fd\u88ab\u914d\u7f6e\u4e3a\u4fa6\u542c\u4e0d\u540c\u7684\u7aef\u53e3\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\n--port\n\u548c\n--hostname\n\u6807\u5fd7\u6765\u6307\u5b9a\u4e3b\u673a\u540d\u3002\u8981\u67e5\u770b\u5b8c\u6574\u7684\u547d\u4ee4\u548c\u6807\u5fd7\uff0c\u8bf7\u8fd0\u884c\nconfigtxlator --help\n\u3002\n\n\n\u8be5\u4e8c\u8fdb\u5236\u5305\u5c06\u542f\u52a8\u4e00\u4e2a\u76d1\u542c\u6307\u5b9a\u7aef\u53e3\u7684http\u670d\u52a1\u5668\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5904\u7406\u8bf7\u6c42\u4e86\u3002\n\n\n\u8981\u542f\u52a8\nconfigtxlator\n\u670d\u52a1\u5668\uff1a\n\n\n$ configtxlator start\n2017-06-21 18:16:58.248 HKT [configtxlator] startServer -\n INFO 001 Serving HTTP requests on 0.0.0.0:7059\n\n\n\n\nProto\u8f6c\u6362\n\n\n\u4e3a\u4e86\u6269\u5c55\u6027\uff0c\u5e76\u4e14\u7531\u4e8e\u67d0\u4e9b\u5b57\u6bb5\u5fc5\u987b\u88ab\u7b7e\u540d\uff0c\u8bb8\u591aproto\u5b57\u6bb5\u88ab\u5b58\u50a8\u4e3a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u65e0\u6cd5\u4f7f\u7528\njsonpb\n\u5305\u6765\u5b8c\u6210\u539f\u751fproto\u5230JSON\u7684\u7ffb\u8bd1\u3002\u4f5c\u4e3a\u4ee3\u66ff\uff0c\nconfigtxlator\n\u66b4\u9732\u4e86\u4e00\u4e2aREST\u7ec4\u4ef6\u6765\u505a\u66f4\u590d\u6742\u7684\u7ffb\u8bd1\u3002\n\n\n\u4e3a\u4e86\u5c06proto\u8f6c\u6362\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u7684JSON\u7b49\u4ef7\u7269\uff0c\u53ea\u9700\u5c06\u4e8c\u8fdb\u5236proto\u53d1\u5e03\u5230REST\u5730\u5740\nhttp://$SERVER:$PORT/protolator/decode/\nmessage.Name\n\uff0c\u5176\u4e2d\nmessage.Name\n\u662f\u6d88\u606f\u7684\u5b8c\u5168\u9650\u5b9a\u7684proto\u540d\u79f0\u3002\n\n\n\u4f8b\u5982\uff0c\u8981\u89e3\u7801\u4e00\u4e2a\u914d\u7f6e\u533a\u5757\u5e76\u53e6\u5b58\u4e3a\nconfiguration_block.pb\n\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a:\n\n\n$ curl -X POST --data-binary @configuration_block.pb http://127.0.0.1:7059/protolator/decode/common.Block\n\n\n\n\n\u4e3a\u4e86\u8f6c\u6362\u4eba\u7c7b\u53ef\u8bfbJSON\u7248\u672c\u7684prot\u6d88\u606f\uff0c\u53ea\u9700\u8981\u628aJSON\u6d88\u606f\u53d1\u9001\u5230\nhttp://$SERVER:$PORT/protolator/encode/\nmessage.Name\n\uff0c\u8fd9\u91cc\nmessage.Name\n\u4ecd\u7136\u662f\u6d88\u606f\u7684\u5b8c\u5168\u9650\u5b9a\u7684proto\u540d\u79f0\u3002\n\n\u4f8b\u5982\uff0c\u91cd\u7f16\u7801\u533a\u5757\u53e6\u5b58\u4e3a\nconfiguration_block.json\n\uff0c\u8fd0\u884c\u547d\u4ee4\uff1a\n\n\n$ curl -X POST --data-binary @configuration_block.json http://127.0.0.1:7059/protolator/encode/common.Block\n\n\n\n\n\u4efb\u4f55\u914d\u7f6e\u76f8\u5173proto\uff0c\u5305\u62ec\ncommon.Block\n\u3001\ncommon.Envelope\n\u3001\ncommon.ConfigEnvelope\n\u3001\ncommon.ConfigUpdateEnvelope\n\n\u3001\ncommon.Config\n\u548c\ncommon.ConfigUpdate\n\u90fd\u662f\u8fd9\u4e9bURL\u6709\u6548\u76ee\u6807\u3002\u672a\u6765\uff0c\u53ef\u80fd\u4f1a\u589e\u52a0\u5176\u5b83proto\u7f16\u7801\u7c7b\u578b\uff0c\u5982\u80cc\u4e66\u8005\u4ea4\u6613\u3002  \n\n\n\u914d\u7f6e\u66f4\u65b0\u8ba1\u7b97\n\n\n\u7ed9\u5b9a\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5728\u5b83\u4eec\u4e4b\u95f4\u8f6c\u6362\u7684\u914d\u7f6e\u66f4\u65b0\u3002\u53ea\u9700\u5c06\u4e24\u4e2a\ncommon.Config\nproto\u7f16\u7801\u7684\u914d\u7f6e\u4f5c\u4e3a\nmultipart/formdata\n\u3001original\u4f5c\u4e3a\u5b57\u6bb5\noriginal\n\u548cupdated\u4f5c\u4e3a\u5b57\u6bb5\nupdated\n\uff0c\u53d1\u9001\u5230\nhttp://$SERVER:$PORT/configtxlator/compute/update-from-configs\n\u3002\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u539f\u59cb\u914d\u7f6e\u6587\u4ef6\noriginal_config.pb\n\u548c\u66f4\u65b0\u7684\u914d\u7f6e\u6587\u4ef6\nupdated_config.pb\n\uff0c\u5bf9\u4e8e\u901a\u9053\ndesiredchannel\n\uff1a\n\n\n$ curl -X POST -F channel=desiredchannel -F original=@original_config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs\n\n\n\n\n\u81ea\u4e3e\u4f8b\u5b50\n\n\n\u542f\u52a8\nconfigtxlator\n:\n\n\n$ configtxlator start\n2017-05-31 12:57:22.499 EDT [configtxlator] main -\n INFO 001 Serving HTTP requests on port: 7059\n\n\n\n\n\u9996\u5148\uff0c\u4e3a\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u751f\u6210\u4e00\u4e2a\u521b\u4e16\u533a\u5757\uff1a\n\n\n$ configtxgen -outputBlock genesis_block.pb\n2017-05-31 14:15:16.634 EDT [common/configtx/tool] main -\n INFO 001 Loading configuration\n2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -\n INFO 002 Generating genesis block\n2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -\n INFO 003 Writing genesis block\n\n\n\n\n\u5c06\u521b\u4e16\u533a\u5757\u89e3\u7801\u4e3a\u4eba\u7c7b\u53ef\u7f16\u8f91\u683c\u5f0f\uff1a\n\n\n$ curl -X POST --data-binary @genesis_block.pb http://127.0.0.1:7059/protolator/decode/common.Block \n genesis_block.json\n\n\n\n\n\u7f16\u8f91\u751f\u6210\u7684\u6587\u4ef6\ngenesis_block.json\n\uff0c\u6216\u8005\u7528\u7a0b\u5e8f\u64cd\u4f5c\u5b83\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528JOSN CLI\u5de5\u5177\njq\n\u3002\u4e3a\u4e86\u7b80\u5355\uff0c\u6211\u4eec\u7f16\u8f91\u901a\u9053\u7684\u6279\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u662f\u4e2a\u7b80\u5355\u7684\u6570\u5b57\u3002\u7136\u800c\uff0c\u6240\u6709\u90fd\u53ef\u4ee5\u7f16\u8f91\uff0c\u5305\u62ec\u7b56\u7565\u548cMSP\u3002\n\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u4fdd\u5b58\u6307\u5411json\u4e2d\u5c5e\u6027\u7684\u8def\u5f84\uff1a\n\n\n$ export MAXBATCHSIZEPATH=\n.data.data[0].payload.data.config.channel_group.groups.Orderer.values.BatchSize.value.max_message_count\n\n\n\n\n\n\u7136\u540e\uff0c\u8ba9\u6211\u4eec\u663e\u793a\u8fd9\u4e2a\u5c5e\u6027\u7684\u503c\uff1a\n\n\n$ jq \n$MAXBATCHSIZEPATH\n genesis_block.json\n10\n\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u8bbe\u7f6e\u65b0\u7684\u6279\u5927\u5c0f\uff0c\u5e76\u663e\u793a\u8fd9\u4e2a\u65b0\u503c\uff1a\n\n\n$ jq \u201c$MAXBATCHSIZEPATH = 20\u201d genesis_block.json \n updated_genesis_block.json\n$ jq \u201c$MAXBATCHSIZEPATH\u201d updated_genesis_block.json\n20\n\n\n\n\n\u521b\u4e16\u533a\u5757\u73b0\u5728\u51c6\u5907\u597d\u88ab\u91cd\u7f16\u7801\u4e3a\u7528\u4e8e\u81ea\u4e3e\u7684\u539f\u751fproto\u683c\u5f0f\uff1a\n\n\n$ curl -X POST --data-binary @updated_genesis_block.json http://127.0.0.1:7059/protolator/encode/common.Block \n updated_genesis_block.pb\n\n\n\n\nupdated_genesis_block.pb\n\u6587\u4ef6\u73b0\u5728\u53ef\u4ee5\u4f5c\u4e3a\u521b\u4e16\u533a\u5757\u7528\u4e8e\u4e00\u4e2a\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u7684\u81ea\u4e3e\u3002\n\n\n\u91cd\u65b0\u914d\u7f6e\u7684\u4f8b\u5b50\n\n\n\uff08\u5148\u7528\u547d\u4ee4\u5220\u9664\u6240\u6709docker\u5bb9\u5668\ndocker rm -f $(docker ps -aq)\n\uff0c\u5426\u5219byfn.sh\u542f\u52a8\u7684\u6392\u5e8f\u670d\u52a1\u4e5f\u4f1a\u7ed1\u5b9a\u7aef\u53e37050\uff09\n\n\u5229\u7528\u53e6\u5916\u7684\u7ec8\u7aef\u7a97\u53e3\uff0c\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8\u6392\u5e8f\u670d\u52a1\uff0c\u4e34\u65f6\u81ea\u4e3e\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\ntestchainid\n\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u3002\n\n\nORDERER_GENERAL_LOGLEVEL=debug orderer\n\n\n\n\n\u91cd\u65b0\u914d\u7f6e\u4e00\u4e2a\u901a\u9053\u7684\u64cd\u4f5c\u975e\u5e38\u7c7b\u4f3c\u4e8e\u6539\u53d8\u4e00\u4e2a\u521b\u4e16\u914d\u7f6e\u3002\n\n\n\uff08\u73b0\u5728configtxlator\u3001orderer\u5404\u5360\u4e86\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u4e0b\u9762\u9700\u8981\u542f\u52a8\u7b2c\u4e09\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff09\n\n\u9996\u5148\uff0c\u53d6\u5f97\u914d\u7f6e\u533a\u5757proto\uff1a\n\n\n$ peer channel fetch config config_block.pb -o 127.0.0.1:7050 -c testchainid\n-o 127.0.0.1:7050 -c testchainid\n2017-12-11 09:00:15.658 UTC [channelCmd] InitCmdFactory -\n INFO 001 Endorser and orderer connections initialized\n2017-12-11 09:00:15.660 UTC [main] main -\n INFO 002 Exiting.....\n\n\n\n\n(\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e86\u6587\u4ef6\nconfig_block.pb\n)\n\n\u7136\u540e\uff0c\u53d1\u9001\u914d\u7f6e\u533a\u5757\u5230\nconfigtxlator\n\u670d\u52a1\u8fdb\u884c\u89e3\u7801\uff1a\n\n\n$ curl -X POST --data-binary @config_block.pb http://127.0.0.1:7059/protolator/decode/common.Block \n config_block.json\n\n\n\n\n\u4ece\u533a\u5757\u4e2d\u63d0\u53d6\u914d\u7f6e\u8282\uff1a\n\n\n$ jq .data.data[0].payload.data.config config_block.json \n config.json\n\n\n\n\n\u7f16\u8f91\u914d\u7f6e\uff0c\u628a\u5b83\u53e6\u5b58\u4e3a\u4e00\u4e2a\u65b0\u7684\nupdated_config.json\n\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u8bbe\u7f6e\u6279\u5927\u5c0f\u4e3a30\u3002\n\n\n$ jq \n.channel_group.groups.Orderer.values.BatchSize.value.max_message_count = 30\n config.json  \n updated_config.json\n\n\n\n\n\u5bf9\u539f\u59cb\u914d\u7f6e\u548c\u53d8\u66f4\u7684\u914d\u7f6e\u8fdb\u884c\u91cd\u7f16\u7801\u5230proto\u683c\u5f0f\uff1a\n\n\n$ curl -X POST --data-binary @config.json http://127.0.0.1:7059/protolator/encode/common.Config \n config.pb\n$ curl -X POST --data-binary @updated_config.json http://127.0.0.1:7059/protolator/encode/common.Config \n updated_config.pb\n\n\n\n\n\u73b0\u5728\uff0c\u4e24\u4e2a\u914d\u7f6e\u90fd\u8fdb\u884c\u9002\u5f53\u7f16\u7801\uff0c\u53d1\u9001\u5b83\u4eec\u5230\nconfigtxlator\n\u670d\u52a1\uff0c\u53bb\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u914d\u7f6e\u53d8\u66f4\u3002\n\n\n$ curl -X POST -F original=@config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs -F channel=testchainid \n config_update.pb\n\n\n\n\n\u8fd9\u65f6\uff0c\u8ba1\u7b97\u51fa\u6765\u7684\u914d\u7f6e\u53d8\u66f4\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002\u4f20\u7edf\u4e0a\uff0c\u4f7f\u7528\u4e00\u4e2aSDK\u7b7e\u540d\u548c\u5305\u88c5\u8fd9\u4e2a\u6d88\u606f\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u4ec5\u4f7f\u7528peer cli\uff0c\nconfigtxlator\n\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u914d\u7f6e\u53d8\u66f4(ConfigUPdate)\u8fdb\u884c\u89e3\u7801\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u7528\u6587\u672c\u65b9\u5f0f\u64cd\u4f5c\u5b83\uff1a\n\n\n$ curl -X POST --data-binary @config_update.pb http://127.0.0.1:7059/protolator/decode/common.ConfigUpdate \n config_update.json\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u628a\u5b83\u5305\u88f9\u8fdb\u4e00\u4e2a\u4fe1\u5c01(envelope)\u6d88\u606f\uff1a\n\n\n$ echo '{\npayload\n:{\nheader\n:{\nchannel_header\n:{\nchannel_id\n:\ntestchainid\n, \ntype\n:2}},\ndata\n:{\nconfig_update\n:'$(cat config_update.json)'}}}' \n config_update_as_envelope.json\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u5c06\u5176\u8f6c\u6362\u56de\u5b8c\u6574\u7684\u914d\u7f6e\u4ea4\u6613\u7684proto\u683c\u5f0f\uff1a\n\n\n$ curl -X POST --data-binary @config_update_as_envelope.json http://127.0.0.1:7059/protolator/encode/common.Envelope \n config_update_as_envelope.pb\n\n\n\n\n\u6700\u540e\uff0c\u53d1\u9001\u914d\u7f6e\u53d8\u66f4\u4ea4\u6613\u5230\u6392\u5e8f\u670d\u52a1\u53bb\u6267\u884c\u4e00\u4e2a\u914d\u7f6e\u53d8\u66f4\u3002\n\n\n$ peer channel update -f config_update_as_envelope.pb -c testchainid -o 127.0.0.1:7050\n\n\n\n\n\u589e\u52a0\u4e00\u4e2a\u7ec4\u7ec7\n\n\n\u5148\u542f\u52a8\nconfigtxlator\n\uff1a\n\n\n$ configtxlator start\n2017-05-31 12:57:22.499 EDT [configtxlator] main -\n INFO 001 Serving HTTP requests on port: 7059\n\n\n\n\n\u4f7f\u7528\nSampleDevModeSolo\nprofile\u9009\u9879\u542f\u52a8\u6392\u5e8f\u670d\u52a1\u3002\n\n\n$ ORDERER_GENERAL_LOGLEVEL=debug ORDERER_GENERAL_GENESISPROFILE=SampleDevModeSolo orderer\n\n\n\n\n\u589e\u52a0\u4e00\u4e2a\u7ec4\u7ec7\u7684\u8fc7\u7a0b\u4e0e\u6279\u5927\u5c0f\u7684\u4f8b\u5b50\u975e\u5e38\u7c7b\u4f3c\u3002\u7136\u800c\uff0c\u4e0d\u540c\u4e0e\u8bbe\u7f6e\u6279\u5927\u5c0f\uff0c\u4e00\u4e2a\u65b0\u7ec4\u7ec7\u5b9a\u4e49\u5728\u5e94\u7528\u7ea7\u522b\u3002\u6dfb\u52a0\u4e00\u4e2a\u7ec4\u7ec7\u7a0d\u5fae\u7275\u626f\u4e00\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u5148\u521b\u5efa\u4e00\u4e2a\u901a\u9053\uff0c\u7136\u540e\u4fee\u6539\u5b83\u7684\u6210\u5458\u7ec4\u6210\u3002\n\n\u5173\u4e8e\u5229\u7528configtxlator\u589e\u52a0\u7ec4\u7ec7\u7684\u66f4\u591a\u5185\u5bb9\u53c2\u8003\n\u91cd\u65b0\u914d\u7f6e\u9996\u4e2a\u7f51\u7edc(First-Network)\n\u3002", 
            "title": "Channel \u91cd\u65b0\u914d\u7f6e(configtxlator)"
        }, 
        {
            "location": "/configtxlator_zh/#configtxlator", 
            "text": "\u539f\u6587", 
            "title": "\u7528configtxlator\u91cd\u65b0\u914d\u7f6e"
        }, 
        {
            "location": "/configtxlator_zh/#_1", 
            "text": "\u521b\u5efa configtxlator \u5de5\u5177\u7684\u76ee\u7684\u662f\u652f\u6301\u4e0d\u4f9d\u8d56SDK\u7684\u91cd\u65b0\u914d\u7f6e\u3002\u901a\u9053\u914d\u7f6e\u88ab\u5f53\u4f5c\u4e00\u4e2a\u4ea4\u6613\u5b58\u50a8\u5728\u901a\u9053\u7684\u914d\u7f6e\u533a\u5757\u4e2d\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u64cd\u4f5c\uff0c\u5982\u5728bdd\u884c\u4e3a\u6d4b\u8bd5\u4e2d\u3002\u4e0d\u8fc7\uff0c\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0cSDK\u672c\u8eab\u4e0d\u652f\u6301\u76f4\u63a5\u64cd\u4f5c\u914d\u7f6e\uff0c\u56e0\u6b64\u8be5configtxlator\u5de5\u5177\u65e8\u5728\u63d0\u4f9bAPI\uff0c\u4f9b\u4efb\u4f55SDK\u7684\u4f7f\u7528\u8005\u4e0e\u4e4b\u4ea4\u4e92\u4ee5\u534f\u52a9\u914d\u7f6e\u66f4\u65b0\u3002  \u5de5\u5177\u540d\u79f0\u662fconfigtx\u548ctranslator\u7684\u6df7\u5408\uff0c\u65e8\u5728\u8868\u8fbe\u8be5\u5de5\u5177\u53ea\u662f\u5728\u4e24\u8005\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u5b83\u4e0d\u4f1a\u751f\u6210\u914d\u7f6e\u3002\u5b83\u4e0d\u9012\u4ea4\u6216\u68c0\u7d22\u914d\u7f6e\u3002\u5b83\u4e0d\u4f1a\u81ea\u5df1\u4fee\u6539\u914d\u7f6e\uff0c\u5b83\u53ea\u662f\u5728configtx\u683c\u5f0f\u7684\u4e0d\u540c\u89c6\u56fe\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e9b\u53cc\u5411\u64cd\u4f5c\u3002  \u6807\u51c6\u7528\u6cd5\u4e3a\uff1a   SDK\u68c0\u7d22\u6700\u65b0\u7684\u914d\u7f6e    configtxlator  \u4ea7\u751f\u4eba\u7c7b\u53ef\u8bfb\u7684\u914d\u7f6e\u7248\u672c    \u7528\u6237\u6216\u5e94\u7528\u7a0b\u5e8f\u7f16\u8f91\u914d\u7f6e    configtxlator \u7528\u4e8e\u8ba1\u7b97\u914d\u7f6e\u7684\u53d8\u66f4    SDK\u9012\u4ea4\u7b7e\u540d\u548c\u9012\u4ea4\u914d\u7f6e     configtxlator \u5de5\u5177\u66b4\u9732\u4e86\u4e00\u4e2a\u771f\u6b63\u7684\u65e0\u72b6\u6001\u7684REST API\u6765\u4e0e\u914d\u7f6e\u5143\u7d20\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u4e9bREST\u7ec4\u4ef6\u652f\u6301\u5c06\u539f\u751f\u914d\u7f6e\u683c\u5f0f\u8f6c\u6362\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u7684JSON\u683c\u5f0f\uff0c\u6216\u8005\u6839\u636e\u4e24\u79cd\u914d\u7f6e\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u8ba1\u7b97\u914d\u7f6e\u53d8\u66f4\u3002  \u7531\u4e8e configtxlator \u670d\u52a1\u6545\u610f\u4e0d\u5305\u542b\u4efb\u4f55\u5bc6\u94a5\u6750\u6599\u6216\u5176\u4ed6\u79d8\u5bc6\u4fe1\u606f\uff0c\u56e0\u6b64\u4e0d\u5305\u542b\u4efb\u4f55\u6388\u6743\u6216\u8bbf\u95ee\u63a7\u5236\u3002\u9884\u671f\u7684\u5178\u578b\u90e8\u7f72\u5c06\u5728\u672c\u5730\u4e0e\u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u4f5c\u4e3a\u6c99\u76d2\u5bb9\u5668\u6765\u8fd0\u884c\uff0c\u56e0\u800c configtxlator \u662f\u4e2a\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u7684\u4e13\u7528\u8fdb\u7a0b\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/configtxlator_zh/#configtxlator_1", 
            "text": "configtxlator \u5de5\u5177\u53ef\u4ee5\u4e0e\u5176\u4ed6Hyperledger Fabric\u5e73\u53f0\u76f8\u5173\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u8d77\u4e0b\u8f7d\u3002 \u8be6\u7ec6\u4fe1\u606f\u67e5\u770bdownload-platform-specific-binaries\u3002  \u8be5\u5de5\u5177\u53ef\u80fd\u88ab\u914d\u7f6e\u4e3a\u4fa6\u542c\u4e0d\u540c\u7684\u7aef\u53e3\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 --port \u548c --hostname \u6807\u5fd7\u6765\u6307\u5b9a\u4e3b\u673a\u540d\u3002\u8981\u67e5\u770b\u5b8c\u6574\u7684\u547d\u4ee4\u548c\u6807\u5fd7\uff0c\u8bf7\u8fd0\u884c configtxlator --help \u3002  \u8be5\u4e8c\u8fdb\u5236\u5305\u5c06\u542f\u52a8\u4e00\u4e2a\u76d1\u542c\u6307\u5b9a\u7aef\u53e3\u7684http\u670d\u52a1\u5668\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5904\u7406\u8bf7\u6c42\u4e86\u3002  \u8981\u542f\u52a8 configtxlator \u670d\u52a1\u5668\uff1a  $ configtxlator start\n2017-06-21 18:16:58.248 HKT [configtxlator] startServer -  INFO 001 Serving HTTP requests on 0.0.0.0:7059", 
            "title": "\u8fd0\u884cconfigtxlator"
        }, 
        {
            "location": "/configtxlator_zh/#proto", 
            "text": "\u4e3a\u4e86\u6269\u5c55\u6027\uff0c\u5e76\u4e14\u7531\u4e8e\u67d0\u4e9b\u5b57\u6bb5\u5fc5\u987b\u88ab\u7b7e\u540d\uff0c\u8bb8\u591aproto\u5b57\u6bb5\u88ab\u5b58\u50a8\u4e3a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u65e0\u6cd5\u4f7f\u7528 jsonpb \u5305\u6765\u5b8c\u6210\u539f\u751fproto\u5230JSON\u7684\u7ffb\u8bd1\u3002\u4f5c\u4e3a\u4ee3\u66ff\uff0c configtxlator \u66b4\u9732\u4e86\u4e00\u4e2aREST\u7ec4\u4ef6\u6765\u505a\u66f4\u590d\u6742\u7684\u7ffb\u8bd1\u3002  \u4e3a\u4e86\u5c06proto\u8f6c\u6362\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u7684JSON\u7b49\u4ef7\u7269\uff0c\u53ea\u9700\u5c06\u4e8c\u8fdb\u5236proto\u53d1\u5e03\u5230REST\u5730\u5740 http://$SERVER:$PORT/protolator/decode/ message.Name \uff0c\u5176\u4e2d message.Name \u662f\u6d88\u606f\u7684\u5b8c\u5168\u9650\u5b9a\u7684proto\u540d\u79f0\u3002  \u4f8b\u5982\uff0c\u8981\u89e3\u7801\u4e00\u4e2a\u914d\u7f6e\u533a\u5757\u5e76\u53e6\u5b58\u4e3a configuration_block.pb \uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a:  $ curl -X POST --data-binary @configuration_block.pb http://127.0.0.1:7059/protolator/decode/common.Block  \u4e3a\u4e86\u8f6c\u6362\u4eba\u7c7b\u53ef\u8bfbJSON\u7248\u672c\u7684prot\u6d88\u606f\uff0c\u53ea\u9700\u8981\u628aJSON\u6d88\u606f\u53d1\u9001\u5230 http://$SERVER:$PORT/protolator/encode/ message.Name \uff0c\u8fd9\u91cc message.Name \u4ecd\u7136\u662f\u6d88\u606f\u7684\u5b8c\u5168\u9650\u5b9a\u7684proto\u540d\u79f0\u3002 \n\u4f8b\u5982\uff0c\u91cd\u7f16\u7801\u533a\u5757\u53e6\u5b58\u4e3a configuration_block.json \uff0c\u8fd0\u884c\u547d\u4ee4\uff1a  $ curl -X POST --data-binary @configuration_block.json http://127.0.0.1:7059/protolator/encode/common.Block  \u4efb\u4f55\u914d\u7f6e\u76f8\u5173proto\uff0c\u5305\u62ec common.Block \u3001 common.Envelope \u3001 common.ConfigEnvelope \u3001 common.ConfigUpdateEnvelope \n\u3001 common.Config \u548c common.ConfigUpdate \u90fd\u662f\u8fd9\u4e9bURL\u6709\u6548\u76ee\u6807\u3002\u672a\u6765\uff0c\u53ef\u80fd\u4f1a\u589e\u52a0\u5176\u5b83proto\u7f16\u7801\u7c7b\u578b\uff0c\u5982\u80cc\u4e66\u8005\u4ea4\u6613\u3002", 
            "title": "Proto\u8f6c\u6362"
        }, 
        {
            "location": "/configtxlator_zh/#_2", 
            "text": "\u7ed9\u5b9a\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5728\u5b83\u4eec\u4e4b\u95f4\u8f6c\u6362\u7684\u914d\u7f6e\u66f4\u65b0\u3002\u53ea\u9700\u5c06\u4e24\u4e2a common.Config proto\u7f16\u7801\u7684\u914d\u7f6e\u4f5c\u4e3a multipart/formdata \u3001original\u4f5c\u4e3a\u5b57\u6bb5 original \u548cupdated\u4f5c\u4e3a\u5b57\u6bb5 updated \uff0c\u53d1\u9001\u5230 http://$SERVER:$PORT/configtxlator/compute/update-from-configs \u3002  \u4f8b\u5982\uff0c\u7ed9\u5b9a\u539f\u59cb\u914d\u7f6e\u6587\u4ef6 original_config.pb \u548c\u66f4\u65b0\u7684\u914d\u7f6e\u6587\u4ef6 updated_config.pb \uff0c\u5bf9\u4e8e\u901a\u9053 desiredchannel \uff1a  $ curl -X POST -F channel=desiredchannel -F original=@original_config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs", 
            "title": "\u914d\u7f6e\u66f4\u65b0\u8ba1\u7b97"
        }, 
        {
            "location": "/configtxlator_zh/#_3", 
            "text": "\u542f\u52a8 configtxlator :  $ configtxlator start\n2017-05-31 12:57:22.499 EDT [configtxlator] main -  INFO 001 Serving HTTP requests on port: 7059  \u9996\u5148\uff0c\u4e3a\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u751f\u6210\u4e00\u4e2a\u521b\u4e16\u533a\u5757\uff1a  $ configtxgen -outputBlock genesis_block.pb\n2017-05-31 14:15:16.634 EDT [common/configtx/tool] main -  INFO 001 Loading configuration\n2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -  INFO 002 Generating genesis block\n2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -  INFO 003 Writing genesis block  \u5c06\u521b\u4e16\u533a\u5757\u89e3\u7801\u4e3a\u4eba\u7c7b\u53ef\u7f16\u8f91\u683c\u5f0f\uff1a  $ curl -X POST --data-binary @genesis_block.pb http://127.0.0.1:7059/protolator/decode/common.Block   genesis_block.json  \u7f16\u8f91\u751f\u6210\u7684\u6587\u4ef6 genesis_block.json \uff0c\u6216\u8005\u7528\u7a0b\u5e8f\u64cd\u4f5c\u5b83\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528JOSN CLI\u5de5\u5177 jq \u3002\u4e3a\u4e86\u7b80\u5355\uff0c\u6211\u4eec\u7f16\u8f91\u901a\u9053\u7684\u6279\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u662f\u4e2a\u7b80\u5355\u7684\u6570\u5b57\u3002\u7136\u800c\uff0c\u6240\u6709\u90fd\u53ef\u4ee5\u7f16\u8f91\uff0c\u5305\u62ec\u7b56\u7565\u548cMSP\u3002  \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u4fdd\u5b58\u6307\u5411json\u4e2d\u5c5e\u6027\u7684\u8def\u5f84\uff1a  $ export MAXBATCHSIZEPATH= .data.data[0].payload.data.config.channel_group.groups.Orderer.values.BatchSize.value.max_message_count   \u7136\u540e\uff0c\u8ba9\u6211\u4eec\u663e\u793a\u8fd9\u4e2a\u5c5e\u6027\u7684\u503c\uff1a  $ jq  $MAXBATCHSIZEPATH  genesis_block.json\n10  \u73b0\u5728\uff0c\u6211\u4eec\u8bbe\u7f6e\u65b0\u7684\u6279\u5927\u5c0f\uff0c\u5e76\u663e\u793a\u8fd9\u4e2a\u65b0\u503c\uff1a  $ jq \u201c$MAXBATCHSIZEPATH = 20\u201d genesis_block.json   updated_genesis_block.json\n$ jq \u201c$MAXBATCHSIZEPATH\u201d updated_genesis_block.json\n20  \u521b\u4e16\u533a\u5757\u73b0\u5728\u51c6\u5907\u597d\u88ab\u91cd\u7f16\u7801\u4e3a\u7528\u4e8e\u81ea\u4e3e\u7684\u539f\u751fproto\u683c\u5f0f\uff1a  $ curl -X POST --data-binary @updated_genesis_block.json http://127.0.0.1:7059/protolator/encode/common.Block   updated_genesis_block.pb  updated_genesis_block.pb \u6587\u4ef6\u73b0\u5728\u53ef\u4ee5\u4f5c\u4e3a\u521b\u4e16\u533a\u5757\u7528\u4e8e\u4e00\u4e2a\u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u7684\u81ea\u4e3e\u3002", 
            "title": "\u81ea\u4e3e\u4f8b\u5b50"
        }, 
        {
            "location": "/configtxlator_zh/#_4", 
            "text": "\uff08\u5148\u7528\u547d\u4ee4\u5220\u9664\u6240\u6709docker\u5bb9\u5668 docker rm -f $(docker ps -aq) \uff0c\u5426\u5219byfn.sh\u542f\u52a8\u7684\u6392\u5e8f\u670d\u52a1\u4e5f\u4f1a\u7ed1\u5b9a\u7aef\u53e37050\uff09 \n\u5229\u7528\u53e6\u5916\u7684\u7ec8\u7aef\u7a97\u53e3\uff0c\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8\u6392\u5e8f\u670d\u52a1\uff0c\u4e34\u65f6\u81ea\u4e3e\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a testchainid \u6392\u5e8f\u7cfb\u7edf\u901a\u9053\u3002  ORDERER_GENERAL_LOGLEVEL=debug orderer  \u91cd\u65b0\u914d\u7f6e\u4e00\u4e2a\u901a\u9053\u7684\u64cd\u4f5c\u975e\u5e38\u7c7b\u4f3c\u4e8e\u6539\u53d8\u4e00\u4e2a\u521b\u4e16\u914d\u7f6e\u3002  \uff08\u73b0\u5728configtxlator\u3001orderer\u5404\u5360\u4e86\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u4e0b\u9762\u9700\u8981\u542f\u52a8\u7b2c\u4e09\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff09 \n\u9996\u5148\uff0c\u53d6\u5f97\u914d\u7f6e\u533a\u5757proto\uff1a  $ peer channel fetch config config_block.pb -o 127.0.0.1:7050 -c testchainid\n-o 127.0.0.1:7050 -c testchainid\n2017-12-11 09:00:15.658 UTC [channelCmd] InitCmdFactory -  INFO 001 Endorser and orderer connections initialized\n2017-12-11 09:00:15.660 UTC [main] main -  INFO 002 Exiting.....  (\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e86\u6587\u4ef6 config_block.pb ) \n\u7136\u540e\uff0c\u53d1\u9001\u914d\u7f6e\u533a\u5757\u5230 configtxlator \u670d\u52a1\u8fdb\u884c\u89e3\u7801\uff1a  $ curl -X POST --data-binary @config_block.pb http://127.0.0.1:7059/protolator/decode/common.Block   config_block.json  \u4ece\u533a\u5757\u4e2d\u63d0\u53d6\u914d\u7f6e\u8282\uff1a  $ jq .data.data[0].payload.data.config config_block.json   config.json  \u7f16\u8f91\u914d\u7f6e\uff0c\u628a\u5b83\u53e6\u5b58\u4e3a\u4e00\u4e2a\u65b0\u7684 updated_config.json \u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u8bbe\u7f6e\u6279\u5927\u5c0f\u4e3a30\u3002  $ jq  .channel_group.groups.Orderer.values.BatchSize.value.max_message_count = 30  config.json    updated_config.json  \u5bf9\u539f\u59cb\u914d\u7f6e\u548c\u53d8\u66f4\u7684\u914d\u7f6e\u8fdb\u884c\u91cd\u7f16\u7801\u5230proto\u683c\u5f0f\uff1a  $ curl -X POST --data-binary @config.json http://127.0.0.1:7059/protolator/encode/common.Config   config.pb\n$ curl -X POST --data-binary @updated_config.json http://127.0.0.1:7059/protolator/encode/common.Config   updated_config.pb  \u73b0\u5728\uff0c\u4e24\u4e2a\u914d\u7f6e\u90fd\u8fdb\u884c\u9002\u5f53\u7f16\u7801\uff0c\u53d1\u9001\u5b83\u4eec\u5230 configtxlator \u670d\u52a1\uff0c\u53bb\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u914d\u7f6e\u53d8\u66f4\u3002  $ curl -X POST -F original=@config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs -F channel=testchainid   config_update.pb  \u8fd9\u65f6\uff0c\u8ba1\u7b97\u51fa\u6765\u7684\u914d\u7f6e\u53d8\u66f4\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002\u4f20\u7edf\u4e0a\uff0c\u4f7f\u7528\u4e00\u4e2aSDK\u7b7e\u540d\u548c\u5305\u88c5\u8fd9\u4e2a\u6d88\u606f\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u4ec5\u4f7f\u7528peer cli\uff0c configtxlator \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002  \u9996\u5148\uff0c\u6211\u4eec\u5bf9\u914d\u7f6e\u53d8\u66f4(ConfigUPdate)\u8fdb\u884c\u89e3\u7801\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u7528\u6587\u672c\u65b9\u5f0f\u64cd\u4f5c\u5b83\uff1a  $ curl -X POST --data-binary @config_update.pb http://127.0.0.1:7059/protolator/decode/common.ConfigUpdate   config_update.json  \u7136\u540e\uff0c\u6211\u4eec\u628a\u5b83\u5305\u88f9\u8fdb\u4e00\u4e2a\u4fe1\u5c01(envelope)\u6d88\u606f\uff1a  $ echo '{ payload :{ header :{ channel_header :{ channel_id : testchainid ,  type :2}}, data :{ config_update :'$(cat config_update.json)'}}}'   config_update_as_envelope.json  \u63a5\u4e0b\u6765\uff0c\u5c06\u5176\u8f6c\u6362\u56de\u5b8c\u6574\u7684\u914d\u7f6e\u4ea4\u6613\u7684proto\u683c\u5f0f\uff1a  $ curl -X POST --data-binary @config_update_as_envelope.json http://127.0.0.1:7059/protolator/encode/common.Envelope   config_update_as_envelope.pb  \u6700\u540e\uff0c\u53d1\u9001\u914d\u7f6e\u53d8\u66f4\u4ea4\u6613\u5230\u6392\u5e8f\u670d\u52a1\u53bb\u6267\u884c\u4e00\u4e2a\u914d\u7f6e\u53d8\u66f4\u3002  $ peer channel update -f config_update_as_envelope.pb -c testchainid -o 127.0.0.1:7050", 
            "title": "\u91cd\u65b0\u914d\u7f6e\u7684\u4f8b\u5b50"
        }, 
        {
            "location": "/configtxlator_zh/#_5", 
            "text": "\u5148\u542f\u52a8 configtxlator \uff1a  $ configtxlator start\n2017-05-31 12:57:22.499 EDT [configtxlator] main -  INFO 001 Serving HTTP requests on port: 7059  \u4f7f\u7528 SampleDevModeSolo profile\u9009\u9879\u542f\u52a8\u6392\u5e8f\u670d\u52a1\u3002  $ ORDERER_GENERAL_LOGLEVEL=debug ORDERER_GENERAL_GENESISPROFILE=SampleDevModeSolo orderer  \u589e\u52a0\u4e00\u4e2a\u7ec4\u7ec7\u7684\u8fc7\u7a0b\u4e0e\u6279\u5927\u5c0f\u7684\u4f8b\u5b50\u975e\u5e38\u7c7b\u4f3c\u3002\u7136\u800c\uff0c\u4e0d\u540c\u4e0e\u8bbe\u7f6e\u6279\u5927\u5c0f\uff0c\u4e00\u4e2a\u65b0\u7ec4\u7ec7\u5b9a\u4e49\u5728\u5e94\u7528\u7ea7\u522b\u3002\u6dfb\u52a0\u4e00\u4e2a\u7ec4\u7ec7\u7a0d\u5fae\u7275\u626f\u4e00\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u5148\u521b\u5efa\u4e00\u4e2a\u901a\u9053\uff0c\u7136\u540e\u4fee\u6539\u5b83\u7684\u6210\u5458\u7ec4\u6210\u3002 \n\u5173\u4e8e\u5229\u7528configtxlator\u589e\u52a0\u7ec4\u7ec7\u7684\u66f4\u591a\u5185\u5bb9\u53c2\u8003 \u91cd\u65b0\u914d\u7f6e\u9996\u4e2a\u7f51\u7edc(First-Network) \u3002", 
            "title": "\u589e\u52a0\u4e00\u4e2a\u7ec4\u7ec7"
        }, 
        {
            "location": "/endorsement-policies_zh/", 
            "text": "\u80cc\u4e66\u7b56\u7565\n\n\n\u539f\u6587\n\n\u80cc\u4e66\u7b56\u7565\u662f\u7528\u6765\u6307\u5bfcpeer\u5982\u4f55\u51b3\u5b9a\u4ea4\u6613\u662f\u5426\u5f97\u5230\u9002\u5f53\u7684\u8d5e\u540c\u3002\u5f53peer\u6536\u5230\u4e00\u4e2a\u4ea4\u6613\u65f6\uff0c\u4f5c\u4e3a\u4ea4\u6613\u9a8c\u8bc1\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u8c03\u7528\u4e0e\u4ea4\u6613\u7684\u94fe\u7801\u76f8\u5173\u8054\u7684VSCC(\u9a8c\u8bc1\u7cfb\u7edf\u94fe\u7801)\u6765\u786e\u5b9a\u4ea4\u6613\u7684\u6709\u6548\u6027\u3002\u56de\u5fc6\u4e00\u4e0b\uff0c\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u6765\u81ea\u4efb\u4f55\u80cc\u4e66peer\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u80cc\u4e66\u3002VSCC\u7684\u4efb\u52a1\u662f\u505a\u51fa\u4ee5\u4e0b\u51b3\u5b9a\uff1a\n- \u6240\u6709\u7684\u80cc\u4e66\u662f\u6709\u6548\u7684\uff08\u4e5f\u5c31\u662f\u5b83\u4eec\u662f\u6765\u81ea\u6709\u6548\u8bc1\u4e66\u7684\u6709\u6548\u7b7e\u540d\uff09\n\n- \u6709\u6070\u5f53\u6570\u91cf\u7684\u7b7e\u540d\n\n- \u80cc\u4e66\u6765\u81ea\u9884\u671f\u7684\u6e90  \n\n\n\u80cc\u4e66\u7b56\u7565\u662f\u6307\u5b9a\u7b2c\u4e8c\u548c\u7b2c\u4e09\u70b9\u7684\u4e00\u79cd\u65b9\u5f0f\u3002  \n\n\nCLI\u4e2d\u7684\u80cc\u4e66\u7b56\u7565\u8bed\u6cd5\n\n\n(\u672c\u8282\u4e2d\u7684\u8eab\u4efd\u90fd\u662fprincipal)\n\u5728CLI\u4e2d\uff0c\u7b56\u7565\u7528\u4e00\u79cd\u7b80\u5355\u7684\u8bed\u8a00\u6765\u8868\u8fbe\uff0c\u5373\u57fa\u4e8e\u8eab\u4efd\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u3002\n\n\u4e00\u4e2a\u8eab\u4efd\u901a\u8fc7MSP\u63cf\u8ff0\uff0c\u5b83\u7684\u4efb\u52a1\u662f\u9a8c\u8bc1\u7b7e\u540d\u8005\u8eab\u4efd\u548c\u7b7e\u540d\u8005\u89d2\u8272\u5b58\u5728\u4e8eMSP\u4e2d\u3002\u5f53\u524d\uff0c\u652f\u6301\u4e24\u79cd\u89d2\u8272\uff0c\nmember\n(\u6210\u5458)\u548c\nadmin\n(\u7ba1\u7406\u5458)\u3002\u8eab\u4efd\u7528\nMSP\n.\nROLE\n\u63cf\u8ff0\uff0c\u8fd9\u91cc\nMSP\n\u662fMSP ID(\u5fc5\u586b)\uff0c\nROLE\n\u662f\nmember\n\u6216\nadmin\n\u4e8c\u9009\u4e00\u3002\u9a8c\u8bc1\u8eab\u4efd(principal)\u7684\u4f8b\u5b50\u662f\nOrg0.admin\n(\nOrg0\nMSP\u7684\u4efb\u4f55\u7ba1\u7406\u5458)\u6216\nOrg1.member\n(\nOrg1\nMSP\u7684\u4efb\u4f55\u6210\u5458)\u3002\n\n\u8fd9\u4e2a\u8bed\u8a00\u7684\u8bed\u6cd5\u662f\uff1a  \n\n\nEXPR(E[, E...])\n\n\n\n\n\u8fd9\u91cc\nEXPR\n\u662f\nAND\n\u6216\nOR\n\uff0c\u8868\u793a\u4e24\u4e2a\u5e03\u5c14\u8868\u8fbe\u5f0f\u3002\nE\n\u53ef\u4ee5\u662f\u4e00\u4e2a\u8eab\u4efd\u6216\u53e6\u4e00\u4e2a\u5d4c\u5165\u7684\nEXPR\n\u3002\uff08\u8fd0\u7b97\u7b26\u5728\u524d\u9762\uff0c\u8fd9\u88ab\u79f0\u4e3a\u6ce2\u5170\u8bed\u8868\u793a\u6cd5\uff09   \n\n\n\u4f8b\u5982\uff1a\n\n- \nAND('Org1.member', 'Org2.member', 'Org3.member')\n \u8981\u6c42\u4e09\u4f4d\u8eab\u4efd\u5206\u522b\u7b7e\u540d\n\n- \nOR('Org1.member', 'Org2.member')\n \u4e24\u8eab\u4efd\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7b7e\u540d\u90fd\u53ef\u4ee5\n\n- \nOR('Org1.member', AND('Org2.member', 'Org3.member'))\n \u8981\u6c42\nOrg1\n MSP\u6210\u5458\u7684\u4e00\u4e2a\u7b7e\u540d\uff0c\u6216\nOrg2\nMSP\u6210\u5458\u548c\nOrg3\nMSP\u6210\u5458\u7684\u5206\u522b\u7b7e\u540d  \n\n\n\u5b9a\u4e49\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\n\n\n\u4f7f\u7528\u8fd9\u4e2a\u8bed\u8a00\uff0c\u94fe\u7801\u90e8\u7f72\u8005\u53ef\u4ee5\u4e3a\u67d0\u4e2a\u94fe\u7801\u6307\u5b9a\u7279\u5b9a\u7b56\u7565\u3002\u6ce8\u610f\uff0c\u9ed8\u8ba4\u7b56\u7565\u662f\u9700\u8981\nDEFAULT\nMSP\u6210\u5458\u7684\u4e00\u4e2a\u7b7e\u540d\u3002\u7528CLI\u5b9e\u4f8b\u5316\u94fe\u7801\u65f6\uff0c\u6ca1\u6709\u6307\u5b9a\u7b56\u7565\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7b56\u7565\u3002\n\n\u5b9e\u4f8b\u5316\u65f6\u7528\n-P\n\u9009\u9879\u6307\u5b9a\u7b56\u7565\u3002\u4f8b\u5982\uff1a\n\n\n$ peer chaincode instantiate -C \nchannelid\n -n mycc -P \nAND('Org1.member', 'Org2.member')\n\n\n\n\n\n\u8fd9\u4e2a\u547d\u4ee4\u90e8\u7f72\u94fe\u7801\nmycc\n\uff0c\u4f7f\u7528\u7684\u7b56\u7565\u662f\nAND('Org1.member', 'Org2.member')\n\uff0c\u5373\u540c\u65f6\u9700\u8981Org1\u548cOrg2\u7684\u6210\u5458\u7b7e\u7f72\u4ea4\u6613\u3002", 
            "title": "\u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/endorsement-policies_zh/#_1", 
            "text": "\u539f\u6587 \n\u80cc\u4e66\u7b56\u7565\u662f\u7528\u6765\u6307\u5bfcpeer\u5982\u4f55\u51b3\u5b9a\u4ea4\u6613\u662f\u5426\u5f97\u5230\u9002\u5f53\u7684\u8d5e\u540c\u3002\u5f53peer\u6536\u5230\u4e00\u4e2a\u4ea4\u6613\u65f6\uff0c\u4f5c\u4e3a\u4ea4\u6613\u9a8c\u8bc1\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u8c03\u7528\u4e0e\u4ea4\u6613\u7684\u94fe\u7801\u76f8\u5173\u8054\u7684VSCC(\u9a8c\u8bc1\u7cfb\u7edf\u94fe\u7801)\u6765\u786e\u5b9a\u4ea4\u6613\u7684\u6709\u6548\u6027\u3002\u56de\u5fc6\u4e00\u4e0b\uff0c\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u6765\u81ea\u4efb\u4f55\u80cc\u4e66peer\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u80cc\u4e66\u3002VSCC\u7684\u4efb\u52a1\u662f\u505a\u51fa\u4ee5\u4e0b\u51b3\u5b9a\uff1a\n- \u6240\u6709\u7684\u80cc\u4e66\u662f\u6709\u6548\u7684\uff08\u4e5f\u5c31\u662f\u5b83\u4eec\u662f\u6765\u81ea\u6709\u6548\u8bc1\u4e66\u7684\u6709\u6548\u7b7e\u540d\uff09 \n- \u6709\u6070\u5f53\u6570\u91cf\u7684\u7b7e\u540d \n- \u80cc\u4e66\u6765\u81ea\u9884\u671f\u7684\u6e90    \u80cc\u4e66\u7b56\u7565\u662f\u6307\u5b9a\u7b2c\u4e8c\u548c\u7b2c\u4e09\u70b9\u7684\u4e00\u79cd\u65b9\u5f0f\u3002", 
            "title": "\u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/endorsement-policies_zh/#cli", 
            "text": "(\u672c\u8282\u4e2d\u7684\u8eab\u4efd\u90fd\u662fprincipal)\n\u5728CLI\u4e2d\uff0c\u7b56\u7565\u7528\u4e00\u79cd\u7b80\u5355\u7684\u8bed\u8a00\u6765\u8868\u8fbe\uff0c\u5373\u57fa\u4e8e\u8eab\u4efd\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u3002 \n\u4e00\u4e2a\u8eab\u4efd\u901a\u8fc7MSP\u63cf\u8ff0\uff0c\u5b83\u7684\u4efb\u52a1\u662f\u9a8c\u8bc1\u7b7e\u540d\u8005\u8eab\u4efd\u548c\u7b7e\u540d\u8005\u89d2\u8272\u5b58\u5728\u4e8eMSP\u4e2d\u3002\u5f53\u524d\uff0c\u652f\u6301\u4e24\u79cd\u89d2\u8272\uff0c member (\u6210\u5458)\u548c admin (\u7ba1\u7406\u5458)\u3002\u8eab\u4efd\u7528 MSP . ROLE \u63cf\u8ff0\uff0c\u8fd9\u91cc MSP \u662fMSP ID(\u5fc5\u586b)\uff0c ROLE \u662f member \u6216 admin \u4e8c\u9009\u4e00\u3002\u9a8c\u8bc1\u8eab\u4efd(principal)\u7684\u4f8b\u5b50\u662f Org0.admin ( Org0 MSP\u7684\u4efb\u4f55\u7ba1\u7406\u5458)\u6216 Org1.member ( Org1 MSP\u7684\u4efb\u4f55\u6210\u5458)\u3002 \n\u8fd9\u4e2a\u8bed\u8a00\u7684\u8bed\u6cd5\u662f\uff1a    EXPR(E[, E...])  \u8fd9\u91cc EXPR \u662f AND \u6216 OR \uff0c\u8868\u793a\u4e24\u4e2a\u5e03\u5c14\u8868\u8fbe\u5f0f\u3002 E \u53ef\u4ee5\u662f\u4e00\u4e2a\u8eab\u4efd\u6216\u53e6\u4e00\u4e2a\u5d4c\u5165\u7684 EXPR \u3002\uff08\u8fd0\u7b97\u7b26\u5728\u524d\u9762\uff0c\u8fd9\u88ab\u79f0\u4e3a\u6ce2\u5170\u8bed\u8868\u793a\u6cd5\uff09     \u4f8b\u5982\uff1a \n-  AND('Org1.member', 'Org2.member', 'Org3.member')  \u8981\u6c42\u4e09\u4f4d\u8eab\u4efd\u5206\u522b\u7b7e\u540d \n-  OR('Org1.member', 'Org2.member')  \u4e24\u8eab\u4efd\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7b7e\u540d\u90fd\u53ef\u4ee5 \n-  OR('Org1.member', AND('Org2.member', 'Org3.member'))  \u8981\u6c42 Org1  MSP\u6210\u5458\u7684\u4e00\u4e2a\u7b7e\u540d\uff0c\u6216 Org2 MSP\u6210\u5458\u548c Org3 MSP\u6210\u5458\u7684\u5206\u522b\u7b7e\u540d", 
            "title": "CLI\u4e2d\u7684\u80cc\u4e66\u7b56\u7565\u8bed\u6cd5"
        }, 
        {
            "location": "/endorsement-policies_zh/#_2", 
            "text": "\u4f7f\u7528\u8fd9\u4e2a\u8bed\u8a00\uff0c\u94fe\u7801\u90e8\u7f72\u8005\u53ef\u4ee5\u4e3a\u67d0\u4e2a\u94fe\u7801\u6307\u5b9a\u7279\u5b9a\u7b56\u7565\u3002\u6ce8\u610f\uff0c\u9ed8\u8ba4\u7b56\u7565\u662f\u9700\u8981 DEFAULT MSP\u6210\u5458\u7684\u4e00\u4e2a\u7b7e\u540d\u3002\u7528CLI\u5b9e\u4f8b\u5316\u94fe\u7801\u65f6\uff0c\u6ca1\u6709\u6307\u5b9a\u7b56\u7565\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7b56\u7565\u3002 \n\u5b9e\u4f8b\u5316\u65f6\u7528 -P \u9009\u9879\u6307\u5b9a\u7b56\u7565\u3002\u4f8b\u5982\uff1a  $ peer chaincode instantiate -C  channelid  -n mycc -P  AND('Org1.member', 'Org2.member')   \u8fd9\u4e2a\u547d\u4ee4\u90e8\u7f72\u94fe\u7801 mycc \uff0c\u4f7f\u7528\u7684\u7b56\u7565\u662f AND('Org1.member', 'Org2.member') \uff0c\u5373\u540c\u65f6\u9700\u8981Org1\u548cOrg2\u7684\u6210\u5458\u7b7e\u7f72\u4ea4\u6613\u3002", 
            "title": "\u5b9a\u4e49\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/error-handling_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nZhangjiong Xuan\n\n\n\n\n\n\n\n\n\n\n1.1. \u603b\u4f53\u6982\u89c8\n\n\nThe Hyperledger Fabric error handling framework can be found in the source repository under common/errors. It defines a new type of error, CallStackError, to use in place of the standard error type provided by Go.\n\n\nFabric\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u53ef\u4ee5\u5728Fabric\u4ee3\u7801\u4ed3\u5e93\u7684common/errors\u76ee\u5f55\u4e0b\u627e\u5230\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u79cd\u65b0\u7684\u9519\u8bef\u7c7b\u578b\uff0c\nCallStackError\n,\u7528\u4e8e\u53d6\u4ee3\nGo\n\u6807\u51c6\u5e93\u4e2d\u5b9e\u73b0\u7684\u9519\u8bef\u7c7b\u578b\u3002\n\n\nA CallStackError consists of the following:\n\n\n\n\nComponent code - a name for the general area of the code that is generating the error. Component codes should consist of three uppercase letters. Numerics and special characters are not allowed. A set of component codes is defined in common/errors/codes.go\n\n\nReason code - a short code to help identify the reason the error occurred. Reason codes should consist of three numeric values. Letters and special characters are not allowed. A set of reason codes is defined in common/error/codes.go\n\n\nError code - the component code and reason code separated by a colon, e.g. MSP:404\n\n\nError message - the text that describes the error. This is the same as the input provided to fmt.Errorf() and Errors.New(). If an error has been wrapped into the current error, its message will be appended.\n\n\nCallstack - the callstack at the time the error is created. If an error has been wrapped into the current error, its error message and callstack will be appended to retain the context of the wrapped error.\n\n\n\n\n\u4e00\u4e2a\nCallStackError\n\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\nComponent code\n - \u4e00\u4e2a\u751f\u6210\u9519\u8bef\u4fe1\u606f\u7684\u9519\u8bef\u7801\u7684\u901a\u7528\u533a\u57df\u7684\u7ec4\u4ef6\u540d\u79f0\u3002Component codes\u5e94\u8be5\u75313\u4e2a\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217component codes\u88ab\u5b9a\u4e49\u5728\ncommon/errors/codes.go\n\u6587\u4ef6\u4e2d\u3002\n\n\nReason code\n - \u4e00\u4e2a\u7528\u4e8e\u5728\u9519\u8bef\u51fa\u73b0\u65f6\u5b9a\u4f4d\u9519\u8bef\u539f\u56e0\u7684\u8f83\u77ed\u7684\u9519\u8bef\u7801\u3002Reason codes\u5e94\u8be5\u75313\u4f4d\u6570\u5b57\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u5b57\u6bcd\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217reason codes\u88ab\u5b9a\u4e49\u5728\ncommon/errors/codes.go\n\u6587\u4ef6\u4e2d\u3002\n\n\nError code\n - \u7531\u5192\u53f7\u5206\u9694\u7684component code\u548creason code\u7ec4\u6210\u7684\u9519\u8bef\u7801\uff0c\u4f8b\u5982\nMSP\uff1a404\n\u3002\n\n\nError message\n - \u63cf\u8ff0\u9519\u8bef\u4fe1\u606f\u7684\u6587\u672c\u3002\u8fd9\u4e0e\u63d0\u4f9b\u7684\nfmt.Errorf()\n\u548c\nErrors.New()\n\u7c7b\u4f3c\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5230\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u5c06\u88ab\u9644\u52a0\u3002\n\n\nCallstack\n - \u9519\u8bef\u51fa\u73b0\u65f6\u7684\u8c03\u7528\u5806\u6808\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5728\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u548c\u8c03\u7528\u5806\u6808\u4fe1\u606f\u4f1a\u88ab\u9644\u52a0\u5230\u88ab\u5305\u542b\u7684\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\n\n\n\n\nThe CallStackError interface exposes the following functions:\n\n\n\n\nError() - returns the error message with callstack appended\n\n\nMessage() - returns the error message (without callstack appended)\n\n\nGetComponentCode() - returns the 3-character component code\n\n\nGetReasonCode() - returns the 3-digit reason code\n\n\nGetErrorCode() - returns the error code, which is \u201ccomponent:reason\u201d\n\n\nGetStack() - returns just the callstack\n\n\nWrapError(error) - wraps the provided error into the CallStackError\n\n\n\n\nCallstack\n\u63a5\u53e3\u66b4\u9732\u4e86\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n\n\n\n\nError()\n - \u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u8c03\u7528\u5806\u6808\u7684\u9519\u8bef\u6d88\u606f\u3002\n\n\nMessage()\n - \u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u3002\uff08\u4e0d\u5305\u542b\u8c03\u7528\u5806\u6808\u4fe1\u606f\uff09\u3002\n\n\nGetComponentCode()\n - \u8fd4\u56de\u75313\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u7ec4\u4ef6\u4ee3\u7801\u3002\n\n\nGetReasonCode()\n - \u8fd4\u56de\u75313\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u9519\u8bef\u539f\u56e0\u4ee3\u7801\u3002\n\n\nGetErrorCode()\n - \u8fd4\u56de\u9519\u8bef\u4ee3\u7801\uff0c\u7531\ncomponent:reason\n\u7ec4\u6210\u3002\n\n\nGetStack()\n - \u4ec5\u8fd4\u56de\u8c03\u7528\u5806\u6808\u3002\n\n\nWrapError(error)\n - \u5c06\u63d0\u4f9b\u7684\u9519\u8bef\u5305\u88c5\u8fdb\nCallStackError\n\u3002\n\n\n\n\n1.2. \u4f7f\u7528\u8bf4\u660e\n\n\nThe new error handling framework should be used in place of all calls to fmt.Errorf() or Errors.new(). Using this framework will provide error codes to check against as well as the option to generate a callstack that will be appended to the error message.\n\n\n\u5e94\u8be5\u4f7f\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u6765\u66ff\u6362\u6240\u6709\u8c03\u7528\nfmt.Errorf()\n\u6216\u8005\nErrors.new()\n\u7684\u5730\u65b9\u3002\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u5c06\u63d0\u4f9b\u9519\u8bef\u4ee3\u7801\u4ee5\u53ca\u5c06\u9644\u52a0\u5230\u9519\u8bef\u6d88\u606f\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f\u7684\u9009\u9879\u3002\n\n\nUsing the framework is simple and will only require an easy tweak to your code.\n\n\n\u4f7f\u7528\u8fd9\u4e2a\u9519\u8bef\u6846\u67b6\u7b80\u5355\u6613\u7528\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u8c03\u6574\u4f60\u7684\u4ee3\u7801\u3002\n\n\nFirst, you\u2019ll need to import github.com/hyperledger/fabric/common/errors into any file that uses this framework.\n\n\n\u9996\u5148\uff0c\u60a8\u9700\u8981\u5c06\ngithub.com/hyperleger/fabric/common/errors\n\u5bfc\u5165\u5230\u4f7f\u7528\u6b64\u6846\u67b6\u7684\u4efb\u4f55\u6587\u4ef6\u4e2d\u3002\n\n\nLet\u2019s take the following as an example from core/chaincode/chaincode_support.go:\n\n\n\u4ee5\ncore/chaincode/chaincode_support.go\n\u4e3a\u4f8b\uff1a\n\n\nerr = fmt.Errorf(\nError starting container: %s\n, err)\n\n\n\n\nFor this error, we will simply call the constructor for Error and pass a component code, reason code, followed by the error message. At the end, we then call the WrapError() function, passing along the error itself.\n\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u8c03\u7528Error\u7684\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u7ec4\u4ef6\u4ee3\u7801\uff0c\u539f\u56e0\u4ee3\u7801\uff0c\u7136\u540e\u662f\u9519\u8bef\u6d88\u606f\u3002\u6700\u540e\uff0c\u6211\u4eec\u8c03\u7528\nWrapError()\n\u51fd\u6570\uff0c\u4f20\u9012\u9519\u8bef\u672c\u8eab\u3002\n\n\nfmt.Errorf(\nError starting container: %s\n, err)\n\n\n\n\n\u53d8\u6210\n\n\nerrors.ErrorWithCallstack(\nCHA\n, \n505\n, \nError starting container\n).WrapError(err)\n\n\n\n\nYou could also just leave the message as is without any problems:\n\n\n\u60a8\u4e5f\u53ef\u4ee5\u4ec5\u7f16\u5199\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\uff1a\n\n\nerrors.ErrorWithCallstack(\nCHA\n, \n505\n, \nError starting container: %s\n, err)\n\n\n\n\nWith this usage you will be able to format the error message from the previous error into the new error, but will lose the ability to print the callstack (if the wrapped error is a CallStackError).\n\n\n\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u4e0a\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u683c\u5f0f\u5316\u6210\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\uff0c\u4f46\u662f\u5c06\u5931\u53bb\u6253\u5370\u8c03\u7528\u5806\u6808\u7684\u80fd\u529b\uff08\u5982\u679c\u5305\u88c5\u7684\u9519\u8bef\u662fCallStack\uff09\u3002\n\n\nA second example to highlight a scenario that involves formatting directives for parameters other than errors, while still wrapping an error, is as follows:\n\n\n\u53e6\u4e00\u4e2a\u51f8\u663e\u7684\u4f8b\u5b50\u6d89\u53ca\u4e86\u683c\u5f0f\u5316\u9519\u8bef\u4ee5\u5916\u7684\u53c2\u6570\u6307\u4ee4\uff0c\u540c\u65f6\u4ecd\u7136\u5305\u542b\u4e86\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\nfmt.Errorf(\nfailed to get deployment payload %s - %s\n, canName, err)\n\n\n\n\n\u53d8\u6210\n\n\nerrors.ErrorWithCallstack(\nCHA\n, \n506\n, \nFailed to get deployment payload %s\n, canName).WrapError(err)\n\n\n\n\n1.3. \u663e\u793a\u9519\u8bef\u6d88\u606f\n\n\nOnce the error has been created using the framework, displaying the error message is as simple as:\n\n\n\u4e00\u65e6\u4f7f\u7528\u6846\u67b6\u521b\u5efa\u5566\u9519\u8bef\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f\u5c06\u5341\u5206\u7b80\u5355\uff1a\n\n\nlogger.Errorf(err)\n\n\n\n\n\u6216\u8005\n\n\nfmt.Println(err)\n\n\n\n\n\u6216\u8005\n\n\nfmt.Printf(\n%s\\n\n,err)\n\n\n\n\n\u6765\u81ea\npeer/common/common.go\n\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\nerrors.ErrorWithCallstack(\nPER\n, \n404\n, \nError trying to connect to local peer\n).WrapError(err)\n\n\n\n\n\u5c06\u663e\u793a\u9519\u8bef\u6d88\u606f\uff1a\n\n\nPER:404 - Error trying to connect to local peer\nCaused by: grpc: timed out when dialing\n\n\n\n\nNote\nThe callstacks have not been displayed for this example for the sake of brevity.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u672c\u793a\u4f8b\u5c1a\u672a\u5c55\u793a\u8c03\u7528\u5806\u6808\u4fe1\u606f\u3002\n\n\n\n\n\n\n1.4. Hyperledger Fabric\u4e2d\u9519\u8bef\u5904\u7406\u7684\u4e00\u822c\u51c6\u5219\n\n\n\n\nIf it is some sort of best effort thing you are doing, you should log the error and ignore it.\n\n\nIf you are servicing a user request, you should log the error and return it.\n\n\nIf the error comes from elsewhere, you have the choice to wrap the error or not. Typically, it\u2019s best to not wrap the error and simply return it as is. However, for certain cases where a utility function is called, wrapping the error with a new component and reason code can help an end user understand where the error is really occurring without inspecting the callstack.\n\n\n\n\nA panic should be handled within the same layer by throwing an internal error code/start a recovery process and should not be allowed to propagate to other packages.\n\n\n\n\n\n\n\u5982\u679c\u8fd9\u662f\u4f60\u6b63\u5728\u52aa\u529b\u505a\u7684\u67d0\u79cd\u4e8b\u60c5\uff0c\u4f60\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u5ffd\u7565\u5b83\u3002\n\n\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u7528\u6237\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\uff0c\u5219\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u8fd4\u56de\u3002\n\n\n\u5982\u679c\u9519\u8bef\u6765\u81ea\u5176\u5b83\u5730\u65b9\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5305\u88c5\u9519\u8bef\u3002\u901a\u5e38\uff0c\u6700\u597d\u4e0d\u8981\u5305\u88c5\u9519\u8bef\uff0c\u8ba9\u5b83\u539f\u6837\u8fd4\u56de\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5de5\u5177\u51fd\u6570\u8c03\u7528\u7684\u67d0\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528component code\u548creason code\u6765\u5305\u88c5\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5728\u4e0d\u68c0\u67e5\u8c03\u7528\u5806\u6808\u7684\u60c5\u51b5\u4e0b\u4e86\u89e3\u6b63\u771f\u53d1\u751f\u9519\u8bef\u7684\u4f4d\u7f6e\u3002\n\n\n\u4e00\u4e2apanic \u5e94\u8be5\u5728\u540c\u4e00\u5c42\u901a\u8fc7\u629b\u51fa\u5185\u90e8\u9519\u8bef\u4ee3\u7801/\u542f\u52a8\u4e00\u4e2a\u6062\u590d\u8fdb\u7a0b\u6765\u5904\u7406\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f20\u64ad\u5230\u5176\u4ed6\u8f6f\u4ef6\u5305\u3002", 
            "title": "\u9519\u8bef\u5904\u7406"
        }, 
        {
            "location": "/error-handling_zh/#11", 
            "text": "The Hyperledger Fabric error handling framework can be found in the source repository under common/errors. It defines a new type of error, CallStackError, to use in place of the standard error type provided by Go.  Fabric\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u53ef\u4ee5\u5728Fabric\u4ee3\u7801\u4ed3\u5e93\u7684common/errors\u76ee\u5f55\u4e0b\u627e\u5230\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u79cd\u65b0\u7684\u9519\u8bef\u7c7b\u578b\uff0c CallStackError ,\u7528\u4e8e\u53d6\u4ee3 Go \u6807\u51c6\u5e93\u4e2d\u5b9e\u73b0\u7684\u9519\u8bef\u7c7b\u578b\u3002  A CallStackError consists of the following:   Component code - a name for the general area of the code that is generating the error. Component codes should consist of three uppercase letters. Numerics and special characters are not allowed. A set of component codes is defined in common/errors/codes.go  Reason code - a short code to help identify the reason the error occurred. Reason codes should consist of three numeric values. Letters and special characters are not allowed. A set of reason codes is defined in common/error/codes.go  Error code - the component code and reason code separated by a colon, e.g. MSP:404  Error message - the text that describes the error. This is the same as the input provided to fmt.Errorf() and Errors.New(). If an error has been wrapped into the current error, its message will be appended.  Callstack - the callstack at the time the error is created. If an error has been wrapped into the current error, its error message and callstack will be appended to retain the context of the wrapped error.   \u4e00\u4e2a CallStackError \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a   Component code  - \u4e00\u4e2a\u751f\u6210\u9519\u8bef\u4fe1\u606f\u7684\u9519\u8bef\u7801\u7684\u901a\u7528\u533a\u57df\u7684\u7ec4\u4ef6\u540d\u79f0\u3002Component codes\u5e94\u8be5\u75313\u4e2a\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217component codes\u88ab\u5b9a\u4e49\u5728 common/errors/codes.go \u6587\u4ef6\u4e2d\u3002  Reason code  - \u4e00\u4e2a\u7528\u4e8e\u5728\u9519\u8bef\u51fa\u73b0\u65f6\u5b9a\u4f4d\u9519\u8bef\u539f\u56e0\u7684\u8f83\u77ed\u7684\u9519\u8bef\u7801\u3002Reason codes\u5e94\u8be5\u75313\u4f4d\u6570\u5b57\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u5b57\u6bcd\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217reason codes\u88ab\u5b9a\u4e49\u5728 common/errors/codes.go \u6587\u4ef6\u4e2d\u3002  Error code  - \u7531\u5192\u53f7\u5206\u9694\u7684component code\u548creason code\u7ec4\u6210\u7684\u9519\u8bef\u7801\uff0c\u4f8b\u5982 MSP\uff1a404 \u3002  Error message  - \u63cf\u8ff0\u9519\u8bef\u4fe1\u606f\u7684\u6587\u672c\u3002\u8fd9\u4e0e\u63d0\u4f9b\u7684 fmt.Errorf() \u548c Errors.New() \u7c7b\u4f3c\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5230\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u5c06\u88ab\u9644\u52a0\u3002  Callstack  - \u9519\u8bef\u51fa\u73b0\u65f6\u7684\u8c03\u7528\u5806\u6808\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5728\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u548c\u8c03\u7528\u5806\u6808\u4fe1\u606f\u4f1a\u88ab\u9644\u52a0\u5230\u88ab\u5305\u542b\u7684\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002   The CallStackError interface exposes the following functions:   Error() - returns the error message with callstack appended  Message() - returns the error message (without callstack appended)  GetComponentCode() - returns the 3-character component code  GetReasonCode() - returns the 3-digit reason code  GetErrorCode() - returns the error code, which is \u201ccomponent:reason\u201d  GetStack() - returns just the callstack  WrapError(error) - wraps the provided error into the CallStackError   Callstack \u63a5\u53e3\u66b4\u9732\u4e86\u4ee5\u4e0b\u65b9\u6cd5\uff1a   Error()  - \u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u8c03\u7528\u5806\u6808\u7684\u9519\u8bef\u6d88\u606f\u3002  Message()  - \u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u3002\uff08\u4e0d\u5305\u542b\u8c03\u7528\u5806\u6808\u4fe1\u606f\uff09\u3002  GetComponentCode()  - \u8fd4\u56de\u75313\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u7ec4\u4ef6\u4ee3\u7801\u3002  GetReasonCode()  - \u8fd4\u56de\u75313\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u9519\u8bef\u539f\u56e0\u4ee3\u7801\u3002  GetErrorCode()  - \u8fd4\u56de\u9519\u8bef\u4ee3\u7801\uff0c\u7531 component:reason \u7ec4\u6210\u3002  GetStack()  - \u4ec5\u8fd4\u56de\u8c03\u7528\u5806\u6808\u3002  WrapError(error)  - \u5c06\u63d0\u4f9b\u7684\u9519\u8bef\u5305\u88c5\u8fdb CallStackError \u3002", 
            "title": "1.1. \u603b\u4f53\u6982\u89c8"
        }, 
        {
            "location": "/error-handling_zh/#12", 
            "text": "The new error handling framework should be used in place of all calls to fmt.Errorf() or Errors.new(). Using this framework will provide error codes to check against as well as the option to generate a callstack that will be appended to the error message.  \u5e94\u8be5\u4f7f\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u6765\u66ff\u6362\u6240\u6709\u8c03\u7528 fmt.Errorf() \u6216\u8005 Errors.new() \u7684\u5730\u65b9\u3002\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u5c06\u63d0\u4f9b\u9519\u8bef\u4ee3\u7801\u4ee5\u53ca\u5c06\u9644\u52a0\u5230\u9519\u8bef\u6d88\u606f\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f\u7684\u9009\u9879\u3002  Using the framework is simple and will only require an easy tweak to your code.  \u4f7f\u7528\u8fd9\u4e2a\u9519\u8bef\u6846\u67b6\u7b80\u5355\u6613\u7528\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u8c03\u6574\u4f60\u7684\u4ee3\u7801\u3002  First, you\u2019ll need to import github.com/hyperledger/fabric/common/errors into any file that uses this framework.  \u9996\u5148\uff0c\u60a8\u9700\u8981\u5c06 github.com/hyperleger/fabric/common/errors \u5bfc\u5165\u5230\u4f7f\u7528\u6b64\u6846\u67b6\u7684\u4efb\u4f55\u6587\u4ef6\u4e2d\u3002  Let\u2019s take the following as an example from core/chaincode/chaincode_support.go:  \u4ee5 core/chaincode/chaincode_support.go \u4e3a\u4f8b\uff1a  err = fmt.Errorf( Error starting container: %s , err)  For this error, we will simply call the constructor for Error and pass a component code, reason code, followed by the error message. At the end, we then call the WrapError() function, passing along the error itself.  \u5bf9\u4e8e\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u8c03\u7528Error\u7684\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u7ec4\u4ef6\u4ee3\u7801\uff0c\u539f\u56e0\u4ee3\u7801\uff0c\u7136\u540e\u662f\u9519\u8bef\u6d88\u606f\u3002\u6700\u540e\uff0c\u6211\u4eec\u8c03\u7528 WrapError() \u51fd\u6570\uff0c\u4f20\u9012\u9519\u8bef\u672c\u8eab\u3002  fmt.Errorf( Error starting container: %s , err)  \u53d8\u6210  errors.ErrorWithCallstack( CHA ,  505 ,  Error starting container ).WrapError(err)  You could also just leave the message as is without any problems:  \u60a8\u4e5f\u53ef\u4ee5\u4ec5\u7f16\u5199\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\uff1a  errors.ErrorWithCallstack( CHA ,  505 ,  Error starting container: %s , err)  With this usage you will be able to format the error message from the previous error into the new error, but will lose the ability to print the callstack (if the wrapped error is a CallStackError).  \u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u4e0a\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u683c\u5f0f\u5316\u6210\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\uff0c\u4f46\u662f\u5c06\u5931\u53bb\u6253\u5370\u8c03\u7528\u5806\u6808\u7684\u80fd\u529b\uff08\u5982\u679c\u5305\u88c5\u7684\u9519\u8bef\u662fCallStack\uff09\u3002  A second example to highlight a scenario that involves formatting directives for parameters other than errors, while still wrapping an error, is as follows:  \u53e6\u4e00\u4e2a\u51f8\u663e\u7684\u4f8b\u5b50\u6d89\u53ca\u4e86\u683c\u5f0f\u5316\u9519\u8bef\u4ee5\u5916\u7684\u53c2\u6570\u6307\u4ee4\uff0c\u540c\u65f6\u4ecd\u7136\u5305\u542b\u4e86\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a  fmt.Errorf( failed to get deployment payload %s - %s , canName, err)  \u53d8\u6210  errors.ErrorWithCallstack( CHA ,  506 ,  Failed to get deployment payload %s , canName).WrapError(err)", 
            "title": "1.2. \u4f7f\u7528\u8bf4\u660e"
        }, 
        {
            "location": "/error-handling_zh/#13", 
            "text": "Once the error has been created using the framework, displaying the error message is as simple as:  \u4e00\u65e6\u4f7f\u7528\u6846\u67b6\u521b\u5efa\u5566\u9519\u8bef\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f\u5c06\u5341\u5206\u7b80\u5355\uff1a  logger.Errorf(err)  \u6216\u8005  fmt.Println(err)  \u6216\u8005  fmt.Printf( %s\\n ,err)  \u6765\u81ea peer/common/common.go \u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a  errors.ErrorWithCallstack( PER ,  404 ,  Error trying to connect to local peer ).WrapError(err)  \u5c06\u663e\u793a\u9519\u8bef\u6d88\u606f\uff1a  PER:404 - Error trying to connect to local peer\nCaused by: grpc: timed out when dialing  Note\nThe callstacks have not been displayed for this example for the sake of brevity.   \u6ce8\u610f   \u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u672c\u793a\u4f8b\u5c1a\u672a\u5c55\u793a\u8c03\u7528\u5806\u6808\u4fe1\u606f\u3002", 
            "title": "1.3. \u663e\u793a\u9519\u8bef\u6d88\u606f"
        }, 
        {
            "location": "/error-handling_zh/#14-hyperledger-fabric", 
            "text": "If it is some sort of best effort thing you are doing, you should log the error and ignore it.  If you are servicing a user request, you should log the error and return it.  If the error comes from elsewhere, you have the choice to wrap the error or not. Typically, it\u2019s best to not wrap the error and simply return it as is. However, for certain cases where a utility function is called, wrapping the error with a new component and reason code can help an end user understand where the error is really occurring without inspecting the callstack.   A panic should be handled within the same layer by throwing an internal error code/start a recovery process and should not be allowed to propagate to other packages.    \u5982\u679c\u8fd9\u662f\u4f60\u6b63\u5728\u52aa\u529b\u505a\u7684\u67d0\u79cd\u4e8b\u60c5\uff0c\u4f60\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u5ffd\u7565\u5b83\u3002   \u5982\u679c\u4f60\u6b63\u5728\u4e3a\u7528\u6237\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\uff0c\u5219\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u8fd4\u56de\u3002  \u5982\u679c\u9519\u8bef\u6765\u81ea\u5176\u5b83\u5730\u65b9\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5305\u88c5\u9519\u8bef\u3002\u901a\u5e38\uff0c\u6700\u597d\u4e0d\u8981\u5305\u88c5\u9519\u8bef\uff0c\u8ba9\u5b83\u539f\u6837\u8fd4\u56de\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5de5\u5177\u51fd\u6570\u8c03\u7528\u7684\u67d0\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528component code\u548creason code\u6765\u5305\u88c5\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5728\u4e0d\u68c0\u67e5\u8c03\u7528\u5806\u6808\u7684\u60c5\u51b5\u4e0b\u4e86\u89e3\u6b63\u771f\u53d1\u751f\u9519\u8bef\u7684\u4f4d\u7f6e\u3002  \u4e00\u4e2apanic \u5e94\u8be5\u5728\u540c\u4e00\u5c42\u901a\u8fc7\u629b\u51fa\u5185\u90e8\u9519\u8bef\u4ee3\u7801/\u542f\u52a8\u4e00\u4e2a\u6062\u590d\u8fdb\u7a0b\u6765\u5904\u7406\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f20\u64ad\u5230\u5176\u4ed6\u8f6f\u4ef6\u5305\u3002", 
            "title": "1.4. Hyperledger Fabric\u4e2d\u9519\u8bef\u5904\u7406\u7684\u4e00\u822c\u51c6\u5219"
        }, 
        {
            "location": "/logging-control_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYi Zeng\n\n\n\n\n\n\n\n\n\n\nOverview\u6982\u8ff0\n\n\nLogging in the peer application and in the shim interface to chaincodes is programmed using facilities provided by the github.com/op/go-logging package. This package supports\n\n\n\u65e5\u5fd7\u529f\u80fd\u5728\u8282\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u94fe\u4e0a\u4ee3\u7801\u7684shim\u63a5\u53e3\u4e2d\u4f7f\u7528\uff0c\u6700\u7ec8\u5728github.com/op/go-logging\u5305\u5b9e\u73b0\u3002\u8fd9\u4e2a\u5305\u652f\u6301\uff1a\n\n\n\n\nLogging control based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236\n\n\nLogging control based on the software module generating the message\n    \u57fa\u4e8e\u8f6f\u4ef6\u6a21\u5757\u4ea7\u751f\u7684\u6d88\u606f\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236\n\n\nDifferent pretty-printing options based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u7f8e\u89c2\u7684\u6253\u5370\u5230\u4e0d\u540c\u7684\u683c\u5f0f\u7684\u9009\u9879\n\n\n\n\nAll logs are currently directed to stderr, and the pretty-printing is currently fixed. However global and module-level control of logging by severity is provided for both users and developers. There are currently no formalized rules for the types of information provided at each severity level, however when submitting bug reports the developers may want to see full logs down to the DEBUG level.\n\n\n\u6240\u6709\u65e5\u5fd7\u76ee\u524d\u90fd\u88ab\u5b9a\u5411\u5230stderr\uff0c\u800cpretty-printing\u76ee\u524d\u662f\u56fa\u5b9a\u7684\u3002\u7136\u800c\uff0c\u4e3a\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e25\u683c\u7ea7\u522b\u7684\u5168\u5c40\u548c\u6a21\u5757\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u63a7\u5236\u3002\u76ee\u524d\u6ca1\u6709\u5173\u4e8e\u6bcf\u4e2a\u4e25\u91cd\u6027\u7ea7\u522b\u63d0\u4f9b\u7684\u4fe1\u606f\u7c7b\u578b\u7684\u6b63\u5f0f\u89c4\u5219\uff0c\u4f46\u662f\u5f53\u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5e0c\u671b\u770b\u5230\u5b8c\u6574\u7684\u5230DEBUG\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002\n\n\nIn pretty-printed logs the logging level is indicated both by color and by a 4-character code, e.g, \u201cERRO\u201d for ERROR, \u201cDEBU\u201d for DEBUG, etc. In the logging context a module is an arbitrary name (string) given by developers to groups of related messages. In the pretty-printed example below, the logging modules \u201cpeer\u201d, \u201crest\u201d and \u201cmain\u201d are generating logs.\n\n\n\u5728pretty-printed\u7684\u65e5\u5fd7\u4e2d\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7531\u989c\u8272\u548c4\u4e2a\u5b57\u7b26\u7684\u4ee3\u7801\u6307\u793a\uff0c\u4f8b\u5982ERROR\u7684\u201cERRO\u201d\uff0cDEBUG\u7684\u201cDEBU\u201d\u7b49\u3002\u5728\u65e5\u5fd7\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6a21\u5757\u662f\u6307\u7531\u5f00\u53d1\u8005\u6307\u5b9a\u7684\u4efb\u610f\u540d\u79f0\uff08\u5b57\u7b26\u4e32\uff09\u7684\u76f8\u5173\u6d88\u606f\u7684\u7ec4\u3002\u5728\u4ee5\u4e0bpretty-printed\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e5\u5fd7\u6a21\u5757\u201cpeer\u201d\uff0c\u201crest\u201d\u548c\u201cmain\u201d\u90fd\u4ea7\u751f\u4e86\u65e5\u5fd7\u3002\n\n\n16:47:09.634 [peer] GetLocalAddress -\n INFO 033 Auto detected peer address: 9.3.158.178:7051\n16:47:09.635 [rest] StartOpenchainRESTServer -\n INFO 035 Initializing the REST service...\n16:47:09.635 [main] serve -\n INFO 036 Starting peer with id=name:\nvp1\n , network id=dev, address=9.3.158.178:7051, discovery.rootnode=, validator=true\n\n\n\n\nAn arbitrary number of logging modules can be created at runtime, therefore there is no \u201cmaster list\u201d of modules, and logging control constructs can not check whether logging modules actually do or will exist. Also note that the logging module system does not understand hierarchy or wildcarding: You may see module names like \u201cfoo/bar\u201d in the code, but the logging system only sees a flat string. It doesn\u2019t understand that \u201cfoo/bar\u201d is related to \u201cfoo\u201d in any way, or that \u201cfoo/*\u201d might indicate all \u201csubmodules\u201d of foo.\n\n\n\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\uff0c\u56e0\u6b64\u6ca1\u6709\u6a21\u5757\u7684\u201c\u4e3b\u5217\u8868\u201d\u4e00\u8bf4\uff0c\u65e5\u5fd7\u63a7\u5236\u7ed3\u6784\u4e0d\u80fd\u68c0\u67e5\u65e5\u5fd7\u6a21\u5757\u662f\u5426\u5b9e\u9645\u6267\u884c\u6216\u5c06\u5b58\u5728\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\u7cfb\u7edf\u4e0d\u660e\u767d\u5c42\u6b21\u7ed3\u6784\u6216\u901a\u914d\u7b26\uff1a\u60a8\u53ef\u80fd\u4f1a\u5728\u4ee3\u7801\u4e2d\u770b\u5230\u6a21\u5757\u540d\u79f0\uff0c\u5982\u201cfoo/bar\u201d\uff0c\u4f46\u65e5\u5fd7\u8bb0\u5f55\u7cfb\u7edf\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u6241\u5e73\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u4e0d\u660e\u767d\u201cfoo/bar\u201d\u4e0e\u201cfoo\u201d\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6216\u8005\u201cfoo/*\u201d\u53ef\u80fd\u8868\u793afoo\u7684\u6240\u6709\u201c\u5b50\u6a21\u5757\u201d\u3002\n\n\npeer\n\n\nThe logging level of the peer command can be controlled from the command line for each invocation using the \nlogging-level flag, for example\n\n\npeer\u547d\u4ee4\u7684\u65e5\u5fd7\u7b49\u7ea7\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u63a7\u5236\uff0c\u6bcf\u6b21\u8c03\u7528peer\u65f6\u4f7f\u7528\nlogging-level\uff0c\u4f8b\u5982\uff1a\n\n\npeer node start --logging-level=debug\n\n\n\n\nThe default logging level for each individual peer subcommand can also be set in the core.yaml file. For example the key logging.node sets the default level for the node subcommmand. Comments in the file also explain how the logging level can be overridden in various ways by using environment varaibles.\n\n\n\u6bcf\u4e2a\u5355\u72ec\u7684peer\u547d\u4ee4\u7684\u9ed8\u8ba4\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u4e5f\u53ef\u4ee5\u5728core.yaml\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u3002\u4f8b\u5982\uff0c\u952elogging.node\u7528\u4e8e\u8bbe\u7f6enode\u5b50\u547d\u4ee4\u7684\u9ed8\u8ba4\u7ea7\u522b\u3002\u8be5\u6587\u4e2d\u7684\u6ce8\u91ca\u8fd8\u89e3\u91ca\u4e86\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u4ee5\u5404\u79cd\u65b9\u5f0f\u8986\u76d6\u65e5\u5fd7\u7ea7\u522b\u3002\n\n\nLogging severity levels are specified using case-insensitive strings chosen from\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u9009\u62e9\u7684\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u6307\u5b9a\u65e5\u5fd7\u4e25\u91cd\u7ea7\u522b\uff1a\n\n\nCRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG\n\n\n\n\nThe full logging level specification for the peer is of the form\n\n\npeer\u7684\u5b8c\u6574\u65e5\u5fd7\u7ea7\u522b\u7684\u89c4\u683c\u5982\u4e0b\u683c\u5f0f\uff1a\n\n\n[\nmodule\n[,\nmodule\n...]=]\nlevel\n[:[\nmodule\n[,\nmodule\n...]=]\nlevel\n...]\n\n\n\n\nA logging level by itself is taken as the overall default. Otherwise, overrides for individual or groups of modules can be specified using the\n\n\n\u672c\u8eab\u7684\u65e5\u5fd7\u7ea7\u522b\u88ab\u89c6\u4e3a\u603b\u4f53\u9ed8\u8ba4\u503c\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u6307\u5b9a\u5355\u4e2a\u6216\u591a\u4e2a\u6a21\u5757\u7ec4\u7684\u65e5\u5fd7\u7b49\u7ea7\u7684\u8986\u76d6:\n\n\nmodule\n[,\nmodule\n...]=\nlevel\n\n\n\n\n\nsyntax. Examples of specifications (valid for all of \nlogging-level, environment variable and core.yaml settings):\n\n\n\u8bed\u6cd5\u3002\u89c4\u8303\u793a\u4f8b\uff08\u9002\u7528\u4e8e\u6240\u6709\u7684\nlogging-level\uff0c\u73af\u5883\u53d8\u91cf\u548ccore.yaml\u8bbe\u7f6e\uff09\uff1a\n\n\ninfo                                       - Set default to INFO\nwarning:main,db=debug:chaincode=info       - Default WARNING; Override for main,db,chaincode\nchaincode=info:main=debug:db=debug:warning - Same as above\n\n\n\n\nGo chaincodes\n\n\nThe standard mechanism to log within a chaincode application is to integrate with the logging transport exposed to each chaincode instance via the peer. The chaincode \nshim\n package provides APIs that allow a chaincode to create and manage logging objects whose logs will be formatted and interleaved consistently with the \nshim\n logs.\n\n\n\u94fe\u4e0a\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65e5\u5fd7\u7684\u6807\u51c6\u673a\u5236\u662f\u901a\u8fc7peer\u4e0e\u66b4\u9732\u4e8e\u6bcf\u4e2a\u94fe\u7801\u5b9e\u4f8b\u7684\u65e5\u5fd7\u4f20\u8f93\u8fdb\u884c\u96c6\u6210\u3002 \u94fe\u4e0a\u4ee3\u7801\u7684\nshim\n\u5305\u63d0\u4f9b\u4e86API\uff0c\u5141\u8bb8\u94fe\u7801\u521b\u5efa\u548c\u7ba1\u7406\u65e5\u5fd7\u8bb0\u5f55\u5bf9\u8c61\uff0c\u65e5\u5fd7\u5bf9\u8c61\u7684\u65e5\u5fd7\u5c06\u88ab\u683c\u5f0f\u5316\uff0c\u5e76\u4e0e\nshim\n\u65e5\u5fd7\u4ea4\u7ec7\u5728\u4e86\u4e00\u8d77\u3002\n\n\nAs independently executed programs, user-provided chaincodes may technically also produce output on stdout/stderr. While naturally useful for \u201cdevmode\u201d, these channels are normally disabled on a production network to mitigate abuse from broken or malicious code. However, it is possible to enable this output even for peer-managed containers (e.g. \u201cnetmode\u201d) on a per-peer basis via the CORE_VM_DOCKER_ATTACHSTDOUT=true configuration option.\n\n\n\u4f5c\u4e3a\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u7528\u6237\u63d0\u4f9b\u7684\u94fe\u7801\u5728\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u5728stdout / stderr\u4e0a\u4ea7\u751f\u8f93\u51fa\u3002\u867d\u7136\u5bf9\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\u6709\u7528\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u5728\u751f\u4ea7\u73af\u5883\u4e0a\u88ab\u7981\u7528\uff0c\u4ee5\u51cf\u8f7b\u7834\u574f\u6216\u6076\u610f\u4ee3\u7801\u7684\u6ee5\u7528\u3002\u7136\u800c\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7CORE_VM_DOCKER_ATTACHSTDOUT = true\u914d\u7f6e\u9009\u9879\u5728\u6bcf\u4e2apeer-peer\u7684\u57fa\u7840\u4e0a\u4e3apeer\u7ba1\u7406\u7684\u5bb9\u5668\uff08\u4f8b\u5982\u201cnetmode\u201d\uff09\u542f\u7528\u6b64\u8f93\u51fa\u3002\n\n\nOnce enabled, each chaincode will receive its own logging channel keyed by its container-id. Any output written to either stdout or stderr will be integrated with the peer\u2019s log on a per-line basis. It is not recommended to enable this for production.\n\n\n\u4e00\u65e6\u542f\u7528\uff0c\u6bcf\u4e2a\u94fe\u7801\u5c06\u63a5\u6536\u5176\u81ea\u5df1\u7684\u65e5\u5fd7\u901a\u9053\uff0c\u5176\u7531container-id\u6807\u8bc6\u3002\u5199\u5165stdout\u6216stderr\u7684\u4efb\u4f55\u8f93\u51fa\u5c06\u4e0epeer\u7684\u65e5\u5fd7\u6309\u7167\u6bcf\u884c\u8fdb\u884c\u96c6\u6210\u3002\u4e0d\u5efa\u8bae\u5c06\u5176\u7528\u4e8e\u751f\u4ea7\u3002\n\n\nAPI\n\n\nNewLogger(name string) *ChaincodeLogger\n - Create a logging object for use by a chaincode\n\n\n(c *ChaincodeLogger) SetLevel(level LoggingLevel)\n - Set the logging level of the logger\n\n\n(c *ChaincodeLogger) IsEnabledFor(level LoggingLevel) bool\n - Return true if logs will be generated at the given level\n\n\nLogLevel(levelString string) (LoggingLevel, error)\n - Convert a string to a LoggingLevel\n\n\nA \nLoggingLevel\n is a member of the enumeration\n\n\nLogDebug, LogInfo, LogNotice, LogWarning, LogError, LogCritical\n\n\n\nwhich can be used directly, or generated by passing a case-insensitive version of the strings\n\n\nDEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL\n\n\n\nto the \nLogLevel\n API.\n\n\nFormatted logging at various severity levels is provided by the functions\n\n\n\u4ee5\u4e0b\u51fd\u6570\u63d0\u4f9b\u4e86\u5404\u79cd\u4e25\u91cd\u7ea7\u522b\u7684\u683c\u5f0f\u5316\u65e5\u5fd7\u8bb0\u5f55\n\n\n(c *ChaincodeLogger) Debug(args ...interface{})\n(c *ChaincodeLogger) Info(args ...interface{})\n(c *ChaincodeLogger) Notice(args ...interface{})\n(c *ChaincodeLogger) Warning(args ...interface{})\n(c *ChaincodeLogger) Error(args ...interface{})\n(c *ChaincodeLogger) Critical(args ...interface{})\n\n(c *ChaincodeLogger) Debugf(format string, args ...interface{})\n(c *ChaincodeLogger) Infof(format string, args ...interface{})\n(c *ChaincodeLogger) Noticef(format string, args ...interface{})\n(c *ChaincodeLogger) Warningf(format string, args ...interface{})\n(c *ChaincodeLogger) Errorf(format string, args ...interface{})\n(c *ChaincodeLogger) Criticalf(format string, args ...interface{})\n\n\n\n\nThe \nf\n forms of the logging APIs provide for precise control over the formatting of the logs. The non-\nf\n forms of the APIs currently insert a space between the printed representations of the arguments, and arbitrarily choose the formats to use.\n\n\n\u65e5\u5fd7API\u7684\nf\n\u5f62\u5f0f\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u65e5\u5fd7\u683c\u5f0f\u3002 API\u7684\u975e\nf\n\u5f62\u5f0f\u5f53\u524d\u5728\u53c2\u6570\u7684\u6253\u5370\u8868\u793a\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u4efb\u610f\u9009\u62e9\u8981\u4f7f\u7528\u7684\u683c\u5f0f\u3002\n\n\nIn the current implementation, the logs produced by the \nshim\n and a \nChaincodeLogger\n are timestamped, marked with the logger name and severity level, and written to \nstderr\n. Note that logging level control is currently based on the name provided when the \nChaincodeLogger\n is created. To avoid ambiguities, all \nChaincodeLogger\n should be given unique names other than \u201cshim\u201d. The logger name will appear in all log messages created by the logger. The \nshim\n logs as \u201cshim\u201d.\n\n\n\u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u7531\nshim\n\u548c\nChaincodeLogger\n\u751f\u6210\u7684\u65e5\u5fd7\u662f\u65f6\u95f4\u6233\u7684\uff0c\u6807\u6709\u8bb0\u5f55\u5668\u540d\u79f0\u548c\u4e25\u91cd\u6027\u7ea7\u522b\uff0c\u5e76\u5199\u5165\nstderr\n\u3002\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u7ea7\u522b\u63a7\u5236\u5f53\u524d\u57fa\u4e8e\u521b\u5efa\nChaincodeLogger\n\u65f6\u63d0\u4f9b\u7684\u540d\u79f0\u3002\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u6240\u6709\nChaincodeLogger\n\u5e94\u8be5\u88ab\u8d4b\u4e88\u9664\u201cshim\u201d\u4e4b\u5916\u7684\u552f\u4e00\u540d\u79f0\u3002\u8bb0\u5f55\u5668\u540d\u79f0\u5c06\u663e\u793a\u5728\u7531\u8bb0\u5f55\u5668\u521b\u5efa\u7684\u6240\u6709\u65e5\u5fd7\u6d88\u606f\u4e2d\u3002\u57ab\u7247\u8bb0\u5f55\u4e3a\u201cshim\u201d\u3002\n\n\nGo language chaincodes can also control the logging level of the chaincode shim interface through the \nSetLoggingLevel\n API.\n\n\nGo\u8bed\u8a00\u94fe\u63a5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u901a\u8fc7SetLoggingLevel API\u6765\u63a7\u5236\u94fe\u5f0f\u4ee3\u7801\u57ab\u7247\u754c\u9762\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u3002\n\n\nSetLoggingLevel(LoggingLevel level)\n - Control the logging level of the shim  \u63a7\u5236shim\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\n\n\nThe default logging level for the shim is \nLogDebug\n.\n\n\nshim\u7684\u9ed8\u8ba4\u65e5\u5fd7\u7ea7\u522b\u4e3aLogDebug\u3002\n\n\nBelow is a simple example of how a chaincode might create a private logging object logging at the \nLogInfo\n level, and also control the amount of logging provided by the \nshim\n based on an environment variable.\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u8bf4\u660e\u94fe\u7801\u5982\u4f55\u521b\u5efa\nLogInfo\n\u7ea7\u522b\u7684\u4e13\u7528\u65e5\u5fd7\u5bf9\u8c61\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u57fa\u4e8e\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u7531\nshim\n\u63d0\u4f9b\u7684\u65e5\u5fd7\u91cf\u3002\n\n\nvar logger = shim.NewLogger(\nmyChaincode\n)\n\nfunc main() {\n\n    logger.SetLevel(shim.LogInfo)\n\n    logLevel, _ := shim.LogLevel(os.Getenv(\nSHIM_LOGGING_LEVEL\n))\n    shim.SetLoggingLevel(logLevel)\n    ...\n}", 
            "title": "\u65e5\u5fd7\u63a7\u5236"
        }, 
        {
            "location": "/logging-control_zh/#overview", 
            "text": "Logging in the peer application and in the shim interface to chaincodes is programmed using facilities provided by the github.com/op/go-logging package. This package supports  \u65e5\u5fd7\u529f\u80fd\u5728\u8282\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u94fe\u4e0a\u4ee3\u7801\u7684shim\u63a5\u53e3\u4e2d\u4f7f\u7528\uff0c\u6700\u7ec8\u5728github.com/op/go-logging\u5305\u5b9e\u73b0\u3002\u8fd9\u4e2a\u5305\u652f\u6301\uff1a   Logging control based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236  Logging control based on the software module generating the message\n    \u57fa\u4e8e\u8f6f\u4ef6\u6a21\u5757\u4ea7\u751f\u7684\u6d88\u606f\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236  Different pretty-printing options based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u7f8e\u89c2\u7684\u6253\u5370\u5230\u4e0d\u540c\u7684\u683c\u5f0f\u7684\u9009\u9879   All logs are currently directed to stderr, and the pretty-printing is currently fixed. However global and module-level control of logging by severity is provided for both users and developers. There are currently no formalized rules for the types of information provided at each severity level, however when submitting bug reports the developers may want to see full logs down to the DEBUG level.  \u6240\u6709\u65e5\u5fd7\u76ee\u524d\u90fd\u88ab\u5b9a\u5411\u5230stderr\uff0c\u800cpretty-printing\u76ee\u524d\u662f\u56fa\u5b9a\u7684\u3002\u7136\u800c\uff0c\u4e3a\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e25\u683c\u7ea7\u522b\u7684\u5168\u5c40\u548c\u6a21\u5757\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u63a7\u5236\u3002\u76ee\u524d\u6ca1\u6709\u5173\u4e8e\u6bcf\u4e2a\u4e25\u91cd\u6027\u7ea7\u522b\u63d0\u4f9b\u7684\u4fe1\u606f\u7c7b\u578b\u7684\u6b63\u5f0f\u89c4\u5219\uff0c\u4f46\u662f\u5f53\u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5e0c\u671b\u770b\u5230\u5b8c\u6574\u7684\u5230DEBUG\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002  In pretty-printed logs the logging level is indicated both by color and by a 4-character code, e.g, \u201cERRO\u201d for ERROR, \u201cDEBU\u201d for DEBUG, etc. In the logging context a module is an arbitrary name (string) given by developers to groups of related messages. In the pretty-printed example below, the logging modules \u201cpeer\u201d, \u201crest\u201d and \u201cmain\u201d are generating logs.  \u5728pretty-printed\u7684\u65e5\u5fd7\u4e2d\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7531\u989c\u8272\u548c4\u4e2a\u5b57\u7b26\u7684\u4ee3\u7801\u6307\u793a\uff0c\u4f8b\u5982ERROR\u7684\u201cERRO\u201d\uff0cDEBUG\u7684\u201cDEBU\u201d\u7b49\u3002\u5728\u65e5\u5fd7\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6a21\u5757\u662f\u6307\u7531\u5f00\u53d1\u8005\u6307\u5b9a\u7684\u4efb\u610f\u540d\u79f0\uff08\u5b57\u7b26\u4e32\uff09\u7684\u76f8\u5173\u6d88\u606f\u7684\u7ec4\u3002\u5728\u4ee5\u4e0bpretty-printed\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e5\u5fd7\u6a21\u5757\u201cpeer\u201d\uff0c\u201crest\u201d\u548c\u201cmain\u201d\u90fd\u4ea7\u751f\u4e86\u65e5\u5fd7\u3002  16:47:09.634 [peer] GetLocalAddress -  INFO 033 Auto detected peer address: 9.3.158.178:7051\n16:47:09.635 [rest] StartOpenchainRESTServer -  INFO 035 Initializing the REST service...\n16:47:09.635 [main] serve -  INFO 036 Starting peer with id=name: vp1  , network id=dev, address=9.3.158.178:7051, discovery.rootnode=, validator=true  An arbitrary number of logging modules can be created at runtime, therefore there is no \u201cmaster list\u201d of modules, and logging control constructs can not check whether logging modules actually do or will exist. Also note that the logging module system does not understand hierarchy or wildcarding: You may see module names like \u201cfoo/bar\u201d in the code, but the logging system only sees a flat string. It doesn\u2019t understand that \u201cfoo/bar\u201d is related to \u201cfoo\u201d in any way, or that \u201cfoo/*\u201d might indicate all \u201csubmodules\u201d of foo.  \u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\uff0c\u56e0\u6b64\u6ca1\u6709\u6a21\u5757\u7684\u201c\u4e3b\u5217\u8868\u201d\u4e00\u8bf4\uff0c\u65e5\u5fd7\u63a7\u5236\u7ed3\u6784\u4e0d\u80fd\u68c0\u67e5\u65e5\u5fd7\u6a21\u5757\u662f\u5426\u5b9e\u9645\u6267\u884c\u6216\u5c06\u5b58\u5728\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\u7cfb\u7edf\u4e0d\u660e\u767d\u5c42\u6b21\u7ed3\u6784\u6216\u901a\u914d\u7b26\uff1a\u60a8\u53ef\u80fd\u4f1a\u5728\u4ee3\u7801\u4e2d\u770b\u5230\u6a21\u5757\u540d\u79f0\uff0c\u5982\u201cfoo/bar\u201d\uff0c\u4f46\u65e5\u5fd7\u8bb0\u5f55\u7cfb\u7edf\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u6241\u5e73\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u4e0d\u660e\u767d\u201cfoo/bar\u201d\u4e0e\u201cfoo\u201d\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6216\u8005\u201cfoo/*\u201d\u53ef\u80fd\u8868\u793afoo\u7684\u6240\u6709\u201c\u5b50\u6a21\u5757\u201d\u3002", 
            "title": "Overview\u6982\u8ff0"
        }, 
        {
            "location": "/logging-control_zh/#peer", 
            "text": "The logging level of the peer command can be controlled from the command line for each invocation using the  logging-level flag, for example  peer\u547d\u4ee4\u7684\u65e5\u5fd7\u7b49\u7ea7\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u63a7\u5236\uff0c\u6bcf\u6b21\u8c03\u7528peer\u65f6\u4f7f\u7528 logging-level\uff0c\u4f8b\u5982\uff1a  peer node start --logging-level=debug  The default logging level for each individual peer subcommand can also be set in the core.yaml file. For example the key logging.node sets the default level for the node subcommmand. Comments in the file also explain how the logging level can be overridden in various ways by using environment varaibles.  \u6bcf\u4e2a\u5355\u72ec\u7684peer\u547d\u4ee4\u7684\u9ed8\u8ba4\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u4e5f\u53ef\u4ee5\u5728core.yaml\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u3002\u4f8b\u5982\uff0c\u952elogging.node\u7528\u4e8e\u8bbe\u7f6enode\u5b50\u547d\u4ee4\u7684\u9ed8\u8ba4\u7ea7\u522b\u3002\u8be5\u6587\u4e2d\u7684\u6ce8\u91ca\u8fd8\u89e3\u91ca\u4e86\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u4ee5\u5404\u79cd\u65b9\u5f0f\u8986\u76d6\u65e5\u5fd7\u7ea7\u522b\u3002  Logging severity levels are specified using case-insensitive strings chosen from  \u4f7f\u7528\u4ee5\u4e0b\u9009\u62e9\u7684\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u6307\u5b9a\u65e5\u5fd7\u4e25\u91cd\u7ea7\u522b\uff1a  CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG  The full logging level specification for the peer is of the form  peer\u7684\u5b8c\u6574\u65e5\u5fd7\u7ea7\u522b\u7684\u89c4\u683c\u5982\u4e0b\u683c\u5f0f\uff1a  [ module [, module ...]=] level [:[ module [, module ...]=] level ...]  A logging level by itself is taken as the overall default. Otherwise, overrides for individual or groups of modules can be specified using the  \u672c\u8eab\u7684\u65e5\u5fd7\u7ea7\u522b\u88ab\u89c6\u4e3a\u603b\u4f53\u9ed8\u8ba4\u503c\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u6307\u5b9a\u5355\u4e2a\u6216\u591a\u4e2a\u6a21\u5757\u7ec4\u7684\u65e5\u5fd7\u7b49\u7ea7\u7684\u8986\u76d6:  module [, module ...]= level   syntax. Examples of specifications (valid for all of  logging-level, environment variable and core.yaml settings):  \u8bed\u6cd5\u3002\u89c4\u8303\u793a\u4f8b\uff08\u9002\u7528\u4e8e\u6240\u6709\u7684 logging-level\uff0c\u73af\u5883\u53d8\u91cf\u548ccore.yaml\u8bbe\u7f6e\uff09\uff1a  info                                       - Set default to INFO\nwarning:main,db=debug:chaincode=info       - Default WARNING; Override for main,db,chaincode\nchaincode=info:main=debug:db=debug:warning - Same as above", 
            "title": "peer"
        }, 
        {
            "location": "/logging-control_zh/#go-chaincodes", 
            "text": "The standard mechanism to log within a chaincode application is to integrate with the logging transport exposed to each chaincode instance via the peer. The chaincode  shim  package provides APIs that allow a chaincode to create and manage logging objects whose logs will be formatted and interleaved consistently with the  shim  logs.  \u94fe\u4e0a\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65e5\u5fd7\u7684\u6807\u51c6\u673a\u5236\u662f\u901a\u8fc7peer\u4e0e\u66b4\u9732\u4e8e\u6bcf\u4e2a\u94fe\u7801\u5b9e\u4f8b\u7684\u65e5\u5fd7\u4f20\u8f93\u8fdb\u884c\u96c6\u6210\u3002 \u94fe\u4e0a\u4ee3\u7801\u7684 shim \u5305\u63d0\u4f9b\u4e86API\uff0c\u5141\u8bb8\u94fe\u7801\u521b\u5efa\u548c\u7ba1\u7406\u65e5\u5fd7\u8bb0\u5f55\u5bf9\u8c61\uff0c\u65e5\u5fd7\u5bf9\u8c61\u7684\u65e5\u5fd7\u5c06\u88ab\u683c\u5f0f\u5316\uff0c\u5e76\u4e0e shim \u65e5\u5fd7\u4ea4\u7ec7\u5728\u4e86\u4e00\u8d77\u3002  As independently executed programs, user-provided chaincodes may technically also produce output on stdout/stderr. While naturally useful for \u201cdevmode\u201d, these channels are normally disabled on a production network to mitigate abuse from broken or malicious code. However, it is possible to enable this output even for peer-managed containers (e.g. \u201cnetmode\u201d) on a per-peer basis via the CORE_VM_DOCKER_ATTACHSTDOUT=true configuration option.  \u4f5c\u4e3a\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u7528\u6237\u63d0\u4f9b\u7684\u94fe\u7801\u5728\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u5728stdout / stderr\u4e0a\u4ea7\u751f\u8f93\u51fa\u3002\u867d\u7136\u5bf9\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\u6709\u7528\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u5728\u751f\u4ea7\u73af\u5883\u4e0a\u88ab\u7981\u7528\uff0c\u4ee5\u51cf\u8f7b\u7834\u574f\u6216\u6076\u610f\u4ee3\u7801\u7684\u6ee5\u7528\u3002\u7136\u800c\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7CORE_VM_DOCKER_ATTACHSTDOUT = true\u914d\u7f6e\u9009\u9879\u5728\u6bcf\u4e2apeer-peer\u7684\u57fa\u7840\u4e0a\u4e3apeer\u7ba1\u7406\u7684\u5bb9\u5668\uff08\u4f8b\u5982\u201cnetmode\u201d\uff09\u542f\u7528\u6b64\u8f93\u51fa\u3002  Once enabled, each chaincode will receive its own logging channel keyed by its container-id. Any output written to either stdout or stderr will be integrated with the peer\u2019s log on a per-line basis. It is not recommended to enable this for production.  \u4e00\u65e6\u542f\u7528\uff0c\u6bcf\u4e2a\u94fe\u7801\u5c06\u63a5\u6536\u5176\u81ea\u5df1\u7684\u65e5\u5fd7\u901a\u9053\uff0c\u5176\u7531container-id\u6807\u8bc6\u3002\u5199\u5165stdout\u6216stderr\u7684\u4efb\u4f55\u8f93\u51fa\u5c06\u4e0epeer\u7684\u65e5\u5fd7\u6309\u7167\u6bcf\u884c\u8fdb\u884c\u96c6\u6210\u3002\u4e0d\u5efa\u8bae\u5c06\u5176\u7528\u4e8e\u751f\u4ea7\u3002", 
            "title": "Go chaincodes"
        }, 
        {
            "location": "/logging-control_zh/#api", 
            "text": "NewLogger(name string) *ChaincodeLogger  - Create a logging object for use by a chaincode  (c *ChaincodeLogger) SetLevel(level LoggingLevel)  - Set the logging level of the logger  (c *ChaincodeLogger) IsEnabledFor(level LoggingLevel) bool  - Return true if logs will be generated at the given level  LogLevel(levelString string) (LoggingLevel, error)  - Convert a string to a LoggingLevel  A  LoggingLevel  is a member of the enumeration  LogDebug, LogInfo, LogNotice, LogWarning, LogError, LogCritical  which can be used directly, or generated by passing a case-insensitive version of the strings  DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL  to the  LogLevel  API.  Formatted logging at various severity levels is provided by the functions  \u4ee5\u4e0b\u51fd\u6570\u63d0\u4f9b\u4e86\u5404\u79cd\u4e25\u91cd\u7ea7\u522b\u7684\u683c\u5f0f\u5316\u65e5\u5fd7\u8bb0\u5f55  (c *ChaincodeLogger) Debug(args ...interface{})\n(c *ChaincodeLogger) Info(args ...interface{})\n(c *ChaincodeLogger) Notice(args ...interface{})\n(c *ChaincodeLogger) Warning(args ...interface{})\n(c *ChaincodeLogger) Error(args ...interface{})\n(c *ChaincodeLogger) Critical(args ...interface{})\n\n(c *ChaincodeLogger) Debugf(format string, args ...interface{})\n(c *ChaincodeLogger) Infof(format string, args ...interface{})\n(c *ChaincodeLogger) Noticef(format string, args ...interface{})\n(c *ChaincodeLogger) Warningf(format string, args ...interface{})\n(c *ChaincodeLogger) Errorf(format string, args ...interface{})\n(c *ChaincodeLogger) Criticalf(format string, args ...interface{})  The  f  forms of the logging APIs provide for precise control over the formatting of the logs. The non- f  forms of the APIs currently insert a space between the printed representations of the arguments, and arbitrarily choose the formats to use.  \u65e5\u5fd7API\u7684 f \u5f62\u5f0f\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u65e5\u5fd7\u683c\u5f0f\u3002 API\u7684\u975e f \u5f62\u5f0f\u5f53\u524d\u5728\u53c2\u6570\u7684\u6253\u5370\u8868\u793a\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u4efb\u610f\u9009\u62e9\u8981\u4f7f\u7528\u7684\u683c\u5f0f\u3002  In the current implementation, the logs produced by the  shim  and a  ChaincodeLogger  are timestamped, marked with the logger name and severity level, and written to  stderr . Note that logging level control is currently based on the name provided when the  ChaincodeLogger  is created. To avoid ambiguities, all  ChaincodeLogger  should be given unique names other than \u201cshim\u201d. The logger name will appear in all log messages created by the logger. The  shim  logs as \u201cshim\u201d.  \u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u7531 shim \u548c ChaincodeLogger \u751f\u6210\u7684\u65e5\u5fd7\u662f\u65f6\u95f4\u6233\u7684\uff0c\u6807\u6709\u8bb0\u5f55\u5668\u540d\u79f0\u548c\u4e25\u91cd\u6027\u7ea7\u522b\uff0c\u5e76\u5199\u5165 stderr \u3002\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u7ea7\u522b\u63a7\u5236\u5f53\u524d\u57fa\u4e8e\u521b\u5efa ChaincodeLogger \u65f6\u63d0\u4f9b\u7684\u540d\u79f0\u3002\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u6240\u6709 ChaincodeLogger \u5e94\u8be5\u88ab\u8d4b\u4e88\u9664\u201cshim\u201d\u4e4b\u5916\u7684\u552f\u4e00\u540d\u79f0\u3002\u8bb0\u5f55\u5668\u540d\u79f0\u5c06\u663e\u793a\u5728\u7531\u8bb0\u5f55\u5668\u521b\u5efa\u7684\u6240\u6709\u65e5\u5fd7\u6d88\u606f\u4e2d\u3002\u57ab\u7247\u8bb0\u5f55\u4e3a\u201cshim\u201d\u3002  Go language chaincodes can also control the logging level of the chaincode shim interface through the  SetLoggingLevel  API.  Go\u8bed\u8a00\u94fe\u63a5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u901a\u8fc7SetLoggingLevel API\u6765\u63a7\u5236\u94fe\u5f0f\u4ee3\u7801\u57ab\u7247\u754c\u9762\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u3002  SetLoggingLevel(LoggingLevel level)  - Control the logging level of the shim  \u63a7\u5236shim\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b  The default logging level for the shim is  LogDebug .  shim\u7684\u9ed8\u8ba4\u65e5\u5fd7\u7ea7\u522b\u4e3aLogDebug\u3002  Below is a simple example of how a chaincode might create a private logging object logging at the  LogInfo  level, and also control the amount of logging provided by the  shim  based on an environment variable.  \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u8bf4\u660e\u94fe\u7801\u5982\u4f55\u521b\u5efa LogInfo \u7ea7\u522b\u7684\u4e13\u7528\u65e5\u5fd7\u5bf9\u8c61\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u57fa\u4e8e\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u7531 shim \u63d0\u4f9b\u7684\u65e5\u5fd7\u91cf\u3002  var logger = shim.NewLogger( myChaincode )\n\nfunc main() {\n\n    logger.SetLevel(shim.LogInfo)\n\n    logLevel, _ := shim.LogLevel(os.Getenv( SHIM_LOGGING_LEVEL ))\n    shim.SetLoggingLevel(logLevel)\n    ...\n}", 
            "title": "API"
        }, 
        {
            "location": "/arch-deep-dive_zh/", 
            "text": "\u67b6\u6784\u89e3\u91ca\n\n\nHyperledger Fabric\u67b6\u6784\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a\n\n- \nChaincode\u4fe1\u4efb\u7075\u6d3b\u6027\n\u3002\u8be5\u67b6\u6784\u5c06\u94fe\u7801\uff08\u533a\u5757\u94fe\u5e94\u7528\uff09\u4fe1\u4efb\u5047\u8bbe\u4e0e\u6392\u5e8f\u4fe1\u4efb\u5047\u5b9a\u5206\u5f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u7531\u4e00\u7ec4\u8282\u70b9\uff08orderer\uff09\u63d0\u4f9b\uff0c\u5e76\u5bb9\u5fcd\u7684\u4e00\u4e9b\u8282\u70b9\u7684\u5931\u6548\u6216\u6b3a\u8bc8\uff1b\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u94fe\u7801\uff0c\u80cc\u4e66\u8005\u53ef\u80fd\u4e0d\u540c\u3002\n\n- \n\u53ef\u6269\u5c55\u6027\n\u3002\u7531\u4e8e\u80cc\u4e66\u8282\u70b9\u53ea\u8d1f\u8d23\u7279\u5b9a\u94fe\u7801\uff0c\u4e0e\u6392\u5e8f\u8282\u70b9\u65e0\u5173\uff0c\u7cfb\u7edf\u53ef\u4ee5\u6bd4\u901a\u8fc7\u76f8\u540c\u8282\u70b9\u5b8c\u6210\u8fd9\u4e9b\u529f\u80fd\u66f4\u597d\u5730\u6269\u5c55\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5f53\u4e0d\u540c\u7684\u94fe\u7801\u6307\u5b9a\u65e0\u5173\u7684\u80cc\u4e66\u8282\u70b9\u65f6\uff0c\u8fd9\u5f15\u5165\u4e86\u80cc\u4e66\u8282\u70b9\u4e4b\u95f4\u7684\u5206\u533a\u673a\u5236\u4ece\u800c\u5141\u8bb8\u94fe\u7801\u7684\u5e76\u884c\u8fd0\u884c\uff08\u80cc\u4e66\uff09\u3002\n\n- \n\u4fdd\u5bc6\n\u3002\u8be5\u67b6\u6784\u4fbf\u4e8e\u90e8\u7f72\u5bf9\u4e8e\u5176\u4ea4\u6613\u7684\u5185\u5bb9\u548c\u72b6\u6001\u66f4\u65b0\u5177\u6709\u673a\u5bc6\u6027\u8981\u6c42\u7684\u94fe\u7801\u3002\n- \n\u5171\u8bc6\u6a21\u5757\u5316\n\u3002\u8be5\u4f53\u7cfb\u7ed3\u6784\u662f\u6a21\u5757\u5316\u7684\uff0c\u5e76\u5141\u8bb8\u63d2\u4ef6\u5f0f\u7684\u5171\u8bc6\uff08\u5373\u6392\u5e8f\u670d\u52a1\uff09\u5b9e\u73b0\u3002  \n\n\n1.\u7cfb\u7edf\u67b6\u6784\n\n\n\u533a\u5757\u94fe\u662f\u7531\u591a\u4e2a\u5f7c\u6b64\u901a\u4fe1\u7684\u8282\u70b9\u7ec4\u6210\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002\u533a\u5757\u94fe\u8fd0\u884c\u7a0b\u5e8f\u79f0\u4e3a\u94fe\u7801\uff0c\u4fdd\u5b58\u72b6\u6001\u548c\u603b\u5e10\u6570\u636e\uff0c\u5e76\u6267\u884c\u4ea4\u6613\u3002\u94fe\u7801\u662f\u94fe\u7801\u8c03\u7528\u4ea4\u6613\u64cd\u4f5c\u7684\u6838\u5fc3\u5143\u7d20\u3002\u4ea4\u6613\u5fc5\u987b\u88ab\u201c\u80cc\u4e66\u201d\uff0c\u53ea\u6709\u80cc\u4e66\u7684\u4ea4\u6613\u53ef\u80fd\u4f1a\u88ab\u63d0\u4ea4\uff0c\u5e76\u5bf9\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002\u7ba1\u7406\u529f\u80fd\u548c\u53c2\u6570\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u6b8a\u7684\u94fe\u7801\uff0c\u7edf\u79f0\u4e3a\u7cfb\u7edf\u94fe\u7801\u3002  \n\n\n1.1 \u4ea4\u6613\n\n\n\u4ea4\u6613\u53ef\u80fd\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\n- \n\u90e8\u7f72\u4ea4\u6613\n\u521b\u5efa\u65b0\u7684\u94fe\u7801\u5e76\u5c06\u4e00\u4e2a\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\u3002\u5f53\u90e8\u7f72\u4ea4\u6613\u6210\u529f\u6267\u884c\u65f6\uff0c\u94fe\u7801\u5c31\u88ab\u5b89\u88c5\u5728\u533a\u5757\u94fe\u4e0a\u3002\n\n- \n\u8c03\u7528(Invoke)\u4ea4\u6613\n\u5728\u5148\u524d\u90e8\u7f72\u7684\u94fe\u7801\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u64cd\u4f5c\u3002\u8c03\u7528\u4ea4\u6613\u662f\u6307\u94fe\u7801\u53ca\u5176\u63d0\u4f9b\u7684\u67d0\u4e2a\u51fd\u6570\u3002\u94fe\u7801\u4f1a\u6267\u884c\u6307\u5b9a\u7684\u51fd\u6570 - \u8fd9\u53ef\u80fd\u6d89\u53ca\u4fee\u6539\u76f8\u5e94\u7684\u72b6\u6001\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\u3002\n\n  \u5982\u540e\u9762\u6240\u8ff0\uff0c\u90e8\u7f72\u4ea4\u6613\u662f\u8c03\u7528\u4ea4\u6613\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4e2d\u521b\u5efa\u65b0\u94fe\u7684\u90e8\u7f72\u4ea4\u6613\u76f8\u5f53\u4e8e\u7cfb\u7edf\u94fe\u7801\u4e0a\u7684\u8c03\u7528\u4ea4\u6613\u3002\n\n\n\u5907\u6ce8\n\uff1a \u8fd9\u4e2a\u6587\u4ef6\u76ee\u524d\u5047\u8bbe\u4e00\u4e2a\u4ea4\u6613\u8981\u4e48\u521b\u5efa\u65b0\u7684\u94fe\u7801\uff0c\u8981\u4e48\u8c03\u7528\u5df2\u7ecf\u90e8\u7f72\u7684\u94fe\u7801\u63d0\u4f9b\u7684\u64cd\u4f5c\u3002\u672c\u6587\u6863\u5c1a\u672a\u63cf\u8ff0\uff1aa\uff09\u5bf9\u67e5\u8be2\uff08\u53ea\u8bfb\uff09\u4ea4\u6613\uff08\u5305\u542b\u5728v1\u4e2d\uff09\u7684\u4f18\u5316\uff0cb\uff09\u5bf9\u4ea4\u53c9\u94fe\u7801\u4ea4\u6613\uff08post-v1\u7279\u6027\uff09\u7684\u652f\u6301\u3002  \n\n\n1.2 \u533a\u5757\u94fe\u6570\u636e\u7ed3\u6784\n\n\n1.2.1\u72b6\u6001\n\n\u533a\u5757\u94fe\u7684\u6700\u65b0\u72b6\u6001\uff08\u6216\u7b80\u79f0\u4e3a\u72b6\u6001\uff09\u88ab\u5efa\u6a21\u4e3a\u7248\u672c\u5316\u7684\u952e\u503c\u5e93\uff08KVS\uff09\uff0c\u5176\u4e2d\u952e\u540d\u79f0\u548c\u503c\u662f\u4efb\u610f\u7684blob\u3002\u8fd9\u4e9b\u6761\u76ee\u7531\u8fd0\u884c\u5728\u533a\u5757\u94fe\u4e0a\u7684\u94fe\u7801\uff08\u5e94\u7528\u7a0b\u5e8f\uff09\u901a\u8fc7\nput\n\u548c\nget\n KVS\u6765\u64cd\u7eb5\u3002\u72b6\u6001\u88ab\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u72b6\u6001\u7684\u66f4\u65b0\u88ab\u65e5\u5fd7\u8bb0\u5f55\u3002\u8bf7\u6ce8\u610f\uff0c\u91c7\u7528\u7248\u672c\u5316\u7684KVS\u4f5c\u4e3a\u72b6\u6001\u6a21\u578b\uff0c\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9645\u7684KVS\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528RDBMS\u6216\u4efb\u4f55\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u3002\n\n\n1.2.2\u8d26\u672c\n\n\u8d26\u672c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u6240\u6709\u6210\u529f\u72b6\u6001\u53d8\u5316\uff08\u6211\u4eec\u79f0\u4e3a\u6709\u6548\u4ea4\u6613\uff09\u548c\u4e0d\u6210\u529f\u7684\u6539\u53d8\u72b6\u6001\u5c1d\u8bd5\uff08\u6211\u4eec\u79f0\u4e3a\u65e0\u6548\u4ea4\u6613\uff09\u7684\u53ef\u9a8c\u8bc1\u5386\u53f2\u3002\n\n\u8d26\u672c\u662f\u7531\u6392\u5e8f\u670d\u52a1\uff08\u53c2\u89c11.3.3\u8282\uff09\u6784\u5efa\uff0c\u662f\u4e00\u4e2a\u7531\u4ea4\u6613\u533a\u5757\uff08\u6709\u6548\u6216\u65e0\u6548\uff09\u7ec4\u6210\u7684\u6709\u5e8f\u54c8\u5e0c\u94fe\u3002\u54c8\u5e0c\u94fe\u5b9a\u4e49\u4e86\u8d26\u672c\u4e2d\u7684\u603b\u7684\u533a\u5757\u987a\u5e8f\uff0c\u6bcf\u4e2a\u533a\u5757\u90fd\u5305\u542b\u4e00\u4e2a\u5b8c\u5168\u6709\u5e8f\u7684\u4ea4\u6613\u6570\u7ec4\u3002\u8fd9\u4f1a\u5728\u6240\u6709\u4ea4\u6613\u4e2d\u5f3a\u52a0\u987a\u5e8f\u3002\n\n\u8d26\u672c\u4fdd\u5b58\u5728\u6240\u6709peer\u8282\u70b9\uff0c\u5e76\u53ef\u4fdd\u5b58\u5728\u90e8\u5206\u6392\u5e8f\u8282\u70b9(\u53ef\u9009)\u3002\u5728\u6392\u5e8f\u8282\u70b9\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u79f0\u8d26\u672c\u4e3a\nOrdererLedger\n\uff0c\u7136\u800c\u5728peer\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u79f0\u8d26\u672c\u4e3a\nPeerLedger\n\u3002\nPeerLedger\n\u4e0e\nOrdererLedger\n\u7684\u533a\u522b\u5728\u4e8e\uff0cpeer\u5728\u672c\u5730\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u63a9\u7801(bitmask)\uff0c\u5c06\u6709\u6548\u7684\u4ea4\u6613\u4ece\u65e0\u6548\u7684\u4ea4\u6613\u4e2d\u5206\u79bb\u51fa\u6765\uff08\u66f4\u591a\u7ec6\u8282\u89c1\u7b2cXX\u7ae0\uff09\u3002\n\n\u50cf\u7b2cXX\u8282\uff08v1\u4e4b\u540e\u7684\u529f\u80fd\uff09\u4e2d\u6240\u8ff0\u7684\u90a3\u6837\uff0cpeer\u53ef\u80fd\u4f1a\u5220\u9664\nPeerLedger\n\u3002\u6392\u5e8f\u8282\u70b9\u7ef4\u62a4\nOrdererLedger\n\u662f\u4e3a\u4e86\u5bb9\u9519\u6027\u548c\nPeerLedger\n\u7684\u53ef\u7528\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u51b3\u5b9a\u5728\u4ec0\u4e48\u65f6\u5019\u4fee\u526a(prune)\u5b83\uff0c\u524d\u63d0\u662f\u6392\u5e8f\u670d\u52a1\u7684\u5c5e\u6027\uff08\u53c2\u89c1\u7b2c1.3.3\u8282\uff09\u5f97\u5230\u7ef4\u62a4\u3002  \n\n\n\u8d26\u672c\u5141\u8bb8peer\u91cd\u653e\u6240\u6709\u4ea4\u6613\u7684\u5386\u53f2\u8bb0\u5f55\u5e76\u91cd\u5efa\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u59821.2.1\u8282\u6240\u8ff0\u7684\u72b6\u6001\u662f\u53ef\u9009\u7684\u6570\u636e\u7ed3\u6784\u3002  \n\n\n1.3\u8282\u70b9\n\n\n\u8282\u70b9\u662f\u533a\u5757\u94fe\u7684\u901a\u4fe1\u5b9e\u4f53\u3002\u4e00\u4e2a\u201c\u8282\u70b9\u201d\u53ea\u662f\u4e00\u4e2a\u903b\u8f91\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u591a\u4e2a\u8282\u70b9\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7269\u7406\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u3002\u91cd\u8981\u7684\u662f\u8282\u70b9\u5982\u4f55\u5206\u7ec4\u5728\u201c\u4fe1\u4efb\u57df\u201d\u4e2d\uff0c\u5e76\u4e0e\u63a7\u5236\u5b83\u4eec\u7684\u903b\u8f91\u5b9e\u4f53\u76f8\u5173\u8054\u3002\n\n\u5b58\u5728\u4e09\u79cd\u7c7b\u578b\u7684\u8282\u70b9\uff1a\n\n1. \n\u5ba2\u6237\u7aef\n\u6216\n\u63d0\u4ea4\u5ba2\u6237\u7aef\n\uff1a\u5b83\u53d1\u51fa\u5b9e\u9645\u8c03\u7528\u4ea4\u6613\u5230\u80cc\u4e66\u8282\u70b9\uff0c\u5e7f\u64ad\u63d0\u8bae\u4ea4\u6613\u5230\u6392\u5e8f\u670d\u52a1\u3002\n\n2. \nPeer\n\uff1a\u5b83\u63d0\u4ea4\u4ea4\u6613\u3001\u7ef4\u62a4\u72b6\u6001\u548c\u4e00\u4e2a\u8d26\u672c\u526f\u672c(\u53c2\u770b1.2\u8282)\u3002\u6b64\u5916\uff0cpeer\u8fd8\u53ef\u4ee5\u5177\u6709\u80cc\u4e66\u8005\u89d2\u8272\u3002\n\n3. \n\u6392\u5e8f\u670d\u52a1\u8282\u70b9\n\u6216\norderer\n\uff1a\u8fd0\u884c\u901a\u4fe1\u670d\u52a1\u7684\u8282\u70b9\uff0c\u5b9e\u73b0\u4ea4\u4ed8\u62c5\u4fdd\uff0c\u5982\u539f\u5b50\u6216\u5168\u90e8\u6392\u5e8f\u5e7f\u64ad\u3002  \n\n\n1.3.1\u5ba2\u6237\u7aef\n \n\u5ba2\u6237\u4ee3\u8868\u4ee3\u8868\u6700\u7ec8\u7528\u6237\u884c\u4e8b\u7684\u5b9e\u4f53\u3002\u5b83\u5fc5\u987b\u8fde\u63a5\u5230peer\u4e0e\u533a\u5757\u94fe\u8fdb\u884c\u901a\u4fe1\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u5176\u9009\u62e9\u7684\u4efb\u4f55peer\u7aef\u3002\u5ba2\u6237\u7aef\u521b\u5efa\u5e76\u8c03\u7528\u4ea4\u6613\u3002  \n\n\n\u5982\u7b2c2\u8282\u8be6\u7ec6\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u5ba2\u6237\u7aef\u540c\u65f6\u4e0epeer\u548c\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u3002  \n\n\n1.3.2 Peer\n\npeer\u4ee5\u533a\u5757\u7684\u5f62\u5f0f\u4ece\u6392\u5e8f\u670d\u52a1\u63a5\u6536\u987a\u5e8f\u7684\u72b6\u6001\u66f4\u65b0\uff0c\u5e76\u7ef4\u62a4\u72b6\u6001\u548c\u8d26\u672c\u3002  \n\n\npeer\u8fd8\u53ef\u4ee5\u62c5\u5f53\n\u80cc\u4e66peer\n\u7684\u7279\u6b8a\u89d2\u8272(\u6216\u79f0\nendorser\n)\u3002\u80cc\u4e66peer\u7684\u7279\u6b8a\u529f\u80fd\u662f\u9488\u5bf9\u7279\u5b9a\u7684\u94fe\u7801\u8fdb\u884c\u7684\uff0c\u5e76\u4e14\u5305\u542b\u5728\u63d0\u4ea4\u524d\u7684\u80cc\u4e66\u4ea4\u6613\u4e2d\u3002\u6bcf\u4e2a\u94fe\u7801\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u80cc\u4e66\u7b56\u7565\uff0c\u7b56\u7565\u53ef\u4ee5\u6307\u5411\u4e00\u7ec4\u80cc\u4e66peer\u3002\u8be5\u7b56\u7565\u4e3a\u6709\u6548\u7684\u4ea4\u6613\u80cc\u4e66\u5b9a\u4e49\u4e86\u5fc5\u8981\u548c\u5145\u5206\u7684\u6761\u4ef6\uff08\u901a\u5e38\u662f\u4e00\u7ec4\u80cc\u4e66\u7b7e\u540d\uff09\uff0c\u5982\u540e\u9762\u7684\u7b2c2\u548c\u7b2c3\u8282\u6240\u8ff0\u3002\u6709\u4e00\u79cd\u90e8\u7f72\u65b0\u94fe\u7801\u7684\u7279\u6b8a\u90e8\u7f72\u4ea4\u6613\uff0c\u5b83\u7684\uff08\u90e8\u7f72\uff09\u80cc\u4e66\u7b56\u7565\u662f\u6307\u5b9a\u4e3a\u7cfb\u7edf\u94fe\u7801\u7684\u80cc\u4e66\u653f\u7b56\u3002  \n\n\n1.3.3\u6392\u5e8f\u670d\u52a1\u8282\u70b9(Orderer)\n\n\u6392\u5e8f\u670d\u52a1(orderer)\u662f\u4e00\u4e2a\u901a\u4fe1\u67b6\u6784\uff0c\u5b83\u63d0\u4f9b\u6295\u9012\u62c5\u4fdd\u3002\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\uff1a\u4ece\u4e2d\u5fc3\u5f0f\u670d\u52a1\uff08\u4f8b\u5982\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e2d\u4f7f\u7528\uff09\u5230\u9488\u5bf9\u4e0d\u540c\u7f51\u7edc\u548c\u8282\u70b9\u5931\u6548\u6a21\u578b\u7684\u5206\u5e03\u5f0f\u534f\u8bae\u3002\n\n\n\u6392\u5e8f\u670d\u52a1\u4e3a\u5ba2\u6237\u548cpeer\u63d0\u4f9b\u5171\u4eab\u7684\n\u901a\u4fe1\u901a\u9053\n\uff0c\u4e3a\u5305\u542b\u4ea4\u6613\u7684\u6d88\u606f\u63d0\u4f9b\u5e7f\u64ad\u670d\u52a1\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u8be5\u901a\u9053\uff0c\u5e76\u53ef\u4ee5\u5728\u8be5\u901a\u9053\u4e0a\u5e7f\u64ad\u6d88\u606f\uff0c\u7136\u540e\u4f20\u9001\u7ed9\u6240\u6709peer\u3002\u8be5\u901a\u9053\u652f\u6301\u6240\u6709\u6d88\u606f\u7684\u539f\u5b50\u4ea4\u4ed8\uff0c\u4e5f\u5c31\u662f\u5168\u6392\u5e8f\u4ea4\u4ed8\u548c\uff08\u7279\u5b9a\u5b9e\u73b0\uff09\u53ef\u9760\u6027\u7684\u6d88\u606f\u901a\u4fe1\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u901a\u9053\u5411\u6240\u6709\u8fde\u63a5\u7684peer\u8f93\u51fa\u76f8\u540c\u7684\u6d88\u606f\uff0c\u5e76\u4ee5\u76f8\u540c\u7684\u903b\u8f91\u987a\u5e8f\u8f93\u51fa\u5230\u6240\u6709peer\u3002\u8fd9\u79cd\u539f\u5b50\u901a\u4fe1\u4fdd\u8bc1\u4e5f\u88ab\u79f0\u4e3a\n\u5168\u5e8f\u5e7f\u64ad\n\u3001\n\u539f\u5b50\u5e7f\u64ad\n\u6216\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0b\u7684\n\u5171\u8bc6\n\u3002\u901a\u4fe1\u6d88\u606f\u662f\u5305\u542b\u5728\u533a\u5757\u94fe\u72b6\u6001\u4e2d\u7684\u5019\u9009\u4ea4\u6613\u3002  \n\n\n\u5206\u533a(\u6392\u5e8f\u670d\u52a1\u901a\u9053)\n\u3002\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u652f\u6301\u591a\u901a\u9053\uff0c\u7c7b\u4f3c\u53d1\u5e03/\u8ba2\u9605\uff08pub / sub\uff09\u6d88\u606f\u7cfb\u7edf\u7684\u4e3b\u9898\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u7ed9\u5b9a\u7684\u901a\u9053\uff0c\u7136\u540e\u53ef\u4ee5\u53d1\u9001\u6d88\u606f\u5e76\u83b7\u53d6\u5230\u8fbe\u7684\u6d88\u606f\u3002\u901a\u9053\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5206\u533a - \u8fde\u63a5\u5230\u4e00\u4e2a\u901a\u9053\u7684\u5ba2\u6237\u7aef\u4e0d\u77e5\u9053\u5176\u4ed6\u901a\u9053\u7684\u5b58\u5728\uff0c\u4f46\u5ba2\u6237\u7aef\u53ef\u80fd\u8fde\u63a5\u5230\u591a\u4e2a\u901a\u9053\u3002\u5c3d\u7ba1Hyperledger Fabric\u4e2d\u5305\u542b\u7684\u4e00\u4e9b\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u652f\u6301\u591a\u4e2a\u901a\u9053\uff0c\u4f46\u4e3a\u4e86\u7b80\u5316\u8868\u793a\uff0c\u5728\u672c\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u6392\u5e8f\u670d\u52a1\u5305\u542b\u5355\u4e2a\u901a\u9053/\u4e3b\u9898\u3002  \n\n\n\u6392\u5e8f\u670d\u52a1API\n\u3002peer\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u63a5\u53e3\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u901a\u9053\u3002\u6392\u5e8f\u670d\u52a1API\u5305\u542b\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\uff08\u5f88\u5e38\u89c1\u7684\n\u5f02\u6b65\u4e8b\u4ef6\n\uff09\uff1a\n\n- \nbroadcast(blob)\n: \u5ba2\u6237\u7aef\u8c03\u7528\u8fd9\u4e2a\u5e7f\u64ad\u4e8c\u8fdb\u5236\u6d88\u606f\nblob\n\u5230\u901a\u9053\u3002\u8fd9\u5728BFT\u4e0a\u4e0b\u6587\u4e2d\u4e5f\u53eb\u505a\nrequest(blob)\n\uff0c\u5f53\u53d1\u9001\u8bf7\u6c42\u5230\u4e00\u4e2a\u670d\u52a1\u65f6\u3002\n\n- \ndeliver(seqno, prevhash, blob)\n\uff1a(\u7565)\n\n\n\u8d26\u672c\u548c\u533a\u5757\u4fe1\u606f\n\u3002\u8d26\u672c(\u53c2\u770b1.2.2\u8282)\u5305\u542b\u6392\u5e8f\u670d\u52a1\u8f93\u51fa\u7684\u6240\u6709\u6570\u636e\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5b83\u662f\u4e00\u7cfb\u5217\ndeliver(seqno, prevhash, blob)\n\u4e8b\u4ef6\uff0c\u6839\u636e\u524d\u9762\u6240\u8ff0\u7684\nprevhash\n\u8ba1\u7b97\u5f62\u6210\u4e00\u4e2a\u54c8\u5e0c\u94fe\u3002\n\n\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u51fa\u4e8e\u6548\u7387\u539f\u56e0\uff0c\u4e0d\u8f93\u51fa\u5355\u4e2a\u4ea4\u6613\uff08blob\uff09\uff0c\u6392\u5e8f\u670d\u52a1\u5c06\u5bf9blob\u8fdb\u884c\u5206\u7ec4(\u6279\u5904\u7406)\uff0c\u5e76\u5728\u4e00\u4e2a\ndeliver\n\u4e8b\u4ef6\u8f93\u51fa\u533a\u5757\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6392\u5e8f\u670d\u52a1\u5fc5\u987b\u5f3a\u5236\u548c\u4f20\u8fbe\u6bcf\u4e2a\u5757\u5185\u7684blob\u7684\u786e\u5b9a\u6027\u6392\u5e8f\u3002\u533a\u5757\u4e2d\u7684blob\u6570\u91cf\u53ef\u4ee5\u7531\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u52a8\u6001\u5730\u9009\u62e9\u3002  \n\n\n\u4e0b\u9762\u4e3a\u4fbf\u4e8e\u8868\u8ff0\uff0c\u6211\u4eec\u5b9a\u4e49\u6392\u5e8f\u670d\u52a1\u5c5e\u6027\uff08\u672c\u5c0f\u8282\u7684\u5176\u4f59\u90e8\u5206\uff09\uff0c\u5e76\u89e3\u91ca\u4ea4\u6613\u80cc\u4e66\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002\u5047\u5b9a\u4e00\u4e2ablob\u4ea7\u751f\u4e00\u4e2a\ndeliver\n\u4e8b\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5bf9\u5e94\u4e00\u7ec4\u987a\u5e8f\u7684\ndeliver\n\u4e8b\u4ef6\uff08\u6bcf\u4e2ablob\u4e00\u4e2a\u4e8b\u4ef6\uff09\u3002\u533a\u5757\u672c\u8eab\u4e5f\u5bf9\u5e94\u4e00\u4e2a\ndeliver\n\u4e8b\u4ef6\uff0c\u4f9d\u9760\u6392\u5e8f\u670d\u52a1\uff0c\u591a\u4e2a\u533a\u5757\u987a\u5e8f\u6392\u5217\u7ec4\u6210\u533a\u5757\u94fe\u3002  \n\n\n2.\u4ea4\u6613\u80cc\u4e66\u7684\u57fa\u672c\u6d41\u7a0b\n\n\n2.1 \u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u4ea4\u6613\u5e76\u5c06\u5b83\u53d1\u9001\u5230\u9009\u62e9\u7684\u80cc\u4e66peers\n\n\n\u4e3a\u4e86\u8c03\u7528\u4e00\u4e2a\u4ea4\u6613\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\nPROPOSE\n\u6d88\u606f\u7ed9\u5b83\u6240\u9009\u62e9\u7684\u4e00\u7ec4\u80cc\u4e66peer\uff08\u53ef\u80fd\u4e0d\u662f\u540c\u4e00\u65f6\u95f4 - \u89c12.1.2\u8282\u548c2.3\u8282\uff09\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684\nchaincodeID\n\u5ba2\u6237\u7aef\u6839\u636e\u80cc\u4e66\u7b56\u7565(\u770b\u7b2c3\u8282)\u53ef\u4ee5\u83b7\u5f97\u4e00\u7ec4\u80cc\u4e66peer\u3002\u4f8b\u5982\uff0c\u6839\u636e\u7ed9\u5b9a\nchiancodeID\n\u4ea4\u6613\u53ef\u4ee5\u53d1\u9001\u7ed9\u6240\u6709\u80cc\u4e66peer\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u80cc\u4e66\u4eba\u53ef\u80fd\u4f1a\u79bb\u7ebf\uff0c\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u53cd\u5bf9\u5e76\u9009\u62e9\u4e0d\u8d5e\u6210\u4ea4\u6613\u3002\u53d1\u8d77\u5ba2\u6237\u7aef\u5229\u7528\u76ee\u524d\u53ef\u7528\u7684\u80cc\u4e66\u8282\u70b9\u5c1d\u8bd5\u6ee1\u8db3\u7b56\u7565\u8868\u8fbe\u5f0f\u7684\u8981\u6c42\u3002  \n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9996\u5148\u8be6\u7ec6\u63cf\u8ff0PROPOSE\u6d88\u606f\u683c\u5f0f\uff0c\u7136\u540e\u8ba8\u8bba\u63d0\u4ea4\u5ba2\u6237\u7aef\u548c\u80cc\u4e66\u4eba\u4e4b\u95f4\u53ef\u80fd\u7684\u4ea4\u4e92\u6a21\u5f0f\u3002\n\n\n2.1.1 PROPOSE\u6d88\u606f\u683c\u5f0f\n\n\n2.1.2 \u6d88\u606f\u6a21\u5f0f\n  \n\n\n2.2 \u80cc\u4e66peer\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u5e76\u751f\u6210\u4e00\u4e2a\u80cc\u4e66\u7b7e\u540d\n\n\n\u4ece\u5ba2\u6237\u7aef\u6536\u5230\nPROPOSE,tx,[anchor]\n\u6d88\u606f\u540e\uff0c\u80cc\u4e66peer\nepID\n\u9996\u5148\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7b7e\u540d\nclientSig\n\uff0c\u7136\u540e\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6307\u5b9a\u4e86\nanchor\n\uff0c\u5219\u80cc\u4e66peer\u6a21\u62df\u4ea4\u6613\u7684\u65b9\u6cd5\u662f\uff0c\u5728\u672c\u5730KVS\u4e2d\u8bfb\u53d6\u4e0e\u7248\u672c\u53f7\nanchor\n\u76f8\u5339\u914d\u7684keys\u3002\n\n\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u5305\u62ec\u80cc\u4e66peer\u4e34\u65f6\u6027\u6267\u884c\u4e00\u4e2a\u4ea4\u6613(\ntxPayload\n)\uff08\u8c03\u7528\u4ea4\u6613\u4e2d\nchaincodeID\n\u6307\u5b9a\u7684\u94fe\u7801\uff09\u548c\u80cc\u4e66peer\u672c\u5730\u4fdd\u5b58\u7684\u72b6\u6001\u526f\u672c\u3002\uff08\u7528\u72b6\u6001\u526f\u672c\u548c\u4e34\u65f6\u4ea4\u6613\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e34\u65f6\u7684\u65b0\u72b6\u6001\uff09\n\n\u4f5c\u4e3a\u6267\u884c\u7684\u7ed3\u679c\uff0c\u80cc\u4e66peer\u8ba1\u7b97\n\u8bfb\u7248\u672c\u4f9d\u8d56\n(\nreadset\n)\u548c\n\u72b6\u6001\u66f4\u65b0\n(\nwriteset\n)\uff0c\u5728\u6570\u636e\u5e93\u8bed\u8a00\u4e2d\u4e5f\u53eb\nMVCC+postimage info\n\u3002\n\n\u56de\u60f3\u4e00\u4e0b\u72b6\u6001\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u3002\u6240\u6709\u7684\u952e\u503c\u5bf9\u6761\u76ee\u662f\u7248\u672c\u5316\u7684\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u6761\u76ee\u90fd\u5305\u542b\u6709\u5e8f\u7684\u7248\u672c\u4fe1\u606f\uff0c\u5f53\u901a\u8fc7\u4e00\u4e2akey\u66f4\u65b0\u5e93\u4e2d\u7684\u503c\u65f6\u7248\u672c\u53f7\u4f1a\u589e\u957f\u3002peer\u89e3\u91ca(\u6a21\u62df\u6267\u884c)\u4ea4\u6613\uff0c\u8bb0\u5f55\u94fe\u7801\u8bbf\u95ee\u7684\u952e\u503c\u5bf9\uff0c\u4f46\u4e0d\u4f1a\u771f\u7684\u66f4\u65b0\u72b6\u6001\u3002\u8fdb\u4e00\u6b65\u6765\u8bf4\uff1a\n- \u5728\u80cc\u4e66peer\u6267\u884c\u4ea4\u6613\u524d\uff0c\u7ed9\u5b9a\u72b6\u6001\ns\n\uff0c\u5bf9\u4e8e\u4ea4\u6613\u8bfb\u53d6\u7684\u6bcf\u4e2akey\nk\n\uff0c\u952e\u503c\u5bf9\n(k,s(k).version)\n\u88ab\u6dfb\u52a0\u5230\nreadset\n\u3002\n\n- \u6b64\u5916\uff0c\u5bf9\u4e8e\u6bcf\u4e2akey\nk\n\u4ea4\u6613\u66f4\u65b0\u4e3a\u65b0\u503c\nv'\n\uff0c\u952e\u503c\u5bf9\n(k,v')\n\u88ab\u6dfb\u52a0\u5230\nwriteset\n\u3002\u6216\u8005\uff0c\nv'\n\u53ef\u80fd\u662f\u4ee5\u524d\u503c(\ns(k).value\n)\u7684\u65b0\u503c\u7684\u589e\u91cf\u3002  \n\n\n\u5982\u679c\u5ba2\u6237\u7aef\u5728\nPROPOSE\n\u6d88\u606f\u4e2d\u6307\u5b9a\u4e86\nanchor\n\uff0c\u5219\u5ba2\u6237\u7aef\u6307\u5b9a\u7684\nanchor\n\u5fc5\u987b\u7b49\u4e8e\u80cc\u4e66peer\u6a21\u62df\u4ea4\u6613\u65f6\u4ea7\u751f\u7684\nreadset\n\u3002\n\n\u7136\u540e\uff0cpeer\u5c06\u5185\u90e8\ntran-proposal\n\uff08\u5373\ntx\n\uff09\u8f6c\u53d1\u4f5c\u4e3a\u5176\u80cc\u4e66\u4ea4\u6613\u903b\u8f91\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u79f0\u4e3a\n\u80cc\u4e66\u903b\u8f91\n\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpeer\u4e2d\u7684\u80cc\u4e66\u903b\u8f91\u63a5\u53d7\ntran-proposal\n\u5e76\u7b80\u5355\u5730\u7b7e\u540d\ntran-proposal\n\u3002\u7136\u800c\uff0c\u80cc\u4e66\u903b\u8f91\u53ef\u80fd\u89e3\u91ca\u4efb\u610f\u51fd\u6570\uff0c\u4f8b\u5982\uff0c\u7528\ntran-proposal\n\u548c\ntx\n\u4f5c\u4e3a\u8f93\u5165\u4e0e\u9057\u7559\u7cfb\u7edf\u4ea4\u4e92\u6765\u5224\u65ad\u662f\u5426\u6279\u51c6\u4ea4\u6613\u3002\n\n\u5982\u679c\u80cc\u4e66\u903b\u8f91\u51b3\u5b9a\u5bf9\u4e00\u4e2a\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff0c\u5b83\u53d1\u9001\nTRANSACTION-ENDORSED, tid, tran-proposal,epSig\n\u6d88\u606f\u5230\u53d1\u8d77\u5ba2\u6237\u7aef(\ntx.clientID\n)\uff0c\u8fd9\u91cc\uff1a\n- \ntran-proposal := (epID,tid,chaincodeID,txContentBlob,readset,writeset)\n\uff0c\ntxContentBlob\n\u662f\u94fe\u7801/\u4ea4\u6613\u6307\u5b9a\u4fe1\u606f\u3002\n\n- \nepSig\n\u662f\u80cc\u4e66peer\u5728\ntran-proposal\n\u4e0a\u7684\u7b7e\u540d  \n\n\n\u53e6\u5916\uff0c\u5982\u679c\u80cc\u4e66\u903b\u8f91\u62d2\u7edd\u5bf9\u4ea4\u6613\u7b7e\u540d\uff0c\u80cc\u4e66\u754c\u9762\u4f1a\u53d1\u9001\u4e00\u4e2a\n(TRANSACTION-INVALID, tid, REJECTED)\n\u6d88\u606f\u5230\u53d1\u8d77\u5ba2\u6237\u7aef\u3002\n\n\u6ce8\u610f\uff0c\u80cc\u4e66\u8282\u70b9\u5728\u8fd9\u4e00\u6b65\u4e0d\u4f1a\u4fee\u6539\u72b6\u6001\uff0c\u56e0\u4ea4\u6613\u6a21\u62df\u800c\u751f\u6210\u7684\u66f4\u65b0\u4e0d\u4f1a\u5f71\u54cd\u72b6\u6001\u3002  \n\n\n2.3 \u53d1\u8d77\u5ba2\u6237\u7aef\u6536\u96c6\u4ea4\u6613\u80cc\u4e66\u5e76\u5e7f\u64ad\u5230\u6392\u5e8f\u670d\u52a1\n\n\n\u53d1\u8d77\u5ba2\u6237\u7aef\u7b49\u5f85\uff0c\u76f4\u5230\u5b83\u6536\u5230\u201c\u8db3\u591f\u7684\u201d\u6d88\u606f\u548c\u7b7e\u540d(\nTRANSACTION-ENDORSED, tid, *, *\n)\uff0c\u5f97\u51fa\u4ea4\u6613\u63d0\u8bae\u88ab\u80cc\u4e66\u7684\u7ed3\u8bba\u3002\u6b63\u59822.1.2\u8282\u6240\u8ba8\u8bba\u7684\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0e\u80cc\u4e66\u4eba\u4ea4\u4e92\u7684\u5f80\u8fd4\u3002  \n\n\n\u201c\u8db3\u591f\u7684\u201d\u7684\u786e\u5207\u6570\u91cf\u53d6\u51b3\u4e8e\u94fe\u7801\u80cc\u4e66\u7b56\u7565\uff08\u53e6\u89c1\u7b2c3\u8282\uff09\u3002\u5982\u679c\u80cc\u4e66\u7b56\u7565\u5f97\u5230\u6ee1\u8db3\uff0c\u4ea4\u6613\u5c31\u83b7\u5f97\u80cc\u4e66; \u6ce8\u610f\u5b83\u8fd8\u6ca1\u6709\u63d0\u4ea4\u3002\u6765\u81ea\u80cc\u4e66peer\u7684\u7b7e\u540d\nTRANSACTION-ENDORSED\n\u6d88\u606f\u96c6\u5408\u5c06\u5efa\u7acb\u4e00\u4e2a\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u79f0\u4e3a\n\u80cc\u4e66\n(\nendorsement\n)\u3002\n\n\n\u5982\u679c\u53d1\u8d77\u5ba2\u6237\u7aef\u6ca1\u6709\u6536\u96c6\u5230\u4ea4\u6613\u7684\u80cc\u4e66\uff0c\u5219\u653e\u5f03\u8be5\u4ea4\u6613\uff0c\u5e76\u9009\u62e9\u7a0d\u540e\u91cd\u8bd5\u3002  \n\n\n\u5bf9\u4e8e\u542b\u6709\u6709\u6548\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u59cb\u4f7f\u7528\u6392\u5e8f\u670d\u52a1\u3002\u53d1\u8d77\u5ba2\u6237\u7aef\u4f7f\u7528\nbroadcast(blob)\n\u8c03\u7528\u6392\u5e8f\u670d\u52a1\uff0c\u8fd9\u91cc\nblob=endorsement\n\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u76f4\u63a5\u8c03\u7528\u6392\u5e8f\u670d\u52a1\u7684\u80fd\u529b\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u9009\u62e9\u7684peer\u4ee3\u7406\u5b83\u7684\u5e7f\u64ad\u3002\u8fd9\u6837\u7684peer\u5fc5\u987b\u88ab\u5ba2\u6237\u4fe1\u4efb\uff1a\u4e0d\u4f1a\u4ece\nendorsement\n\u5220\u9664\u4efb\u4f55\u6d88\u606f\uff0c\u9664\u975e\u4ea4\u6613\u88ab\u8ba4\u4e3a\u662f\u65e0\u6548\u7684\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u4ee3\u7406peer\u53ef\u80fd\u4e0d\u4f1a\u7f16\u9020\u6709\u6548\u7684endorsement\u3002  \n\n\n2.4 \u6392\u5e8f\u670d\u52a1\n\n\n\u5f53\u4e00\u4e2a\u4e8b\u4ef6\ndeliver(seqno, prevhash, blob)\n\u53d1\u751f\uff0c\u5e76\u4e14peer\u5df2\u7ecf\u5e94\u7528\u4e86blob\u7684\u5e8f\u5217\u53f7\u4f4e\u4e8e\nseqno\n\u7684\u6240\u6709\u7684\u72b6\u6001\u66f4\u65b0\uff0cpeer\u505a\u4e0b\u9762\u8fd9\u4e9b\uff1a\n- \u5b83\u6839\u636e\nblob.tran-proposal.chaincodeID\n\u6307\u5411\u7684\u94fe\u7801\u7b56\u7565\u68c0\u67e5\nblob.endorsement\n\u770b\u662f\u5426\u6709\u6548\u3002\n\n- \u5728\u4e00\u4e2a\u5178\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u9a8c\u8bc1\u4f9d\u8d56\u5173\u7cfb\uff08blob.endorsement.tran-proposal.readset\uff09\u540c\u65f6\u6ca1\u6709\u88ab\u8fdd\u53cd\u3002\u5728\u66f4\u590d\u6742\u7684\u7528\u4f8b\u4e2d\uff0c\u80cc\u4e66\u7684\ntran-proposal\n\u5b57\u6bb5\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u80cc\u4e66\u7b56\u7565\uff08\u7b2c3\u90e8\u5206\uff09\u6307\u5b9a\u4e86\u72b6\u6001\u5982\u4f55\u6f14\u53d8\u3002\n\n  \uff08\u7701\u7565\u4e00\u4e9b\uff09\n\n\n3. \u80cc\u4e66\u7b56\u7565\n\n\n3.1 \u80cc\u4e66\u7b56\u7565\u89c4\u8303\n\n\n\u4e00\u4e2a\n\u7b56\u7565\n\uff0c\u662f\u5bf9\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u7684\u6761\u4ef6\u3002\u533a\u5757\u94fepeer\u62e5\u6709\u4e00\u5957\u9884\u5148\u8bbe\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u7531\u5b89\u88c5\u7279\u5b9a\u94fe\u7801\u7684\ndeploy\n\u4ea4\u6613\u5f15\u5165\u3002\u80cc\u4e66\u7b56\u7565\u53ef\u4ee5\u53c2\u6570\u5316\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u4ee5\u7531\ndeploy\n\u4ea4\u6613\u6307\u5b9a\u3002  \n\n\n\u4e3a\u4e86\u4fdd\u8bc1\u533a\u5757\u94fe\u548c\u5b89\u5168\u5c5e\u6027\uff0c\u8fd9\u5957\u8ba4\u53ef\u7b56\u7565\u5e94\u8be5\u662f\u4e00\u7ec4\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u7b56\u7565\uff0c\u786e\u4fdd\u6709\u9650\u7684\u6267\u884c\u65f6\u95f4\uff08\u7ec8\u6b62\uff09\uff0c\u786e\u5b9a\u6027\uff0c\u6027\u80fd\u548c\u5b89\u5168\u4fdd\u8bc1\u3002  \n\n\n\u4e0d\u5141\u8bb8\u52a8\u6001\u589e\u52a0\u80cc\u4e66\u7b56\u7565\uff0c\u65e5\u540e\u53ef\u4ee5\u4e88\u4ee5\u652f\u6301\u3002  \n\n\n3.2 \u5bf9\u80cc\u4e66\u7b56\u7565\u7684\u4ea4\u6613\u8bc4\u4f30\n\n\n\u53ea\u6709\u901a\u8fc7\u7b56\u7565\u80cc\u4e66\uff0c\u4ea4\u6613\u624d\u88ab\u5ba3\u5e03\u6709\u6548\u3002\u94fe\u7801\u7684\u8c03\u7528\u4ea4\u6613\u9996\u5148\u5fc5\u987b\u83b7\u5f97\u94fe\u7801\u7b56\u7565\u7684\u80cc\u4e66\uff0c\u5426\u5219\u5c06\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u3002\u8fd9\u662f\u901a\u8fc7\u53d1\u8d77\u5ba2\u6237\u7aef\u548cpeer\u4e4b\u95f4\u7684\u4ea4\u4e92\u6765\u8fdb\u884c\u7684\uff0c\u5982\u7b2c2\u8282\u6240\u8ff0\u3002  \n\n\n\u5f62\u5f0f\u4e0a\uff0c\u80cc\u4e66\u7b56\u7565\u662f\u5bf9\u80cc\u4e66\u7684\u4e00\u4e2a\u5224\u65ad\uff0c\u5e76\u53ef\u80fd\u8fdb\u4e00\u6b65\u9648\u8ff0\u8bc4\u4f30\u4e3a\u201c\u771f\u201d\u6216\u201c\u5047\u201d\u3002\u5bf9\u4e8e\u90e8\u7f72\u4ea4\u6613\uff0c\u6839\u636e\u7cfb\u7edf\u8303\u56f4\u7684\u7b56\u7565\uff08\u4f8b\u5982\u4ece\u7cfb\u7edf\u94fe\u7801\uff09\u83b7\u5f97\u80cc\u4e66\u3002\n\n\n(\u7701\u7565\u4e00\u4e9b)\n\n\n\u901a\u9053\n\n\nHyperledger Fabric\n\u901a\u9053\n\u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u7279\u5b9a\u7f51\u7edc\u6210\u5458\u4e4b\u95f4\u901a\u4fe1\u7684\u79c1\u6709\u201c\u5b50\u7f51\u201d\uff0c\u7528\u4e8e\u8fdb\u884c\u79c1\u4e0b\u4ea4\u6613\u548c\u4fdd\u5bc6\u4ea4\u6613\u3002\u901a\u9053\u662f\u7531\u6210\u5458\uff08\u7ec4\u7ec7\uff09\u3001\u6bcf\u4e2a\u6210\u5458\u7684\u951a\u70b9\u3001\u5171\u4eab\u8d26\u672c\u3001\u94fe\u7801\u5e94\u7528\u7a0b\u5e8f\u548c\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u5b9a\u4e49\u7684\u3002\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e2a\u4ea4\u6613\u90fd\u5728\u4e00\u4e2a\u901a\u9053\u4e0a\u6267\u884c\uff0c\u6bcf\u4e2a\u901a\u4fe1\u65b9\u90fd\u5fc5\u987b\u7ecf\u8fc7\u8ba4\u8bc1\u548c\u6388\u6743\u624d\u80fd\u5728\u8be5\u901a\u9053\u4e0a\u8fdb\u884c\u4ea4\u6613\u3002\u6bcf\u4e2a\u52a0\u5165\u901a\u9053\u7684\u8282\u70b9\u90fd\u6709\u81ea\u5df1\u7684\u8eab\u4efd\uff0c\u8eab\u4efd\u7531\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005\uff08MSP\uff09\u63d0\u4f9b\uff0c\u5b83\u5c06\u6bcf\u4e2a\u8282\u70b9\u8ba4\u8bc1\u7ed9\u901a\u9053\u8282\u70b9\u548c\u670d\u52a1\u3002\n\n\n\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u9053\uff0c\u5ba2\u6237\u7aefSDK\u8c03\u7528\u914d\u7f6e\u7cfb\u7edf\u94fe\u7801\u5e76\u5f15\u7528\u5c5e\u6027\uff0c\u4f8b\u5982\n\u951a\u70b9 peer\n\u548c\n\u6210\u5458\uff08\u7ec4\u7ec7\uff09\n\u3002\u8be5\u8bf7\u6c42\u4e3a\u901a\u9053\u8d26\u672c\u521b\u5efa\n\u521d\u59cb\u533a\u5757\n\uff0c\u5b58\u50a8\u6709\u5173\u901a\u9053\u7b56\u7565\u3001\u6210\u5458\u548c\u951a\u70b9\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5728\u5c06\u65b0\u6210\u5458\u6dfb\u52a0\u5230\u73b0\u6709\u901a\u9053\u65f6\uff0c\u8fd9\u4e2a\u521d\u59cb\u533a\u5757\uff08\u8fd8\u53ef\u80fd\u6709\u6700\u8fd1\u7684\u91cd\u65b0\u914d\u7f6e\u533a\u5757\uff09\u5c06\u4e0e\u65b0\u6210\u5458\u5171\u4eab\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\u6709\u5173\u914d\u7f6e\u4ea4\u6613\u7684\u5c5e\u6027\u548c\u539f\u59cb\u7ed3\u6784\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\n\u901a\u9053\u914d\u7f6e\uff08configtx\uff09\n\u90e8\u5206\u3002\n\n\n\u5bf9\u901a\u9053\u4e0a\u6bcf\u4e2a\u6210\u5458\u7684\n\u9886\u5bfcpeer\n\u7684\u9009\u62e9\uff0c\u51b3\u5b9a\u54ea\u4e2apeer\u4ee3\u8868\u6210\u5458\u4e0e\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u3002\u5982\u679c\u6ca1\u6709\u786e\u5b9a\u9886\u5bfc\u8005\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7b97\u6cd5\u6765\u786e\u5b9a\u9886\u5bfc\u8005\u3002\u5171\u8bc6\u670d\u52a1\u5728\u4e00\u4e2a\u533a\u5757\u5185\u5bf9\u4ea4\u6613\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u5c06\u533a\u5757\u4f20\u9012\u7ed9\u6bcf\u4e2a\u9886\u5bfcpeer\uff0c\u8be5peer\u518d\u5c06\u533a\u5757\u5206\u53d1\u81ea\u5df1\u7684\u6210\u5458peer\uff0c\u901a\u8fc7\ngossip\n\u534f\u8bae\u5e7f\u64ad\u5230\u6574\u4e2a\u901a\u9053\u3002\n\n\n\u5c3d\u7ba1\u4efb\u4f55\u4e00\u4e2a\u951a\u70b9peer\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ef4\u62a4\u591a\u4e2a\u8d26\u672c\uff0c\u4f46\u6ca1\u6709\u8d26\u672c\u6570\u636e\u53ef\u4ee5\u4ece\u4e00\u4e2a\u901a\u9053\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u901a\u9053\u3002\u6309\u901a\u9053\u5212\u5206\u7684\u8d26\u672c\u662f\u901a\u8fc7\u914d\u7f6e\u94fe\u7801\u3001\u8eab\u4efd\u6210\u5458\u670d\u52a1\u548cgossip\u6570\u636e\u4f20\u64ad\u534f\u8bae\u6765\u5b9a\u4e49\u548c\u5b9e\u73b0\u7684\u3002\u5305\u62ec\u4ea4\u6613\u3001\u8d26\u672c\u72b6\u6001\u548c\u901a\u9053\u6210\u5458\u4fe1\u606f\u5728\u5185\u7684\u6570\u636e\u4f20\u64ad\u4ec5\u9650\u4e8e\u5728\u901a\u9053\u4e0a\u5177\u6709\u53ef\u9a8c\u8bc1\u6210\u5458\u8d44\u683c\u7684peer\u3002\u901a\u8fc7\u901a\u9053\u9694\u79bbpeer\u548c\u8d26\u672c\u6570\u636e\uff0c\u5141\u8bb8\u9700\u8981\u79c1\u6709\u548c\u4fdd\u5bc6\u4ea4\u6613\u7684\u7f51\u7edc\u6210\u5458\u5728\u540c\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u4e0a\u4e0e\u5546\u4e1a\u7ade\u4e89\u5bf9\u624b\u548c\u5176\u4ed6\u53d7\u9650\u5236\u6210\u5458\u5171\u5b58\u3002", 
            "title": "\u67b6\u6784\u8bf4\u660e"
        }, 
        {
            "location": "/arch-deep-dive_zh/#_1", 
            "text": "Hyperledger Fabric\u67b6\u6784\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \n-  Chaincode\u4fe1\u4efb\u7075\u6d3b\u6027 \u3002\u8be5\u67b6\u6784\u5c06\u94fe\u7801\uff08\u533a\u5757\u94fe\u5e94\u7528\uff09\u4fe1\u4efb\u5047\u8bbe\u4e0e\u6392\u5e8f\u4fe1\u4efb\u5047\u5b9a\u5206\u5f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u7531\u4e00\u7ec4\u8282\u70b9\uff08orderer\uff09\u63d0\u4f9b\uff0c\u5e76\u5bb9\u5fcd\u7684\u4e00\u4e9b\u8282\u70b9\u7684\u5931\u6548\u6216\u6b3a\u8bc8\uff1b\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u94fe\u7801\uff0c\u80cc\u4e66\u8005\u53ef\u80fd\u4e0d\u540c\u3002 \n-  \u53ef\u6269\u5c55\u6027 \u3002\u7531\u4e8e\u80cc\u4e66\u8282\u70b9\u53ea\u8d1f\u8d23\u7279\u5b9a\u94fe\u7801\uff0c\u4e0e\u6392\u5e8f\u8282\u70b9\u65e0\u5173\uff0c\u7cfb\u7edf\u53ef\u4ee5\u6bd4\u901a\u8fc7\u76f8\u540c\u8282\u70b9\u5b8c\u6210\u8fd9\u4e9b\u529f\u80fd\u66f4\u597d\u5730\u6269\u5c55\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5f53\u4e0d\u540c\u7684\u94fe\u7801\u6307\u5b9a\u65e0\u5173\u7684\u80cc\u4e66\u8282\u70b9\u65f6\uff0c\u8fd9\u5f15\u5165\u4e86\u80cc\u4e66\u8282\u70b9\u4e4b\u95f4\u7684\u5206\u533a\u673a\u5236\u4ece\u800c\u5141\u8bb8\u94fe\u7801\u7684\u5e76\u884c\u8fd0\u884c\uff08\u80cc\u4e66\uff09\u3002 \n-  \u4fdd\u5bc6 \u3002\u8be5\u67b6\u6784\u4fbf\u4e8e\u90e8\u7f72\u5bf9\u4e8e\u5176\u4ea4\u6613\u7684\u5185\u5bb9\u548c\u72b6\u6001\u66f4\u65b0\u5177\u6709\u673a\u5bc6\u6027\u8981\u6c42\u7684\u94fe\u7801\u3002\n-  \u5171\u8bc6\u6a21\u5757\u5316 \u3002\u8be5\u4f53\u7cfb\u7ed3\u6784\u662f\u6a21\u5757\u5316\u7684\uff0c\u5e76\u5141\u8bb8\u63d2\u4ef6\u5f0f\u7684\u5171\u8bc6\uff08\u5373\u6392\u5e8f\u670d\u52a1\uff09\u5b9e\u73b0\u3002", 
            "title": "\u67b6\u6784\u89e3\u91ca"
        }, 
        {
            "location": "/arch-deep-dive_zh/#1", 
            "text": "\u533a\u5757\u94fe\u662f\u7531\u591a\u4e2a\u5f7c\u6b64\u901a\u4fe1\u7684\u8282\u70b9\u7ec4\u6210\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002\u533a\u5757\u94fe\u8fd0\u884c\u7a0b\u5e8f\u79f0\u4e3a\u94fe\u7801\uff0c\u4fdd\u5b58\u72b6\u6001\u548c\u603b\u5e10\u6570\u636e\uff0c\u5e76\u6267\u884c\u4ea4\u6613\u3002\u94fe\u7801\u662f\u94fe\u7801\u8c03\u7528\u4ea4\u6613\u64cd\u4f5c\u7684\u6838\u5fc3\u5143\u7d20\u3002\u4ea4\u6613\u5fc5\u987b\u88ab\u201c\u80cc\u4e66\u201d\uff0c\u53ea\u6709\u80cc\u4e66\u7684\u4ea4\u6613\u53ef\u80fd\u4f1a\u88ab\u63d0\u4ea4\uff0c\u5e76\u5bf9\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002\u7ba1\u7406\u529f\u80fd\u548c\u53c2\u6570\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u6b8a\u7684\u94fe\u7801\uff0c\u7edf\u79f0\u4e3a\u7cfb\u7edf\u94fe\u7801\u3002", 
            "title": "1.\u7cfb\u7edf\u67b6\u6784"
        }, 
        {
            "location": "/arch-deep-dive_zh/#11", 
            "text": "\u4ea4\u6613\u53ef\u80fd\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\n-  \u90e8\u7f72\u4ea4\u6613 \u521b\u5efa\u65b0\u7684\u94fe\u7801\u5e76\u5c06\u4e00\u4e2a\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\u3002\u5f53\u90e8\u7f72\u4ea4\u6613\u6210\u529f\u6267\u884c\u65f6\uff0c\u94fe\u7801\u5c31\u88ab\u5b89\u88c5\u5728\u533a\u5757\u94fe\u4e0a\u3002 \n-  \u8c03\u7528(Invoke)\u4ea4\u6613 \u5728\u5148\u524d\u90e8\u7f72\u7684\u94fe\u7801\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u64cd\u4f5c\u3002\u8c03\u7528\u4ea4\u6613\u662f\u6307\u94fe\u7801\u53ca\u5176\u63d0\u4f9b\u7684\u67d0\u4e2a\u51fd\u6570\u3002\u94fe\u7801\u4f1a\u6267\u884c\u6307\u5b9a\u7684\u51fd\u6570 - \u8fd9\u53ef\u80fd\u6d89\u53ca\u4fee\u6539\u76f8\u5e94\u7684\u72b6\u6001\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\u3002 \n  \u5982\u540e\u9762\u6240\u8ff0\uff0c\u90e8\u7f72\u4ea4\u6613\u662f\u8c03\u7528\u4ea4\u6613\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4e2d\u521b\u5efa\u65b0\u94fe\u7684\u90e8\u7f72\u4ea4\u6613\u76f8\u5f53\u4e8e\u7cfb\u7edf\u94fe\u7801\u4e0a\u7684\u8c03\u7528\u4ea4\u6613\u3002  \u5907\u6ce8 \uff1a \u8fd9\u4e2a\u6587\u4ef6\u76ee\u524d\u5047\u8bbe\u4e00\u4e2a\u4ea4\u6613\u8981\u4e48\u521b\u5efa\u65b0\u7684\u94fe\u7801\uff0c\u8981\u4e48\u8c03\u7528\u5df2\u7ecf\u90e8\u7f72\u7684\u94fe\u7801\u63d0\u4f9b\u7684\u64cd\u4f5c\u3002\u672c\u6587\u6863\u5c1a\u672a\u63cf\u8ff0\uff1aa\uff09\u5bf9\u67e5\u8be2\uff08\u53ea\u8bfb\uff09\u4ea4\u6613\uff08\u5305\u542b\u5728v1\u4e2d\uff09\u7684\u4f18\u5316\uff0cb\uff09\u5bf9\u4ea4\u53c9\u94fe\u7801\u4ea4\u6613\uff08post-v1\u7279\u6027\uff09\u7684\u652f\u6301\u3002", 
            "title": "1.1 \u4ea4\u6613"
        }, 
        {
            "location": "/arch-deep-dive_zh/#12", 
            "text": "1.2.1\u72b6\u6001 \n\u533a\u5757\u94fe\u7684\u6700\u65b0\u72b6\u6001\uff08\u6216\u7b80\u79f0\u4e3a\u72b6\u6001\uff09\u88ab\u5efa\u6a21\u4e3a\u7248\u672c\u5316\u7684\u952e\u503c\u5e93\uff08KVS\uff09\uff0c\u5176\u4e2d\u952e\u540d\u79f0\u548c\u503c\u662f\u4efb\u610f\u7684blob\u3002\u8fd9\u4e9b\u6761\u76ee\u7531\u8fd0\u884c\u5728\u533a\u5757\u94fe\u4e0a\u7684\u94fe\u7801\uff08\u5e94\u7528\u7a0b\u5e8f\uff09\u901a\u8fc7 put \u548c get  KVS\u6765\u64cd\u7eb5\u3002\u72b6\u6001\u88ab\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u72b6\u6001\u7684\u66f4\u65b0\u88ab\u65e5\u5fd7\u8bb0\u5f55\u3002\u8bf7\u6ce8\u610f\uff0c\u91c7\u7528\u7248\u672c\u5316\u7684KVS\u4f5c\u4e3a\u72b6\u6001\u6a21\u578b\uff0c\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9645\u7684KVS\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528RDBMS\u6216\u4efb\u4f55\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u3002  1.2.2\u8d26\u672c \n\u8d26\u672c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u6240\u6709\u6210\u529f\u72b6\u6001\u53d8\u5316\uff08\u6211\u4eec\u79f0\u4e3a\u6709\u6548\u4ea4\u6613\uff09\u548c\u4e0d\u6210\u529f\u7684\u6539\u53d8\u72b6\u6001\u5c1d\u8bd5\uff08\u6211\u4eec\u79f0\u4e3a\u65e0\u6548\u4ea4\u6613\uff09\u7684\u53ef\u9a8c\u8bc1\u5386\u53f2\u3002 \n\u8d26\u672c\u662f\u7531\u6392\u5e8f\u670d\u52a1\uff08\u53c2\u89c11.3.3\u8282\uff09\u6784\u5efa\uff0c\u662f\u4e00\u4e2a\u7531\u4ea4\u6613\u533a\u5757\uff08\u6709\u6548\u6216\u65e0\u6548\uff09\u7ec4\u6210\u7684\u6709\u5e8f\u54c8\u5e0c\u94fe\u3002\u54c8\u5e0c\u94fe\u5b9a\u4e49\u4e86\u8d26\u672c\u4e2d\u7684\u603b\u7684\u533a\u5757\u987a\u5e8f\uff0c\u6bcf\u4e2a\u533a\u5757\u90fd\u5305\u542b\u4e00\u4e2a\u5b8c\u5168\u6709\u5e8f\u7684\u4ea4\u6613\u6570\u7ec4\u3002\u8fd9\u4f1a\u5728\u6240\u6709\u4ea4\u6613\u4e2d\u5f3a\u52a0\u987a\u5e8f\u3002 \n\u8d26\u672c\u4fdd\u5b58\u5728\u6240\u6709peer\u8282\u70b9\uff0c\u5e76\u53ef\u4fdd\u5b58\u5728\u90e8\u5206\u6392\u5e8f\u8282\u70b9(\u53ef\u9009)\u3002\u5728\u6392\u5e8f\u8282\u70b9\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u79f0\u8d26\u672c\u4e3a OrdererLedger \uff0c\u7136\u800c\u5728peer\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u79f0\u8d26\u672c\u4e3a PeerLedger \u3002 PeerLedger \u4e0e OrdererLedger \u7684\u533a\u522b\u5728\u4e8e\uff0cpeer\u5728\u672c\u5730\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u63a9\u7801(bitmask)\uff0c\u5c06\u6709\u6548\u7684\u4ea4\u6613\u4ece\u65e0\u6548\u7684\u4ea4\u6613\u4e2d\u5206\u79bb\u51fa\u6765\uff08\u66f4\u591a\u7ec6\u8282\u89c1\u7b2cXX\u7ae0\uff09\u3002 \n\u50cf\u7b2cXX\u8282\uff08v1\u4e4b\u540e\u7684\u529f\u80fd\uff09\u4e2d\u6240\u8ff0\u7684\u90a3\u6837\uff0cpeer\u53ef\u80fd\u4f1a\u5220\u9664 PeerLedger \u3002\u6392\u5e8f\u8282\u70b9\u7ef4\u62a4 OrdererLedger \u662f\u4e3a\u4e86\u5bb9\u9519\u6027\u548c PeerLedger \u7684\u53ef\u7528\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u51b3\u5b9a\u5728\u4ec0\u4e48\u65f6\u5019\u4fee\u526a(prune)\u5b83\uff0c\u524d\u63d0\u662f\u6392\u5e8f\u670d\u52a1\u7684\u5c5e\u6027\uff08\u53c2\u89c1\u7b2c1.3.3\u8282\uff09\u5f97\u5230\u7ef4\u62a4\u3002    \u8d26\u672c\u5141\u8bb8peer\u91cd\u653e\u6240\u6709\u4ea4\u6613\u7684\u5386\u53f2\u8bb0\u5f55\u5e76\u91cd\u5efa\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u59821.2.1\u8282\u6240\u8ff0\u7684\u72b6\u6001\u662f\u53ef\u9009\u7684\u6570\u636e\u7ed3\u6784\u3002", 
            "title": "1.2 \u533a\u5757\u94fe\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/arch-deep-dive_zh/#13", 
            "text": "\u8282\u70b9\u662f\u533a\u5757\u94fe\u7684\u901a\u4fe1\u5b9e\u4f53\u3002\u4e00\u4e2a\u201c\u8282\u70b9\u201d\u53ea\u662f\u4e00\u4e2a\u903b\u8f91\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u591a\u4e2a\u8282\u70b9\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7269\u7406\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u3002\u91cd\u8981\u7684\u662f\u8282\u70b9\u5982\u4f55\u5206\u7ec4\u5728\u201c\u4fe1\u4efb\u57df\u201d\u4e2d\uff0c\u5e76\u4e0e\u63a7\u5236\u5b83\u4eec\u7684\u903b\u8f91\u5b9e\u4f53\u76f8\u5173\u8054\u3002 \n\u5b58\u5728\u4e09\u79cd\u7c7b\u578b\u7684\u8282\u70b9\uff1a \n1.  \u5ba2\u6237\u7aef \u6216 \u63d0\u4ea4\u5ba2\u6237\u7aef \uff1a\u5b83\u53d1\u51fa\u5b9e\u9645\u8c03\u7528\u4ea4\u6613\u5230\u80cc\u4e66\u8282\u70b9\uff0c\u5e7f\u64ad\u63d0\u8bae\u4ea4\u6613\u5230\u6392\u5e8f\u670d\u52a1\u3002 \n2.  Peer \uff1a\u5b83\u63d0\u4ea4\u4ea4\u6613\u3001\u7ef4\u62a4\u72b6\u6001\u548c\u4e00\u4e2a\u8d26\u672c\u526f\u672c(\u53c2\u770b1.2\u8282)\u3002\u6b64\u5916\uff0cpeer\u8fd8\u53ef\u4ee5\u5177\u6709\u80cc\u4e66\u8005\u89d2\u8272\u3002 \n3.  \u6392\u5e8f\u670d\u52a1\u8282\u70b9 \u6216 orderer \uff1a\u8fd0\u884c\u901a\u4fe1\u670d\u52a1\u7684\u8282\u70b9\uff0c\u5b9e\u73b0\u4ea4\u4ed8\u62c5\u4fdd\uff0c\u5982\u539f\u5b50\u6216\u5168\u90e8\u6392\u5e8f\u5e7f\u64ad\u3002    1.3.1\u5ba2\u6237\u7aef  \n\u5ba2\u6237\u4ee3\u8868\u4ee3\u8868\u6700\u7ec8\u7528\u6237\u884c\u4e8b\u7684\u5b9e\u4f53\u3002\u5b83\u5fc5\u987b\u8fde\u63a5\u5230peer\u4e0e\u533a\u5757\u94fe\u8fdb\u884c\u901a\u4fe1\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u5176\u9009\u62e9\u7684\u4efb\u4f55peer\u7aef\u3002\u5ba2\u6237\u7aef\u521b\u5efa\u5e76\u8c03\u7528\u4ea4\u6613\u3002    \u5982\u7b2c2\u8282\u8be6\u7ec6\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u5ba2\u6237\u7aef\u540c\u65f6\u4e0epeer\u548c\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u3002    1.3.2 Peer \npeer\u4ee5\u533a\u5757\u7684\u5f62\u5f0f\u4ece\u6392\u5e8f\u670d\u52a1\u63a5\u6536\u987a\u5e8f\u7684\u72b6\u6001\u66f4\u65b0\uff0c\u5e76\u7ef4\u62a4\u72b6\u6001\u548c\u8d26\u672c\u3002    peer\u8fd8\u53ef\u4ee5\u62c5\u5f53 \u80cc\u4e66peer \u7684\u7279\u6b8a\u89d2\u8272(\u6216\u79f0 endorser )\u3002\u80cc\u4e66peer\u7684\u7279\u6b8a\u529f\u80fd\u662f\u9488\u5bf9\u7279\u5b9a\u7684\u94fe\u7801\u8fdb\u884c\u7684\uff0c\u5e76\u4e14\u5305\u542b\u5728\u63d0\u4ea4\u524d\u7684\u80cc\u4e66\u4ea4\u6613\u4e2d\u3002\u6bcf\u4e2a\u94fe\u7801\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u80cc\u4e66\u7b56\u7565\uff0c\u7b56\u7565\u53ef\u4ee5\u6307\u5411\u4e00\u7ec4\u80cc\u4e66peer\u3002\u8be5\u7b56\u7565\u4e3a\u6709\u6548\u7684\u4ea4\u6613\u80cc\u4e66\u5b9a\u4e49\u4e86\u5fc5\u8981\u548c\u5145\u5206\u7684\u6761\u4ef6\uff08\u901a\u5e38\u662f\u4e00\u7ec4\u80cc\u4e66\u7b7e\u540d\uff09\uff0c\u5982\u540e\u9762\u7684\u7b2c2\u548c\u7b2c3\u8282\u6240\u8ff0\u3002\u6709\u4e00\u79cd\u90e8\u7f72\u65b0\u94fe\u7801\u7684\u7279\u6b8a\u90e8\u7f72\u4ea4\u6613\uff0c\u5b83\u7684\uff08\u90e8\u7f72\uff09\u80cc\u4e66\u7b56\u7565\u662f\u6307\u5b9a\u4e3a\u7cfb\u7edf\u94fe\u7801\u7684\u80cc\u4e66\u653f\u7b56\u3002    1.3.3\u6392\u5e8f\u670d\u52a1\u8282\u70b9(Orderer) \n\u6392\u5e8f\u670d\u52a1(orderer)\u662f\u4e00\u4e2a\u901a\u4fe1\u67b6\u6784\uff0c\u5b83\u63d0\u4f9b\u6295\u9012\u62c5\u4fdd\u3002\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\uff1a\u4ece\u4e2d\u5fc3\u5f0f\u670d\u52a1\uff08\u4f8b\u5982\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e2d\u4f7f\u7528\uff09\u5230\u9488\u5bf9\u4e0d\u540c\u7f51\u7edc\u548c\u8282\u70b9\u5931\u6548\u6a21\u578b\u7684\u5206\u5e03\u5f0f\u534f\u8bae\u3002  \u6392\u5e8f\u670d\u52a1\u4e3a\u5ba2\u6237\u548cpeer\u63d0\u4f9b\u5171\u4eab\u7684 \u901a\u4fe1\u901a\u9053 \uff0c\u4e3a\u5305\u542b\u4ea4\u6613\u7684\u6d88\u606f\u63d0\u4f9b\u5e7f\u64ad\u670d\u52a1\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u8be5\u901a\u9053\uff0c\u5e76\u53ef\u4ee5\u5728\u8be5\u901a\u9053\u4e0a\u5e7f\u64ad\u6d88\u606f\uff0c\u7136\u540e\u4f20\u9001\u7ed9\u6240\u6709peer\u3002\u8be5\u901a\u9053\u652f\u6301\u6240\u6709\u6d88\u606f\u7684\u539f\u5b50\u4ea4\u4ed8\uff0c\u4e5f\u5c31\u662f\u5168\u6392\u5e8f\u4ea4\u4ed8\u548c\uff08\u7279\u5b9a\u5b9e\u73b0\uff09\u53ef\u9760\u6027\u7684\u6d88\u606f\u901a\u4fe1\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u901a\u9053\u5411\u6240\u6709\u8fde\u63a5\u7684peer\u8f93\u51fa\u76f8\u540c\u7684\u6d88\u606f\uff0c\u5e76\u4ee5\u76f8\u540c\u7684\u903b\u8f91\u987a\u5e8f\u8f93\u51fa\u5230\u6240\u6709peer\u3002\u8fd9\u79cd\u539f\u5b50\u901a\u4fe1\u4fdd\u8bc1\u4e5f\u88ab\u79f0\u4e3a \u5168\u5e8f\u5e7f\u64ad \u3001 \u539f\u5b50\u5e7f\u64ad \u6216\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0b\u7684 \u5171\u8bc6 \u3002\u901a\u4fe1\u6d88\u606f\u662f\u5305\u542b\u5728\u533a\u5757\u94fe\u72b6\u6001\u4e2d\u7684\u5019\u9009\u4ea4\u6613\u3002    \u5206\u533a(\u6392\u5e8f\u670d\u52a1\u901a\u9053) \u3002\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u652f\u6301\u591a\u901a\u9053\uff0c\u7c7b\u4f3c\u53d1\u5e03/\u8ba2\u9605\uff08pub / sub\uff09\u6d88\u606f\u7cfb\u7edf\u7684\u4e3b\u9898\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u7ed9\u5b9a\u7684\u901a\u9053\uff0c\u7136\u540e\u53ef\u4ee5\u53d1\u9001\u6d88\u606f\u5e76\u83b7\u53d6\u5230\u8fbe\u7684\u6d88\u606f\u3002\u901a\u9053\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5206\u533a - \u8fde\u63a5\u5230\u4e00\u4e2a\u901a\u9053\u7684\u5ba2\u6237\u7aef\u4e0d\u77e5\u9053\u5176\u4ed6\u901a\u9053\u7684\u5b58\u5728\uff0c\u4f46\u5ba2\u6237\u7aef\u53ef\u80fd\u8fde\u63a5\u5230\u591a\u4e2a\u901a\u9053\u3002\u5c3d\u7ba1Hyperledger Fabric\u4e2d\u5305\u542b\u7684\u4e00\u4e9b\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u652f\u6301\u591a\u4e2a\u901a\u9053\uff0c\u4f46\u4e3a\u4e86\u7b80\u5316\u8868\u793a\uff0c\u5728\u672c\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u6392\u5e8f\u670d\u52a1\u5305\u542b\u5355\u4e2a\u901a\u9053/\u4e3b\u9898\u3002    \u6392\u5e8f\u670d\u52a1API \u3002peer\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u63a5\u53e3\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u901a\u9053\u3002\u6392\u5e8f\u670d\u52a1API\u5305\u542b\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\uff08\u5f88\u5e38\u89c1\u7684 \u5f02\u6b65\u4e8b\u4ef6 \uff09\uff1a \n-  broadcast(blob) : \u5ba2\u6237\u7aef\u8c03\u7528\u8fd9\u4e2a\u5e7f\u64ad\u4e8c\u8fdb\u5236\u6d88\u606f blob \u5230\u901a\u9053\u3002\u8fd9\u5728BFT\u4e0a\u4e0b\u6587\u4e2d\u4e5f\u53eb\u505a request(blob) \uff0c\u5f53\u53d1\u9001\u8bf7\u6c42\u5230\u4e00\u4e2a\u670d\u52a1\u65f6\u3002 \n-  deliver(seqno, prevhash, blob) \uff1a(\u7565)  \u8d26\u672c\u548c\u533a\u5757\u4fe1\u606f \u3002\u8d26\u672c(\u53c2\u770b1.2.2\u8282)\u5305\u542b\u6392\u5e8f\u670d\u52a1\u8f93\u51fa\u7684\u6240\u6709\u6570\u636e\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5b83\u662f\u4e00\u7cfb\u5217 deliver(seqno, prevhash, blob) \u4e8b\u4ef6\uff0c\u6839\u636e\u524d\u9762\u6240\u8ff0\u7684 prevhash \u8ba1\u7b97\u5f62\u6210\u4e00\u4e2a\u54c8\u5e0c\u94fe\u3002 \n\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u51fa\u4e8e\u6548\u7387\u539f\u56e0\uff0c\u4e0d\u8f93\u51fa\u5355\u4e2a\u4ea4\u6613\uff08blob\uff09\uff0c\u6392\u5e8f\u670d\u52a1\u5c06\u5bf9blob\u8fdb\u884c\u5206\u7ec4(\u6279\u5904\u7406)\uff0c\u5e76\u5728\u4e00\u4e2a deliver \u4e8b\u4ef6\u8f93\u51fa\u533a\u5757\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6392\u5e8f\u670d\u52a1\u5fc5\u987b\u5f3a\u5236\u548c\u4f20\u8fbe\u6bcf\u4e2a\u5757\u5185\u7684blob\u7684\u786e\u5b9a\u6027\u6392\u5e8f\u3002\u533a\u5757\u4e2d\u7684blob\u6570\u91cf\u53ef\u4ee5\u7531\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u52a8\u6001\u5730\u9009\u62e9\u3002    \u4e0b\u9762\u4e3a\u4fbf\u4e8e\u8868\u8ff0\uff0c\u6211\u4eec\u5b9a\u4e49\u6392\u5e8f\u670d\u52a1\u5c5e\u6027\uff08\u672c\u5c0f\u8282\u7684\u5176\u4f59\u90e8\u5206\uff09\uff0c\u5e76\u89e3\u91ca\u4ea4\u6613\u80cc\u4e66\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002\u5047\u5b9a\u4e00\u4e2ablob\u4ea7\u751f\u4e00\u4e2a deliver \u4e8b\u4ef6\u3002\u4e00\u4e2a\u533a\u5757\u5bf9\u5e94\u4e00\u7ec4\u987a\u5e8f\u7684 deliver \u4e8b\u4ef6\uff08\u6bcf\u4e2ablob\u4e00\u4e2a\u4e8b\u4ef6\uff09\u3002\u533a\u5757\u672c\u8eab\u4e5f\u5bf9\u5e94\u4e00\u4e2a deliver \u4e8b\u4ef6\uff0c\u4f9d\u9760\u6392\u5e8f\u670d\u52a1\uff0c\u591a\u4e2a\u533a\u5757\u987a\u5e8f\u6392\u5217\u7ec4\u6210\u533a\u5757\u94fe\u3002", 
            "title": "1.3\u8282\u70b9"
        }, 
        {
            "location": "/arch-deep-dive_zh/#2", 
            "text": "", 
            "title": "2.\u4ea4\u6613\u80cc\u4e66\u7684\u57fa\u672c\u6d41\u7a0b"
        }, 
        {
            "location": "/arch-deep-dive_zh/#21-peers", 
            "text": "\u4e3a\u4e86\u8c03\u7528\u4e00\u4e2a\u4ea4\u6613\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a PROPOSE \u6d88\u606f\u7ed9\u5b83\u6240\u9009\u62e9\u7684\u4e00\u7ec4\u80cc\u4e66peer\uff08\u53ef\u80fd\u4e0d\u662f\u540c\u4e00\u65f6\u95f4 - \u89c12.1.2\u8282\u548c2.3\u8282\uff09\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684 chaincodeID \u5ba2\u6237\u7aef\u6839\u636e\u80cc\u4e66\u7b56\u7565(\u770b\u7b2c3\u8282)\u53ef\u4ee5\u83b7\u5f97\u4e00\u7ec4\u80cc\u4e66peer\u3002\u4f8b\u5982\uff0c\u6839\u636e\u7ed9\u5b9a chiancodeID \u4ea4\u6613\u53ef\u4ee5\u53d1\u9001\u7ed9\u6240\u6709\u80cc\u4e66peer\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u80cc\u4e66\u4eba\u53ef\u80fd\u4f1a\u79bb\u7ebf\uff0c\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u53cd\u5bf9\u5e76\u9009\u62e9\u4e0d\u8d5e\u6210\u4ea4\u6613\u3002\u53d1\u8d77\u5ba2\u6237\u7aef\u5229\u7528\u76ee\u524d\u53ef\u7528\u7684\u80cc\u4e66\u8282\u70b9\u5c1d\u8bd5\u6ee1\u8db3\u7b56\u7565\u8868\u8fbe\u5f0f\u7684\u8981\u6c42\u3002    \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9996\u5148\u8be6\u7ec6\u63cf\u8ff0PROPOSE\u6d88\u606f\u683c\u5f0f\uff0c\u7136\u540e\u8ba8\u8bba\u63d0\u4ea4\u5ba2\u6237\u7aef\u548c\u80cc\u4e66\u4eba\u4e4b\u95f4\u53ef\u80fd\u7684\u4ea4\u4e92\u6a21\u5f0f\u3002  2.1.1 PROPOSE\u6d88\u606f\u683c\u5f0f  2.1.2 \u6d88\u606f\u6a21\u5f0f", 
            "title": "2.1 \u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u4ea4\u6613\u5e76\u5c06\u5b83\u53d1\u9001\u5230\u9009\u62e9\u7684\u80cc\u4e66peers"
        }, 
        {
            "location": "/arch-deep-dive_zh/#22-peer", 
            "text": "\u4ece\u5ba2\u6237\u7aef\u6536\u5230 PROPOSE,tx,[anchor] \u6d88\u606f\u540e\uff0c\u80cc\u4e66peer epID \u9996\u5148\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7b7e\u540d clientSig \uff0c\u7136\u540e\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6307\u5b9a\u4e86 anchor \uff0c\u5219\u80cc\u4e66peer\u6a21\u62df\u4ea4\u6613\u7684\u65b9\u6cd5\u662f\uff0c\u5728\u672c\u5730KVS\u4e2d\u8bfb\u53d6\u4e0e\u7248\u672c\u53f7 anchor \u76f8\u5339\u914d\u7684keys\u3002 \n\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u5305\u62ec\u80cc\u4e66peer\u4e34\u65f6\u6027\u6267\u884c\u4e00\u4e2a\u4ea4\u6613( txPayload )\uff08\u8c03\u7528\u4ea4\u6613\u4e2d chaincodeID \u6307\u5b9a\u7684\u94fe\u7801\uff09\u548c\u80cc\u4e66peer\u672c\u5730\u4fdd\u5b58\u7684\u72b6\u6001\u526f\u672c\u3002\uff08\u7528\u72b6\u6001\u526f\u672c\u548c\u4e34\u65f6\u4ea4\u6613\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e34\u65f6\u7684\u65b0\u72b6\u6001\uff09 \n\u4f5c\u4e3a\u6267\u884c\u7684\u7ed3\u679c\uff0c\u80cc\u4e66peer\u8ba1\u7b97 \u8bfb\u7248\u672c\u4f9d\u8d56 ( readset )\u548c \u72b6\u6001\u66f4\u65b0 ( writeset )\uff0c\u5728\u6570\u636e\u5e93\u8bed\u8a00\u4e2d\u4e5f\u53eb MVCC+postimage info \u3002 \n\u56de\u60f3\u4e00\u4e0b\u72b6\u6001\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u3002\u6240\u6709\u7684\u952e\u503c\u5bf9\u6761\u76ee\u662f\u7248\u672c\u5316\u7684\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u6761\u76ee\u90fd\u5305\u542b\u6709\u5e8f\u7684\u7248\u672c\u4fe1\u606f\uff0c\u5f53\u901a\u8fc7\u4e00\u4e2akey\u66f4\u65b0\u5e93\u4e2d\u7684\u503c\u65f6\u7248\u672c\u53f7\u4f1a\u589e\u957f\u3002peer\u89e3\u91ca(\u6a21\u62df\u6267\u884c)\u4ea4\u6613\uff0c\u8bb0\u5f55\u94fe\u7801\u8bbf\u95ee\u7684\u952e\u503c\u5bf9\uff0c\u4f46\u4e0d\u4f1a\u771f\u7684\u66f4\u65b0\u72b6\u6001\u3002\u8fdb\u4e00\u6b65\u6765\u8bf4\uff1a\n- \u5728\u80cc\u4e66peer\u6267\u884c\u4ea4\u6613\u524d\uff0c\u7ed9\u5b9a\u72b6\u6001 s \uff0c\u5bf9\u4e8e\u4ea4\u6613\u8bfb\u53d6\u7684\u6bcf\u4e2akey k \uff0c\u952e\u503c\u5bf9 (k,s(k).version) \u88ab\u6dfb\u52a0\u5230 readset \u3002 \n- \u6b64\u5916\uff0c\u5bf9\u4e8e\u6bcf\u4e2akey k \u4ea4\u6613\u66f4\u65b0\u4e3a\u65b0\u503c v' \uff0c\u952e\u503c\u5bf9 (k,v') \u88ab\u6dfb\u52a0\u5230 writeset \u3002\u6216\u8005\uff0c v' \u53ef\u80fd\u662f\u4ee5\u524d\u503c( s(k).value )\u7684\u65b0\u503c\u7684\u589e\u91cf\u3002    \u5982\u679c\u5ba2\u6237\u7aef\u5728 PROPOSE \u6d88\u606f\u4e2d\u6307\u5b9a\u4e86 anchor \uff0c\u5219\u5ba2\u6237\u7aef\u6307\u5b9a\u7684 anchor \u5fc5\u987b\u7b49\u4e8e\u80cc\u4e66peer\u6a21\u62df\u4ea4\u6613\u65f6\u4ea7\u751f\u7684 readset \u3002 \n\u7136\u540e\uff0cpeer\u5c06\u5185\u90e8 tran-proposal \uff08\u5373 tx \uff09\u8f6c\u53d1\u4f5c\u4e3a\u5176\u80cc\u4e66\u4ea4\u6613\u903b\u8f91\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u79f0\u4e3a \u80cc\u4e66\u903b\u8f91 \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpeer\u4e2d\u7684\u80cc\u4e66\u903b\u8f91\u63a5\u53d7 tran-proposal \u5e76\u7b80\u5355\u5730\u7b7e\u540d tran-proposal \u3002\u7136\u800c\uff0c\u80cc\u4e66\u903b\u8f91\u53ef\u80fd\u89e3\u91ca\u4efb\u610f\u51fd\u6570\uff0c\u4f8b\u5982\uff0c\u7528 tran-proposal \u548c tx \u4f5c\u4e3a\u8f93\u5165\u4e0e\u9057\u7559\u7cfb\u7edf\u4ea4\u4e92\u6765\u5224\u65ad\u662f\u5426\u6279\u51c6\u4ea4\u6613\u3002 \n\u5982\u679c\u80cc\u4e66\u903b\u8f91\u51b3\u5b9a\u5bf9\u4e00\u4e2a\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff0c\u5b83\u53d1\u9001 TRANSACTION-ENDORSED, tid, tran-proposal,epSig \u6d88\u606f\u5230\u53d1\u8d77\u5ba2\u6237\u7aef( tx.clientID )\uff0c\u8fd9\u91cc\uff1a\n-  tran-proposal := (epID,tid,chaincodeID,txContentBlob,readset,writeset) \uff0c txContentBlob \u662f\u94fe\u7801/\u4ea4\u6613\u6307\u5b9a\u4fe1\u606f\u3002 \n-  epSig \u662f\u80cc\u4e66peer\u5728 tran-proposal \u4e0a\u7684\u7b7e\u540d    \u53e6\u5916\uff0c\u5982\u679c\u80cc\u4e66\u903b\u8f91\u62d2\u7edd\u5bf9\u4ea4\u6613\u7b7e\u540d\uff0c\u80cc\u4e66\u754c\u9762\u4f1a\u53d1\u9001\u4e00\u4e2a (TRANSACTION-INVALID, tid, REJECTED) \u6d88\u606f\u5230\u53d1\u8d77\u5ba2\u6237\u7aef\u3002 \n\u6ce8\u610f\uff0c\u80cc\u4e66\u8282\u70b9\u5728\u8fd9\u4e00\u6b65\u4e0d\u4f1a\u4fee\u6539\u72b6\u6001\uff0c\u56e0\u4ea4\u6613\u6a21\u62df\u800c\u751f\u6210\u7684\u66f4\u65b0\u4e0d\u4f1a\u5f71\u54cd\u72b6\u6001\u3002", 
            "title": "2.2 \u80cc\u4e66peer\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u5e76\u751f\u6210\u4e00\u4e2a\u80cc\u4e66\u7b7e\u540d"
        }, 
        {
            "location": "/arch-deep-dive_zh/#23", 
            "text": "\u53d1\u8d77\u5ba2\u6237\u7aef\u7b49\u5f85\uff0c\u76f4\u5230\u5b83\u6536\u5230\u201c\u8db3\u591f\u7684\u201d\u6d88\u606f\u548c\u7b7e\u540d( TRANSACTION-ENDORSED, tid, *, * )\uff0c\u5f97\u51fa\u4ea4\u6613\u63d0\u8bae\u88ab\u80cc\u4e66\u7684\u7ed3\u8bba\u3002\u6b63\u59822.1.2\u8282\u6240\u8ba8\u8bba\u7684\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0e\u80cc\u4e66\u4eba\u4ea4\u4e92\u7684\u5f80\u8fd4\u3002    \u201c\u8db3\u591f\u7684\u201d\u7684\u786e\u5207\u6570\u91cf\u53d6\u51b3\u4e8e\u94fe\u7801\u80cc\u4e66\u7b56\u7565\uff08\u53e6\u89c1\u7b2c3\u8282\uff09\u3002\u5982\u679c\u80cc\u4e66\u7b56\u7565\u5f97\u5230\u6ee1\u8db3\uff0c\u4ea4\u6613\u5c31\u83b7\u5f97\u80cc\u4e66; \u6ce8\u610f\u5b83\u8fd8\u6ca1\u6709\u63d0\u4ea4\u3002\u6765\u81ea\u80cc\u4e66peer\u7684\u7b7e\u540d TRANSACTION-ENDORSED \u6d88\u606f\u96c6\u5408\u5c06\u5efa\u7acb\u4e00\u4e2a\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u79f0\u4e3a \u80cc\u4e66 ( endorsement )\u3002  \u5982\u679c\u53d1\u8d77\u5ba2\u6237\u7aef\u6ca1\u6709\u6536\u96c6\u5230\u4ea4\u6613\u7684\u80cc\u4e66\uff0c\u5219\u653e\u5f03\u8be5\u4ea4\u6613\uff0c\u5e76\u9009\u62e9\u7a0d\u540e\u91cd\u8bd5\u3002    \u5bf9\u4e8e\u542b\u6709\u6709\u6548\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u59cb\u4f7f\u7528\u6392\u5e8f\u670d\u52a1\u3002\u53d1\u8d77\u5ba2\u6237\u7aef\u4f7f\u7528 broadcast(blob) \u8c03\u7528\u6392\u5e8f\u670d\u52a1\uff0c\u8fd9\u91cc blob=endorsement \u3002\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u76f4\u63a5\u8c03\u7528\u6392\u5e8f\u670d\u52a1\u7684\u80fd\u529b\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u9009\u62e9\u7684peer\u4ee3\u7406\u5b83\u7684\u5e7f\u64ad\u3002\u8fd9\u6837\u7684peer\u5fc5\u987b\u88ab\u5ba2\u6237\u4fe1\u4efb\uff1a\u4e0d\u4f1a\u4ece endorsement \u5220\u9664\u4efb\u4f55\u6d88\u606f\uff0c\u9664\u975e\u4ea4\u6613\u88ab\u8ba4\u4e3a\u662f\u65e0\u6548\u7684\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u4ee3\u7406peer\u53ef\u80fd\u4e0d\u4f1a\u7f16\u9020\u6709\u6548\u7684endorsement\u3002", 
            "title": "2.3 \u53d1\u8d77\u5ba2\u6237\u7aef\u6536\u96c6\u4ea4\u6613\u80cc\u4e66\u5e76\u5e7f\u64ad\u5230\u6392\u5e8f\u670d\u52a1"
        }, 
        {
            "location": "/arch-deep-dive_zh/#24", 
            "text": "\u5f53\u4e00\u4e2a\u4e8b\u4ef6 deliver(seqno, prevhash, blob) \u53d1\u751f\uff0c\u5e76\u4e14peer\u5df2\u7ecf\u5e94\u7528\u4e86blob\u7684\u5e8f\u5217\u53f7\u4f4e\u4e8e seqno \u7684\u6240\u6709\u7684\u72b6\u6001\u66f4\u65b0\uff0cpeer\u505a\u4e0b\u9762\u8fd9\u4e9b\uff1a\n- \u5b83\u6839\u636e blob.tran-proposal.chaincodeID \u6307\u5411\u7684\u94fe\u7801\u7b56\u7565\u68c0\u67e5 blob.endorsement \u770b\u662f\u5426\u6709\u6548\u3002 \n- \u5728\u4e00\u4e2a\u5178\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u9a8c\u8bc1\u4f9d\u8d56\u5173\u7cfb\uff08blob.endorsement.tran-proposal.readset\uff09\u540c\u65f6\u6ca1\u6709\u88ab\u8fdd\u53cd\u3002\u5728\u66f4\u590d\u6742\u7684\u7528\u4f8b\u4e2d\uff0c\u80cc\u4e66\u7684 tran-proposal \u5b57\u6bb5\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u80cc\u4e66\u7b56\u7565\uff08\u7b2c3\u90e8\u5206\uff09\u6307\u5b9a\u4e86\u72b6\u6001\u5982\u4f55\u6f14\u53d8\u3002 \n  \uff08\u7701\u7565\u4e00\u4e9b\uff09", 
            "title": "2.4 \u6392\u5e8f\u670d\u52a1"
        }, 
        {
            "location": "/arch-deep-dive_zh/#3", 
            "text": "", 
            "title": "3. \u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/arch-deep-dive_zh/#31", 
            "text": "\u4e00\u4e2a \u7b56\u7565 \uff0c\u662f\u5bf9\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u7684\u6761\u4ef6\u3002\u533a\u5757\u94fepeer\u62e5\u6709\u4e00\u5957\u9884\u5148\u8bbe\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u7531\u5b89\u88c5\u7279\u5b9a\u94fe\u7801\u7684 deploy \u4ea4\u6613\u5f15\u5165\u3002\u80cc\u4e66\u7b56\u7565\u53ef\u4ee5\u53c2\u6570\u5316\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u4ee5\u7531 deploy \u4ea4\u6613\u6307\u5b9a\u3002    \u4e3a\u4e86\u4fdd\u8bc1\u533a\u5757\u94fe\u548c\u5b89\u5168\u5c5e\u6027\uff0c\u8fd9\u5957\u8ba4\u53ef\u7b56\u7565\u5e94\u8be5\u662f\u4e00\u7ec4\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u7b56\u7565\uff0c\u786e\u4fdd\u6709\u9650\u7684\u6267\u884c\u65f6\u95f4\uff08\u7ec8\u6b62\uff09\uff0c\u786e\u5b9a\u6027\uff0c\u6027\u80fd\u548c\u5b89\u5168\u4fdd\u8bc1\u3002    \u4e0d\u5141\u8bb8\u52a8\u6001\u589e\u52a0\u80cc\u4e66\u7b56\u7565\uff0c\u65e5\u540e\u53ef\u4ee5\u4e88\u4ee5\u652f\u6301\u3002", 
            "title": "3.1 \u80cc\u4e66\u7b56\u7565\u89c4\u8303"
        }, 
        {
            "location": "/arch-deep-dive_zh/#32", 
            "text": "\u53ea\u6709\u901a\u8fc7\u7b56\u7565\u80cc\u4e66\uff0c\u4ea4\u6613\u624d\u88ab\u5ba3\u5e03\u6709\u6548\u3002\u94fe\u7801\u7684\u8c03\u7528\u4ea4\u6613\u9996\u5148\u5fc5\u987b\u83b7\u5f97\u94fe\u7801\u7b56\u7565\u7684\u80cc\u4e66\uff0c\u5426\u5219\u5c06\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u3002\u8fd9\u662f\u901a\u8fc7\u53d1\u8d77\u5ba2\u6237\u7aef\u548cpeer\u4e4b\u95f4\u7684\u4ea4\u4e92\u6765\u8fdb\u884c\u7684\uff0c\u5982\u7b2c2\u8282\u6240\u8ff0\u3002    \u5f62\u5f0f\u4e0a\uff0c\u80cc\u4e66\u7b56\u7565\u662f\u5bf9\u80cc\u4e66\u7684\u4e00\u4e2a\u5224\u65ad\uff0c\u5e76\u53ef\u80fd\u8fdb\u4e00\u6b65\u9648\u8ff0\u8bc4\u4f30\u4e3a\u201c\u771f\u201d\u6216\u201c\u5047\u201d\u3002\u5bf9\u4e8e\u90e8\u7f72\u4ea4\u6613\uff0c\u6839\u636e\u7cfb\u7edf\u8303\u56f4\u7684\u7b56\u7565\uff08\u4f8b\u5982\u4ece\u7cfb\u7edf\u94fe\u7801\uff09\u83b7\u5f97\u80cc\u4e66\u3002  (\u7701\u7565\u4e00\u4e9b)", 
            "title": "3.2 \u5bf9\u80cc\u4e66\u7b56\u7565\u7684\u4ea4\u6613\u8bc4\u4f30"
        }, 
        {
            "location": "/arch-deep-dive_zh/#_2", 
            "text": "Hyperledger Fabric \u901a\u9053 \u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u7279\u5b9a\u7f51\u7edc\u6210\u5458\u4e4b\u95f4\u901a\u4fe1\u7684\u79c1\u6709\u201c\u5b50\u7f51\u201d\uff0c\u7528\u4e8e\u8fdb\u884c\u79c1\u4e0b\u4ea4\u6613\u548c\u4fdd\u5bc6\u4ea4\u6613\u3002\u901a\u9053\u662f\u7531\u6210\u5458\uff08\u7ec4\u7ec7\uff09\u3001\u6bcf\u4e2a\u6210\u5458\u7684\u951a\u70b9\u3001\u5171\u4eab\u8d26\u672c\u3001\u94fe\u7801\u5e94\u7528\u7a0b\u5e8f\u548c\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u5b9a\u4e49\u7684\u3002\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e2a\u4ea4\u6613\u90fd\u5728\u4e00\u4e2a\u901a\u9053\u4e0a\u6267\u884c\uff0c\u6bcf\u4e2a\u901a\u4fe1\u65b9\u90fd\u5fc5\u987b\u7ecf\u8fc7\u8ba4\u8bc1\u548c\u6388\u6743\u624d\u80fd\u5728\u8be5\u901a\u9053\u4e0a\u8fdb\u884c\u4ea4\u6613\u3002\u6bcf\u4e2a\u52a0\u5165\u901a\u9053\u7684\u8282\u70b9\u90fd\u6709\u81ea\u5df1\u7684\u8eab\u4efd\uff0c\u8eab\u4efd\u7531\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005\uff08MSP\uff09\u63d0\u4f9b\uff0c\u5b83\u5c06\u6bcf\u4e2a\u8282\u70b9\u8ba4\u8bc1\u7ed9\u901a\u9053\u8282\u70b9\u548c\u670d\u52a1\u3002  \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u9053\uff0c\u5ba2\u6237\u7aefSDK\u8c03\u7528\u914d\u7f6e\u7cfb\u7edf\u94fe\u7801\u5e76\u5f15\u7528\u5c5e\u6027\uff0c\u4f8b\u5982 \u951a\u70b9 peer \u548c \u6210\u5458\uff08\u7ec4\u7ec7\uff09 \u3002\u8be5\u8bf7\u6c42\u4e3a\u901a\u9053\u8d26\u672c\u521b\u5efa \u521d\u59cb\u533a\u5757 \uff0c\u5b58\u50a8\u6709\u5173\u901a\u9053\u7b56\u7565\u3001\u6210\u5458\u548c\u951a\u70b9\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5728\u5c06\u65b0\u6210\u5458\u6dfb\u52a0\u5230\u73b0\u6709\u901a\u9053\u65f6\uff0c\u8fd9\u4e2a\u521d\u59cb\u533a\u5757\uff08\u8fd8\u53ef\u80fd\u6709\u6700\u8fd1\u7684\u91cd\u65b0\u914d\u7f6e\u533a\u5757\uff09\u5c06\u4e0e\u65b0\u6210\u5458\u5171\u4eab\u3002  \u6ce8\u610f\uff1a  \u6709\u5173\u914d\u7f6e\u4ea4\u6613\u7684\u5c5e\u6027\u548c\u539f\u59cb\u7ed3\u6784\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u901a\u9053\u914d\u7f6e\uff08configtx\uff09 \u90e8\u5206\u3002  \u5bf9\u901a\u9053\u4e0a\u6bcf\u4e2a\u6210\u5458\u7684 \u9886\u5bfcpeer \u7684\u9009\u62e9\uff0c\u51b3\u5b9a\u54ea\u4e2apeer\u4ee3\u8868\u6210\u5458\u4e0e\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u3002\u5982\u679c\u6ca1\u6709\u786e\u5b9a\u9886\u5bfc\u8005\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7b97\u6cd5\u6765\u786e\u5b9a\u9886\u5bfc\u8005\u3002\u5171\u8bc6\u670d\u52a1\u5728\u4e00\u4e2a\u533a\u5757\u5185\u5bf9\u4ea4\u6613\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u5c06\u533a\u5757\u4f20\u9012\u7ed9\u6bcf\u4e2a\u9886\u5bfcpeer\uff0c\u8be5peer\u518d\u5c06\u533a\u5757\u5206\u53d1\u81ea\u5df1\u7684\u6210\u5458peer\uff0c\u901a\u8fc7 gossip \u534f\u8bae\u5e7f\u64ad\u5230\u6574\u4e2a\u901a\u9053\u3002  \u5c3d\u7ba1\u4efb\u4f55\u4e00\u4e2a\u951a\u70b9peer\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ef4\u62a4\u591a\u4e2a\u8d26\u672c\uff0c\u4f46\u6ca1\u6709\u8d26\u672c\u6570\u636e\u53ef\u4ee5\u4ece\u4e00\u4e2a\u901a\u9053\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u901a\u9053\u3002\u6309\u901a\u9053\u5212\u5206\u7684\u8d26\u672c\u662f\u901a\u8fc7\u914d\u7f6e\u94fe\u7801\u3001\u8eab\u4efd\u6210\u5458\u670d\u52a1\u548cgossip\u6570\u636e\u4f20\u64ad\u534f\u8bae\u6765\u5b9a\u4e49\u548c\u5b9e\u73b0\u7684\u3002\u5305\u62ec\u4ea4\u6613\u3001\u8d26\u672c\u72b6\u6001\u548c\u901a\u9053\u6210\u5458\u4fe1\u606f\u5728\u5185\u7684\u6570\u636e\u4f20\u64ad\u4ec5\u9650\u4e8e\u5728\u901a\u9053\u4e0a\u5177\u6709\u53ef\u9a8c\u8bc1\u6210\u5458\u8d44\u683c\u7684peer\u3002\u901a\u8fc7\u901a\u9053\u9694\u79bbpeer\u548c\u8d26\u672c\u6570\u636e\uff0c\u5141\u8bb8\u9700\u8981\u79c1\u6709\u548c\u4fdd\u5bc6\u4ea4\u6613\u7684\u7f51\u7edc\u6210\u5458\u5728\u540c\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u4e0a\u4e0e\u5546\u4e1a\u7ade\u4e89\u5bf9\u624b\u548c\u5176\u4ed6\u53d7\u9650\u5236\u6210\u5458\u5171\u5b58\u3002", 
            "title": "\u901a\u9053"
        }, 
        {
            "location": "/txflow_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYueling Liang\n\n\n\n\n\n\n\n\n\n\nThis document outlines the transactional mechanics that take place during a standard asset exchange. The scenario includes two clients, A and B, who are buying and selling radishes. They each have a peer on the network through which they send their transactions and interact with the ledger.\n\n\n\u672c\u6587\u6982\u8ff0\u4e86\u8d44\u4ea7\u4ea4\u6613\u8fc7\u7a0b\u4e2d\u7684\u4e8b\u52a1\u673a\u5236\u3002\u8be5\u573a\u666f\u5305\u542b\u5ba2\u6237A\u548cB\uff0c\u5728\u8fdb\u884c\u841d\u535c\u4e70\u5356\u3002\u4ed6\u4eec\u5404\u81ea\u6709\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u901a\u8fc7\u8282\u70b9\u4ed6\u4eec\u53d1\u9001\u4ea4\u6613\u5e76\u548c\u8d26\u672c\u8fdb\u884c\u4ea4\u4e92\u3002\n\n\n\n\n\u5047\u8bbe\n\n\n(Assumptions)\n\n\nThis flow assumes that a channhttp://el is set up and running. The application user has registered and enrolled with the organization\u2019s certificate authority (CA) and received back necessary cryptographic material, which is used to authenticate to the network.\n\n\n\u8be5\u6d41\u7a0b\u5047\u8bbe\u901a\u9053\u5df2\u5efa\u7acb\u5e76\u6b63\u5e38\u8fd0\u884c\u3002\u7528\u6237\u5df2\u6ce8\u518c\u5e76\u4f7f\u7528\u7ec4\u7ec7\u8ba4\u8bc1\u6388\u6743\uff08CA\uff09\u767b\u8bb0\uff0c\u540c\u65f6\u83b7\u5f97\u5fc5\u8981\u7684\u52a0\u5bc6\u6750\u6599\u6765\u8fdb\u884c\u7f51\u7edc\u9a8c\u8bc1\u3002\n\n\nThe chaincode (containing a set of key value pairs representing the initial state of the radish market) is installed on the peers and instantiated on the channel. The chaincode contains logic defining a set of transaction instructions and the agreed upon price for a radish. An endorsement policy has also been set for this chaincode, stating that both peerA and peerB must endorse any transaction.\n\n\n\u94fe\u7801\uff08\u5305\u542b\u4e00\u7ec4\u4ee3\u8868\u841d\u535c\u5e02\u573a\u521d\u59cb\u72b6\u6001\u7684\u952e\u503c\u5bf9\uff09\u88ab\u5b89\u88c5\u5728\u8282\u70b9\u4e0a\u5e76\u5728\u901a\u9053\u4e0a\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002\u94fe\u7801\u5305\u542b\u5b9a\u4e49\u4ea4\u6613\u6307\u4ee4\u96c6\u5408\u7684\u903b\u8f91\u548c\u8fbe\u6210\u4e00\u81f4\u7684\u841d\u535c\u4ef7\u683c\u3002\u8bbe\u7f6e\u4e00\u9879\u9488\u5bf9\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u8868\u660e\u8282\u70b9A\u548cB\u90fd\u5fc5\u987b\u5bf9\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u3002\n\n\n\n\n1. \u5ba2\u6237A\u53d1\u8d77\u4ea4\u6613\n\n\n(Client A initiates a transaction)\n\n\nWhat\u2019s happening? - Client A is sending a request to purchase radishes. The request targets peerA and peerB, who are respectively representative of Client A and Client B. The endorsement policy states that both peers must endorse any transaction, therefore the request goes to peerA and peerB.\n\n\n\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f- \u5ba2\u6237A\u53d1\u51fa\u841d\u535c\u8d2d\u4e70\u8bf7\u6c42\u3002\u8bf7\u6c42\u76ee\u6807\u8282\u70b9A\u548cB\uff0c\u5206\u522b\u4ee3\u8868\u5ba2\u6237A\u548cB\u3002\u80cc\u4e66\u7b56\u7565\u8868\u660e\u4e24\u4e2a\u8282\u70b9\u5fc5\u987b\u4e3a\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff0c\u56e0\u800c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u8282\u70b9A\u548cB\u3002\n\n\nNext, the transaction proposal is constructed. An application leveraging a supported SDK (node, java, python) utilizes one of the available API\u2019s which generates a transaction proposal. The proposal is a request to invoke a chaincode function so that data can be read and/or written to the ledger (i.e. write new key value pairs for the assets). The SDK serves as a shim to package the transaction proposal into the properly architected format (protocol buffer over gRPC) and takes the user\u2019s cryptographic credentials to produce a unique signature for this transaction proposal.\n\n\n\u63a5\u4e0b\u6765\u6784\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u4e00\u4e2a\u4ee5\u53ef\u7528SDK\uff08node, java, python\uff09\u4e3a\u652f\u6491\u7684\u5e94\u7528\u5229\u7528\u6709\u6548\u7684API\u6765\u751f\u6210\u4ea4\u6613\u63d0\u6848\u3002\u8fd9\u9879\u63d0\u6848\u4f5c\u4e3a\u8c03\u7528\u94fe\u7801\u529f\u80fd\u7684\u8bf7\u6c42\u6765\u5b8c\u6210\u6570\u636e\u5230\u8d26\u672c\u7684\u8bfb\u53d6\u548c/\u6216\u5199\u5165\uff08\u5373\u4e3a\u8d44\u4ea7\u5199\u5165\u65b0\u7684\u952e\u503c\u5bf9\uff09\u3002SDK\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a\u628a\u4ea4\u6613\u63d0\u6848\u5305\u88c5\u6210\u5408\u9002\u67b6\u6784\u683c\u5f0f\u7684\u5e93\uff08\u57fa\u4e8egRPC\u7684\u534f\u8bae\u7f13\u51b2\uff09\uff1b\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u8bc1\u4e66\u6765\u521b\u5efa\u4ea4\u6613\u63d0\u6848\u7684\u552f\u4e00\u7b7e\u540d\u3002\n\n\n\n\n2. \u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u7b7e\u540d\n\u6267\u884c\u4ea4\u6613\n\n\n(Endorsing peers verify signature \n execute the transaction)\n\n\nThe endorsing peers verify the signature (using MSP) and determine if the submitter is properly authorized to perform the proposed operation (using the channel\u2019s ACL). The endorsing peers take the transaction proposal arguments as inputs and execute them against the current state database to produce transaction results including a response value, read set, and write set. No updates are made to the ledger at this point. The set of these values, along with the endorsing peer\u2019s signature and a YES/NO endorsement statement is passed back as a \u201cproposal response\u201d to the SDK which parses the payload for the application to consume.\n{The MSP is a local process running on the peers which allows them to verify transaction \nrequests arriving from clients and to sign transaction results(endorsements). The ACL (Access Control List) is defined at channel creation time, and determines which peers and end users are permitted to perform certain actions.}\n\n\n\u80cc\u4e66\u8282\u70b9\u4f7f\u7528MSP\u9a8c\u8bc1\u7b7e\u540d\u5e76\u786e\u5b9a\u8bf7\u6c42\u8005\u662f\u5426\u88ab\u5408\u7406\u6388\u6743\u8fdb\u884c\u63d0\u6848\u7684\u64cd\u4f5c\uff08\u4f7f\u7528\u901a\u9053ACL\uff09\u3002\u80cc\u4e66\u8282\u70b9\u4ee5\u4ea4\u6613\u63d0\u6848\u51ed\u8bc1\u4e3a\u8f93\u5165\uff0c\u57fa\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u6267\u884c\u6765\u751f\u6210\u4ea4\u6613\u7ed3\u679c\uff0c\u8f93\u51fa\u5305\u62ec\u53cd\u9988\u503c\u3001\u8bfb\u53d6\u96c6\u5408\u548c\u5199\u5165\u96c6\u5408\u3002\u622a\u6b62\u73b0\u5728\u8d26\u672c\u8fd8\u672a\u8fdb\u884c\u66f4\u65b0\u3002\u8fd9\u4e9b\u503c\u7684\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7684\u7b7e\u540d\u4ee5\u53ca\u662f/\u5426\u7684\u80cc\u4e66\u58f0\u660e\u4e00\u540c\u4f5c\u4e3a\u201c\u63d0\u6848\u53cd\u9988\u201d\u88ab\u4f20\u8f93\u56de\u5230SDK\uff0cSDK\u5bf9\u5e94\u7528\u6d88\u8017\u7684\u8f7d\u8377\u8fdb\u884c\u89e3\u6790\u3002\n\n\n\n\n3. \u5ba1\u67e5\u63d0\u6848\u53cd\u9988\n\n\n(Proposal responses are inspected)\n\n\nThe application verifies the endorsing peer signatures and compares the proposal responses (link to glossary term which will contain a representation of the payload) to determine if the proposal responses are the same and if the specified endorsement policy has been fulfilled (i.e. did peerA and peerB both endorse). The architecture is such that even if an application chooses not to inspect responses or otherwise forwards an unendorsed transaction, the policy will still be enforced by peers and upheld at the commit validation phase.\n\u5e94\u7528\u5bf9\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6bd4\u8f83\u63d0\u6848\u53cd\u9988\uff08\u94fe\u63a5\u5230\u5305\u542b\u8f7d\u8377\u4ee3\u7406\u7684\u672f\u8bed\u6761\u6b3e\uff09\u6765\u51b3\u5b9a\u662f\u5426\u4e00\u81f4\uff0c\u6307\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\u662f\u5426\u88ab\u6267\u884c\uff08\u5373\u8282\u70b9A\u548cB\u90fd\u8fdb\u884c\u4e86\u80cc\u4e66\uff09\u3002\u8fd9\u79cd\u67b6\u6784\u53ef\u4ee5\u4fdd\u8bc1\u5373\u4f7f\u4e00\u4e2a\u5e94\u7528\u9009\u62e9\u4e0d\u8fdb\u884c\u53cd\u9988\u5ba1\u67e5\u6216\u8005\u8f6c\u53d1\u4e86\u6ca1\u6709\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u80cc\u4e66\u7b56\u7565\u4f9d\u7136\u4f1a\u88ab\u8282\u70b9\u6267\u884c\u5e76\u5728\u9a8c\u8bc1\u63d0\u4ea4\u9636\u6bb5\u7ef4\u6301\u3002\n\n\n\n\n4. \u5ba2\u6237\u7ec4\u5408\u4ea4\u6613\u80cc\u4e66\n\n\n(Client assembles endorsements into a transaction)\n\n\nThe application \u201cbroadcasts\u201d the transaction proposal and response within a \u201ctransaction message\u201d to the Ordering Service. The transaction will contain the read/write sets, the endorsing peers signatures and the Channel ID. The Ordering Service does not read the transaction details, it simply receives transactions from all channels in the network, orders them chronologically by channel, and creates blocks of transactions per channel.\n\n\n\u5e94\u7528\u5bf9\u4ea4\u6613\u63d0\u6848\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ee5\u201c\u4ea4\u6613\u4fe1\u606f\u201d\u5bf9\u8ba2\u8d2d\u670d\u52a1\u5b9e\u73b0\u53cd\u9988\u3002\u4ea4\u6613\u5305\u542b\u8bfb/\u5199\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u548c\u901a\u9053ID\u3002\u8ba2\u8d2d\u670d\u52a1\u4e0d\u8bfb\u53d6\u4ea4\u6613\u7ec6\u8282\uff0c\u53ea\u662f\u4ece\u7f51\u7edc\u4e2d\u6240\u6709\u901a\u9053\u63a5\u6536\u4ea4\u6613\uff0c\u6839\u636e\u6bcf\u4e2a\u901a\u9053\u6309\u65f6\u95f4\u987a\u5e8f\u8c03\u7528\uff0c\u521b\u5efa\u6bcf\u4e2a\u901a\u9053\u7684\u4ea4\u6613\u533a\u5757\u3002\n\n\n\n\n5. \u4ea4\u6613\u9a8c\u8bc1\u548c\u63d0\u4ea4\n\n\n(Transaction is validated and committed)\n\n\nThe blocks of transactions are \u201cdelivered\u201d to all peers on the channel. The transactions within the block are validated to ensure endorsement policy is fulfilled and to ensure that there have been no changes to ledger state for read set variables since the read set was generated by the transaction execution. Transactions in the block are tagged as being valid or invalid.\n\n\n\u4ea4\u6613\u533a\u5757\u88ab\u53d1\u5e03\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u9a8c\u8bc1\u6765\u786e\u4fdd\u80cc\u4e66\u7b56\u7565\u88ab\u6267\u884c\u5e76\u4e14\u8d26\u672c\u7684\u8bfb\u53d6\u96c6\u5408\u53d8\u91cf\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u4e3a\u8bfb\u53d6\u96c6\u5408\u662f\u6267\u884c\u4ea4\u6613\u751f\u6210\u7684\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u6807\u8bb0\u4e3a\u6709\u6548\u6216\u65e0\u6548\u3002\n\n\n\n\n6. \u8d26\u672c\u66f4\u65b0\n\n\n(Ledger updated)\n\n\nEach peer appends the block to the channel\u2019s chain, and for each valid transaction the write sets are committed to current state database. An event is emitted, to notify the client application that the transaction (invocation) has been immutably appended to the chain, as well as notification of whether the transaction was validated or invalidated.\n\n\n\u6bcf\u4e2a\u8282\u70b9\u90fd\u628a\u533a\u5757\u8ffd\u52a0\u5230\u901a\u9053\u7684\u94fe\u4e2d\uff0c\u5bf9\u6bcf\u9879\u6709\u6548\u4ea4\u6613\uff0c\u5199\u5165\u96c6\u5408\u88ab\u63d0\u4ea4\u5230\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u3002\u53d1\u51fa\u4e8b\u52a1\u901a\u77e5\u5ba2\u6237\u7aef\u5e94\u7528\uff0c\u4ea4\u6613\uff08\u8c03\u7528\uff09\u88ab\u6c38\u4e45\u8ffd\u52a0\u5230\u94fe\u4e2d\u4ee5\u53ca\u4ea4\u6613\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u7684\u3002\n\n\nNote: See the Chaincode Swimlanes diagram to better understand the server side flow and the protobuffers.\n\u6ce8\u610f\uff1a\u53c2\u7167\u94fe\u7801\u6cf3\u9053\u56fe\u4ee5\u83b7\u5f97\u670d\u52a1\u7aef\u6d41\u7a0b\u548c\u534f\u8bae\u7f13\u51b2\u7684\u66f4\u597d\u7406\u89e3\u3002", 
            "title": "\u4ea4\u6613\u6d41\u7a0b"
        }, 
        {
            "location": "/txflow_zh/#_1", 
            "text": "(Assumptions)  This flow assumes that a channhttp://el is set up and running. The application user has registered and enrolled with the organization\u2019s certificate authority (CA) and received back necessary cryptographic material, which is used to authenticate to the network.  \u8be5\u6d41\u7a0b\u5047\u8bbe\u901a\u9053\u5df2\u5efa\u7acb\u5e76\u6b63\u5e38\u8fd0\u884c\u3002\u7528\u6237\u5df2\u6ce8\u518c\u5e76\u4f7f\u7528\u7ec4\u7ec7\u8ba4\u8bc1\u6388\u6743\uff08CA\uff09\u767b\u8bb0\uff0c\u540c\u65f6\u83b7\u5f97\u5fc5\u8981\u7684\u52a0\u5bc6\u6750\u6599\u6765\u8fdb\u884c\u7f51\u7edc\u9a8c\u8bc1\u3002  The chaincode (containing a set of key value pairs representing the initial state of the radish market) is installed on the peers and instantiated on the channel. The chaincode contains logic defining a set of transaction instructions and the agreed upon price for a radish. An endorsement policy has also been set for this chaincode, stating that both peerA and peerB must endorse any transaction.  \u94fe\u7801\uff08\u5305\u542b\u4e00\u7ec4\u4ee3\u8868\u841d\u535c\u5e02\u573a\u521d\u59cb\u72b6\u6001\u7684\u952e\u503c\u5bf9\uff09\u88ab\u5b89\u88c5\u5728\u8282\u70b9\u4e0a\u5e76\u5728\u901a\u9053\u4e0a\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002\u94fe\u7801\u5305\u542b\u5b9a\u4e49\u4ea4\u6613\u6307\u4ee4\u96c6\u5408\u7684\u903b\u8f91\u548c\u8fbe\u6210\u4e00\u81f4\u7684\u841d\u535c\u4ef7\u683c\u3002\u8bbe\u7f6e\u4e00\u9879\u9488\u5bf9\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u8868\u660e\u8282\u70b9A\u548cB\u90fd\u5fc5\u987b\u5bf9\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u3002", 
            "title": "\u5047\u8bbe"
        }, 
        {
            "location": "/txflow_zh/#1-a", 
            "text": "(Client A initiates a transaction)  What\u2019s happening? - Client A is sending a request to purchase radishes. The request targets peerA and peerB, who are respectively representative of Client A and Client B. The endorsement policy states that both peers must endorse any transaction, therefore the request goes to peerA and peerB.  \u53d1\u751f\u4e86\u4ec0\u4e48\uff1f- \u5ba2\u6237A\u53d1\u51fa\u841d\u535c\u8d2d\u4e70\u8bf7\u6c42\u3002\u8bf7\u6c42\u76ee\u6807\u8282\u70b9A\u548cB\uff0c\u5206\u522b\u4ee3\u8868\u5ba2\u6237A\u548cB\u3002\u80cc\u4e66\u7b56\u7565\u8868\u660e\u4e24\u4e2a\u8282\u70b9\u5fc5\u987b\u4e3a\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff0c\u56e0\u800c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u8282\u70b9A\u548cB\u3002  Next, the transaction proposal is constructed. An application leveraging a supported SDK (node, java, python) utilizes one of the available API\u2019s which generates a transaction proposal. The proposal is a request to invoke a chaincode function so that data can be read and/or written to the ledger (i.e. write new key value pairs for the assets). The SDK serves as a shim to package the transaction proposal into the properly architected format (protocol buffer over gRPC) and takes the user\u2019s cryptographic credentials to produce a unique signature for this transaction proposal.  \u63a5\u4e0b\u6765\u6784\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u4e00\u4e2a\u4ee5\u53ef\u7528SDK\uff08node, java, python\uff09\u4e3a\u652f\u6491\u7684\u5e94\u7528\u5229\u7528\u6709\u6548\u7684API\u6765\u751f\u6210\u4ea4\u6613\u63d0\u6848\u3002\u8fd9\u9879\u63d0\u6848\u4f5c\u4e3a\u8c03\u7528\u94fe\u7801\u529f\u80fd\u7684\u8bf7\u6c42\u6765\u5b8c\u6210\u6570\u636e\u5230\u8d26\u672c\u7684\u8bfb\u53d6\u548c/\u6216\u5199\u5165\uff08\u5373\u4e3a\u8d44\u4ea7\u5199\u5165\u65b0\u7684\u952e\u503c\u5bf9\uff09\u3002SDK\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a\u628a\u4ea4\u6613\u63d0\u6848\u5305\u88c5\u6210\u5408\u9002\u67b6\u6784\u683c\u5f0f\u7684\u5e93\uff08\u57fa\u4e8egRPC\u7684\u534f\u8bae\u7f13\u51b2\uff09\uff1b\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u8bc1\u4e66\u6765\u521b\u5efa\u4ea4\u6613\u63d0\u6848\u7684\u552f\u4e00\u7b7e\u540d\u3002", 
            "title": "1. \u5ba2\u6237A\u53d1\u8d77\u4ea4\u6613"
        }, 
        {
            "location": "/txflow_zh/#2", 
            "text": "(Endorsing peers verify signature   execute the transaction)  The endorsing peers verify the signature (using MSP) and determine if the submitter is properly authorized to perform the proposed operation (using the channel\u2019s ACL). The endorsing peers take the transaction proposal arguments as inputs and execute them against the current state database to produce transaction results including a response value, read set, and write set. No updates are made to the ledger at this point. The set of these values, along with the endorsing peer\u2019s signature and a YES/NO endorsement statement is passed back as a \u201cproposal response\u201d to the SDK which parses the payload for the application to consume.\n{The MSP is a local process running on the peers which allows them to verify transaction \nrequests arriving from clients and to sign transaction results(endorsements). The ACL (Access Control List) is defined at channel creation time, and determines which peers and end users are permitted to perform certain actions.}  \u80cc\u4e66\u8282\u70b9\u4f7f\u7528MSP\u9a8c\u8bc1\u7b7e\u540d\u5e76\u786e\u5b9a\u8bf7\u6c42\u8005\u662f\u5426\u88ab\u5408\u7406\u6388\u6743\u8fdb\u884c\u63d0\u6848\u7684\u64cd\u4f5c\uff08\u4f7f\u7528\u901a\u9053ACL\uff09\u3002\u80cc\u4e66\u8282\u70b9\u4ee5\u4ea4\u6613\u63d0\u6848\u51ed\u8bc1\u4e3a\u8f93\u5165\uff0c\u57fa\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u6267\u884c\u6765\u751f\u6210\u4ea4\u6613\u7ed3\u679c\uff0c\u8f93\u51fa\u5305\u62ec\u53cd\u9988\u503c\u3001\u8bfb\u53d6\u96c6\u5408\u548c\u5199\u5165\u96c6\u5408\u3002\u622a\u6b62\u73b0\u5728\u8d26\u672c\u8fd8\u672a\u8fdb\u884c\u66f4\u65b0\u3002\u8fd9\u4e9b\u503c\u7684\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7684\u7b7e\u540d\u4ee5\u53ca\u662f/\u5426\u7684\u80cc\u4e66\u58f0\u660e\u4e00\u540c\u4f5c\u4e3a\u201c\u63d0\u6848\u53cd\u9988\u201d\u88ab\u4f20\u8f93\u56de\u5230SDK\uff0cSDK\u5bf9\u5e94\u7528\u6d88\u8017\u7684\u8f7d\u8377\u8fdb\u884c\u89e3\u6790\u3002", 
            "title": "2. \u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u7b7e\u540d&amp;\u6267\u884c\u4ea4\u6613"
        }, 
        {
            "location": "/txflow_zh/#3", 
            "text": "(Proposal responses are inspected)  The application verifies the endorsing peer signatures and compares the proposal responses (link to glossary term which will contain a representation of the payload) to determine if the proposal responses are the same and if the specified endorsement policy has been fulfilled (i.e. did peerA and peerB both endorse). The architecture is such that even if an application chooses not to inspect responses or otherwise forwards an unendorsed transaction, the policy will still be enforced by peers and upheld at the commit validation phase.\n\u5e94\u7528\u5bf9\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6bd4\u8f83\u63d0\u6848\u53cd\u9988\uff08\u94fe\u63a5\u5230\u5305\u542b\u8f7d\u8377\u4ee3\u7406\u7684\u672f\u8bed\u6761\u6b3e\uff09\u6765\u51b3\u5b9a\u662f\u5426\u4e00\u81f4\uff0c\u6307\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\u662f\u5426\u88ab\u6267\u884c\uff08\u5373\u8282\u70b9A\u548cB\u90fd\u8fdb\u884c\u4e86\u80cc\u4e66\uff09\u3002\u8fd9\u79cd\u67b6\u6784\u53ef\u4ee5\u4fdd\u8bc1\u5373\u4f7f\u4e00\u4e2a\u5e94\u7528\u9009\u62e9\u4e0d\u8fdb\u884c\u53cd\u9988\u5ba1\u67e5\u6216\u8005\u8f6c\u53d1\u4e86\u6ca1\u6709\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u80cc\u4e66\u7b56\u7565\u4f9d\u7136\u4f1a\u88ab\u8282\u70b9\u6267\u884c\u5e76\u5728\u9a8c\u8bc1\u63d0\u4ea4\u9636\u6bb5\u7ef4\u6301\u3002", 
            "title": "3. \u5ba1\u67e5\u63d0\u6848\u53cd\u9988"
        }, 
        {
            "location": "/txflow_zh/#4", 
            "text": "(Client assembles endorsements into a transaction)  The application \u201cbroadcasts\u201d the transaction proposal and response within a \u201ctransaction message\u201d to the Ordering Service. The transaction will contain the read/write sets, the endorsing peers signatures and the Channel ID. The Ordering Service does not read the transaction details, it simply receives transactions from all channels in the network, orders them chronologically by channel, and creates blocks of transactions per channel.  \u5e94\u7528\u5bf9\u4ea4\u6613\u63d0\u6848\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ee5\u201c\u4ea4\u6613\u4fe1\u606f\u201d\u5bf9\u8ba2\u8d2d\u670d\u52a1\u5b9e\u73b0\u53cd\u9988\u3002\u4ea4\u6613\u5305\u542b\u8bfb/\u5199\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u548c\u901a\u9053ID\u3002\u8ba2\u8d2d\u670d\u52a1\u4e0d\u8bfb\u53d6\u4ea4\u6613\u7ec6\u8282\uff0c\u53ea\u662f\u4ece\u7f51\u7edc\u4e2d\u6240\u6709\u901a\u9053\u63a5\u6536\u4ea4\u6613\uff0c\u6839\u636e\u6bcf\u4e2a\u901a\u9053\u6309\u65f6\u95f4\u987a\u5e8f\u8c03\u7528\uff0c\u521b\u5efa\u6bcf\u4e2a\u901a\u9053\u7684\u4ea4\u6613\u533a\u5757\u3002", 
            "title": "4. \u5ba2\u6237\u7ec4\u5408\u4ea4\u6613\u80cc\u4e66"
        }, 
        {
            "location": "/txflow_zh/#5", 
            "text": "(Transaction is validated and committed)  The blocks of transactions are \u201cdelivered\u201d to all peers on the channel. The transactions within the block are validated to ensure endorsement policy is fulfilled and to ensure that there have been no changes to ledger state for read set variables since the read set was generated by the transaction execution. Transactions in the block are tagged as being valid or invalid.  \u4ea4\u6613\u533a\u5757\u88ab\u53d1\u5e03\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u9a8c\u8bc1\u6765\u786e\u4fdd\u80cc\u4e66\u7b56\u7565\u88ab\u6267\u884c\u5e76\u4e14\u8d26\u672c\u7684\u8bfb\u53d6\u96c6\u5408\u53d8\u91cf\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u4e3a\u8bfb\u53d6\u96c6\u5408\u662f\u6267\u884c\u4ea4\u6613\u751f\u6210\u7684\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u6807\u8bb0\u4e3a\u6709\u6548\u6216\u65e0\u6548\u3002", 
            "title": "5. \u4ea4\u6613\u9a8c\u8bc1\u548c\u63d0\u4ea4"
        }, 
        {
            "location": "/txflow_zh/#6", 
            "text": "(Ledger updated)  Each peer appends the block to the channel\u2019s chain, and for each valid transaction the write sets are committed to current state database. An event is emitted, to notify the client application that the transaction (invocation) has been immutably appended to the chain, as well as notification of whether the transaction was validated or invalidated.  \u6bcf\u4e2a\u8282\u70b9\u90fd\u628a\u533a\u5757\u8ffd\u52a0\u5230\u901a\u9053\u7684\u94fe\u4e2d\uff0c\u5bf9\u6bcf\u9879\u6709\u6548\u4ea4\u6613\uff0c\u5199\u5165\u96c6\u5408\u88ab\u63d0\u4ea4\u5230\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u3002\u53d1\u51fa\u4e8b\u52a1\u901a\u77e5\u5ba2\u6237\u7aef\u5e94\u7528\uff0c\u4ea4\u6613\uff08\u8c03\u7528\uff09\u88ab\u6c38\u4e45\u8ffd\u52a0\u5230\u94fe\u4e2d\u4ee5\u53ca\u4ea4\u6613\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u7684\u3002  Note: See the Chaincode Swimlanes diagram to better understand the server side flow and the protobuffers.\n\u6ce8\u610f\uff1a\u53c2\u7167\u94fe\u7801\u6cf3\u9053\u56fe\u4ee5\u83b7\u5f97\u670d\u52a1\u7aef\u6d41\u7a0b\u548c\u534f\u8bae\u7f13\u51b2\u7684\u66f4\u597d\u7406\u89e3\u3002", 
            "title": "6. \u8d26\u672c\u66f4\u65b0"
        }, 
        {
            "location": "/ca-setup_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYaocheng Ye\n\n\nRuijun Ou\u3001Zhangjiong Xuan\n\n\n\n\n\n\n\n\nFabric CA is a Certificate Authority for Hyperledger Fabric.\n\n\nIt provides features such as:\n\n\n\n\n\n\nregistration of identities, or connects to LDAP as the user registry;\n\n\n\n\n\n\nissuance of Enrollment Certificates (ECerts);\n\n\n\n\n\n\nissuance of Transaction Certificates (TCerts), providing both anonymity and unlinkability when transacting on a Hyperledger Fabric blockchain;\n\n\n\n\n\n\ncertificate renewal and revocation.\n\n\n\n\n\n\nFabric CA\u4e3a\bHyperledger Fabric\u884c\u4f7f\u8bc1\u4e66\u673a\u6784\u7684\u529f\u80fd\u3002\n\n\nFabric CA\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a\n\n\n\n\n\n\n\u8eab\u4efd\u6ce8\u518c\uff0c\u6216\u8005\u5c06\u8fde\u63a5\u5230LDAP\u4f5c\u4e3a\u7528\u6237\u6ce8\u518c\uff1b\n\n\n\n\n\n\n\u9881\u53d1\u767b\u5f55\u8bc1\u4e66(ECerts)\uff1b\n\n\n\n\n\n\n\u9881\u53d1\u4ea4\u6613\u8bc1\u4e66(TCerts)\uff0c\u4fdd\u8bc1\u94fe\u4e0a\u4ea4\u6613\u7684\u533f\u540d\u6027\u4e0e\u4e0d\u53ef\u8fde\u63a5\u6027\uff1b\n\n\n\n\n\n\n\u8bc1\u4e66\u7eed\u671f\u4e0e\u64a4\u9500\n\n\n\n\n\n\nFabric CA consists of both a server and a client component as described later in this document.\n\n\nFor developers interested in contributing to Fabric CA, see the Fabric CA repository for more information.\n\n\nFabric CA \u5305\u542b\u4e00\u4e2a\u670d\u52a1\u7aef\u7ec4\u4ef6\u548c\u4e00\u4e2a\u5ba2\u6237\u7aef\u7ec4\u4ef6\uff0c\u7a0d\u540e\u4f1a\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u5bf9\u8d21\u732eFabric CA\u611f\u5174\u8da3\u7684\u5f00\u53d1\u8005\uff0c\u53ef\u4ee5\u53c2\u8003 \nFabric CA repository\n\n\n\u6982\u8ff0\n\n\nThe diagram below illustrates how the Fabric CA server fits into the overall Hyperledger Fabric architecture.\n\n\n\u4e0b\u56fe\u8bf4\u660e\u4e86 Fabric CA \u670d\u52a1\u7aef\u5982\u4f55\u5728 Hyperledger Fabric \u67b6\u6784\u4e2d\u53d1\u6325\u4f5c\u7528\n\n\n\n\nThere are two ways of interacting with a Fabric CA server: via the Fabric CA client or through one of the Fabric SDKs. All communication to the Fabric CA server is via REST APIs. See fabric-ca/swagger/swagger-fabric-ca.json for the swagger documentation for these REST APIs.\n\n\n\u6709\u4e24\u79cd\u65b9\u5f0f\u4e0e Fabric CA \u670d\u52a1\u7aef\u4ea4\u4e92\uff1a\u901a\u8fc7 Fabric CA \u5ba2\u6237\u7aef\uff0c\u6216\u8005 Fabric SDK\uff0c\u6240\u6709\u4e0e Fabric CA \u7684\u4ea4\u4e92\u90fd\u662f\u901a\u8fc7 REST APIs \u6765\u5b9e\u73b0\u7684\u3002REST APIs \u7684swagger\u8bf4\u660e\u6587\u6863\u89c1 \nfabric-ca/swagger/swagger-fabric-ca.json\n \n\n\nThe Fabric CA client or SDK may connect to a server in a cluster of Fabric CA servers. This is illustrated in the top right section of the diagram. The client routes to an HA Proxy endpoint which load balances traffic to one of the fabric-ca-server cluster members. All Fabric CA servers in a cluster share the same database for keeping track of users and certificates. If LDAP is configured, the user information is kept in LDAP rather than the database.\n\n\nFabric CA \u5ba2\u6237\u7aef\u6216\u8005 SDK \u53ef\u80fd\u4f1a\u8fde\u63a5\u5230 Fabric CA \u96c6\u7fa4\u4e2d\u67d0\u4e00\u4e2a Fabric CA \u670d\u52a1\u7aef\uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u901a\u8fc7\u4e0a\u56fe\u53f3\u4e0a\u90e8\u5206\u83b7\u5f97\u66f4\u597d\u7684\u7406\u89e3\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u662f\u4e00\u4e2a HA \u4ee3\u7406\u8282\u70b9\uff0c\u8fd9\u4e2a HA \u4ee3\u7406\u8282\u70b9\u4e3a Fabric CA \u96c6\u7fa4\u4f5c\u8d1f\u8f7d\u5747\u8861\u3002\u6240\u6709\u7684 Fabric CA \u670d\u52a1\u7aef\u5171\u4eab\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u6570\u636e\u5e93\u7528\u6765\u4fdd\u5b58\u7528\u6237\u548c\u8bc1\u4e66\u4fe1\u606f\u3002\u5982\u679c\u914d\u7f6e\u4e86 LDAP\uff0c\u90a3\u4e48\u7528\u6237\u4fe1\u606f\u5c06\u4f1a\u4fdd\u5b58\u5728 LDAP \u4e2d\uff0c\u800c\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\u3002\n\n\n\u5165\u95e8\n\n\n\u524d\u7f6e\u6761\u4ef6\n\n\n\n\n\n\nGo 1.7+ \u6216\u66f4\u9ad8\u7248\u672c\n\n\n\n\n\n\nGOPATH \u73af\u5883\u53d8\u91cf\u6b63\u786e\u8bbe\u7f6e\n\n\n\n\n\n\nlibtool \u548c libtdhl-dev \u8fd9\u4e24\u4e2a\u5305\u5b89\u88c5\u597d\n\n\n\n\n\n\n\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 libtool\n\n\n# sudo apt install libtool libltdl-dev\n\n\n\n\u4e86\u89e3\u66f4\u591a\u6709\u5173 libtool \u7684\u4fe1\u606f\uff0c\u53c2\u8003 \nhttps://www.gnu.org/software/libtool/\n\n\n\u4e86\u89e3\u66f4\u591a\u6709\u5173 libtdhr-dev \u7684\u4fe1\u606f\uff0c\u53c2\u8003 \nhttps://www.gnu.org/software/libtool/manual/html_node/Using-libltdl.html\n\n\n\u5b89\u88c5\n\n\n\u4ee5\u4e0b\u547d\u4ee4\u4f1a\u540c\u65f6\u5b89\u88c5 fabric-ca-server \u548c fabric-ca-client\n\n\n# go get -u github.com/hyperledger/fabric-ca/cmd/...\n\n\n\n\u539f\u751f\u542f\u52a8\u670d\u52a1\u5668\n\n\n\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8 fabric-ca-server\n\n\n# fabric-ca-server start -b admin:adminpw\n\n\n\nThe -b option provides the enrollment ID and secret for a bootstrap administrator. A default configuration file named fabric-ca-server-config.yaml is created in the local directory which can be customized.\n\n\n-b\n \u9009\u9879\u7528\u6765\u63d0\u4f9b\u542f\u52a8\u7ba1\u7406\u5458\u7684\u767b\u5f55 ID \u548c\u5bc6\u7801\u3002\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 \nfabric-ca-server-config.yaml\n \u4f1a\u81ea\u52a8\u5728\u672c\u5730\u76ee\u5f55\u521b\u5efa\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002\n\n\n\u901a\u8fc7 Docker \u542f\u52a8\u670d\u52a1\u5668\n\n\n\u4f7f\u7528 docker-compose \u6765\u542f\u52a8\n\n\n# cd $GOPATH/src/github.com/hyperledger/fabric-ca\n# make docker\n# cd docker/server\n# docker-compose up -d\n\n\n\nhyperledger/fabric-ca docker \u955c\u50cf\u5305\u542b fabric-ca-server \u548c the fabric-ca-client\n\n\n\u4f53\u9a8c Fabric CA \u547d\u4ee4\u884c\n\n\n\u8fd9\u4e00\u90e8\u5206\u63d0\u4f9b fabric-ca-server \u548c fabric-ca-client \u547d\u4ee4\u884c\u7684\u4f7f\u7528\u8bf4\u660e\u3002\u53e6\u5916\u7684\u4f7f\u7528\u4fe1\u606f\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e2d\u63d0\u4f9b\u3002\n\n\nfabric-ca-server\n\n\nHyperledger Fabric Certificate Authority Server\n\nUsage:\n    fabric-ca-server [command]\n\nAvailable Commands:\n    init        Initialize the Fabric CA server\n    start       Start the Fabric CA server\n\nFlags:\n        --address string                         Listening address of Fabric CA server (default \"0.0.0.0\")\n    -b, --boot string                            The user:pass for bootstrap admin which is required to build default config file\n        --ca.certfile string                     PEM-encoded CA certificate file (default \"ca-cert.pem\")\n        --ca.chainfile string                    PEM-encoded CA chain file (default \"ca-chain.pem\")\n        --ca.keyfile string                      PEM-encoded CA key file (default \"ca-key.pem\")\n    -n, --ca.name string                         Certificate Authority name\n    -c, --config string                          Configuration file (default \"fabric-ca-server-config.yaml\")\n        --csr.cn string                          The common name field of the certificate signing request to a parent Fabric CA server\n        --csr.hosts stringSlice                  A list of space-separated host names in a certificate signing request to a parent Fabric CA server\n        --csr.serialnumber string                The serial number in a certificate signing request to a parent Fabric CA server\n        --db.datasource string                   Data source which is database specific (default \"fabric-ca-server.db\")\n        --db.tls.certfiles stringSlice           PEM-encoded list of trusted certificate files\n        --db.tls.client.certfile string          PEM-encoded certificate file when mutual authenticate is enabled\n        --db.tls.client.keyfile string           PEM-encoded key file when mutual authentication is enabled\n        --db.type string                         Type of database; one of: sqlite3, postgres, mysql (default \"sqlite3\")\n    -d, --debug                                  Enable debug level logging\n        --ldap.enabled                           Enable the LDAP client for authentication and attributes\n        --ldap.groupfilter string                The LDAP group filter for a single affiliation group (default \"(memberUid=%s)\")\n        --ldap.url string                        LDAP client URL of form ldap://adminDN:adminPassword@host[:port]/base\n        --ldap.userfilter string                 The LDAP user filter to use when searching for users (default \"(uid=%s)\")\n    -p, --port int                               Listening port of Fabric CA server (default 7054)\n        --registry.maxenrollments int            Maximum number of enrollments; valid if LDAP not enabled\n        --tls.certfile string                    PEM-encoded TLS certificate file for server's listening port (default \"ca-cert.pem\")\n        --tls.clientauth.certfiles stringSlice   PEM-encoded list of trusted certificate files\n        --tls.clientauth.type string             Policy the server will follow for TLS Client Authentication. (default \"noclientcert\")\n        --tls.enabled                            Enable TLS on the listening port\n        --tls.keyfile string                     PEM-encoded TLS key for server's listening port (default \"ca-key.pem\")\n    -u, --url string                             URL of the parent Fabric CA server\n\n\nUse \"fabric-ca-server [command] --help\" for more information about a command.\n\n\n\nfabric-ca-client\n\n\n# fabric-ca-client\nHyperledger Fabric Certificate Authority Client\n\nUsage:\n    fabric-ca-client [command]\n\nAvailable Commands:\n    enroll      Enroll an identity\n    getcacert   Get CA certificate chain\n    reenroll    Reenroll an identity\n    register    Register an identity\n    revoke      Revoke an identity\n\nFlags:\n    -c, --config string                Configuration file (default \"$HOME/.fabric-ca-client/fabric-ca-client-config.yaml\")\n        --csr.cn string                The common name field of the certificate signing request\n        --csr.hosts stringSlice        A list of space-separated host names in a certificate signing request\n        --csr.serialnumber string      The serial number in a certificate signing request\n    -d, --debug                        Enable debug level logging\n        --enrollment.hosts string      Comma-separated host list\n        --enrollment.label string      Label to use in HSM operations\n        --enrollment.profile string    Name of the signing profile to use in issuing the certificate\n        --id.affiliation string        The identity's affiliation\n        --id.attr string               Attributes associated with this identity (e.g. hf.Revoker=true)\n        --id.maxenrollments int        The maximum number of times the secret can be reused to enroll\n        --id.name string               Unique name of the identity\n        --id.secret string             The enrollment secret for the identity being registered\n        --id.type string               Type of identity being registered (e.g. 'peer, app, user')\n    -M, --mspdir string                Membership Service Provider directory (default \"msp\")\n    -m, --myhost string                Hostname to include in the certificate signing request during enrollment (default \"$HOSTNAME\")\n        --tls.certfiles stringSlice    PEM-encoded list of trusted certificate files\n        --tls.client.certfile string   PEM-encoded certificate file when mutual authenticate is enabled\n        --tls.client.keyfile string    PEM-encoded key file when mutual authentication is enabled\n    -u, --url string                   URL of the Fabric CA server (default \"http://localhost:7054\")\n\nUse \"fabric-ca-client [command] --help\" for more information about a command.\n\n\n\nNote that command line options that are string slices (lists) can be specified either by specifying the option with space-separated list elements or by specifying the option multiple times, each with a string value that make up the list. For example, to specify host1 and host2 for csr.hosts option, you can either pass \u2013csr.hosts \u201chost1 host2\u201d or \u2013csr.hosts host1 \u2013csr.hosts host2\n\n\n\u6ce8\u610f\u5728\u547d\u4ee4\u884c\u4e2d\u9700\u8981\u7ed9\u67d0\u4e2a\u9009\u9879\u8f93\u5165\u5217\u8868\u65f6\uff0c\u53ef\u4ee5\b\u7528\u7a7a\u683c\u5206\u5272\uff0c\u6216\u8005\u591a\u6b21\u4f7f\u7528\u8be5\u9009\u9879\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\nhost1\n\u548c\nhost2\n\u7ed9csr.hosts\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u7528\u2013csr.hosts \u201chost1 host2\u201d\u6216\u8005\u2013csr.hosts host1 \u2013csr.hosts host2\n\n\n\u6587\u4ef6\u683c\u5f0f\n\n\nFabric CA \u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\n\n\nA configuration file can be provided to the server using the -c or \nconfig option. If the \nconfig option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the server\u2019s home directory (see Fabric CA Server section more info).\n\n\n\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7 \n-c\n \u6216\u8005 \n--config\n \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c \n--config\n \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-server \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003 \nFabric CA \u670d\u52a1\u7aef\n \u4e86\u89e3\u66f4\u591a\uff09\n\n\n# Server's listening port (default: 7054)\nport: 7054\n\n# Enables debug logging (default: false)\ndebug: false\n\n#############################################################################\n#  TLS section for the server's listening port\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfile: ca-cert.pem\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The CA section contains the key and certificate files used when\n#  issuing enrollment certificates (ECerts) and transaction\n#  certificates (TCerts).\n#############################################################################\nca:\n    # Certificate file (default: ca-cert.pem)\n    certfile: ca-cert.pem\n    # Key file (default: ca-key.pem)\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The registry section controls how the Fabric CA server does two things:\n#  1) authenticates enrollment requests which contain identity name and\n#     password (also known as enrollment ID and secret).\n#  2) once authenticated, retrieves the identity's attribute names and\n#     values which the Fabric CA server optionally puts into TCerts\n#     which it issues for transacting on the Hyperledger Fabric blockchain.\n#     These attributes are useful for making access control decisions in\n#     chaincode.\n#  There are two main configuration options:\n#  1) The Fabric CA server is the registry\n#  2) An LDAP server is the registry, in which case the Fabric CA server\n#     calls the LDAP server to perform these tasks.\n#############################################################################\nregistry:\n    # Maximum number of times a password/secret can be reused for enrollment\n    # (default: 0, which means there is no limit)\n    maxEnrollments: 0\n\n    # Contains identity information which is used when LDAP is disabled\n    identities:\n        - name: \nADMIN\n\n        pass: \nADMINPW\n\n        type: client\n        affiliation: \"\"\n        attrs:\n            hf.Registrar.Roles: \"client,user,peer,validator,auditor,ca\"\n            hf.Registrar.DelegateRoles: \"client,user,validator,auditor\"\n            hf.Revoker: true\n            hf.IntermediateCA: true\n\n#############################################################################\n#  Database section\n#  Supported types are: \"sqlite3\", \"postgres\", and \"mysql\".\n#  The datasource value depends on the type.\n#  If the type is \"sqlite3\", the datasource value is a file name to use\n#  as the database store.  Since \"sqlite3\" is an embedded database, it\n#  may not be used if you want to run the Fabric CA server in a cluster.\n#  To run the Fabric CA server in a cluster, you must choose \"postgres\"\n#  or \"mysql\".\n#############################################################################\ndb:\n    type: sqlite3\n    datasource: fabric-ca-server.db\n    tls:\n        enabled: false\n        certfiles:\n            - db-server-cert.pem\n        client:\n            certfile: db-client-cert.pem\n            keyfile: db-client-key.pem\n\n#############################################################################\n#  LDAP section\n#  If LDAP is enabled, the Fabric CA server calls LDAP to:\n#  1) authenticate enrollment ID and secret (i.e. identity name and password)\n#     for enrollment requests\n#  2) To retrieve identity attributes\n#############################################################################\nldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url: ldap://\nadminDN\n:\nadminPassword\n@\nhost\n:\nport\n/\nbase\n\n    tls:\n        certfiles:\n            - ldap-server-cert.pem\n        client:\n            certfile: ldap-client-cert.pem\n            keyfile: ldap-client-key.pem\n\n#############################################################################\n#  Affiliation section\n#############################################################################\naffiliations:\n    org1:\n        - department1\n        - department2\n    org2:\n        - department1\n\n#############################################################################\n#  Signing section\n#############################################################################\nsigning:\n    profiles:\n        ca:\n            usage:\n            - cert sign\n            expiry: 8000h\n            caconstraint:\n            isca: true\n    default:\n        usage:\n            - cert sign\n        expiry: 8000h\n\n###########################################################################\n#  Certificate Signing Request section for generating the CA certificate\n###########################################################################\ncsr:\n    cn: fabric-ca-server\n    names:\n        - C: US\n            ST: North Carolina\n            L:\n            O: Hyperledger\n            OU: Fabric\n    hosts:\n        - \nMYHOST\n\n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Crypto section configures the crypto primitives used for all\n#############################################################################\ncrypto:\n    software:\n        hash_family: SHA2\n        security_level: 256\n        ephemeral: false\n        key_store_dir: keys\n\n\n\nFabric CA \u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\n\n\nA configuration file can be provided to the client using the -c or \nconfig option. If the config option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the client\u2019s home directory (see Fabric CA Client section more info).\n\n\n\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7 \n-c\n \u6216\u8005 \n--config\n \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c \n--config\n \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-client \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003 \nFabric CA \u5ba2\u6237\u7aef\n \u4e86\u89e3\u66f4\u591a\uff09\n\n\n#############################################################################\n# Client Configuration\n#############################################################################\n\n# URL of the fabric-ca-server (default: http://localhost:7054)\nURL: http://localhost:7054\n\n# Membership Service Provider (MSP) directory\n# When the client is used to enroll a peer or an orderer, this field must be\n# set to the MSP directory of the peer/orderer\nMSPDir:\n\n#############################################################################\n#    TLS section for secure socket connection\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile:\n        keyfile:\n\n#############################################################################\n#  Certificate Signing Request section for generating the CSR for\n#  an enrollment certificate (ECert)\n#############################################################################\ncsr:\n    cn: \nENROLLMENT_ID\n\n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger\n        OU: Fabric\n    hosts:\n    - \nMYHOST\n\n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Registration section used to register a new user with fabric-ca server\n#############################################################################\nid:\n    name:\n    type:\n    affiliation:\n    attrs:\n        - name:\n        value:\n\n#############################################################################\n#  Enrollment section used to enroll a user with fabric-ca server\n#############################################################################\nenrollment:\n    hosts:\n    profile:\n    label:\n\n\n\n\u914d\u7f6e\u4f18\u5148\u7ea7\u8bf4\u660e\n\n\nThe Fabric CA provides 3 ways to configure settings on the Fabric CA server and client. The precedence order is:\n\n\n\n\n\n\nCLI flags\n\n\n\n\n\n\nEnvironment variables\n\n\n\n\n\n\nConfiguration file\n\n\n\n\n\n\nIn the remainder of this document, we refer to making changes to configuration files. However, configuration file changes can be overridden through environment variables or CLI flags.\n\n\nFor example, if we have the following in the client configuration file:\n\n\nFabric CA \u63d0\u4f9b3\u79cd\u65b9\u5f0f\u6765\u914d\u7f6e fabric-ca-server \u548c fabric-ca-client \u3002\u4f18\u5148\u7ea7\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\u547d\u4ee4\u884c\u53c2\u6570\n\n\n\n\n\n\n\u73af\u5883\u53d8\u91cf\n\n\n\n\n\n\n\u914d\u7f6e\u6587\u4ef6\n\n\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8bd5\u7740\u5bf9\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002\u914d\u7f6e\u6587\u4ef6\u7684\u4fee\u6539\u53ef\u4ee5\u88ab\u73af\u5883\u53d8\u91cf\u6216\u8005\u547d\u4ee4\u884c\u53c2\u6570\u8986\u76d6\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\uff1a\n\n\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n\n    # TLS for the client's listenting port (default: false)\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile: cert.pem\n        keyfile:\n\n\n\nThe following environment variable may be used to override the cert.pem setting in the configuration file:\n\n\nexport FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem\n\n\nIf we wanted to override both the environment variable and configuration file, we can use a command line flag.\n\n\nfabric-ca-client enroll --tls.client.certfile cert3.pem\n\n\nThe same approach applies to fabric-ca-server, except instead of using FABIRC_CA_CLIENT as the prefix to environment variables, FABRIC_CA_SERVER is used.\n\n\n\u53ef\u4ee5\u7528\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u4e2d \ncert.pem\n \u7684\u914d\u7f6e\n\n\nexport FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem\n\n\n\u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u8986\u76d6\u73af\u5883\u53d8\u91cf\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\n\n\nfabric-ca-client enroll --tls.client.certfile cert3.pem\n\n\n\u4ee5\u4e0a\u65b9\u6cd5\u5bf9fabric-ca-server\u540c\u6837\u9002\u7528\uff0c\u533a\u522b\u662f\u5728\u73af\u5883\u53d8\u91cf\u7684\u524d\u7f00\uff0c\u628a\nFABIRC_CA_CLIENT\n\u66ff\u6362\u4e3a\nFABRIC_CA_SERVER\n\u3002\n\n\n\u5173\u4e8e\u8def\u5f84\u7684\u4e00\u4e9b\u8bf4\u660e\n\n\nAll the properties in the Fabric CA server and client configuration file, that specify file names support both relative and absolute paths. Relative paths are relative to the config directory, where the configuration file is located. For example, if the config directory is ~/config and the tls section is as shown below, the Fabric CA server or client will look for the root.pem file in the ~/config directory, cert.pem file in the ~/config/certs directory and the key.pem file in the /abs/path directory\n\n\nfabric-ca-server \u548c fabirc-ca-client \u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u6240\u6709\u5c5e\u6027\u90fd\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u548c\u7edd\u5bf9\u8def\u5f84\u3002\u76f8\u5bf9\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u914d\u7f6e\u76ee\u5f55\uff0c\u5373\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002\u6bd4\u5982\uff0c\u5982\u679c\u914d\u7f6e\u76ee\u5f55\u662f \n~/config\n \uff0c\u800c tls \u90e8\u5206\u7684\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff0c\u90a3\u4e48Fabric CA \u670d\u52a1\u7aef\u6216\u8005\u5ba2\u6237\u7aef\u4f1a\u5728 \n~/config\n \u76ee\u5f55\u4e0b\u67e5\u627e \nroot.pem\n \uff0c\u5728 \n~/config\uff0fcerts\n \u4e0b\u67e5\u627e \ncert.pem\n \uff0c\u5728 \n/abs/path\n \u76ee\u5f55\u4e0b\u67e5\u627e \nkey.pem\n\n\ntls:\n    enabled: true\n    certfiles:   root.pem\n    client:\n        certfile: certs/cert.pem\n        keyfile: /abs/path/key.pem\n\n\n\nFabric CA \u670d\u52a1\u7aef\n\n\nThis section describes the Fabric CA server.\n\n\nYou may initialize the Fabric CA server before starting it. This provides an opportunity for you to generate a default configuration file but to review and customize its settings before starting it.\n\n\nThe Fabric CA server\u2019s home directory is determined as follows:\n\n\n\n\n\n\nif the FABRIC_CA_SERVER_HOME environment variable is set, use its value;\n\n\n\n\n\n\notherwise, if FABRIC_CA_HOME environment variable is set, use its value;\n\n\n\n\n\n\notherwise, if the CA_CFG_PATH environment variable is set, use its value;\n\n\n\n\n\n\notherwise, use current working directory.\n\n\n\n\n\n\nFor the remainder of this server section, we assume that you have set the FABRIC_CA_HOME environment variable to $HOME/fabric-ca/server.\n\n\nThe instructions below assume that the server configuration file exists in the server\u2019s home directory.\n\n\n\u8fd9\u4e00\u90e8\u5206\u8bf4\u660eFabric CA\u670d\u52a1\u7aef\u3002\n\n\n\u5728\u542f\u52a8Fabric CA\u670d\u52a1\u7aef\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef\u3002\u901a\u8fc7\u521d\u59cb\u5316\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u65b9\u4fbf\u7528\u6237\u5728\u542f\u52a8\u524d\u81ea\u884c\u4fee\u6539\u4e00\u4e9b\u914d\u7f6e\u9879\u3002\n\n\nFabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u51b3\u5b9a\uff1a\n\n\n\n\n\n\n\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_SERVER_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\n\n\n\n\u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\n\n\n\n\u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nCA_CFG_PATH\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\n\n\n\n\u5426\u5219\uff0c\u4f7f\u7528\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u4f5c\u4e3a\u6839\u76ee\u5f55\n\n\n\n\n\n\n\u672c\u7ae0\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf \nFABRIC_CA_HOME\n \uff0c\u5e76\u4e14\u503c\u8bbe\u7f6e\u4e3a \n$HOME/fabric-ca/server\n\u3002\n\n\n\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u90fd\u9ed8\u8ba4\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u670d\u52a1\u7aef\u6839\u76ee\u5f55\u4e0b\u3002\n\n\n\u521d\u59cb\u5316\u670d\u52a1\u7aef\n\n\n\u7528\u4ee5\u4e0b\u547d\u4ee4\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef\n\n\n# fabric-ca-server init -b admin:adminpw\n\n\n\nThe \n-b\n (bootstrap identity) option is required for initialization. At least one bootstrap identity is required to start the Fabric CA server. The server configuration file contains a Certificate Signing Request (CSR) section that can be configured. The following is a sample CSR.\n\n\n\u521d\u59cb\u5316\u65f6\u5fc5\u987b\u63d0\u4f9b \n-b\n (bootstrap identity: \u5f15\u5bfc\u8eab\u4efd) \u9009\u9879\u3002\u542f\u52a8\u670d\u52a1\u7aef\u65f6\uff0c\u81f3\u5c11\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u914d\u7f6e\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42 (Certificate Signing Request, CSR) \u90e8\u5206\u3002\u4e0b\u9762\u662f\u4e00\u4e2aCSR\u7684\u4f8b\u5b50\u3002\n\n\nIf you are going to connect to the Fabric CA server remotely over TLS, replace \u201clocalhost\u201d in the CSR section below with the hostname where you will be running your Fabric CA server.\n\n\n\u5982\u679c\u4f60\u60f3\u901a\u8fc7TLS\u8fdc\u7a0b\u8fde\u63a5Fabric CA\u670d\u52a1\u7aef\uff0c\u628a\u4e0b\u9762\u7684CSR\u914d\u7f6e\u5185\u5bb9\u4e2d\u7684\nlocalhost\n\u66ff\u6362\u6210\u4f60\u5c06\u4f1a\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u7684\u57df\u540d\u3002\n\n\ncn: localhost\nkey:\n    algo: ecdsa\n    size: 256\nnames:\n- C: US\n    ST: \"North Carolina\"\n    L:\n    O: Hyperledger\n    OU: Fabric\n\n\n\nAll of the fields above pertain to the X.509 signing key and certificate which is generated by the \nfabric-ca-server\n init. This corresponds to the \nca.certfile\n and \nca.keyfile\n files in the server\u2019s configuration file. The fields are as follows:\n\n\n\n\n\n\ncn is the Common Name\n\n\n\n\n\n\nkey specifies the algorithm and key size as described below\n\n\n\n\n\n\nO is the organization name\n\n\n\n\n\n\nOU is the organizational unit\n\n\n\n\n\n\nL is the location or city\n\n\n\n\n\n\nST is the state\n\n\n\n\n\n\nC is the country\n\n\n\n\n\n\n\u4e0a\u9762\u6240\u6709\u7684\u5b57\u6bb5\u90fd\b\u7b26\u5408X.509\u7b7e\u540d\u4e0e\u8bc1\u4e66\u89c4\u8303\uff0c\u53ef\u4ee5\u7531\nfabric-ca-server\n init\u547d\u4ee4\u6765\u751f\u6210\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684\nca.certfile\n\u548c\nca.keyfile\n\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e5f\u7b26\u5408X.509\u89c4\u8303\u3002\u5b57\u6bb5\u5982\u4e0b\uff1a\n\n\n\n\n\n\ncn \u901a\u7528\u540d\n\n\n\n\n\n\nkey \u6307\u660e\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\n\n\n\n\n\n\nO \u7ec4\u7ec7\n\n\n\n\n\n\nOU \u7ec4\u7ec7\u5355\u4f4d\n\n\n\n\n\n\nL \u5730\u5740\u6216\u57ce\u5e02\n\n\n\n\n\n\nST \u5dde\uff08\u7701\uff09\n\n\n\n\n\n\nC \u56fd\u5bb6\n\n\n\n\n\n\nIf custom values for the CSR are required, you may customize the configuration file, delete the files specified by the ca.certfile and ca-keyfile configuration items, and then run the fabric-ca-server init -b admin:adminpw command again.\n\n\n\u5982\u679c\b\u9700\u8981\u4fee\u6539CSR\u91cc\u9762\u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\u628a\u914d\u7f6e\u4e2d\u7531\nca.certfile\n\u548c\nca\b.keyfile\n\u8fd9\u4e24\u9879\u6307\u660e\u7684\u6587\u4ef6\u5220\u9664\u3002\u7136\u540e\u518d\u8fd0\u884c\u4e00\u6b21 \nfabric-ca-server init -b admin:adminpw\n \u547d\u4ee4\u3002\n\n\nThe \nfabric-ca-server init\n command generates a self-signed CA certificate unless the \n-u \\\nparent-fabric-ca-server-URL\\\n option is specified. If the \n-u\n is specified, the server\u2019s CA certificate is signed by the parent Fabric CA server. The \nfabric-ca-server init\n command also generates a default configuration file named fabric-ca-server-config.yaml in the server\u2019s home directory.\n\n\nfabirc-ca-server init\n \u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684CA\u8bc1\u4e66\uff0c\u9664\u975e\u4f7f\u7528\u4e86 \n-u \nparent-fabric-ca-server-URL\n \u9009\u9879\u3002\u5982\u679c\u4f7f\u7528\u4e86 \n-u\n \u9009\u9879\uff0c\u672c\u670d\u52a1\u7aefCA\u8bc1\u4e66\u4f1a\u7531\u7236Fabric CA\u670d\u52a1\u7aef\u7b7e\u540d\u3002\nfabirc-ca-server init\n \u547d\u4ee4\u540c\u65f6\u4e5f\u4f1a\u5728\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\nfabric-ca-server-config.yaml\n\u3002\n\n\n\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\n\n\nThe CSR can be customized to generate X.509 certificates and keys that support both RSA and Elliptic Curve (ECDSA). The following setting is an example of the implementation of Elliptic Curve Digital Signature Algorithm (ECDSA) with curve prime256v1 and signature algorithm ecdsa-with-SHA256:\n\n\n\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49CSR\u6765\u751f\u6210\u652f\u6301ECDSA\u548cRSA\u7684X.509\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff08\bECDSA\uff09\u7684\u8bbe\u7f6e\uff0c\u91c7\u7528\u7684\u66f2\u7ebf\u662f\nprime256v1\n\uff0c\u7b7e\u540d\u7b97\u6cd5\u662f\necdsa-with-SHA256\n\u3002\n\n\nkey:\n    algo: ecdsa\n    size: 256\n\n\n\n\u5bf9\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u4f60\u5bf9\u5b89\u5168\u7684\u8003\u91cf\u3002\n\n\nECDSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a\n\n\n\n\n\n\n\n\nsize\n\n\nASN1 OID\n\n\nSignature Algorithm\n\n\n\n\n\n\n\n\n\n\n256\n\n\nprime256v1\n\n\necdsa-with-SHA256\n\n\n\n\n\n\n384\n\n\nsecp384r1\n\n\necdsa-with-SHA384\n\n\n\n\n\n\n521\n\n\nsecp384r1\n\n\necdsa-with-SHA521\n\n\n\n\n\n\n\n\nRSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a\n\n\n\n\n\n\n\n\nsize\n\n\nModulus (bits)\n\n\nSignature Algorithm\n\n\n\n\n\n\n\n\n\n\n2048\n\n\n2048\n\n\nsha256WithRSAEncryption\n\n\n\n\n\n\n4096\n\n\n2096\n\n\nsha512WithRSAEncryption\n\n\n\n\n\n\n\n\n\u542f\u52a8\u670d\u52a1\u7aef\n\n\n\u542f\u52a8Fabric CA\u670d\u52a1\u5668\uff1a\n\n\n# fabric-ca-server start -b \nadmin\n:\nadminpw\n\n\n\n\nIf the server has not been previously initialized, it will initialize itself as it starts for the first time. During this initialization, the server will generate the ca-cert.pem and ca-key.pem files if they don\u2019t yet exist and will also create a default configuration file if it does not exist. See the \nInitialize the Fabric CA server\n section.\n\n\n\u5982\u679c\u670d\u52a1\u5668\u4e4b\u524d\u6ca1\u6709\u521d\u59cb\u5316\u8fc7\uff0c\u5b83\u4f1a\u5728\u7b2c\u4e00\u6b21\u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\b\u4e2d\uff0c\u5b83\u4f1a\u5982\u679cca-cert.pem\u548cca-key.pem\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff1b\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002\u53c2\u8003\n\u521d\u59cb\u5316\u670d\u52a1\u7aef\n\u3002\n\n\nUnless the Fabric CA server is configured to use LDAP, it must be configured with at least one pre-registered bootstrap identity to enable you to register and enroll other identities. The \n-b\n option specifies the name and password for a bootstrap identity.\n\n\n\u9664\u975eFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u4e86\u4f7f\u7528LDAP\uff0c\u5426\u5219\u5b83\u5fc5\u987b\u914d\u7f6e\u81f3\u5c11\u4e00\u4e2a\u9884\u6ce8\u518c\u5f15\u5bfc\u8eab\u4efd\u6765\u5141\u8bb8\u4f60\u767b\u5f55\u5176\u4ed6\u8eab\u4efd\u3002\n-b\n\u9009\u9879\u6307\u660e\u5f15\u5bfc\u8eab\u4efd\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\b\n\n\nA different configuration file may be specified with the -c option as shown below.\n\n\n\b\u53ef\u4ee5\u901a\u8fc7\n-c\n\u9009\u9879\u6765\u6307\u660e\u5176\u4ed6\u7684\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n# fabric-ca-server start -c \npath-to-config-file\n -b \nadmin\n:\nadminpw\n\n\n\n\nTo cause the Fabric CA server to listen on https rather than http, set tls.enabled to true.\n\n\n\u4e3a\u4e86\u4f7ffabric ca server\u76d1\u542c\nhttps\n\u800c\u4e0d\u662f\nhttp\n\uff0c\u914d\u7f6e\ntls.enabled\n\u4e3a\ntrue\n\u3002\n\n\nTo limit the number of times that the same secret (or password) can be used for enrollment, set the \nregistry.maxEnrollments\n in the configuration file to the appropriate value. If you set the value to 1, the Fabric CA server allows passwords to only be used once for a particular enrollment ID. If you set the value to 0, the Fabric CA server places no limit on the number of times that a secret can be reused for enrollment. The default value is 0.\n\n\n\b\u4e3a\u4e86\u9650\u5236\u767b\u5f55\u65f6\u76f8\u540c\u5bc6\u7801\u7684\u6b21\u6570\uff0c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e\nregistry.maxEnrollments\n\u4e3a\u6070\u5f53\u7684\u503c\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a1\uff0cFabric CA\u670d\u52a1\u7aef\u53ea\u5141\u8bb8\u4e00\u4e2a\u5bc6\u7801\u88ab\u4e00\u4e2a\u767b\u5f55ID\u4f7f\u7528\uff08\u5373\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2aID\u6709\u76f8\u540c\u7684\u5bc6\u7801\uff09\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a0\uff0cFabric CA\u670d\u52a1\u7aef\u4e0d\u4f1a\u9650\u5236\u5bc6\u7801\u7684\u91cd\u590d\u4f7f\u7528\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a0\u3002\n\n\nThe Fabric CA server should now be listening on port 7054.\n\n\nFabric CA\u670d\u52a1\u7aef\u73b0\u5728\u5e94\u8be5\u6b63\u5728\u76d1\u542c7054\u7aef\u53e3\u3002\n\n\nYou may skip to the Fabric CA Client section if you do not want to configure the Fabric CA server to run in a cluster or to use LDAP.\n\n\n\u5982\u679c\u4f60\u4e0d\u60f3\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4e5f\u4e0d\u60f3\u4f7f\u7528LDAP\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\nFabric CA \u5ba2\u6237\u7aef\n\u8fd9\u4e00\u7ae0\u8282\u3002\n\n\n\u914d\u7f6e\u6570\u636e\u5e93\n\n\nThis section describes how to configure the Fabric CA server to connect to Postgres or MySQL databases. The default database is SQLite and the default database file is \nfabric-ca-server.db\n in the Fabric CA server\u2019s home directory.\n\n\n\u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u8fde\u63a5\u5230Postgres\u6216\u8005MySQL\u3002\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u662fSQLite\uff0c\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u6587\u4ef6\u662f\nfabric-ca-server.db\n\uff0c\u5b58\u653e\u5728Fabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u3002\n\n\nIf you don\u2019t care about running the Fabric CA server in a cluster, you may skip this section; otherwise, you must configure either Postgres or MySQL as described below.\n\n\n\u5982\u679c\u4f60\u4e0d\u60f3\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u7ae0\uff1b\u4e0d\u7136\u7684\u8bdd\u4f60\u53ef\u4ee5\u7167\u4e0b\u9762\u7684\u6307\u5f15\u914d\u7f6ePostgres\u6216\u8005MySQL\u3002\n\n\nPostgres\n\n\nThe following sample may be added to the server\u2019s configuration file in order to connect to a Postgres database. Be sure to customize the various values appropriately.\n\n\n\u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\u670d\u52a1\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6765\u4f7f\u670d\u52a1\u7aef\u8fde\u63a5\u5230\u4e00\u4e2aPostgres\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002\n\n\ndb:\n    type: postgres\n    datasource: host=localhost port=5432 user=Username password=Password dbname=fabric-ca-server sslmode=verify-full\n\n\n\nSpecifying sslmode configures the type of SSL authentication. Valid values for sslmode are:\n\n\n\u6307\u5b9asslmode\u6765\u914d\u7f6e\bSSL\u8ba4\u8bc1\u7684\u7c7b\u578b\u3002sslmode\u6709\u6548\u7684\u503c\u4e3a\uff1a\n\n\nIf you would like to use TLS, then the db.tls section in the Fabric CA server configuration file must be specified. If SSL client authentication is enabled on the Postgres server, then the client certificate and key file must also be specified in the db.tls.client section. The following is an example of the db.tls section:\n\n\n\u5982\u679c\u4f60\u60f3\u4f7f\u7528TLS\uff0c\u90a3\u4e48\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\ndb.tls\n\u8fd9\u4e00\u90e8\u5206\u3002\u5982\u679cPostgres\u670d\u52a1\u5668\u5f00\u542f\u4e86SSL\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\u5fc5\u987b\u5728\ndb.tls.client\n\u8fd9\u4e00\u90e8\u5206\u6307\u660e\u3002\u4e0b\u9762\u662f\ndb.tls\n\u90e8\u5206\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\ndb:\n    ...\n    tls:\n        enabled: true\n        certfiles:\n            - db-server-cert.pem\n        client:\n                certfile: db-client-cert.pem\n                keyfile: db-client-key.pem\n\n\n\ncertfiles\n - A list of PEM-encoded trusted root certificate files.\n\n\ncertfile\n and \nkeyfile\n - PEM-encoded certificate and key files that are used by the Fabric CA server to communicate securely with the Postgres server\n\n\ncertfiles\n - \u53ef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u6587\u4ef6\u5217\u8868\uff0c\u91c7\u7528PEM\u7f16\u7801\n\n\ncertfile\n and \nkeyfile\n - \u7528\u4e8e\u4e0ePostgres\u670d\u52a1\u5668\u5b89\u5168\u901a\u4fe1\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\uff0c\u91c7\u7528PEM\u7f16\u7801\n\n\nMySQL\n\n\nThe following sample may be added to the Fabric CA server configuration file in order to connect to a MySQL database. Be sure to customize the various values appropriately.\n\n\n\u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\bFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u8fde\u63a5\u5230MySQL\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002\n\n\ndb:\n    type: mysql\n    datasource: root:rootpw@tcp(localhost:3306)/fabric-ca?parseTime=true\ntls=custom\n\n\n\nIf connecting over TLS to the MySQL server, the db.tls.client section is also required as described in the Postgres section above.\n\n\n\u5982\u679c\u8981\u4f7f\u7528TLS\uff0c\u9700\u8981\u914d\u7f6e\ndb.tls.client\n\u90e8\u5206\uff0c\u53c2\u8003Postgres\u90e8\u5206\u3002\n\n\n\u914d\u7f6eLDAP\n\n\nThe Fabric CA server can be configured to read from an LDAP server.\n\n\nIn particular, the Fabric CA server may connect to an LDAP server to do the following:\n\n\n\n\nauthenticate an identity prior to enrollment\n\n\nretrieve an identity\u2019s attribute values which are used for authorization.\n\n\n\n\nModify the LDAP section of the Fabric CA server\u2019s configuration file to configure the server to connect to an LDAP server.\n\n\nFabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u914d\u7f6e\u4e3a\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002\n\n\n\u7279\u522b\u5730\uff0c\bFabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u6765\u505a\u4e0b\u9762\u7684\u4e8b\u60c5\uff1a\n\n\n\n\n\u767b\u5f55\u524d\u9a8c\u8bc1\u4e00\u4e2a\u8eab\u4efd\n\n\n\u6388\u6743\u65f6\u83b7\u53d6\u4e00\u4e2a\u8eab\u4efd\u7684\b\u5c5e\u6027\u503c\n\n\n\n\n\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539LDAP\u7684\u914d\u7f6e\u6765\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002\n\n\nldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url: \nscheme\n://\nadminDN\n:\nadminPassword\n@\nhost\n:\nport\n/\nbase\n\n    userfilter: filter\n\n\n\nwhere:\n\n\n\n\n\n\nscheme is one of ldap or ldaps;\n\n\n\n\n\n\nadminDN is the distinquished name of the admin user;\n\n\n\n\n\n\npass is the password of the admin user;\n\n\n\n\n\n\nhost is the hostname or IP address of the LDAP server;\n\n\n\n\n\n\nport is the optional port number, where default 389 for ldap and 636 for ldaps;\n\n\n\n\n\n\nbase is the optional root of the LDAP tree to use for searches;\n\n\n\n\n\n\nfilter is a filter to use when searching to convert a login user name to a distinquished name. For example, a value of (uid=%s) searches for LDAP entries with the value of a uid attribute whose value is the login user name. Similarly, (email=%s) may be used to login with an email address.\n\n\n\n\n\n\n\u5176\u4e2d\uff1a\n\n\n\n\n\n\nscheme \bldap\u6216\u8005ldaps;\n\n\n\n\n\n\nadminDN \u7ba1\u7406\u5458\u7684\u533a\u522b\u540d;\n\n\n\n\n\n\npass \u7ba1\u7406\u5458\u7684\u5bc6\u7801;\n\n\n\n\n\n\nhost LDAP\u670d\u52a1\u5668\u7684\u57df\u540d\u6216\u8005IP;\n\n\n\n\n\n\nport \u53ef\u9009\u7684\u7aef\u53e3\u53f7\uff0cldap\u9ed8\u8ba4\u4e3a389\uff0cldaps\u9ed8\u8ba4\u4e3a636;\n\n\n\n\n\n\nbase \u53ef\u9009\u7684LDAP\u6811\u7684\u6839\uff0c\u7528\u4e8e\u641c\u7d22\u65f6;\n\n\n\n\n\n\nfilter \u641c\u7d22\u65f6\u7684\u8fc7\u6ee4\u5668\uff0c\u628a\u767b\u9646\u7528\u6237\u540d\u8f6c\u6362\u4e3a\u4e00\u4e2a\u533a\u522b\u540d\u3002\u6bd4\u5982\uff0c\uff08uid=%s\uff09\u4f1a\u641c\u7d22uid\u503c\u7b49\u4e8e\u7528\u6237\u767b\u5f55\u540d\u7684LDAP\u5b9e\u4f53\u3002\u7c7b\u4f3c\u5730\uff0c\uff08email=%s\uff09\u53ef\u4ee5\u7528\u4e8e\u90ae\u7bb1\u5730\u5740\u4f5c\u4e3a\b\u7528\u6237\u540d\u7684\u767b\u9646\u3002\n\n\n\n\n\n\nThe following is a sample configuration section for the default settings for the OpenLDAP server whose docker image is at \nhttps://github.com/osixia/docker-openldap\n.\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\b\u914d\u7f6e\u4f8b\u5b50\uff0c\u7528\u4e8eOpenLDAP\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0cOpenLDAP\u7684docker\u955c\u50cf\u5728\nhttps://github.com/osixia/docker-openldap\n\u3002\n\n\nldap:\n    enabled: true\n    url: ldap://cn=admin,dc=example,dc=org:admin@localhost:10389/dc=example,dc=org\n    userfilter: (uid=%s)\n\n\n\nSee \nFABRIC_CA/scripts/run-ldap-tests\n for a script which starts an OpenLDAP docker image, configures it, runs the LDAP tests in \nFABRIC_CA/cli/server/ldap/ldap_test.go\n, and stops the OpenLDAP server.\n\n\n\u5728\nFABRIC_CA/scripts/run-ldap-tests\n\u6709\u4e00\u4e2a\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u80fd\u542f\u52a8OpenLDAP\u7684docker\u955c\u50cf\uff0c\u914d\u7f6e\u5b83\uff0c\u7136\u540e\u8fd0\u884c\nFABRIC_CA/cli/server/ldap/ldap_test.go\n\u91cc\u9762\u7684LDAP\b\u6d4b\u8bd5\uff0c\u6700\u540e\u505c\u6b62OpenLDAP\u670d\u52a1\u5668\u3002\n\n\nWhen LDAP is configured, enrollment works as follows:\n\n\n\n\n\n\nThe Fabric CA client or client SDK sends an enrollment request with a basic authorization header.\n\n\n\n\n\n\nThe Fabric CA server receives the enrollment request, decodes the identity name and password in the authorization header, looks up the DN (Distinquished Name) associated with the identity name using the \u201cuserfilter\u201d from the configuration file, and then attempts an LDAP bind with the identity\u2019s password. If the LDAP bind is successful, the enrollment processing is authorized and can proceed.\n\n\n\n\n\n\n\u5f53LDAP\u914d\u7f6e\u597d\u540e\uff0c\u767b\u5f55\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n\n\n\n\n\nFabric CA\u5ba2\u6237\u7aef\u6216\u8005\u5ba2\u6237\u7aefSDK\u53d1\u9001\u4e00\u4e2a\u767b\u5f55\u8bf7\u6c42\uff0c\b\u5e26\u4e0abasic\u65b9\u5f0f\u7684\u6388\u6743\u5934\u3002\n\n\n\n\n\n\nFabric CA\u670d\u52a1\u7aef\u6536\u5230\u767b\u5f55\u8bf7\u6c42\uff0c\u89e3\u7801\b\u6388\u6743\u5934\u91cc\u7684\u8eab\u4efd\u540d\u548c\u5bc6\u7801\uff0c\u67e5\u627e\u4e0e\b\u8eab\u4efd\u540d\u76f8\u5173\u8054\u7684\u533a\u522b\u540d\uff0c\b\uff08\u5173\u8054\u65b9\u5f0f\u4e3a\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\nuserfilter\n\u5b9a\u4e49\u7684\uff09\uff0c\u7136\u540e\u7528\u8eab\u4efd\u5bc6\u7801\u5c1d\u8bd5\u4e00\u4e2aLDAP\u7ed1\u5b9a\u3002\u5982\u679cLDAP\u7ed1\u5b9a\u6210\u529f\uff0c\b\u90a3\u4e48\u767b\u5f55\u8fc7\u7a0b\u88ab\u6279\u51c6\u4e86\uff0c\u80fd\u591f\u7ee7\u7eed\u3002\n\n\n\n\n\n\nWhen LDAP is configured, attribute retrieval works as follows:\n\n\n\n\n\n\nA client SDK sends a request for a batch of tcerts with one or more attributes to the Fabric CA server.\n\n\n\n\n\n\nThe Fabric CA server receives the tcert request and does as follows:\n  extracts the enrollment ID from the token in the authorization header (after validating the token);\n  does an LDAP search/query to the LDAP server, requesting all of the attribute names received in the tcert request;\n  the attribute values are placed in the tcert as normal.\n\n\n\n\n\n\n\u5f53LDAP\u914d\u7f6e\u597d\u4e86\uff0c\u5c5e\u6027\u8fd4\u56de\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\u5ba2\u6237\u7aefSDK\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u5230\u670d\u52a1\u7aef\b\uff0c\u8bf7\u6c42\u4e00\u6279tcerts\u3002\n\n\n\n\n\n\n\u670d\u52a1\u7aef\u6536\u5230tcert\u8bf7\u6c42\uff0c\u505a\u5982\u4e0b\u7684\u4e8b:\n  \u5728\u6388\u6743\u5934\u53d6\u51fa\u767b\u5f55ID\uff08\u5728\u9a8c\u8bc1token\u540e\uff09;\n  \u505a\u4e00\u6b21LDAP\u67e5\u8be2\uff0c\u5411\bLDAP\u670d\u52a1\u5668\u8bf7\u6c42tcert\u8bf7\u6c42\u4e2d\u7684\u6240\u6709\u7684\u5c5e\u6027\u540d;\n  \u5c5e\u6027\u503c\u653e\u7f6e\u5728tcert\u4e2d\u3002\n\n\n\n\n\n\n\u6784\u5efa\u4e00\u4e2a\u96c6\u7fa4\n\n\nYou may use any IP sprayer to load balance to a cluster of Fabric CA servers. This section provides an example of how to set up Haproxy to route to a Fabric CA server cluster. Be sure to change hostname and port to reflect the settings of your Fabric CA servers.\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610fIP\u4ee3\u7406\u6765\u4e3aFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\u505a\u8d1f\u8f7d\u5747\u8861\u3002\u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f8b\u5b50\u6765\b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Haproxy\u6765\u4e3a\b\u96c6\u7fa4\b\u8def\u7531\u3002\u522b\u5fd8\u4e86\u4fee\u6539\u57df\u540d\u548c\u7aef\u53e3\u3002\n\n\nhaproxy.conf\n\n\nglobal\n    maxconn 4096\n    daemon\n\ndefaults\n    mode http\n    maxconn 2000\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nlisten http-in\n    bind *:7054\n    balance roundrobin\n    server server1 hostname1:port\n    server server2 hostname2:port\n    server server3 hostname3:port\n\n\n\n\u6ce8\u610f\uff1a\u5982\u679c\u4f7f\u7528TLS\uff0c\u9700\u8981\u4f7f\u7528\nmode tcp\n\n\nFarbic CA \u5ba2\u6237\u7aef\n\n\nThis section describes how to use the fabric-ca-client command.\n\n\nThe Fabric CA client\u2019s home directory is determined as follows:\n\n\n\n\n\n\nif the \nFABRIC_CA_CLIENT_HOME\n environment variable is set, use its value;\n\n\n\n\n\n\notherwise, if the \nFABRIC_CA_HOME\n environment variable is set, use its value;\n\n\n\n\n\n\notherwise, if the \nCA_CFG_PATH\n environment variable is set, use its value;\n\n\n\n\n\n\notherwise, use \n$HOME/.fabric-ca-client\n.\n\n\n\n\n\n\nThe instructions below assume that the client configuration file exists in the client\u2019s home directory.\n\n\n\u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528fabric-ca-client\u7684\u547d\u4ee4\u3002\n\n\nFabric CA\u5ba2\u6237\u7aef\u7684\u6839\u76ee\u5f55\u5b9a\u4e49\u89c4\u5219\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_CLIENT_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\n\n\n\n\u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\n\n\n\n\u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nCA_CFG_PATH\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\n\n\n\n\u5426\u5219\uff0c\u4f7f\u7528\n$HOME/.fabric-ca-client\n\n\n\n\n\n\n\u4e0b\u9762\u7684\u6307\u5f15\u5047\u8bbe\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u5ba2\u6237\u7aef\u6839\u76ee\u5f55\u3002\n\n\n\u767b\u9646\u542f\u52a8\u7528\u6237\n\n\nFirst, if needed, customize the CSR (Certificate Signing Request) section in the client configuration file. Note that \ncsr.cn\n field must be set to the ID of the bootstrap identity. Default CSR values are shown below:\n\n\n\u9996\u5148\uff0c\u5982\u679c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u81ea\u5b9a\u4e49CSR\uff08\b\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09\uff0c\u6ce8\u610f\ncsr.cn\n\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5f15\u5bfc\u8eab\u4efd\u7684ID\u3002\u9ed8\u8ba4CSR\u5982\u4e0b\uff1a\n\n\ncsr:\n    cn: \nenrollment ID\n\n    key:\n        algo: ecdsa\n        size: 256\n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger Fabric\n        OU: Fabric CA\n    hosts:\n    - \nhostname of the fabric-ca-client\n\n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n\n\nSee CSR fields for description of the fields.\n\n\nThen run \nfabric-ca-client enroll\n command to enroll the identity. For example, following command enrolls an identity whose ID is admin and password is adminpw by calling Fabric CA server that is running locally at 7054 port.\n\n\n\u67e5\u770b\u5b57\u6bb5\u7684\u63cf\u8ff0\uff0c\nCSR fields\n\n\n\u7136\u540e\u8fd0\u884c\nfabric-ca-client enroll\n\u547d\u4ee4\u6765\u767b\u5f55\u4e00\u4e2a\u8eab\u4efd\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u5411\u4e00\u4e2a\u672c\u5730\u8fd0\u884c\u57287054\u7aef\u53e3\u7684Fabric CA\u670d\u52a1\u7aef\uff0c\u767b\u5f55\u4e86\u4e00\u4e2aID\u4e3aadmin\uff0cpassword\u4e3aadminpw\u7684\u8eab\u4efd\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client enroll -u http://admin:adminpw@localhost:7054\n\n\n\nThe enroll command stores an enrollment certificate (ECert), corresponding private key and CA certificate chain PEM files in the subdirectories of the Fabric CA client\u2019s \nmsp\n directory. You will see messages indicating where the PEM files are stored.\n\n\n\u767b\u5f55\u547d\u4ee4\u4f1a\u5b58\u50a8\u4e00\u4e2a\u767b\u5f55\u8bc1\u4e66\uff08ECert\uff09\uff0c\u76f8\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fd8\u6709CA\u8bc1\u4e66\u94fePEM\u6587\u4ef6\u3002\b\u8fd9\u4e9b\u5b58\u50a8\u5728Fabric CA\u5ba2\u6237\u7aef\u7684msp\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u4e0b\uff0c\u4f60\u4f1a\u770b\u5230\u4fe1\u606f\u63d0\u793aPEM\u5b58\u50a8\u5728\u54ea\u91cc\u3002\n\n\n\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\n\n\nThe identity performing the register request must be currently enrolled, and must also have the proper authority to register the type of the identity that is being registered.\n\n\n\u53ea\u6709\u5df2\u7ecf\u767b\u5f55\u4e86\u7684\u8eab\u4efd\u624d\u80fd\u53d1\u8d77\u6ce8\u518c\u7684\u8bf7\u6c42\uff0c\u800c\u4e14\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u6743\u9650\u6765\u6ce8\u518c\u60f3\u8981\u6ce8\u518c\u7684\u8eab\u4efd\u7c7b\u578b\u3002\n\n\nIn particular, two authorization checks are made by the Fabric CA server during registration as follows:\n\n\n\n\n\n\nThe invoker\u2019s identity must have the \u201chf.Registrar.Roles\u201d attribute with a comma-separated list of values where one of the value equals the type of identity being registered; for example, if the invoker\u2019s identity has the \u201chf.Registrar.Roles\u201d attribute with a value of \u201cpeer,app,user\u201d, the invoker can register identities of type peer, app, and user, but not orderer.\n\n\n\n\n\n\nThe affiliation of the invoker\u2019s identity must be equal to or a prefix of the affiliation of the identity being registered. For example, an invoker with an affiliation of \u201ca.b\u201d may register an identity with an affiliation of \u201ca.b.c\u201d but may not register an identity with an affiliation of \u201ca.c\u201d.\n\n\n\n\n\n\nThe following command uses the admin identity\u2019s credentials to register a new identity with an enrollment id of \u201cadmin2\u201d, a type of \u201cuser\u201d, an affiliation of \u201corg1.department1\u201d, and an attribute named \u201chf.Revoker\u201d with a value of \u201ctrue\u201d.\n\n\n\u7279\u522b\u5730\uff0c\u6ce8\u518c\u65f6Fabric CA\u670d\u52a1\u7aef\u505a\u4e24\u9879\u6743\u9650\u68c0\u67e5\uff1a\n\n\n\n\n\n\n\u6ce8\u518c\u53d1\u8d77\u8005\u7684\u201c\bhf.Registrar.Roles\u201d\u5c5e\u6027\u4e2d\u5fc5\u987b\u6709\u8bf7\u6c42\u6ce8\u518c\u7684\u7c7b\u578b\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u53d1\u8d77\u8005\u7684\b\u201chf.Registrar.Roles\u201d\u5c5e\u6027\u7684\u503c\u4e3a\u201cpeer,app,user\u201d\uff0c\u90a3\u4e48\u4ed6\u80fd\u6ce8\u518c\u7684\u7c7b\u578b\u4e3apeer\uff0capp\u548cuser\uff0c\u4e0d\u80fd\u6ce8\u518corderer\u3002\n\n\n\n\n\n\n\u53d1\u8d77\u8005\u7684affiliation\u5fc5\u987b\u4e0e\u4ed6\u8bf7\u6c42\u6ce8\u518c\u7684\u8eab\u4efd\u7684affiliation\u76f8\u540c\uff0c\u6216\u8005\u662f\u6240\u8bf7\u6c42\u6ce8affiliation\u7684\u524d\u7f00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b\u201d\u7684\u53d1\u8d77\u8005\uff0c\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b.c\u201d\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u4e0d\u80fd\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.c\u201d\u7684\u8eab\u4efd\u3002\n\n\n\n\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u7528admin\u8eab\u4efd\u7684\u51ed\u8bc1\u6765\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\uff0c\u767b\u5f55ID\u662f\u201cadmin2\u201d\uff0c\u7c7b\u578b\u4e3a\u201cuser\u201d\uff0caffiliation\u4e3a\u201corg1.department1\u201d\uff0c\u8fd8\u6709\u201chf.Revoker\u201d\u5c5e\u6027\u4e3a\u201ctrue\u201d\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin2 --id.type user --id.affiliation org1.department1 --id.attr hf.Revoker=true\n\n\n\nThe password, also known as the enrollment secret, is printed. This password is required to enroll the identity. This allows an administrator to register an identity and give the enrollment ID and the secret to someone else to enroll the identity.\n\n\n\u5bc6\u7801\u4f1a\u88ab\b\u6253\u5370\u51fa\u6765\uff0c\u767b\u5f55\u8fd9\u4e2a\u65b0\u6ce8\u518c\u7684\u8eab\u4efd\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u5bc6\u7801\u3002\u8fd9\u5141\u8bb8\u4e00\u4e2a\u7ba1\u7406\u5458\u6ce8\u518c\u8eab\u4efd\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8eab\u4efd\u7684ID\b\u548c\u5bc6\u7801\u7ed9\u522b\u4eba\u6765\u767b\u9646\u3002\n\n\nYou may set default values for any of the fields used in the register command by editing the client\u2019s configuration file. For example, suppose the configuration file contains the following:\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\u6765\u8bbe\u7f6e\u6ce8\u518c\u65f6\u4e00\u4e9b\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e0b\u9762\u7684\u5185\u5bb9\uff1a\n\n\nid:\n    name:\n    type: user\n    affiliation: org1.department1\n    attributes:\n        - name: hf.Revoker\n        value: true\n        - name: anotherAttrName\n        value: anotherAttrValue\n\n\n\nThe following command would then register a new identity with an enrollment id of \u201cadmin3\u201d which it takes from the command line, and the remainder is taken from the configuration file including the identity type: \u201cuser\u201d, affiliation: \u201corg1.department1\u201d, and two attributes: \u201chf.Revoker\u201d and \u201canotherAttrName\u201d.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\b\uff0cid\u4e3aadmin3\uff0c\u5176\u4ed6\u7684\u5185\u5bb9\u4f1a\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u51fa\u6765\u3002\u5305\u62ec\uff1a\u7c7b\u578b\u201cuser\u201d\uff0caffiliation \u201corg1.department1\u201d\uff0c\u8fd8\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u201chf.Revoker\u201d\u548c\u201canotherAttrName\u201d\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin3\n\n\n\nTo register an identity with multiple attributes requires specifying all attribute names and values in the configuration file as shown above.\n\n\n\u6ce8\u518c\u6709\u591a\u4e2a\u5c5e\u6027\u7684\u8eab\u4efd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\u6240\u6709\u5c5e\u6027\b\u540d\u548c\u5c5e\u6027\u503c\uff0c\u5982\u4e0a\u6240\u793a\u3002\n\n\nNext, let\u2019s register a peer identity which will be used to enroll the peer in the following section. The following command registers the peer1 identity. Note that we choose to specify our own password (or secret) rather than letting the server generate one for us.\n\n\n\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f1a\u5728\u4e0b\u9762\b\u5185\u5bb9\u767b\u9646\u8282\u70b9\u7684\u65f6\u5019\u7528\u5230\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u6ce8\u518c\u4e86\u4e00\u4e2apeer1\u8eab\u4efd\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u6307\u660e\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u800c\u4e0d\u662f\u7531\u670d\u52a1\u5668\u751f\u6210\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name peer1 --id.type peer --id.affiliation org1.department1 --id.secret peer1pw\n\n\n\n\u767b\u5f55\u4e00\u4e2a\u8282\u70b9\n\n\nNow that you have successfully registered a peer identity, you may now enroll the peer given the enrollment ID and secret (i.e. the password from the previous section). This is similar to enrolling the bootstrap identity except that we also demonstrate how to use the \u201c-M\u201d option to populate the Hyperledger Fabric MSP (Membership Service Provider) directory structure.\n\n\n\u73b0\u5728\u4f60\u6210\u529f\u5730\u6ce8\u518c\u4e86\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f60\u53ef\u4ee5\u7528ID\u548c\b\u5bc6\u7801\u767b\u9646\u3002\b\u8fd9\u90e8\u5206\u4e0e\u767b\u9646\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u7c7b\u4f3c\u3002\u6211\u4eec\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u201c-M\u201d\u9009\u9879\u6765\b\u66f4\u6362MSP\u7684\u76ee\u5f55\u3002\n\n\nThe following command enrolls peer1. Be sure to replace the value of the \u201c-M\u201d option with the path to your peer\u2019s MSP directory which is the \u2018mspConfigPath\u2019 setting in the peer\u2019s core.yaml file. You may also set the FABRIC_CA_CLIENT_HOME to the home directory of your peer.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u767b\u9646peer1\u3002\u8bb0\u5f97\b\u5728\u201c-M\u201d\u9009\u9879\u4e0b\u66f4\u6539\b\u4f60\u81ea\u5df1\b\u7684MSP\u76ee\u5f55\uff0c\bMSP\b\u76ee\u5f55\u662f\u7531\u8282\u70b9\u7684core.yaml\u91cc\u7684\u201cmspConfigPath\u201d\u6307\u5b9a\u7684\u3002\u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6eFABRIC_CA_CLIENT_HOME\u73af\u5883\u53d8\u91cf\u4e3apeer\u7684\u6839\u76ee\u5f55\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client enroll -u http://peer1:peer1pw@localhost:7054 -M $FABRIC_CA_CLIENT_HOME/msp\n\n\n\nEnrolling an orderer is the same, except the path to the MSP directory is the \u2018LocalMSPDir\u2019 setting in your orderer\u2019s orderer.yaml file.\n\n\n\b\u767b\u9646\u4e00\u4e2aorderer\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u9664\u4e86MSP\u76ee\u5f55\u662f\u8bbe\u7f6e\u5728\u4f60\u7684orderer\u7684orderer.yaml\u6587\u4ef6\u91cc\u7684\u201cLocalMSPDir\u201d\u3002\n\n\n\u4ece\u53e6\u4e00\u4e2aFabric CA\u670d\u52a1\u5668\u83b7\u5f97CA\u8bc1\u4e66\u94fe\n\n\nIn general, the cacerts directory of the MSP directory must contain the certificate authority chains of other certificate authorities, representing all of the roots of trust for the peer.\n\n\n\u901a\u5e38\uff0cMSP\u76ee\u5f55\u7684ca\u8bc1\u4e66\u76ee\u5f55\u5fc5\u987b\u5305\u542b\u8bc1\u4e66\u94fe\uff0c\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u4fe1\u4efb\u7684\u4fe1\u4efb\u4e2d\u5fc3\u3002\n\n\nThe fabric-ca-client getcacerts command is used to retrieve these certificate chains from other Fabric CA server instances.\n\n\nfabric-ca-client getcacerts\n\u547d\u4ee4\b\u7528\u4e8e\u4ece\u5176\u4ed6Fabric CA\u670d\u52a1\u5668\u5b9e\u4f8b\u83b7\u53d6\u8fd9\u4e9b\u8bc1\u4e66\u94fe\u3002\n\n\nFor example, the following will start a second Fabric CA server on localhost listening on port 7055 with a name of \u201cCA2\u201d. This represents a completely separate root of trust and would be managed by a different member on the blockchain.\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u5728\u672c\u5730\u542f\u52a8\u7b2c\u4e8c\u4e2aFabric CA\u670d\u52a1\u5668\uff0c\u76d1\u542c7055\u7aef\u53e3\uff0c\u547d\u540d\u4e3a\u201cCA2\u201c\u3002\u8fd9\u4ee3\u8868\u4e24\u4e2a\u7531\u4e0d\u540c\u6210\u5458\u7ba1\u7406\u7684\u5206\u5f00\u7684\u4fe1\u4efb\b\u4e2d\u5fc3\u3002\n\n\n# export FABRIC_CA_SERVER_HOME=$HOME/ca2\n# fabric-ca-server start -b admin:ca2pw -p 7055 -n CA2\n\n\n\nThe following command will install CA2\u2019s certificate chain into peer1\u2019s MSP directory.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u628aCA2\u7684\u8bc1\u4e66\u94fe\u5b89\u88c5\u8fdbpeer1\u7684MSP\u76ee\u5f55\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client getcacert -u http://localhost:7055 -M $FABRIC_CA_CLIENT_HOME/msp\n\n\n\n\u91cd\u65b0\u767b\u9646\u4e00\u4e2a\u8eab\u4efd\n\n\nSuppose your enrollment certificate is about to expire or has been compromised. You can issue the reenroll command to renew your enrollment certificate as follows.\n\n\n\u5047\u8bbe\u4f60\u7684\u767b\u9646\b\u8bc1\u4e66\u5feb\u8fc7\u671f\u4e86\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u767b\u9646\u6765\b\u66ff\u6362\u4f60\u7684\u767b\u9646\u8bc1\u4e66\uff08\bECert\uff09\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client reenroll\n\n\n\n\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd\n\n\nAn identity or a certificate can be revoked. Revoking an identity will revoke all the certificates owned by the identity and will also prevent the identity from getting any new certificates. Revoking a certificate will invalidate a single certificate.\n\n\n\b\b\u8eab\u4efd\u548c\u8bc1\u4e66\u90fd\u80fd\u88ab\u64a4\u9500\u3002\u64a4\u9500\u4e00\u4e2a\b\u8eab\u4efd\u4f1a\u64a4\u9500\u8be5\b\b\u8eab\u4efd\u62e5\u6709\u7684\u6240\u6709\u8bc1\u4e66\uff0c\u8be5\u8eab\u4efd\u4e5f\u4e0d\u80fd\u518d\u83b7\u5f97\u65b0\u7684\u8bc1\u4e66\u3002\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u4f1a\u4f7f\u8be5\u8bc1\u4e66\u5931\u6548\u3002\n\n\nIn order to revoke a certificate or an identity, the calling identity must have the hf.Revoker attribute. The revoking identity can only revoke a certificate or an identity that has an affiliation that is equal to or prefixed by the revoking identity\u2019s affiliation.\n\n\n\u4e3a\u4e86\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u6709hf.Revoker\u5c5e\u6027\u3002\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500\u4e0e\u81ea\u5df1\u7684affiliation\u76f8\u540c\u7684\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u6216\u8005\u53d1\u8d77\u8005\u7684affiliation\u662f\u88ab\b\u64a4\u9500\u8005\u7684affiliation\u7684\u524d\u7f00\u3002\n\n\nFor example, a revoker with affiliation orgs.org1 can revoke an identity affiliated with orgs.org1 or orgs.org1.department1 but can\u2019t revoke an identity affiliated with orgs.org2.\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u201corgs.org1\u201d\u7684\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500orgs.org1\u6216\u8005orgs.org1.department1\u7684\u8eab\u4efd\uff0c\u800c\b\u4e0d\u80fd\u64a4\u9500orgs.org2\u7684\u8eab\u4efd\u3002\n\n\nThe following command disables an identity and revokes all of the certificates associated with the identity. All future requests received by the Fabric CA server from this identity will be rejected.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u64a4\u9500\u4e00\u4e2a\u8eab\u4efd\u3002\u5c06\u6765\u6240\u6709\u53d1\u81ea\u8be5\u8eab\u4efd\u7684\u8bf7\u6c42\u90fd\u4f1a\u88abFabric CA\b\u670d\u52a1\u5668\u62d2\u6536\u3002\n\n\nfabric-ca-client revoke -e \nenrollment_id\n -r \nreason\n\n\n\n\nThe following are the supported reasons that can be specified using -r flag:\n\n\n\u4e0b\u9762\u662f\n-r\n\u9009\u9879\u652f\u6301\u7684\u7406\u7531\uff1a\n\n\n\n\n\n\nunspecified\n\n\n\n\n\n\nkeycompromise\n\n\n\n\n\n\ncacompromise\n\n\n\n\n\n\naffiliationchange\n\n\n\n\n\n\nsuperseded\n\n\n\n\n\n\ncessationofoperation\n\n\n\n\n\n\ncertificatehold\n\n\n\n\n\n\nremovefromcrl\n\n\n\n\n\n\nprivilegewithdrawn\n\n\n\n\n\n\naacompromise\n\n\n\n\n\n\nFor example, the bootstrap admin who is associated with root of the affiliation tree can revoke peer1\u2018s identity as follows:\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u7740\b\u6839\baffiliation\u7684admin\u53ef\u4ee5\u56de\u6536peer1\u8eab\u4efd\uff1a\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client revoke -e peer1\n\n\n\nAn enrollment certificate that belongs to an identity can be revoked by specifying its AKI (Authority Key Identifier) and serial number as follows:\n\n\n\u4e00\u4e2a\u8eab\u4efd\u53ef\u4ee5\u64a4\u9500\u81ea\u5df1\u7684\u767b\u9646\u8bc1\u4e66\uff08ECert\uff09\uff0c\u9700\u8981\u6307\u5b9aECert\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a\n\n\nfabric-ca-client revoke -a xxx -s yyy -r \nreason\n\n\n\n\nFor example, you can get the AKI and the serial number of a certificate using the openssl command and pass them to the revoke command to revoke the said certificate as follows:\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7openssl\u547d\u4ee4\u6765\u83b7\u53d6\u4e00\u4e2a\u8bc1\u4e66\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a\n\n\nserial=$(openssl x509 -in userecert.pem -serial -noout | cut -d \"=\" -f 2)\naki=$(openssl x509 -in userecert.pem -text | awk '/keyid/ {gsub(/ *keyid:|:/,\"\",$1);print tolower($0)}')\nfabric-ca-client revoke -s $serial -a $aki -r affiliationchange\n\n\n\n\u542f\u7528TLS\n\n\nThis section describes in more detail how to configure TLS for a Fabric CA client.\n\n\n\u8fd9\u4e00\u90e8\u5206\u4ecb\u7ecd\u5982\u4f55\u4e3aFabric CA\u5ba2\u6237\u7aef\u914d\u7f6eTLS\u3002\n\n\nThe following sections may be configured in the \nfabric-ca-client-config.yaml\n.\n\n\n\u4e0b\u9762\u7684\u53ef\u4ee5\u914d\u7f6e\u5728\nfabric-ca-client-config.yaml\n\u4e2d\u3002\n\n\ntls:\n    # Enable TLS (default: false)\n    enabled: true\n    certfiles:\n        - root.pem\n    client:\n        certfile: tls_client-cert.pem\n        keyfile: tls_client-key.pem\n\n\n\nThe certfiles option is the set of root certificates trusted by the client. This will typically just be the root Fabric CA server\u2019s certificate found in the server\u2019s home directory in the ca-cert.pem file.\n\n\ncertfiles\n\u662f\u8be5\u5ba2\u6237\u7aef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u96c6\u5408\u3002\u4e00\u822c\u8fd9\u90fd\u4f1a\u662f\bFabric CA\u670d\u52a1\u7aef\u6839\u76ee\u5f55\b\u4e0b\u7684ca-cert.pem\u3002\n\n\nThe client option is required only if mutual TLS is configured on the server.\n\n\n\u53ea\u6709\u5728\u670d\u52a1\u5668\u914d\u7f6e\u4e86\u53cc\u5411TLS\u7684\u60c5\u51b5\u4e0b\uff0c\nclient\n\u9009\u9879\u624d\u9700\u8981\u3002\n\n\n\u9644\u5f55\n\n\nPostgres SSL \u914d\u7f6e\n\n\n\u914d\u7f6ePostgre\u670d\u52a1\u5668\u7684\u57fa\u672c\u6b65\u9aa4\uff1a\n\n\n\n\n\n\nIn postgresql.conf, uncomment SSL and set to \u201con\u201d (SSL=on)\n\n\n\n\n\n\nPlace certificate and key files in the Postgres data directory.\n\n\n\n\n\n\nInstructions for generating self-signed certificates for: https://www.postgresql.org/docs/9.5/static/ssl-tcp.html\n\n\nNote: Self-signed certificates are for testing purposes and should not be used in a production environment\n\n\n\n\n\n\n\u5728postgresql.conf\u4e2d\u6253\u5f00SSL\uff08SSL=on\uff09\n\n\n\n\n\n\n\u628a\u8bc1\u4e66\u548c\b\u5bc6\u94a5\u6587\u4ef6\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u4e0b\u3002\n\n\n\n\n\n\n\u5982\u4f55\u751f\u6210\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\uff1ahttps://www.postgresql.org/docs/9.5/static/ssl-tcp.html\n\n\n\u6ce8\u610f\uff1a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\uff0c\u8bf7\u52ff\u7528\u4e8e\b\u751f\u4ea7\u73af\u5883\u3002\n\n\nPostgres \u670d\u52a1\u5668 - \u9700\u8981\u5ba2\u6237\u7aef\u8bc1\u4e66\n\n\n\n\n\n\nPlace certificates of the certificate authorities (CAs) you trust in the file root.crt in the Postgres data directory\n\n\n\n\n\n\nIn postgresql.conf, set \u201cssl_ca_file\u201d to point to the root cert of the client (CA cert)\n\n\n\n\n\n\nSet the clientcert parameter to 1 on the appropriate hostssl line(s) in pg_hba.conf.\n\n\n\n\n\n\nFor more details on configuring SSL on the Postgres server, please refer to the following Postgres documentation: https://www.postgresql.org/docs/9.4/static/libpq-ssl.html\n\n\n\n\n\n\n\u628a\u4f60\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u91cc\u7684root.crt\u91cc\n\n\n\n\n\n\n\u5728\bpostgresql.conf\u91cc\uff0c\u8bbe\u7f6e\u201cssl_ca_file\u201d\u6307\u5411\u5ba2\u6237\u7aef\u7684\u6839\u8bc1\u4e66\n\n\n\n\n\n\n\u5728pg_hba.conf\u91cc\uff0c\u5728\b\u6b63\u786e\u7684hostssl\u884c\u628aclientcert\b\u53c2\u6570\u8bbe\u4e3a1\n\n\n\n\n\n\n\u66f4\u591a\u4fe1\u606f\uff1ahttps://www.postgresql.org/docs/9.4/static/libpq-ssl.html\n\n\nMySQL SSL \u914d\u7f6e\n\n\nOn MySQL 5.7.X, certain modes affect whether the server permits \u20180000-00-00\u2019 as a valid date. It might be necessary to relax the modes that MySQL server uses. We want to allow the server to be able to accept zero date values.", 
            "title": "CA"
        }, 
        {
            "location": "/ca-setup_zh/#_1", 
            "text": "The diagram below illustrates how the Fabric CA server fits into the overall Hyperledger Fabric architecture.  \u4e0b\u56fe\u8bf4\u660e\u4e86 Fabric CA \u670d\u52a1\u7aef\u5982\u4f55\u5728 Hyperledger Fabric \u67b6\u6784\u4e2d\u53d1\u6325\u4f5c\u7528   There are two ways of interacting with a Fabric CA server: via the Fabric CA client or through one of the Fabric SDKs. All communication to the Fabric CA server is via REST APIs. See fabric-ca/swagger/swagger-fabric-ca.json for the swagger documentation for these REST APIs.  \u6709\u4e24\u79cd\u65b9\u5f0f\u4e0e Fabric CA \u670d\u52a1\u7aef\u4ea4\u4e92\uff1a\u901a\u8fc7 Fabric CA \u5ba2\u6237\u7aef\uff0c\u6216\u8005 Fabric SDK\uff0c\u6240\u6709\u4e0e Fabric CA \u7684\u4ea4\u4e92\u90fd\u662f\u901a\u8fc7 REST APIs \u6765\u5b9e\u73b0\u7684\u3002REST APIs \u7684swagger\u8bf4\u660e\u6587\u6863\u89c1  fabric-ca/swagger/swagger-fabric-ca.json    The Fabric CA client or SDK may connect to a server in a cluster of Fabric CA servers. This is illustrated in the top right section of the diagram. The client routes to an HA Proxy endpoint which load balances traffic to one of the fabric-ca-server cluster members. All Fabric CA servers in a cluster share the same database for keeping track of users and certificates. If LDAP is configured, the user information is kept in LDAP rather than the database.  Fabric CA \u5ba2\u6237\u7aef\u6216\u8005 SDK \u53ef\u80fd\u4f1a\u8fde\u63a5\u5230 Fabric CA \u96c6\u7fa4\u4e2d\u67d0\u4e00\u4e2a Fabric CA \u670d\u52a1\u7aef\uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u901a\u8fc7\u4e0a\u56fe\u53f3\u4e0a\u90e8\u5206\u83b7\u5f97\u66f4\u597d\u7684\u7406\u89e3\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u662f\u4e00\u4e2a HA \u4ee3\u7406\u8282\u70b9\uff0c\u8fd9\u4e2a HA \u4ee3\u7406\u8282\u70b9\u4e3a Fabric CA \u96c6\u7fa4\u4f5c\u8d1f\u8f7d\u5747\u8861\u3002\u6240\u6709\u7684 Fabric CA \u670d\u52a1\u7aef\u5171\u4eab\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u6570\u636e\u5e93\u7528\u6765\u4fdd\u5b58\u7528\u6237\u548c\u8bc1\u4e66\u4fe1\u606f\u3002\u5982\u679c\u914d\u7f6e\u4e86 LDAP\uff0c\u90a3\u4e48\u7528\u6237\u4fe1\u606f\u5c06\u4f1a\u4fdd\u5b58\u5728 LDAP \u4e2d\uff0c\u800c\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/ca-setup_zh/#_2", 
            "text": "", 
            "title": "\u5165\u95e8"
        }, 
        {
            "location": "/ca-setup_zh/#_3", 
            "text": "Go 1.7+ \u6216\u66f4\u9ad8\u7248\u672c    GOPATH \u73af\u5883\u53d8\u91cf\u6b63\u786e\u8bbe\u7f6e    libtool \u548c libtdhl-dev \u8fd9\u4e24\u4e2a\u5305\u5b89\u88c5\u597d    \u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 libtool  # sudo apt install libtool libltdl-dev  \u4e86\u89e3\u66f4\u591a\u6709\u5173 libtool \u7684\u4fe1\u606f\uff0c\u53c2\u8003  https://www.gnu.org/software/libtool/  \u4e86\u89e3\u66f4\u591a\u6709\u5173 libtdhr-dev \u7684\u4fe1\u606f\uff0c\u53c2\u8003  https://www.gnu.org/software/libtool/manual/html_node/Using-libltdl.html", 
            "title": "\u524d\u7f6e\u6761\u4ef6"
        }, 
        {
            "location": "/ca-setup_zh/#_4", 
            "text": "\u4ee5\u4e0b\u547d\u4ee4\u4f1a\u540c\u65f6\u5b89\u88c5 fabric-ca-server \u548c fabric-ca-client  # go get -u github.com/hyperledger/fabric-ca/cmd/...", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/ca-setup_zh/#_5", 
            "text": "\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8 fabric-ca-server  # fabric-ca-server start -b admin:adminpw  The -b option provides the enrollment ID and secret for a bootstrap administrator. A default configuration file named fabric-ca-server-config.yaml is created in the local directory which can be customized.  -b  \u9009\u9879\u7528\u6765\u63d0\u4f9b\u542f\u52a8\u7ba1\u7406\u5458\u7684\u767b\u5f55 ID \u548c\u5bc6\u7801\u3002\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6  fabric-ca-server-config.yaml  \u4f1a\u81ea\u52a8\u5728\u672c\u5730\u76ee\u5f55\u521b\u5efa\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002", 
            "title": "\u539f\u751f\u542f\u52a8\u670d\u52a1\u5668"
        }, 
        {
            "location": "/ca-setup_zh/#docker", 
            "text": "\u4f7f\u7528 docker-compose \u6765\u542f\u52a8  # cd $GOPATH/src/github.com/hyperledger/fabric-ca\n# make docker\n# cd docker/server\n# docker-compose up -d  hyperledger/fabric-ca docker \u955c\u50cf\u5305\u542b fabric-ca-server \u548c the fabric-ca-client", 
            "title": "\u901a\u8fc7 Docker \u542f\u52a8\u670d\u52a1\u5668"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u63d0\u4f9b fabric-ca-server \u548c fabric-ca-client \u547d\u4ee4\u884c\u7684\u4f7f\u7528\u8bf4\u660e\u3002\u53e6\u5916\u7684\u4f7f\u7528\u4fe1\u606f\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e2d\u63d0\u4f9b\u3002  fabric-ca-server  Hyperledger Fabric Certificate Authority Server\n\nUsage:\n    fabric-ca-server [command]\n\nAvailable Commands:\n    init        Initialize the Fabric CA server\n    start       Start the Fabric CA server\n\nFlags:\n        --address string                         Listening address of Fabric CA server (default \"0.0.0.0\")\n    -b, --boot string                            The user:pass for bootstrap admin which is required to build default config file\n        --ca.certfile string                     PEM-encoded CA certificate file (default \"ca-cert.pem\")\n        --ca.chainfile string                    PEM-encoded CA chain file (default \"ca-chain.pem\")\n        --ca.keyfile string                      PEM-encoded CA key file (default \"ca-key.pem\")\n    -n, --ca.name string                         Certificate Authority name\n    -c, --config string                          Configuration file (default \"fabric-ca-server-config.yaml\")\n        --csr.cn string                          The common name field of the certificate signing request to a parent Fabric CA server\n        --csr.hosts stringSlice                  A list of space-separated host names in a certificate signing request to a parent Fabric CA server\n        --csr.serialnumber string                The serial number in a certificate signing request to a parent Fabric CA server\n        --db.datasource string                   Data source which is database specific (default \"fabric-ca-server.db\")\n        --db.tls.certfiles stringSlice           PEM-encoded list of trusted certificate files\n        --db.tls.client.certfile string          PEM-encoded certificate file when mutual authenticate is enabled\n        --db.tls.client.keyfile string           PEM-encoded key file when mutual authentication is enabled\n        --db.type string                         Type of database; one of: sqlite3, postgres, mysql (default \"sqlite3\")\n    -d, --debug                                  Enable debug level logging\n        --ldap.enabled                           Enable the LDAP client for authentication and attributes\n        --ldap.groupfilter string                The LDAP group filter for a single affiliation group (default \"(memberUid=%s)\")\n        --ldap.url string                        LDAP client URL of form ldap://adminDN:adminPassword@host[:port]/base\n        --ldap.userfilter string                 The LDAP user filter to use when searching for users (default \"(uid=%s)\")\n    -p, --port int                               Listening port of Fabric CA server (default 7054)\n        --registry.maxenrollments int            Maximum number of enrollments; valid if LDAP not enabled\n        --tls.certfile string                    PEM-encoded TLS certificate file for server's listening port (default \"ca-cert.pem\")\n        --tls.clientauth.certfiles stringSlice   PEM-encoded list of trusted certificate files\n        --tls.clientauth.type string             Policy the server will follow for TLS Client Authentication. (default \"noclientcert\")\n        --tls.enabled                            Enable TLS on the listening port\n        --tls.keyfile string                     PEM-encoded TLS key for server's listening port (default \"ca-key.pem\")\n    -u, --url string                             URL of the parent Fabric CA server\n\n\nUse \"fabric-ca-server [command] --help\" for more information about a command.  fabric-ca-client  # fabric-ca-client\nHyperledger Fabric Certificate Authority Client\n\nUsage:\n    fabric-ca-client [command]\n\nAvailable Commands:\n    enroll      Enroll an identity\n    getcacert   Get CA certificate chain\n    reenroll    Reenroll an identity\n    register    Register an identity\n    revoke      Revoke an identity\n\nFlags:\n    -c, --config string                Configuration file (default \"$HOME/.fabric-ca-client/fabric-ca-client-config.yaml\")\n        --csr.cn string                The common name field of the certificate signing request\n        --csr.hosts stringSlice        A list of space-separated host names in a certificate signing request\n        --csr.serialnumber string      The serial number in a certificate signing request\n    -d, --debug                        Enable debug level logging\n        --enrollment.hosts string      Comma-separated host list\n        --enrollment.label string      Label to use in HSM operations\n        --enrollment.profile string    Name of the signing profile to use in issuing the certificate\n        --id.affiliation string        The identity's affiliation\n        --id.attr string               Attributes associated with this identity (e.g. hf.Revoker=true)\n        --id.maxenrollments int        The maximum number of times the secret can be reused to enroll\n        --id.name string               Unique name of the identity\n        --id.secret string             The enrollment secret for the identity being registered\n        --id.type string               Type of identity being registered (e.g. 'peer, app, user')\n    -M, --mspdir string                Membership Service Provider directory (default \"msp\")\n    -m, --myhost string                Hostname to include in the certificate signing request during enrollment (default \"$HOSTNAME\")\n        --tls.certfiles stringSlice    PEM-encoded list of trusted certificate files\n        --tls.client.certfile string   PEM-encoded certificate file when mutual authenticate is enabled\n        --tls.client.keyfile string    PEM-encoded key file when mutual authentication is enabled\n    -u, --url string                   URL of the Fabric CA server (default \"http://localhost:7054\")\n\nUse \"fabric-ca-client [command] --help\" for more information about a command.  Note that command line options that are string slices (lists) can be specified either by specifying the option with space-separated list elements or by specifying the option multiple times, each with a string value that make up the list. For example, to specify host1 and host2 for csr.hosts option, you can either pass \u2013csr.hosts \u201chost1 host2\u201d or \u2013csr.hosts host1 \u2013csr.hosts host2  \u6ce8\u610f\u5728\u547d\u4ee4\u884c\u4e2d\u9700\u8981\u7ed9\u67d0\u4e2a\u9009\u9879\u8f93\u5165\u5217\u8868\u65f6\uff0c\u53ef\u4ee5\b\u7528\u7a7a\u683c\u5206\u5272\uff0c\u6216\u8005\u591a\u6b21\u4f7f\u7528\u8be5\u9009\u9879\u3002\u4f8b\u5982\uff0c\u6307\u5b9a host1 \u548c host2 \u7ed9csr.hosts\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u7528\u2013csr.hosts \u201chost1 host2\u201d\u6216\u8005\u2013csr.hosts host1 \u2013csr.hosts host2", 
            "title": "\u4f53\u9a8c Fabric CA \u547d\u4ee4\u884c"
        }, 
        {
            "location": "/ca-setup_zh/#_6", 
            "text": "", 
            "title": "\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca_1", 
            "text": "A configuration file can be provided to the server using the -c or  config option. If the  config option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the server\u2019s home directory (see Fabric CA Server section more info).  \u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7  -c  \u6216\u8005  --config  \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c  --config  \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-server \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003  Fabric CA \u670d\u52a1\u7aef  \u4e86\u89e3\u66f4\u591a\uff09  # Server's listening port (default: 7054)\nport: 7054\n\n# Enables debug logging (default: false)\ndebug: false\n\n#############################################################################\n#  TLS section for the server's listening port\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfile: ca-cert.pem\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The CA section contains the key and certificate files used when\n#  issuing enrollment certificates (ECerts) and transaction\n#  certificates (TCerts).\n#############################################################################\nca:\n    # Certificate file (default: ca-cert.pem)\n    certfile: ca-cert.pem\n    # Key file (default: ca-key.pem)\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The registry section controls how the Fabric CA server does two things:\n#  1) authenticates enrollment requests which contain identity name and\n#     password (also known as enrollment ID and secret).\n#  2) once authenticated, retrieves the identity's attribute names and\n#     values which the Fabric CA server optionally puts into TCerts\n#     which it issues for transacting on the Hyperledger Fabric blockchain.\n#     These attributes are useful for making access control decisions in\n#     chaincode.\n#  There are two main configuration options:\n#  1) The Fabric CA server is the registry\n#  2) An LDAP server is the registry, in which case the Fabric CA server\n#     calls the LDAP server to perform these tasks.\n#############################################################################\nregistry:\n    # Maximum number of times a password/secret can be reused for enrollment\n    # (default: 0, which means there is no limit)\n    maxEnrollments: 0\n\n    # Contains identity information which is used when LDAP is disabled\n    identities:\n        - name:  ADMIN \n        pass:  ADMINPW \n        type: client\n        affiliation: \"\"\n        attrs:\n            hf.Registrar.Roles: \"client,user,peer,validator,auditor,ca\"\n            hf.Registrar.DelegateRoles: \"client,user,validator,auditor\"\n            hf.Revoker: true\n            hf.IntermediateCA: true\n\n#############################################################################\n#  Database section\n#  Supported types are: \"sqlite3\", \"postgres\", and \"mysql\".\n#  The datasource value depends on the type.\n#  If the type is \"sqlite3\", the datasource value is a file name to use\n#  as the database store.  Since \"sqlite3\" is an embedded database, it\n#  may not be used if you want to run the Fabric CA server in a cluster.\n#  To run the Fabric CA server in a cluster, you must choose \"postgres\"\n#  or \"mysql\".\n#############################################################################\ndb:\n    type: sqlite3\n    datasource: fabric-ca-server.db\n    tls:\n        enabled: false\n        certfiles:\n            - db-server-cert.pem\n        client:\n            certfile: db-client-cert.pem\n            keyfile: db-client-key.pem\n\n#############################################################################\n#  LDAP section\n#  If LDAP is enabled, the Fabric CA server calls LDAP to:\n#  1) authenticate enrollment ID and secret (i.e. identity name and password)\n#     for enrollment requests\n#  2) To retrieve identity attributes\n#############################################################################\nldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url: ldap:// adminDN : adminPassword @ host : port / base \n    tls:\n        certfiles:\n            - ldap-server-cert.pem\n        client:\n            certfile: ldap-client-cert.pem\n            keyfile: ldap-client-key.pem\n\n#############################################################################\n#  Affiliation section\n#############################################################################\naffiliations:\n    org1:\n        - department1\n        - department2\n    org2:\n        - department1\n\n#############################################################################\n#  Signing section\n#############################################################################\nsigning:\n    profiles:\n        ca:\n            usage:\n            - cert sign\n            expiry: 8000h\n            caconstraint:\n            isca: true\n    default:\n        usage:\n            - cert sign\n        expiry: 8000h\n\n###########################################################################\n#  Certificate Signing Request section for generating the CA certificate\n###########################################################################\ncsr:\n    cn: fabric-ca-server\n    names:\n        - C: US\n            ST: North Carolina\n            L:\n            O: Hyperledger\n            OU: Fabric\n    hosts:\n        -  MYHOST \n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Crypto section configures the crypto primitives used for all\n#############################################################################\ncrypto:\n    software:\n        hash_family: SHA2\n        security_level: 256\n        ephemeral: false\n        key_store_dir: keys", 
            "title": "Fabric CA \u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca_2", 
            "text": "A configuration file can be provided to the client using the -c or  config option. If the config option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the client\u2019s home directory (see Fabric CA Client section more info).  \u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7  -c  \u6216\u8005  --config  \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c  --config  \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-client \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003  Fabric CA \u5ba2\u6237\u7aef  \u4e86\u89e3\u66f4\u591a\uff09  #############################################################################\n# Client Configuration\n#############################################################################\n\n# URL of the fabric-ca-server (default: http://localhost:7054)\nURL: http://localhost:7054\n\n# Membership Service Provider (MSP) directory\n# When the client is used to enroll a peer or an orderer, this field must be\n# set to the MSP directory of the peer/orderer\nMSPDir:\n\n#############################################################################\n#    TLS section for secure socket connection\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile:\n        keyfile:\n\n#############################################################################\n#  Certificate Signing Request section for generating the CSR for\n#  an enrollment certificate (ECert)\n#############################################################################\ncsr:\n    cn:  ENROLLMENT_ID \n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger\n        OU: Fabric\n    hosts:\n    -  MYHOST \n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Registration section used to register a new user with fabric-ca server\n#############################################################################\nid:\n    name:\n    type:\n    affiliation:\n    attrs:\n        - name:\n        value:\n\n#############################################################################\n#  Enrollment section used to enroll a user with fabric-ca server\n#############################################################################\nenrollment:\n    hosts:\n    profile:\n    label:", 
            "title": "Fabric CA \u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/ca-setup_zh/#_7", 
            "text": "The Fabric CA provides 3 ways to configure settings on the Fabric CA server and client. The precedence order is:    CLI flags    Environment variables    Configuration file    In the remainder of this document, we refer to making changes to configuration files. However, configuration file changes can be overridden through environment variables or CLI flags.  For example, if we have the following in the client configuration file:  Fabric CA \u63d0\u4f9b3\u79cd\u65b9\u5f0f\u6765\u914d\u7f6e fabric-ca-server \u548c fabric-ca-client \u3002\u4f18\u5148\u7ea7\u5982\u4e0b\uff1a    \u547d\u4ee4\u884c\u53c2\u6570    \u73af\u5883\u53d8\u91cf    \u914d\u7f6e\u6587\u4ef6    \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8bd5\u7740\u5bf9\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002\u914d\u7f6e\u6587\u4ef6\u7684\u4fee\u6539\u53ef\u4ee5\u88ab\u73af\u5883\u53d8\u91cf\u6216\u8005\u547d\u4ee4\u884c\u53c2\u6570\u8986\u76d6\u3002  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\uff1a  tls:\n    # Enable TLS (default: false)\n    enabled: false\n\n    # TLS for the client's listenting port (default: false)\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile: cert.pem\n        keyfile:  The following environment variable may be used to override the cert.pem setting in the configuration file:  export FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem  If we wanted to override both the environment variable and configuration file, we can use a command line flag.  fabric-ca-client enroll --tls.client.certfile cert3.pem  The same approach applies to fabric-ca-server, except instead of using FABIRC_CA_CLIENT as the prefix to environment variables, FABRIC_CA_SERVER is used.  \u53ef\u4ee5\u7528\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u4e2d  cert.pem  \u7684\u914d\u7f6e  export FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem  \u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u8986\u76d6\u73af\u5883\u53d8\u91cf\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570  fabric-ca-client enroll --tls.client.certfile cert3.pem  \u4ee5\u4e0a\u65b9\u6cd5\u5bf9fabric-ca-server\u540c\u6837\u9002\u7528\uff0c\u533a\u522b\u662f\u5728\u73af\u5883\u53d8\u91cf\u7684\u524d\u7f00\uff0c\u628a FABIRC_CA_CLIENT \u66ff\u6362\u4e3a FABRIC_CA_SERVER \u3002", 
            "title": "\u914d\u7f6e\u4f18\u5148\u7ea7\u8bf4\u660e"
        }, 
        {
            "location": "/ca-setup_zh/#_8", 
            "text": "All the properties in the Fabric CA server and client configuration file, that specify file names support both relative and absolute paths. Relative paths are relative to the config directory, where the configuration file is located. For example, if the config directory is ~/config and the tls section is as shown below, the Fabric CA server or client will look for the root.pem file in the ~/config directory, cert.pem file in the ~/config/certs directory and the key.pem file in the /abs/path directory  fabric-ca-server \u548c fabirc-ca-client \u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u6240\u6709\u5c5e\u6027\u90fd\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u548c\u7edd\u5bf9\u8def\u5f84\u3002\u76f8\u5bf9\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u914d\u7f6e\u76ee\u5f55\uff0c\u5373\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002\u6bd4\u5982\uff0c\u5982\u679c\u914d\u7f6e\u76ee\u5f55\u662f  ~/config  \uff0c\u800c tls \u90e8\u5206\u7684\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff0c\u90a3\u4e48Fabric CA \u670d\u52a1\u7aef\u6216\u8005\u5ba2\u6237\u7aef\u4f1a\u5728  ~/config  \u76ee\u5f55\u4e0b\u67e5\u627e  root.pem  \uff0c\u5728  ~/config\uff0fcerts  \u4e0b\u67e5\u627e  cert.pem  \uff0c\u5728  /abs/path  \u76ee\u5f55\u4e0b\u67e5\u627e  key.pem  tls:\n    enabled: true\n    certfiles:   root.pem\n    client:\n        certfile: certs/cert.pem\n        keyfile: /abs/path/key.pem", 
            "title": "\u5173\u4e8e\u8def\u5f84\u7684\u4e00\u4e9b\u8bf4\u660e"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca_3", 
            "text": "This section describes the Fabric CA server.  You may initialize the Fabric CA server before starting it. This provides an opportunity for you to generate a default configuration file but to review and customize its settings before starting it.  The Fabric CA server\u2019s home directory is determined as follows:    if the FABRIC_CA_SERVER_HOME environment variable is set, use its value;    otherwise, if FABRIC_CA_HOME environment variable is set, use its value;    otherwise, if the CA_CFG_PATH environment variable is set, use its value;    otherwise, use current working directory.    For the remainder of this server section, we assume that you have set the FABRIC_CA_HOME environment variable to $HOME/fabric-ca/server.  The instructions below assume that the server configuration file exists in the server\u2019s home directory.  \u8fd9\u4e00\u90e8\u5206\u8bf4\u660eFabric CA\u670d\u52a1\u7aef\u3002  \u5728\u542f\u52a8Fabric CA\u670d\u52a1\u7aef\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef\u3002\u901a\u8fc7\u521d\u59cb\u5316\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u65b9\u4fbf\u7528\u6237\u5728\u542f\u52a8\u524d\u81ea\u884c\u4fee\u6539\u4e00\u4e9b\u914d\u7f6e\u9879\u3002  Fabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u51b3\u5b9a\uff1a    \u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_SERVER_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c    \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c    \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  CA_CFG_PATH  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c    \u5426\u5219\uff0c\u4f7f\u7528\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u4f5c\u4e3a\u6839\u76ee\u5f55    \u672c\u7ae0\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf  FABRIC_CA_HOME  \uff0c\u5e76\u4e14\u503c\u8bbe\u7f6e\u4e3a  $HOME/fabric-ca/server \u3002  \u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u90fd\u9ed8\u8ba4\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u670d\u52a1\u7aef\u6839\u76ee\u5f55\u4e0b\u3002", 
            "title": "Fabric CA \u670d\u52a1\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_9", 
            "text": "\u7528\u4ee5\u4e0b\u547d\u4ee4\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef  # fabric-ca-server init -b admin:adminpw  The  -b  (bootstrap identity) option is required for initialization. At least one bootstrap identity is required to start the Fabric CA server. The server configuration file contains a Certificate Signing Request (CSR) section that can be configured. The following is a sample CSR.  \u521d\u59cb\u5316\u65f6\u5fc5\u987b\u63d0\u4f9b  -b  (bootstrap identity: \u5f15\u5bfc\u8eab\u4efd) \u9009\u9879\u3002\u542f\u52a8\u670d\u52a1\u7aef\u65f6\uff0c\u81f3\u5c11\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u914d\u7f6e\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42 (Certificate Signing Request, CSR) \u90e8\u5206\u3002\u4e0b\u9762\u662f\u4e00\u4e2aCSR\u7684\u4f8b\u5b50\u3002  If you are going to connect to the Fabric CA server remotely over TLS, replace \u201clocalhost\u201d in the CSR section below with the hostname where you will be running your Fabric CA server.  \u5982\u679c\u4f60\u60f3\u901a\u8fc7TLS\u8fdc\u7a0b\u8fde\u63a5Fabric CA\u670d\u52a1\u7aef\uff0c\u628a\u4e0b\u9762\u7684CSR\u914d\u7f6e\u5185\u5bb9\u4e2d\u7684 localhost \u66ff\u6362\u6210\u4f60\u5c06\u4f1a\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u7684\u57df\u540d\u3002  cn: localhost\nkey:\n    algo: ecdsa\n    size: 256\nnames:\n- C: US\n    ST: \"North Carolina\"\n    L:\n    O: Hyperledger\n    OU: Fabric  All of the fields above pertain to the X.509 signing key and certificate which is generated by the  fabric-ca-server  init. This corresponds to the  ca.certfile  and  ca.keyfile  files in the server\u2019s configuration file. The fields are as follows:    cn is the Common Name    key specifies the algorithm and key size as described below    O is the organization name    OU is the organizational unit    L is the location or city    ST is the state    C is the country    \u4e0a\u9762\u6240\u6709\u7684\u5b57\u6bb5\u90fd\b\u7b26\u5408X.509\u7b7e\u540d\u4e0e\u8bc1\u4e66\u89c4\u8303\uff0c\u53ef\u4ee5\u7531 fabric-ca-server  init\u547d\u4ee4\u6765\u751f\u6210\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684 ca.certfile \u548c ca.keyfile \u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e5f\u7b26\u5408X.509\u89c4\u8303\u3002\u5b57\u6bb5\u5982\u4e0b\uff1a    cn \u901a\u7528\u540d    key \u6307\u660e\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6    O \u7ec4\u7ec7    OU \u7ec4\u7ec7\u5355\u4f4d    L \u5730\u5740\u6216\u57ce\u5e02    ST \u5dde\uff08\u7701\uff09    C \u56fd\u5bb6    If custom values for the CSR are required, you may customize the configuration file, delete the files specified by the ca.certfile and ca-keyfile configuration items, and then run the fabric-ca-server init -b admin:adminpw command again.  \u5982\u679c\b\u9700\u8981\u4fee\u6539CSR\u91cc\u9762\u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\u628a\u914d\u7f6e\u4e2d\u7531 ca.certfile \u548c ca\b.keyfile \u8fd9\u4e24\u9879\u6307\u660e\u7684\u6587\u4ef6\u5220\u9664\u3002\u7136\u540e\u518d\u8fd0\u884c\u4e00\u6b21  fabric-ca-server init -b admin:adminpw  \u547d\u4ee4\u3002  The  fabric-ca-server init  command generates a self-signed CA certificate unless the  -u \\ parent-fabric-ca-server-URL\\  option is specified. If the  -u  is specified, the server\u2019s CA certificate is signed by the parent Fabric CA server. The  fabric-ca-server init  command also generates a default configuration file named fabric-ca-server-config.yaml in the server\u2019s home directory.  fabirc-ca-server init  \u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684CA\u8bc1\u4e66\uff0c\u9664\u975e\u4f7f\u7528\u4e86  -u  parent-fabric-ca-server-URL  \u9009\u9879\u3002\u5982\u679c\u4f7f\u7528\u4e86  -u  \u9009\u9879\uff0c\u672c\u670d\u52a1\u7aefCA\u8bc1\u4e66\u4f1a\u7531\u7236Fabric CA\u670d\u52a1\u7aef\u7b7e\u540d\u3002 fabirc-ca-server init  \u547d\u4ee4\u540c\u65f6\u4e5f\u4f1a\u5728\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 fabric-ca-server-config.yaml \u3002  \u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6  The CSR can be customized to generate X.509 certificates and keys that support both RSA and Elliptic Curve (ECDSA). The following setting is an example of the implementation of Elliptic Curve Digital Signature Algorithm (ECDSA) with curve prime256v1 and signature algorithm ecdsa-with-SHA256:  \u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49CSR\u6765\u751f\u6210\u652f\u6301ECDSA\u548cRSA\u7684X.509\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff08\bECDSA\uff09\u7684\u8bbe\u7f6e\uff0c\u91c7\u7528\u7684\u66f2\u7ebf\u662f prime256v1 \uff0c\u7b7e\u540d\u7b97\u6cd5\u662f ecdsa-with-SHA256 \u3002  key:\n    algo: ecdsa\n    size: 256  \u5bf9\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u4f60\u5bf9\u5b89\u5168\u7684\u8003\u91cf\u3002  ECDSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a     size  ASN1 OID  Signature Algorithm      256  prime256v1  ecdsa-with-SHA256    384  secp384r1  ecdsa-with-SHA384    521  secp384r1  ecdsa-with-SHA521     RSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a     size  Modulus (bits)  Signature Algorithm      2048  2048  sha256WithRSAEncryption    4096  2096  sha512WithRSAEncryption", 
            "title": "\u521d\u59cb\u5316\u670d\u52a1\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_10", 
            "text": "\u542f\u52a8Fabric CA\u670d\u52a1\u5668\uff1a  # fabric-ca-server start -b  admin : adminpw   If the server has not been previously initialized, it will initialize itself as it starts for the first time. During this initialization, the server will generate the ca-cert.pem and ca-key.pem files if they don\u2019t yet exist and will also create a default configuration file if it does not exist. See the  Initialize the Fabric CA server  section.  \u5982\u679c\u670d\u52a1\u5668\u4e4b\u524d\u6ca1\u6709\u521d\u59cb\u5316\u8fc7\uff0c\u5b83\u4f1a\u5728\u7b2c\u4e00\u6b21\u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\b\u4e2d\uff0c\u5b83\u4f1a\u5982\u679cca-cert.pem\u548cca-key.pem\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff1b\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002\u53c2\u8003 \u521d\u59cb\u5316\u670d\u52a1\u7aef \u3002  Unless the Fabric CA server is configured to use LDAP, it must be configured with at least one pre-registered bootstrap identity to enable you to register and enroll other identities. The  -b  option specifies the name and password for a bootstrap identity.  \u9664\u975eFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u4e86\u4f7f\u7528LDAP\uff0c\u5426\u5219\u5b83\u5fc5\u987b\u914d\u7f6e\u81f3\u5c11\u4e00\u4e2a\u9884\u6ce8\u518c\u5f15\u5bfc\u8eab\u4efd\u6765\u5141\u8bb8\u4f60\u767b\u5f55\u5176\u4ed6\u8eab\u4efd\u3002 -b \u9009\u9879\u6307\u660e\u5f15\u5bfc\u8eab\u4efd\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\b  A different configuration file may be specified with the -c option as shown below.  \b\u53ef\u4ee5\u901a\u8fc7 -c \u9009\u9879\u6765\u6307\u660e\u5176\u4ed6\u7684\u914d\u7f6e\u6587\u4ef6\u3002  # fabric-ca-server start -c  path-to-config-file  -b  admin : adminpw   To cause the Fabric CA server to listen on https rather than http, set tls.enabled to true.  \u4e3a\u4e86\u4f7ffabric ca server\u76d1\u542c https \u800c\u4e0d\u662f http \uff0c\u914d\u7f6e tls.enabled \u4e3a true \u3002  To limit the number of times that the same secret (or password) can be used for enrollment, set the  registry.maxEnrollments  in the configuration file to the appropriate value. If you set the value to 1, the Fabric CA server allows passwords to only be used once for a particular enrollment ID. If you set the value to 0, the Fabric CA server places no limit on the number of times that a secret can be reused for enrollment. The default value is 0.  \b\u4e3a\u4e86\u9650\u5236\u767b\u5f55\u65f6\u76f8\u540c\u5bc6\u7801\u7684\u6b21\u6570\uff0c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e registry.maxEnrollments \u4e3a\u6070\u5f53\u7684\u503c\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a1\uff0cFabric CA\u670d\u52a1\u7aef\u53ea\u5141\u8bb8\u4e00\u4e2a\u5bc6\u7801\u88ab\u4e00\u4e2a\u767b\u5f55ID\u4f7f\u7528\uff08\u5373\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2aID\u6709\u76f8\u540c\u7684\u5bc6\u7801\uff09\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a0\uff0cFabric CA\u670d\u52a1\u7aef\u4e0d\u4f1a\u9650\u5236\u5bc6\u7801\u7684\u91cd\u590d\u4f7f\u7528\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a0\u3002  The Fabric CA server should now be listening on port 7054.  Fabric CA\u670d\u52a1\u7aef\u73b0\u5728\u5e94\u8be5\u6b63\u5728\u76d1\u542c7054\u7aef\u53e3\u3002  You may skip to the Fabric CA Client section if you do not want to configure the Fabric CA server to run in a cluster or to use LDAP.  \u5982\u679c\u4f60\u4e0d\u60f3\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4e5f\u4e0d\u60f3\u4f7f\u7528LDAP\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230 Fabric CA \u5ba2\u6237\u7aef \u8fd9\u4e00\u7ae0\u8282\u3002", 
            "title": "\u542f\u52a8\u670d\u52a1\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_11", 
            "text": "This section describes how to configure the Fabric CA server to connect to Postgres or MySQL databases. The default database is SQLite and the default database file is  fabric-ca-server.db  in the Fabric CA server\u2019s home directory.  \u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u8fde\u63a5\u5230Postgres\u6216\u8005MySQL\u3002\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u662fSQLite\uff0c\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u6587\u4ef6\u662f fabric-ca-server.db \uff0c\u5b58\u653e\u5728Fabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u3002  If you don\u2019t care about running the Fabric CA server in a cluster, you may skip this section; otherwise, you must configure either Postgres or MySQL as described below.  \u5982\u679c\u4f60\u4e0d\u60f3\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u7ae0\uff1b\u4e0d\u7136\u7684\u8bdd\u4f60\u53ef\u4ee5\u7167\u4e0b\u9762\u7684\u6307\u5f15\u914d\u7f6ePostgres\u6216\u8005MySQL\u3002", 
            "title": "\u914d\u7f6e\u6570\u636e\u5e93"
        }, 
        {
            "location": "/ca-setup_zh/#postgres", 
            "text": "The following sample may be added to the server\u2019s configuration file in order to connect to a Postgres database. Be sure to customize the various values appropriately.  \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\u670d\u52a1\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6765\u4f7f\u670d\u52a1\u7aef\u8fde\u63a5\u5230\u4e00\u4e2aPostgres\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002  db:\n    type: postgres\n    datasource: host=localhost port=5432 user=Username password=Password dbname=fabric-ca-server sslmode=verify-full  Specifying sslmode configures the type of SSL authentication. Valid values for sslmode are:  \u6307\u5b9asslmode\u6765\u914d\u7f6e\bSSL\u8ba4\u8bc1\u7684\u7c7b\u578b\u3002sslmode\u6709\u6548\u7684\u503c\u4e3a\uff1a  If you would like to use TLS, then the db.tls section in the Fabric CA server configuration file must be specified. If SSL client authentication is enabled on the Postgres server, then the client certificate and key file must also be specified in the db.tls.client section. The following is an example of the db.tls section:  \u5982\u679c\u4f60\u60f3\u4f7f\u7528TLS\uff0c\u90a3\u4e48\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e db.tls \u8fd9\u4e00\u90e8\u5206\u3002\u5982\u679cPostgres\u670d\u52a1\u5668\u5f00\u542f\u4e86SSL\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\u5fc5\u987b\u5728 db.tls.client \u8fd9\u4e00\u90e8\u5206\u6307\u660e\u3002\u4e0b\u9762\u662f db.tls \u90e8\u5206\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a  db:\n    ...\n    tls:\n        enabled: true\n        certfiles:\n            - db-server-cert.pem\n        client:\n                certfile: db-client-cert.pem\n                keyfile: db-client-key.pem  certfiles  - A list of PEM-encoded trusted root certificate files.  certfile  and  keyfile  - PEM-encoded certificate and key files that are used by the Fabric CA server to communicate securely with the Postgres server  certfiles  - \u53ef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u6587\u4ef6\u5217\u8868\uff0c\u91c7\u7528PEM\u7f16\u7801  certfile  and  keyfile  - \u7528\u4e8e\u4e0ePostgres\u670d\u52a1\u5668\u5b89\u5168\u901a\u4fe1\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\uff0c\u91c7\u7528PEM\u7f16\u7801", 
            "title": "Postgres"
        }, 
        {
            "location": "/ca-setup_zh/#mysql", 
            "text": "The following sample may be added to the Fabric CA server configuration file in order to connect to a MySQL database. Be sure to customize the various values appropriately.  \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\bFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u8fde\u63a5\u5230MySQL\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002  db:\n    type: mysql\n    datasource: root:rootpw@tcp(localhost:3306)/fabric-ca?parseTime=true tls=custom  If connecting over TLS to the MySQL server, the db.tls.client section is also required as described in the Postgres section above.  \u5982\u679c\u8981\u4f7f\u7528TLS\uff0c\u9700\u8981\u914d\u7f6e db.tls.client \u90e8\u5206\uff0c\u53c2\u8003Postgres\u90e8\u5206\u3002", 
            "title": "MySQL"
        }, 
        {
            "location": "/ca-setup_zh/#ldap", 
            "text": "The Fabric CA server can be configured to read from an LDAP server.  In particular, the Fabric CA server may connect to an LDAP server to do the following:   authenticate an identity prior to enrollment  retrieve an identity\u2019s attribute values which are used for authorization.   Modify the LDAP section of the Fabric CA server\u2019s configuration file to configure the server to connect to an LDAP server.  Fabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u914d\u7f6e\u4e3a\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002  \u7279\u522b\u5730\uff0c\bFabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u6765\u505a\u4e0b\u9762\u7684\u4e8b\u60c5\uff1a   \u767b\u5f55\u524d\u9a8c\u8bc1\u4e00\u4e2a\u8eab\u4efd  \u6388\u6743\u65f6\u83b7\u53d6\u4e00\u4e2a\u8eab\u4efd\u7684\b\u5c5e\u6027\u503c   \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539LDAP\u7684\u914d\u7f6e\u6765\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002  ldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url:  scheme :// adminDN : adminPassword @ host : port / base \n    userfilter: filter  where:    scheme is one of ldap or ldaps;    adminDN is the distinquished name of the admin user;    pass is the password of the admin user;    host is the hostname or IP address of the LDAP server;    port is the optional port number, where default 389 for ldap and 636 for ldaps;    base is the optional root of the LDAP tree to use for searches;    filter is a filter to use when searching to convert a login user name to a distinquished name. For example, a value of (uid=%s) searches for LDAP entries with the value of a uid attribute whose value is the login user name. Similarly, (email=%s) may be used to login with an email address.    \u5176\u4e2d\uff1a    scheme \bldap\u6216\u8005ldaps;    adminDN \u7ba1\u7406\u5458\u7684\u533a\u522b\u540d;    pass \u7ba1\u7406\u5458\u7684\u5bc6\u7801;    host LDAP\u670d\u52a1\u5668\u7684\u57df\u540d\u6216\u8005IP;    port \u53ef\u9009\u7684\u7aef\u53e3\u53f7\uff0cldap\u9ed8\u8ba4\u4e3a389\uff0cldaps\u9ed8\u8ba4\u4e3a636;    base \u53ef\u9009\u7684LDAP\u6811\u7684\u6839\uff0c\u7528\u4e8e\u641c\u7d22\u65f6;    filter \u641c\u7d22\u65f6\u7684\u8fc7\u6ee4\u5668\uff0c\u628a\u767b\u9646\u7528\u6237\u540d\u8f6c\u6362\u4e3a\u4e00\u4e2a\u533a\u522b\u540d\u3002\u6bd4\u5982\uff0c\uff08uid=%s\uff09\u4f1a\u641c\u7d22uid\u503c\u7b49\u4e8e\u7528\u6237\u767b\u5f55\u540d\u7684LDAP\u5b9e\u4f53\u3002\u7c7b\u4f3c\u5730\uff0c\uff08email=%s\uff09\u53ef\u4ee5\u7528\u4e8e\u90ae\u7bb1\u5730\u5740\u4f5c\u4e3a\b\u7528\u6237\u540d\u7684\u767b\u9646\u3002    The following is a sample configuration section for the default settings for the OpenLDAP server whose docker image is at  https://github.com/osixia/docker-openldap .  \u4e0b\u9762\u662f\u4e00\u4e2a\b\u914d\u7f6e\u4f8b\u5b50\uff0c\u7528\u4e8eOpenLDAP\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0cOpenLDAP\u7684docker\u955c\u50cf\u5728 https://github.com/osixia/docker-openldap \u3002  ldap:\n    enabled: true\n    url: ldap://cn=admin,dc=example,dc=org:admin@localhost:10389/dc=example,dc=org\n    userfilter: (uid=%s)  See  FABRIC_CA/scripts/run-ldap-tests  for a script which starts an OpenLDAP docker image, configures it, runs the LDAP tests in  FABRIC_CA/cli/server/ldap/ldap_test.go , and stops the OpenLDAP server.  \u5728 FABRIC_CA/scripts/run-ldap-tests \u6709\u4e00\u4e2a\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u80fd\u542f\u52a8OpenLDAP\u7684docker\u955c\u50cf\uff0c\u914d\u7f6e\u5b83\uff0c\u7136\u540e\u8fd0\u884c FABRIC_CA/cli/server/ldap/ldap_test.go \u91cc\u9762\u7684LDAP\b\u6d4b\u8bd5\uff0c\u6700\u540e\u505c\u6b62OpenLDAP\u670d\u52a1\u5668\u3002  When LDAP is configured, enrollment works as follows:    The Fabric CA client or client SDK sends an enrollment request with a basic authorization header.    The Fabric CA server receives the enrollment request, decodes the identity name and password in the authorization header, looks up the DN (Distinquished Name) associated with the identity name using the \u201cuserfilter\u201d from the configuration file, and then attempts an LDAP bind with the identity\u2019s password. If the LDAP bind is successful, the enrollment processing is authorized and can proceed.    \u5f53LDAP\u914d\u7f6e\u597d\u540e\uff0c\u767b\u5f55\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a    Fabric CA\u5ba2\u6237\u7aef\u6216\u8005\u5ba2\u6237\u7aefSDK\u53d1\u9001\u4e00\u4e2a\u767b\u5f55\u8bf7\u6c42\uff0c\b\u5e26\u4e0abasic\u65b9\u5f0f\u7684\u6388\u6743\u5934\u3002    Fabric CA\u670d\u52a1\u7aef\u6536\u5230\u767b\u5f55\u8bf7\u6c42\uff0c\u89e3\u7801\b\u6388\u6743\u5934\u91cc\u7684\u8eab\u4efd\u540d\u548c\u5bc6\u7801\uff0c\u67e5\u627e\u4e0e\b\u8eab\u4efd\u540d\u76f8\u5173\u8054\u7684\u533a\u522b\u540d\uff0c\b\uff08\u5173\u8054\u65b9\u5f0f\u4e3a\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 userfilter \u5b9a\u4e49\u7684\uff09\uff0c\u7136\u540e\u7528\u8eab\u4efd\u5bc6\u7801\u5c1d\u8bd5\u4e00\u4e2aLDAP\u7ed1\u5b9a\u3002\u5982\u679cLDAP\u7ed1\u5b9a\u6210\u529f\uff0c\b\u90a3\u4e48\u767b\u5f55\u8fc7\u7a0b\u88ab\u6279\u51c6\u4e86\uff0c\u80fd\u591f\u7ee7\u7eed\u3002    When LDAP is configured, attribute retrieval works as follows:    A client SDK sends a request for a batch of tcerts with one or more attributes to the Fabric CA server.    The Fabric CA server receives the tcert request and does as follows:\n  extracts the enrollment ID from the token in the authorization header (after validating the token);\n  does an LDAP search/query to the LDAP server, requesting all of the attribute names received in the tcert request;\n  the attribute values are placed in the tcert as normal.    \u5f53LDAP\u914d\u7f6e\u597d\u4e86\uff0c\u5c5e\u6027\u8fd4\u56de\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a    \u5ba2\u6237\u7aefSDK\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u5230\u670d\u52a1\u7aef\b\uff0c\u8bf7\u6c42\u4e00\u6279tcerts\u3002    \u670d\u52a1\u7aef\u6536\u5230tcert\u8bf7\u6c42\uff0c\u505a\u5982\u4e0b\u7684\u4e8b:\n  \u5728\u6388\u6743\u5934\u53d6\u51fa\u767b\u5f55ID\uff08\u5728\u9a8c\u8bc1token\u540e\uff09;\n  \u505a\u4e00\u6b21LDAP\u67e5\u8be2\uff0c\u5411\bLDAP\u670d\u52a1\u5668\u8bf7\u6c42tcert\u8bf7\u6c42\u4e2d\u7684\u6240\u6709\u7684\u5c5e\u6027\u540d;\n  \u5c5e\u6027\u503c\u653e\u7f6e\u5728tcert\u4e2d\u3002", 
            "title": "\u914d\u7f6eLDAP"
        }, 
        {
            "location": "/ca-setup_zh/#_12", 
            "text": "You may use any IP sprayer to load balance to a cluster of Fabric CA servers. This section provides an example of how to set up Haproxy to route to a Fabric CA server cluster. Be sure to change hostname and port to reflect the settings of your Fabric CA servers.  \u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610fIP\u4ee3\u7406\u6765\u4e3aFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\u505a\u8d1f\u8f7d\u5747\u8861\u3002\u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f8b\u5b50\u6765\b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Haproxy\u6765\u4e3a\b\u96c6\u7fa4\b\u8def\u7531\u3002\u522b\u5fd8\u4e86\u4fee\u6539\u57df\u540d\u548c\u7aef\u53e3\u3002  haproxy.conf  global\n    maxconn 4096\n    daemon\n\ndefaults\n    mode http\n    maxconn 2000\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nlisten http-in\n    bind *:7054\n    balance roundrobin\n    server server1 hostname1:port\n    server server2 hostname2:port\n    server server3 hostname3:port  \u6ce8\u610f\uff1a\u5982\u679c\u4f7f\u7528TLS\uff0c\u9700\u8981\u4f7f\u7528 mode tcp", 
            "title": "\u6784\u5efa\u4e00\u4e2a\u96c6\u7fa4"
        }, 
        {
            "location": "/ca-setup_zh/#farbic-ca", 
            "text": "This section describes how to use the fabric-ca-client command.  The Fabric CA client\u2019s home directory is determined as follows:    if the  FABRIC_CA_CLIENT_HOME  environment variable is set, use its value;    otherwise, if the  FABRIC_CA_HOME  environment variable is set, use its value;    otherwise, if the  CA_CFG_PATH  environment variable is set, use its value;    otherwise, use  $HOME/.fabric-ca-client .    The instructions below assume that the client configuration file exists in the client\u2019s home directory.  \u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528fabric-ca-client\u7684\u547d\u4ee4\u3002  Fabric CA\u5ba2\u6237\u7aef\u7684\u6839\u76ee\u5f55\u5b9a\u4e49\u89c4\u5219\u5982\u4e0b\uff1a    \u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_CLIENT_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c    \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c    \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  CA_CFG_PATH  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c    \u5426\u5219\uff0c\u4f7f\u7528 $HOME/.fabric-ca-client    \u4e0b\u9762\u7684\u6307\u5f15\u5047\u8bbe\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u5ba2\u6237\u7aef\u6839\u76ee\u5f55\u3002", 
            "title": "Farbic CA \u5ba2\u6237\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_13", 
            "text": "First, if needed, customize the CSR (Certificate Signing Request) section in the client configuration file. Note that  csr.cn  field must be set to the ID of the bootstrap identity. Default CSR values are shown below:  \u9996\u5148\uff0c\u5982\u679c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u81ea\u5b9a\u4e49CSR\uff08\b\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09\uff0c\u6ce8\u610f csr.cn \u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5f15\u5bfc\u8eab\u4efd\u7684ID\u3002\u9ed8\u8ba4CSR\u5982\u4e0b\uff1a  csr:\n    cn:  enrollment ID \n    key:\n        algo: ecdsa\n        size: 256\n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger Fabric\n        OU: Fabric CA\n    hosts:\n    -  hostname of the fabric-ca-client \n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:  See CSR fields for description of the fields.  Then run  fabric-ca-client enroll  command to enroll the identity. For example, following command enrolls an identity whose ID is admin and password is adminpw by calling Fabric CA server that is running locally at 7054 port.  \u67e5\u770b\u5b57\u6bb5\u7684\u63cf\u8ff0\uff0c CSR fields  \u7136\u540e\u8fd0\u884c fabric-ca-client enroll \u547d\u4ee4\u6765\u767b\u5f55\u4e00\u4e2a\u8eab\u4efd\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u5411\u4e00\u4e2a\u672c\u5730\u8fd0\u884c\u57287054\u7aef\u53e3\u7684Fabric CA\u670d\u52a1\u7aef\uff0c\u767b\u5f55\u4e86\u4e00\u4e2aID\u4e3aadmin\uff0cpassword\u4e3aadminpw\u7684\u8eab\u4efd\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client enroll -u http://admin:adminpw@localhost:7054  The enroll command stores an enrollment certificate (ECert), corresponding private key and CA certificate chain PEM files in the subdirectories of the Fabric CA client\u2019s  msp  directory. You will see messages indicating where the PEM files are stored.  \u767b\u5f55\u547d\u4ee4\u4f1a\u5b58\u50a8\u4e00\u4e2a\u767b\u5f55\u8bc1\u4e66\uff08ECert\uff09\uff0c\u76f8\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fd8\u6709CA\u8bc1\u4e66\u94fePEM\u6587\u4ef6\u3002\b\u8fd9\u4e9b\u5b58\u50a8\u5728Fabric CA\u5ba2\u6237\u7aef\u7684msp\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u4e0b\uff0c\u4f60\u4f1a\u770b\u5230\u4fe1\u606f\u63d0\u793aPEM\u5b58\u50a8\u5728\u54ea\u91cc\u3002", 
            "title": "\u767b\u9646\u542f\u52a8\u7528\u6237"
        }, 
        {
            "location": "/ca-setup_zh/#_14", 
            "text": "The identity performing the register request must be currently enrolled, and must also have the proper authority to register the type of the identity that is being registered.  \u53ea\u6709\u5df2\u7ecf\u767b\u5f55\u4e86\u7684\u8eab\u4efd\u624d\u80fd\u53d1\u8d77\u6ce8\u518c\u7684\u8bf7\u6c42\uff0c\u800c\u4e14\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u6743\u9650\u6765\u6ce8\u518c\u60f3\u8981\u6ce8\u518c\u7684\u8eab\u4efd\u7c7b\u578b\u3002  In particular, two authorization checks are made by the Fabric CA server during registration as follows:    The invoker\u2019s identity must have the \u201chf.Registrar.Roles\u201d attribute with a comma-separated list of values where one of the value equals the type of identity being registered; for example, if the invoker\u2019s identity has the \u201chf.Registrar.Roles\u201d attribute with a value of \u201cpeer,app,user\u201d, the invoker can register identities of type peer, app, and user, but not orderer.    The affiliation of the invoker\u2019s identity must be equal to or a prefix of the affiliation of the identity being registered. For example, an invoker with an affiliation of \u201ca.b\u201d may register an identity with an affiliation of \u201ca.b.c\u201d but may not register an identity with an affiliation of \u201ca.c\u201d.    The following command uses the admin identity\u2019s credentials to register a new identity with an enrollment id of \u201cadmin2\u201d, a type of \u201cuser\u201d, an affiliation of \u201corg1.department1\u201d, and an attribute named \u201chf.Revoker\u201d with a value of \u201ctrue\u201d.  \u7279\u522b\u5730\uff0c\u6ce8\u518c\u65f6Fabric CA\u670d\u52a1\u7aef\u505a\u4e24\u9879\u6743\u9650\u68c0\u67e5\uff1a    \u6ce8\u518c\u53d1\u8d77\u8005\u7684\u201c\bhf.Registrar.Roles\u201d\u5c5e\u6027\u4e2d\u5fc5\u987b\u6709\u8bf7\u6c42\u6ce8\u518c\u7684\u7c7b\u578b\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u53d1\u8d77\u8005\u7684\b\u201chf.Registrar.Roles\u201d\u5c5e\u6027\u7684\u503c\u4e3a\u201cpeer,app,user\u201d\uff0c\u90a3\u4e48\u4ed6\u80fd\u6ce8\u518c\u7684\u7c7b\u578b\u4e3apeer\uff0capp\u548cuser\uff0c\u4e0d\u80fd\u6ce8\u518corderer\u3002    \u53d1\u8d77\u8005\u7684affiliation\u5fc5\u987b\u4e0e\u4ed6\u8bf7\u6c42\u6ce8\u518c\u7684\u8eab\u4efd\u7684affiliation\u76f8\u540c\uff0c\u6216\u8005\u662f\u6240\u8bf7\u6c42\u6ce8affiliation\u7684\u524d\u7f00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b\u201d\u7684\u53d1\u8d77\u8005\uff0c\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b.c\u201d\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u4e0d\u80fd\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.c\u201d\u7684\u8eab\u4efd\u3002    \u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u7528admin\u8eab\u4efd\u7684\u51ed\u8bc1\u6765\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\uff0c\u767b\u5f55ID\u662f\u201cadmin2\u201d\uff0c\u7c7b\u578b\u4e3a\u201cuser\u201d\uff0caffiliation\u4e3a\u201corg1.department1\u201d\uff0c\u8fd8\u6709\u201chf.Revoker\u201d\u5c5e\u6027\u4e3a\u201ctrue\u201d\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin2 --id.type user --id.affiliation org1.department1 --id.attr hf.Revoker=true  The password, also known as the enrollment secret, is printed. This password is required to enroll the identity. This allows an administrator to register an identity and give the enrollment ID and the secret to someone else to enroll the identity.  \u5bc6\u7801\u4f1a\u88ab\b\u6253\u5370\u51fa\u6765\uff0c\u767b\u5f55\u8fd9\u4e2a\u65b0\u6ce8\u518c\u7684\u8eab\u4efd\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u5bc6\u7801\u3002\u8fd9\u5141\u8bb8\u4e00\u4e2a\u7ba1\u7406\u5458\u6ce8\u518c\u8eab\u4efd\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8eab\u4efd\u7684ID\b\u548c\u5bc6\u7801\u7ed9\u522b\u4eba\u6765\u767b\u9646\u3002  You may set default values for any of the fields used in the register command by editing the client\u2019s configuration file. For example, suppose the configuration file contains the following:  \u4f60\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\u6765\u8bbe\u7f6e\u6ce8\u518c\u65f6\u4e00\u4e9b\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e0b\u9762\u7684\u5185\u5bb9\uff1a  id:\n    name:\n    type: user\n    affiliation: org1.department1\n    attributes:\n        - name: hf.Revoker\n        value: true\n        - name: anotherAttrName\n        value: anotherAttrValue  The following command would then register a new identity with an enrollment id of \u201cadmin3\u201d which it takes from the command line, and the remainder is taken from the configuration file including the identity type: \u201cuser\u201d, affiliation: \u201corg1.department1\u201d, and two attributes: \u201chf.Revoker\u201d and \u201canotherAttrName\u201d.  \u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\b\uff0cid\u4e3aadmin3\uff0c\u5176\u4ed6\u7684\u5185\u5bb9\u4f1a\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u51fa\u6765\u3002\u5305\u62ec\uff1a\u7c7b\u578b\u201cuser\u201d\uff0caffiliation \u201corg1.department1\u201d\uff0c\u8fd8\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u201chf.Revoker\u201d\u548c\u201canotherAttrName\u201d\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin3  To register an identity with multiple attributes requires specifying all attribute names and values in the configuration file as shown above.  \u6ce8\u518c\u6709\u591a\u4e2a\u5c5e\u6027\u7684\u8eab\u4efd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\u6240\u6709\u5c5e\u6027\b\u540d\u548c\u5c5e\u6027\u503c\uff0c\u5982\u4e0a\u6240\u793a\u3002  Next, let\u2019s register a peer identity which will be used to enroll the peer in the following section. The following command registers the peer1 identity. Note that we choose to specify our own password (or secret) rather than letting the server generate one for us.  \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f1a\u5728\u4e0b\u9762\b\u5185\u5bb9\u767b\u9646\u8282\u70b9\u7684\u65f6\u5019\u7528\u5230\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u6ce8\u518c\u4e86\u4e00\u4e2apeer1\u8eab\u4efd\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u6307\u660e\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u800c\u4e0d\u662f\u7531\u670d\u52a1\u5668\u751f\u6210\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name peer1 --id.type peer --id.affiliation org1.department1 --id.secret peer1pw", 
            "title": "\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd"
        }, 
        {
            "location": "/ca-setup_zh/#_15", 
            "text": "Now that you have successfully registered a peer identity, you may now enroll the peer given the enrollment ID and secret (i.e. the password from the previous section). This is similar to enrolling the bootstrap identity except that we also demonstrate how to use the \u201c-M\u201d option to populate the Hyperledger Fabric MSP (Membership Service Provider) directory structure.  \u73b0\u5728\u4f60\u6210\u529f\u5730\u6ce8\u518c\u4e86\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f60\u53ef\u4ee5\u7528ID\u548c\b\u5bc6\u7801\u767b\u9646\u3002\b\u8fd9\u90e8\u5206\u4e0e\u767b\u9646\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u7c7b\u4f3c\u3002\u6211\u4eec\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u201c-M\u201d\u9009\u9879\u6765\b\u66f4\u6362MSP\u7684\u76ee\u5f55\u3002  The following command enrolls peer1. Be sure to replace the value of the \u201c-M\u201d option with the path to your peer\u2019s MSP directory which is the \u2018mspConfigPath\u2019 setting in the peer\u2019s core.yaml file. You may also set the FABRIC_CA_CLIENT_HOME to the home directory of your peer.  \u4e0b\u9762\u7684\u547d\u4ee4\u767b\u9646peer1\u3002\u8bb0\u5f97\b\u5728\u201c-M\u201d\u9009\u9879\u4e0b\u66f4\u6539\b\u4f60\u81ea\u5df1\b\u7684MSP\u76ee\u5f55\uff0c\bMSP\b\u76ee\u5f55\u662f\u7531\u8282\u70b9\u7684core.yaml\u91cc\u7684\u201cmspConfigPath\u201d\u6307\u5b9a\u7684\u3002\u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6eFABRIC_CA_CLIENT_HOME\u73af\u5883\u53d8\u91cf\u4e3apeer\u7684\u6839\u76ee\u5f55\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client enroll -u http://peer1:peer1pw@localhost:7054 -M $FABRIC_CA_CLIENT_HOME/msp  Enrolling an orderer is the same, except the path to the MSP directory is the \u2018LocalMSPDir\u2019 setting in your orderer\u2019s orderer.yaml file.  \b\u767b\u9646\u4e00\u4e2aorderer\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u9664\u4e86MSP\u76ee\u5f55\u662f\u8bbe\u7f6e\u5728\u4f60\u7684orderer\u7684orderer.yaml\u6587\u4ef6\u91cc\u7684\u201cLocalMSPDir\u201d\u3002", 
            "title": "\u767b\u5f55\u4e00\u4e2a\u8282\u70b9"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-caca", 
            "text": "In general, the cacerts directory of the MSP directory must contain the certificate authority chains of other certificate authorities, representing all of the roots of trust for the peer.  \u901a\u5e38\uff0cMSP\u76ee\u5f55\u7684ca\u8bc1\u4e66\u76ee\u5f55\u5fc5\u987b\u5305\u542b\u8bc1\u4e66\u94fe\uff0c\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u4fe1\u4efb\u7684\u4fe1\u4efb\u4e2d\u5fc3\u3002  The fabric-ca-client getcacerts command is used to retrieve these certificate chains from other Fabric CA server instances.  fabric-ca-client getcacerts \u547d\u4ee4\b\u7528\u4e8e\u4ece\u5176\u4ed6Fabric CA\u670d\u52a1\u5668\u5b9e\u4f8b\u83b7\u53d6\u8fd9\u4e9b\u8bc1\u4e66\u94fe\u3002  For example, the following will start a second Fabric CA server on localhost listening on port 7055 with a name of \u201cCA2\u201d. This represents a completely separate root of trust and would be managed by a different member on the blockchain.  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u5728\u672c\u5730\u542f\u52a8\u7b2c\u4e8c\u4e2aFabric CA\u670d\u52a1\u5668\uff0c\u76d1\u542c7055\u7aef\u53e3\uff0c\u547d\u540d\u4e3a\u201cCA2\u201c\u3002\u8fd9\u4ee3\u8868\u4e24\u4e2a\u7531\u4e0d\u540c\u6210\u5458\u7ba1\u7406\u7684\u5206\u5f00\u7684\u4fe1\u4efb\b\u4e2d\u5fc3\u3002  # export FABRIC_CA_SERVER_HOME=$HOME/ca2\n# fabric-ca-server start -b admin:ca2pw -p 7055 -n CA2  The following command will install CA2\u2019s certificate chain into peer1\u2019s MSP directory.  \u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u628aCA2\u7684\u8bc1\u4e66\u94fe\u5b89\u88c5\u8fdbpeer1\u7684MSP\u76ee\u5f55\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client getcacert -u http://localhost:7055 -M $FABRIC_CA_CLIENT_HOME/msp", 
            "title": "\u4ece\u53e6\u4e00\u4e2aFabric CA\u670d\u52a1\u5668\u83b7\u5f97CA\u8bc1\u4e66\u94fe"
        }, 
        {
            "location": "/ca-setup_zh/#_16", 
            "text": "Suppose your enrollment certificate is about to expire or has been compromised. You can issue the reenroll command to renew your enrollment certificate as follows.  \u5047\u8bbe\u4f60\u7684\u767b\u9646\b\u8bc1\u4e66\u5feb\u8fc7\u671f\u4e86\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u767b\u9646\u6765\b\u66ff\u6362\u4f60\u7684\u767b\u9646\u8bc1\u4e66\uff08\bECert\uff09\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client reenroll", 
            "title": "\u91cd\u65b0\u767b\u9646\u4e00\u4e2a\u8eab\u4efd"
        }, 
        {
            "location": "/ca-setup_zh/#_17", 
            "text": "An identity or a certificate can be revoked. Revoking an identity will revoke all the certificates owned by the identity and will also prevent the identity from getting any new certificates. Revoking a certificate will invalidate a single certificate.  \b\b\u8eab\u4efd\u548c\u8bc1\u4e66\u90fd\u80fd\u88ab\u64a4\u9500\u3002\u64a4\u9500\u4e00\u4e2a\b\u8eab\u4efd\u4f1a\u64a4\u9500\u8be5\b\b\u8eab\u4efd\u62e5\u6709\u7684\u6240\u6709\u8bc1\u4e66\uff0c\u8be5\u8eab\u4efd\u4e5f\u4e0d\u80fd\u518d\u83b7\u5f97\u65b0\u7684\u8bc1\u4e66\u3002\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u4f1a\u4f7f\u8be5\u8bc1\u4e66\u5931\u6548\u3002  In order to revoke a certificate or an identity, the calling identity must have the hf.Revoker attribute. The revoking identity can only revoke a certificate or an identity that has an affiliation that is equal to or prefixed by the revoking identity\u2019s affiliation.  \u4e3a\u4e86\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u6709hf.Revoker\u5c5e\u6027\u3002\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500\u4e0e\u81ea\u5df1\u7684affiliation\u76f8\u540c\u7684\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u6216\u8005\u53d1\u8d77\u8005\u7684affiliation\u662f\u88ab\b\u64a4\u9500\u8005\u7684affiliation\u7684\u524d\u7f00\u3002  For example, a revoker with affiliation orgs.org1 can revoke an identity affiliated with orgs.org1 or orgs.org1.department1 but can\u2019t revoke an identity affiliated with orgs.org2.  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u201corgs.org1\u201d\u7684\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500orgs.org1\u6216\u8005orgs.org1.department1\u7684\u8eab\u4efd\uff0c\u800c\b\u4e0d\u80fd\u64a4\u9500orgs.org2\u7684\u8eab\u4efd\u3002  The following command disables an identity and revokes all of the certificates associated with the identity. All future requests received by the Fabric CA server from this identity will be rejected.  \u4e0b\u9762\u7684\u547d\u4ee4\u64a4\u9500\u4e00\u4e2a\u8eab\u4efd\u3002\u5c06\u6765\u6240\u6709\u53d1\u81ea\u8be5\u8eab\u4efd\u7684\u8bf7\u6c42\u90fd\u4f1a\u88abFabric CA\b\u670d\u52a1\u5668\u62d2\u6536\u3002  fabric-ca-client revoke -e  enrollment_id  -r  reason   The following are the supported reasons that can be specified using -r flag:  \u4e0b\u9762\u662f -r \u9009\u9879\u652f\u6301\u7684\u7406\u7531\uff1a    unspecified    keycompromise    cacompromise    affiliationchange    superseded    cessationofoperation    certificatehold    removefromcrl    privilegewithdrawn    aacompromise    For example, the bootstrap admin who is associated with root of the affiliation tree can revoke peer1\u2018s identity as follows:  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u7740\b\u6839\baffiliation\u7684admin\u53ef\u4ee5\u56de\u6536peer1\u8eab\u4efd\uff1a  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client revoke -e peer1  An enrollment certificate that belongs to an identity can be revoked by specifying its AKI (Authority Key Identifier) and serial number as follows:  \u4e00\u4e2a\u8eab\u4efd\u53ef\u4ee5\u64a4\u9500\u81ea\u5df1\u7684\u767b\u9646\u8bc1\u4e66\uff08ECert\uff09\uff0c\u9700\u8981\u6307\u5b9aECert\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a  fabric-ca-client revoke -a xxx -s yyy -r  reason   For example, you can get the AKI and the serial number of a certificate using the openssl command and pass them to the revoke command to revoke the said certificate as follows:  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7openssl\u547d\u4ee4\u6765\u83b7\u53d6\u4e00\u4e2a\u8bc1\u4e66\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a  serial=$(openssl x509 -in userecert.pem -serial -noout | cut -d \"=\" -f 2)\naki=$(openssl x509 -in userecert.pem -text | awk '/keyid/ {gsub(/ *keyid:|:/,\"\",$1);print tolower($0)}')\nfabric-ca-client revoke -s $serial -a $aki -r affiliationchange", 
            "title": "\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd"
        }, 
        {
            "location": "/ca-setup_zh/#tls", 
            "text": "This section describes in more detail how to configure TLS for a Fabric CA client.  \u8fd9\u4e00\u90e8\u5206\u4ecb\u7ecd\u5982\u4f55\u4e3aFabric CA\u5ba2\u6237\u7aef\u914d\u7f6eTLS\u3002  The following sections may be configured in the  fabric-ca-client-config.yaml .  \u4e0b\u9762\u7684\u53ef\u4ee5\u914d\u7f6e\u5728 fabric-ca-client-config.yaml \u4e2d\u3002  tls:\n    # Enable TLS (default: false)\n    enabled: true\n    certfiles:\n        - root.pem\n    client:\n        certfile: tls_client-cert.pem\n        keyfile: tls_client-key.pem  The certfiles option is the set of root certificates trusted by the client. This will typically just be the root Fabric CA server\u2019s certificate found in the server\u2019s home directory in the ca-cert.pem file.  certfiles \u662f\u8be5\u5ba2\u6237\u7aef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u96c6\u5408\u3002\u4e00\u822c\u8fd9\u90fd\u4f1a\u662f\bFabric CA\u670d\u52a1\u7aef\u6839\u76ee\u5f55\b\u4e0b\u7684ca-cert.pem\u3002  The client option is required only if mutual TLS is configured on the server.  \u53ea\u6709\u5728\u670d\u52a1\u5668\u914d\u7f6e\u4e86\u53cc\u5411TLS\u7684\u60c5\u51b5\u4e0b\uff0c client \u9009\u9879\u624d\u9700\u8981\u3002", 
            "title": "\u542f\u7528TLS"
        }, 
        {
            "location": "/ca-setup_zh/#_18", 
            "text": "", 
            "title": "\u9644\u5f55"
        }, 
        {
            "location": "/ca-setup_zh/#postgres-ssl", 
            "text": "", 
            "title": "Postgres SSL \u914d\u7f6e"
        }, 
        {
            "location": "/ca-setup_zh/#postgre", 
            "text": "In postgresql.conf, uncomment SSL and set to \u201con\u201d (SSL=on)    Place certificate and key files in the Postgres data directory.    Instructions for generating self-signed certificates for: https://www.postgresql.org/docs/9.5/static/ssl-tcp.html  Note: Self-signed certificates are for testing purposes and should not be used in a production environment    \u5728postgresql.conf\u4e2d\u6253\u5f00SSL\uff08SSL=on\uff09    \u628a\u8bc1\u4e66\u548c\b\u5bc6\u94a5\u6587\u4ef6\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u4e0b\u3002    \u5982\u4f55\u751f\u6210\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\uff1ahttps://www.postgresql.org/docs/9.5/static/ssl-tcp.html  \u6ce8\u610f\uff1a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\uff0c\u8bf7\u52ff\u7528\u4e8e\b\u751f\u4ea7\u73af\u5883\u3002", 
            "title": "\u914d\u7f6ePostgre\u670d\u52a1\u5668\u7684\u57fa\u672c\u6b65\u9aa4\uff1a"
        }, 
        {
            "location": "/ca-setup_zh/#postgres-", 
            "text": "Place certificates of the certificate authorities (CAs) you trust in the file root.crt in the Postgres data directory    In postgresql.conf, set \u201cssl_ca_file\u201d to point to the root cert of the client (CA cert)    Set the clientcert parameter to 1 on the appropriate hostssl line(s) in pg_hba.conf.    For more details on configuring SSL on the Postgres server, please refer to the following Postgres documentation: https://www.postgresql.org/docs/9.4/static/libpq-ssl.html    \u628a\u4f60\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u91cc\u7684root.crt\u91cc    \u5728\bpostgresql.conf\u91cc\uff0c\u8bbe\u7f6e\u201cssl_ca_file\u201d\u6307\u5411\u5ba2\u6237\u7aef\u7684\u6839\u8bc1\u4e66    \u5728pg_hba.conf\u91cc\uff0c\u5728\b\u6b63\u786e\u7684hostssl\u884c\u628aclientcert\b\u53c2\u6570\u8bbe\u4e3a1    \u66f4\u591a\u4fe1\u606f\uff1ahttps://www.postgresql.org/docs/9.4/static/libpq-ssl.html", 
            "title": "Postgres \u670d\u52a1\u5668 - \u9700\u8981\u5ba2\u6237\u7aef\u8bc1\u4e66"
        }, 
        {
            "location": "/ca-setup_zh/#mysql-ssl", 
            "text": "On MySQL 5.7.X, certain modes affect whether the server permits \u20180000-00-00\u2019 as a valid date. It might be necessary to relax the modes that MySQL server uses. We want to allow the server to be able to accept zero date values.", 
            "title": "MySQL SSL \u914d\u7f6e"
        }, 
        {
            "location": "/sdk_node_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nQingpeng Cai\n\n\nDinghao Liu, Bei Wang\n\n\n\n\n\n\n\n\nThe Hyperledger Fabric SDK for Node.js prvides a powerful API to interact with a Hyperledger Fabric v1.0 blockchain. The SDK is designed to be used in the Node.js JavaScript runtime.\n\n\nHyperledger Fabric\u4e2d\u7684Node.js SDK\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684API\u63a5\u53e3\u7528\u4e8e\u540cHyperledger Fabric v1.0 blockchain\u8fdb\u884c\u4ea4\u4e92\u3002\u8be5SDK\u88ab\u8bbe\u8ba1\u7528\u4e8eNode.js JavaScript\u7684\u8fd0\u884c\u3002\n\n\n\u6982\u8ff0\n\n\nHyperledger Fabric is the operating system of an enterprise-strength permissioned blockchain network. For a high-level overview of the fabric, visit http://hyperledger-fabric.readthedocs.io/en/latest/.\n\n\nHyperledger Fabric\u662f\u4f01\u4e1a\u7ea7\u8bb8\u53ef\u7684\u533a\u5757\u94fe\u7f51\u7edc\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u5bf9\u4e8e\u9ad8\u7b49\u7ea7fabric\u7684\u6982\u8ff0\uff0c\u8bf7\u8bbf\u95eehttp://hyperledger-fabric.readthedocs.io/en/latest/.\n\n\nApplications can be developed to interact with the blockchain network on behalf of the users. APIs are available to:\n\n\n\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u5e94\u7528\u6765\u5e2e\u52a9\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684\u4ee3\u8868\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\u3002API\u53ef\u4ee5\u7528\u4e8e\uff1a\n\n\n\n\n\u521b\u5efa\n\u901a\u9053\n(create channels)\n\n\n\u8bf7\u6c42\n\u8282\u70b9\n\u52a0\u5165\u901a\u9053(ask peer nodes to join the channel)\n\n\n\u5728\u8282\u70b9\u4e2d\u5b89\u88c5\n\u94fe\u7801\n(install chaincodes in peers)\n\n\n\u5728\u901a\u9053\u4e2d\u5b9e\u73b0\u94fe\u7801\u5b9e\u4f8b\u5316(instantiate chaincodes in a channel)\n\n\n\u901a\u8fc7\u8c03\u7528\u94fe\u7801\u6765\u8c03\u7528\u4e8b\u52a1(invoke transactions by calling the chaincode)\n\n\n\u67e5\u8be2\u4e8b\u52a1\u6216\u533a\u5757\u7684\n\u8d26\u672c\n(query the ledger for transactions or blocks)\n\n\n\n\nFabric\u7684\u4e0d\u540c\u7ec4\u6210\u90e8\u5206\u5982\u4f55\u534f\u8c03\u5de5\u4f5c\n\n\nThe Transaction Flow document provides an excellent description of the application/SDK, peers, and orderers working together to process transactions and producing blocks.\n\n\n\u8be5\n\u4ea4\u6613\u6d41\u7a0b\n\u6587\u4ef6\u63d0\u4f9b\u4e00\u4e2a\u5173\u4e8e\u5e94\u7528\u7a0b\u5e8f/SDK\uff0cpeer\u548corderer\u5171\u540c\u5904\u7406\u4e8b\u52a1\u5e76\u4ea7\u751f\u533a\u5757\u7684\u5f88\u597d\u7684\u63cf\u8ff0\u3002\n\n\nSecurity on the Fabric is enforced with digital signatures. All requests made to the fabric must be signed by users with appropriate enrollment certificates. For a user\ns enrollment certificate to be considered valid on the Fabric, it must be signed by a trusted Certificate Authority (CA). Fabric supports any standard CAs. In addition, Fabric provides a CA server. See this overview.\n\n\nFabric\u7684\u5b89\u5168\u662f\u901a\u8fc7\n\u6570\u5b57\u7b7e\u540d\n\u6765\u5b9e\u73b0\u7684\u3002\u5728Fabric\u4e2d\u7684\u6240\u6709\u8bf7\u6c42\u90fd\u5fc5\u987b\u5177\u6709\u6709\u6548\u6ce8\u518c\u8bc1\u4e66\u7684\u7528\u6237\u7b7e\u540d\u3002\u5bf9\u4e8e\u5728Fabric\u4e2d\u88ab\u8ba4\u4e3a\u6709\u6548\u7684\u6ce8\u518c\u8bc1\u4e66\uff0c\u5fc5\u987b\u5177\u6709\u53d7\u4fe1\u4efb\u7684\u8bc1\u4e66\u9881\u53d1\u673a\u6784(CA)\u7b7e\u540d\u3002Fabric\u652f\u6301CA\u7684\u6240\u6709\u6807\u51c6\u3002\u6b64\u5916\uff0cFabric\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2aCA\u670d\u52a1\u5668\u3002\u8bf7\u770b\u8fd9\u4e2a\n\u6982\u8ff0\n\u3002\n\n\nNode.js SDK\u529f\u80fd\n\n\nThe Hyperledger Fabric SDK for Node.js is designed in an Object-Oriented programming style. Its modular construction enables application developers to plug in alternative implementations of key functions such as crypto suites, the state persistence store, and logging utility.\n\n\nHyperledger Fabric\u4e2d\u7684Node.js SDK\u662f\u6839\u636e\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u98ce\u683c\u8fdb\u884c\u8bbe\u8ba1\u7684\u3002\u8be5\u6a21\u5757\u5316\u7684\u7ed3\u6784\u662f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u53ef\u9009\u62e9\u7684\u63d2\u5165\u5173\u952e\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u52a0\u5bc6\u5957\u4ef6\uff0c\u6301\u4e45\u6027\u72b6\u6001\u5b58\u50a8\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u7b49\u3002\n\n\nThe SDK\ns list of features include:\n\n\n\u8be5SDK\u7684\u529f\u80fd\u5217\u8868\u5982\u4e0b\uff1a\n\n\n\u00b7 fabric-client:\n\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u9053\n(create a new channel)\n\n\n\u5c06\u901a\u9053\u4fe1\u606f\u53d1\u9001\u7ed9\u8282\u70b9\u7528\u4e8e\u8282\u70b9\u52a0\u5165\n(send channel information to a peer to join)\n\n\n\u5728\u8282\u70b9\u4e0a\u5b89\u88c5\u94fe\u7801\n(install chaincode on a peer)\n\n\n\u5728\u901a\u9053\u4e2d\u8fdb\u884c\u94fe\u7801\u5b9e\u4f8b\u5316\uff0c\u5176\u4e2d\u5305\u62ec\u4e24\u6b65\uff1a\n\u63d0\u8bae\n\u548c\n\u4ea4\u6613\n(instantiate chaincode in a channel, which involves two steps: propose and transact)\n\n\n\u63d0\u4ea4\u4ea4\u6613\uff0c\u5176\u4e2d\u5305\u62ec\u4e24\u6b65\uff1a\n\u63d0\u8bae\n\u548c\n\u4ea4\u6613\n(submitting a transaction, which also involves two steps: propose and transact)\n\n\n\u67e5\u8be2\u94fe\u7801\u7684\u6700\u65b0\u72b6\u6001\n(query a chaincode for the latest application state)\n\n\n\n\n\u591a\u79cd\u67e5\u8be2\u529f\u80fd(various query capabilities):\n\n\n\n\n\u67e5\u8be2\u901a\u9053\u957f\u5ea6\n(channel height)\n\n\n\u901a\u8fc7\u533a\u5757\u6570\u5b57\u67e5\u8be2\n(block-by-number),\n\u901a\u8fc7\u533a\u5757hash\u503c\u67e5\u8be2\n(block-by-hash)\n\n\n\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u6240\u5728\u7684\u6240\u6709\u901a\u9053\n(all channels that a peer is part of)\n\n\n\u67e5\u8be2\u8282\u70b9\u4e2d\u5b89\u88c5\u7684\u6240\u6709\u94fe\u7801\n(all installed chaincodes in a peer)\n\n\n\u67e5\u8be2\u901a\u9053\u4e2d\u7684\u6240\u6709\u5b9e\u4f8b\u5316\u94fe\u7801\n(all instantiated chaincodes in a channel)\n\n\n\u901a\u8fc7\u4e8b\u52a1ID\u67e5\u8be2\n(transaction-by-id)\n\n\n\u67e5\u8be2\u901a\u9053\u7684\u914d\u7f6e\u6570\u636e\n(channel configuration data)\n\n\n\n\n\n\n\n\n\u76d1\u63a7\u4e8b\u4ef6(monitoring events):\n\n\n\n\n\u8fde\u63a5\u4e00\u4e2a\u8282\u70b9\u7684\u4e8b\u4ef6\u6d41\n(connect to a peer\ns event stream)\n\n\n\u76d1\u542c\u4e00\u4e2a\n\u533a\u5757\u7684\u4e8b\u4ef6\n(listen on block events)\n\n\n\u76d1\u542c\u4ea4\u6613\u65f6\u95f4\u5e76\u4e14\u786e\u5b9a\u4ea4\u6613\u662f\u5426\u6210\u529f\u63d0\u4ea4\u8fdb\u884c\u6807\u8bb0(listen on transactions events and find out if the transaction was successfully committed to the ledger or marked invalid)\n\n\n\u76d1\u542c\u7531\u94fe\u7801\u4ea7\u751f\u7684\n\u81ea\u5b9a\u4e49\u4e8b\u4ef6\n(listen on custom events produced by chaincodes)\n\n\n\n\n\n\n\n\n\u5e8f\u5217\u5316\u7528\u6237\u5bf9\u8c61\u53ca\u5176\u7b7e\u540d\u529f\u80fd(serializable User object with signing capabilities)\n\n\n\n\n\n\n\u591a\u5c42\u8986\u76d6\u5f0f\u7684\u5206\u5c42\u914d\u7f6e\u8bbe\u7f6e(hierarchical configuration settings with multiple layers of overrides):\u6587\u4ef6(files), \u73af\u5883\u53d8\u91cf(environment variable),\u7a0b\u5e8f\u53c2\u6570(program arguments), \u5185\u5b58\u8bbe\u7f6e(in-memory settings)\n\n\n\n\n\n\n\u4f7f\u7528\u5185\u7f6e\u7684\u8bb0\u5f55\u5668(winston)\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u5e76\u4e14\u88ab\u591a\u79cd\u6d41\u884c\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u8fdb\u884c\u8986\u76d6\uff0c\u5305\u62ec log4js \u548c bunyan\u7b49\u7b49\u3002logging utility with a built-in logger (winston) and can be overriden with a number of popular loggers including log4js and bunyan\n\n\n\n\n\n\n\u53ef\u63d2\u5f0fCryptoSuite \u754c\u9762\u63cf\u8ff0\u4e86\u4e0eFabric\u8fdb\u884c\u6210\u529f\u4ea4\u4e92\u65f6\u9700\u8981\u7684\u52a0\u5bc6\u64cd\u4f5c\u3002\u5176\u4e2d\u5305\u62ec\u4e24\u79cd\u5b9e\u73b0\uff1apluggable CryptoSuite interface describe the cryptographic operations required for successful interactions with the Fabric. Two implementations are provided out of box:\n\n\n\n\nSoftware-based ECDSA\n\n\nPKCS#11-compliant ECDSA\n\n\n\n\n\n\n\n\n\u53ef\u63d2\u5f0f\u72b6\u6001\u5b58\u50a8\u754c\u9762\uff0c\u7528\u4e8e\u6301\u7eed\u6027\u72b6\u6001\u7f13\u5b58\uff0c\u6bd4\u5982\u7528\u6237\u3002pluggable State Store interface for persisting state caches such as users\n\n\n\n\n\u57fa\u4e8e\u6587\u4ef6\u7684\u5b58\u50a8\n(File-based store)\n\n\n\u57fa\u4e8eCouchDB\u7684\u5b58\u50a8\n\uff0c\u4e0eCouchDB\u6570\u636e\u5e93\u548cIBM Cloudant\u517c\u5bb9(CouchDB-base store which works with both CouchDB database and IBM Cloudant)\n\n\n\n\n\n\n\n\n\u81ea\u5b9a\u4e49\u7684\u5bc6\u94a5\u5b58\u50a8\u7528\u4e8e\u6240\u6709\u57fa\u4e8e\u8f6f\u4ef6\u7684\u52a0\u5bc6\u5957\u4ef6\u5b9e\u73b0\u3002customizable Crypto Key Store for any software-based cryptographic suite implementation\n\n\n\n\n\u540c\u65f6\u652f\u6301TLS\u548c\u975eTLS\u94fe\u63a5\u5230peer\u548corderer\uff0c\u8bf7\u53c2\u9605peer\u548corderer\u7684\u8d85\u7c7b\u3002 supports both TLS (grpcs://) or non-TLS (grpc://) connections to peers and orderers, see Remote which is the superclass for peers and orderers\n\n\n\n\n\u00b7 fabric-ca-client:\n\n\n\n\n\u6ce8\u518c\n\u65b0\u7528\u6237(register a new user)\n\n\n\u767b\u8bb0\n\u7528\u6237\u540c\u65f6\u83b7\u5f97\u7531Fabric CA\u7b7e\u7f72\u7684\u6ce8\u518c\u8bc1\u4e66(enroll a user to obtain the enrollment certificate signed by the Fabric CA)\n\n\n\u901a\u8fc7\u6ce8\u518cID\n\u5e9f\u9664\n\u5df2\u6709\u7528\u6237\u6216\u5e9f\u9664\u7279\u5b9a\u8bc1\u4e66(evoke an existing user by enrollment ID or revoke a specific certificate)\n\n\n\u81ea\u5b9a\u4e49\u7684\u6301\u4e45\u50a8\u5b58\n(customizable persistence store)\n\n\n\n\nAPI\u53c2\u8003\n\n\nThe SDK is made up of 3 top-level modules that can be accessed through the navigation menu Modules:\n\n\nSDK\u75313\u4e2a\u9876\u7ea7\u6a21\u5757\u7ec4\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bfc\u822a\u83dc\u5355\u8bbf\u95ee\u6a21\u5757\uff1a\n\n\n\n\n\n\napi:\u53ef\u63d2\u5f0fAPI\uff0c\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u6765\u901a\u8fc7SDK\u6765\u63d0\u4f9b\u6709\u9009\u62e9\u6027\u5173\u952e\u754c\u9762\u7684\u66ff\u4ee3\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u63a5\u53e3\uff0c\u90fd\u6709\u5185\u7f6e\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002api: pluggable APIs for application developers to supply alternative implementations of key interfaces used by the SDK. For each interface there are built-in default implementations.\n\n\n\n\n\n\nfabric-client: \u8be5\u6a21\u5757\u63d0\u4f9bAPI\u6765\u8fdb\u884c\u540c\u57fa\u4e8eHypreledger Fabric\u7684\u533a\u5757\u94fe\u7f51\u7edc\u7684\u4ea4\u4e92\uff0c\u4e5f\u5c31\u662f\u540cpeer\uff0corderer\u548c\u4e8b\u4ef6\u6d41\u3002fabric-client: this module provides APIs to interact with the core components of a Hypreledger Fabric-based blockchain network, namely the peers, orderers and event streams.\n\n\n\n\n\n\nfabric-ca-client:\u8be5\u6a21\u5757\u63d0\u4f9b\u80fd\u4e0e\u5305\u542b\u6210\u5458\u7ba1\u7406\u8d44\u683c\u7684\u670d\u52a1\u7684\u53ef\u9009\u7ec4\u4ef6(fabric-ca)\u8fdb\u884c\u4ea4\u4e92\u7684API\u3002\u8be5\u5de5\u4f5c\u5177\u6709\nCommons Attribution 4.0 International License\n\u3002fabric-ca-client: this module provides APIs to interact with the optional component, fabric-ca, that contains services for membership management. Creative Commons License\nThis work is licensed under a Creative Commons Attribution 4.0 International License.", 
            "title": "SDK--node"
        }, 
        {
            "location": "/sdk_node_zh/#_1", 
            "text": "Hyperledger Fabric is the operating system of an enterprise-strength permissioned blockchain network. For a high-level overview of the fabric, visit http://hyperledger-fabric.readthedocs.io/en/latest/.  Hyperledger Fabric\u662f\u4f01\u4e1a\u7ea7\u8bb8\u53ef\u7684\u533a\u5757\u94fe\u7f51\u7edc\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u5bf9\u4e8e\u9ad8\u7b49\u7ea7fabric\u7684\u6982\u8ff0\uff0c\u8bf7\u8bbf\u95eehttp://hyperledger-fabric.readthedocs.io/en/latest/.  Applications can be developed to interact with the blockchain network on behalf of the users. APIs are available to:  \u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u5e94\u7528\u6765\u5e2e\u52a9\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684\u4ee3\u8868\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\u3002API\u53ef\u4ee5\u7528\u4e8e\uff1a   \u521b\u5efa \u901a\u9053 (create channels)  \u8bf7\u6c42 \u8282\u70b9 \u52a0\u5165\u901a\u9053(ask peer nodes to join the channel)  \u5728\u8282\u70b9\u4e2d\u5b89\u88c5 \u94fe\u7801 (install chaincodes in peers)  \u5728\u901a\u9053\u4e2d\u5b9e\u73b0\u94fe\u7801\u5b9e\u4f8b\u5316(instantiate chaincodes in a channel)  \u901a\u8fc7\u8c03\u7528\u94fe\u7801\u6765\u8c03\u7528\u4e8b\u52a1(invoke transactions by calling the chaincode)  \u67e5\u8be2\u4e8b\u52a1\u6216\u533a\u5757\u7684 \u8d26\u672c (query the ledger for transactions or blocks)", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/sdk_node_zh/#fabric", 
            "text": "The Transaction Flow document provides an excellent description of the application/SDK, peers, and orderers working together to process transactions and producing blocks.  \u8be5 \u4ea4\u6613\u6d41\u7a0b \u6587\u4ef6\u63d0\u4f9b\u4e00\u4e2a\u5173\u4e8e\u5e94\u7528\u7a0b\u5e8f/SDK\uff0cpeer\u548corderer\u5171\u540c\u5904\u7406\u4e8b\u52a1\u5e76\u4ea7\u751f\u533a\u5757\u7684\u5f88\u597d\u7684\u63cf\u8ff0\u3002  Security on the Fabric is enforced with digital signatures. All requests made to the fabric must be signed by users with appropriate enrollment certificates. For a user s enrollment certificate to be considered valid on the Fabric, it must be signed by a trusted Certificate Authority (CA). Fabric supports any standard CAs. In addition, Fabric provides a CA server. See this overview.  Fabric\u7684\u5b89\u5168\u662f\u901a\u8fc7 \u6570\u5b57\u7b7e\u540d \u6765\u5b9e\u73b0\u7684\u3002\u5728Fabric\u4e2d\u7684\u6240\u6709\u8bf7\u6c42\u90fd\u5fc5\u987b\u5177\u6709\u6709\u6548\u6ce8\u518c\u8bc1\u4e66\u7684\u7528\u6237\u7b7e\u540d\u3002\u5bf9\u4e8e\u5728Fabric\u4e2d\u88ab\u8ba4\u4e3a\u6709\u6548\u7684\u6ce8\u518c\u8bc1\u4e66\uff0c\u5fc5\u987b\u5177\u6709\u53d7\u4fe1\u4efb\u7684\u8bc1\u4e66\u9881\u53d1\u673a\u6784(CA)\u7b7e\u540d\u3002Fabric\u652f\u6301CA\u7684\u6240\u6709\u6807\u51c6\u3002\u6b64\u5916\uff0cFabric\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2aCA\u670d\u52a1\u5668\u3002\u8bf7\u770b\u8fd9\u4e2a \u6982\u8ff0 \u3002", 
            "title": "Fabric\u7684\u4e0d\u540c\u7ec4\u6210\u90e8\u5206\u5982\u4f55\u534f\u8c03\u5de5\u4f5c"
        }, 
        {
            "location": "/sdk_node_zh/#nodejs-sdk", 
            "text": "The Hyperledger Fabric SDK for Node.js is designed in an Object-Oriented programming style. Its modular construction enables application developers to plug in alternative implementations of key functions such as crypto suites, the state persistence store, and logging utility.  Hyperledger Fabric\u4e2d\u7684Node.js SDK\u662f\u6839\u636e\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u98ce\u683c\u8fdb\u884c\u8bbe\u8ba1\u7684\u3002\u8be5\u6a21\u5757\u5316\u7684\u7ed3\u6784\u662f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u53ef\u9009\u62e9\u7684\u63d2\u5165\u5173\u952e\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u52a0\u5bc6\u5957\u4ef6\uff0c\u6301\u4e45\u6027\u72b6\u6001\u5b58\u50a8\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u7b49\u3002  The SDK s list of features include:  \u8be5SDK\u7684\u529f\u80fd\u5217\u8868\u5982\u4e0b\uff1a  \u00b7 fabric-client:   \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u9053 (create a new channel)  \u5c06\u901a\u9053\u4fe1\u606f\u53d1\u9001\u7ed9\u8282\u70b9\u7528\u4e8e\u8282\u70b9\u52a0\u5165 (send channel information to a peer to join)  \u5728\u8282\u70b9\u4e0a\u5b89\u88c5\u94fe\u7801 (install chaincode on a peer)  \u5728\u901a\u9053\u4e2d\u8fdb\u884c\u94fe\u7801\u5b9e\u4f8b\u5316\uff0c\u5176\u4e2d\u5305\u62ec\u4e24\u6b65\uff1a \u63d0\u8bae \u548c \u4ea4\u6613 (instantiate chaincode in a channel, which involves two steps: propose and transact)  \u63d0\u4ea4\u4ea4\u6613\uff0c\u5176\u4e2d\u5305\u62ec\u4e24\u6b65\uff1a \u63d0\u8bae \u548c \u4ea4\u6613 (submitting a transaction, which also involves two steps: propose and transact)  \u67e5\u8be2\u94fe\u7801\u7684\u6700\u65b0\u72b6\u6001 (query a chaincode for the latest application state)   \u591a\u79cd\u67e5\u8be2\u529f\u80fd(various query capabilities):   \u67e5\u8be2\u901a\u9053\u957f\u5ea6 (channel height)  \u901a\u8fc7\u533a\u5757\u6570\u5b57\u67e5\u8be2 (block-by-number), \u901a\u8fc7\u533a\u5757hash\u503c\u67e5\u8be2 (block-by-hash)  \u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u6240\u5728\u7684\u6240\u6709\u901a\u9053 (all channels that a peer is part of)  \u67e5\u8be2\u8282\u70b9\u4e2d\u5b89\u88c5\u7684\u6240\u6709\u94fe\u7801 (all installed chaincodes in a peer)  \u67e5\u8be2\u901a\u9053\u4e2d\u7684\u6240\u6709\u5b9e\u4f8b\u5316\u94fe\u7801 (all instantiated chaincodes in a channel)  \u901a\u8fc7\u4e8b\u52a1ID\u67e5\u8be2 (transaction-by-id)  \u67e5\u8be2\u901a\u9053\u7684\u914d\u7f6e\u6570\u636e (channel configuration data)     \u76d1\u63a7\u4e8b\u4ef6(monitoring events):   \u8fde\u63a5\u4e00\u4e2a\u8282\u70b9\u7684\u4e8b\u4ef6\u6d41 (connect to a peer s event stream)  \u76d1\u542c\u4e00\u4e2a \u533a\u5757\u7684\u4e8b\u4ef6 (listen on block events)  \u76d1\u542c\u4ea4\u6613\u65f6\u95f4\u5e76\u4e14\u786e\u5b9a\u4ea4\u6613\u662f\u5426\u6210\u529f\u63d0\u4ea4\u8fdb\u884c\u6807\u8bb0(listen on transactions events and find out if the transaction was successfully committed to the ledger or marked invalid)  \u76d1\u542c\u7531\u94fe\u7801\u4ea7\u751f\u7684 \u81ea\u5b9a\u4e49\u4e8b\u4ef6 (listen on custom events produced by chaincodes)     \u5e8f\u5217\u5316\u7528\u6237\u5bf9\u8c61\u53ca\u5176\u7b7e\u540d\u529f\u80fd(serializable User object with signing capabilities)    \u591a\u5c42\u8986\u76d6\u5f0f\u7684\u5206\u5c42\u914d\u7f6e\u8bbe\u7f6e(hierarchical configuration settings with multiple layers of overrides):\u6587\u4ef6(files), \u73af\u5883\u53d8\u91cf(environment variable),\u7a0b\u5e8f\u53c2\u6570(program arguments), \u5185\u5b58\u8bbe\u7f6e(in-memory settings)    \u4f7f\u7528\u5185\u7f6e\u7684\u8bb0\u5f55\u5668(winston)\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u5e76\u4e14\u88ab\u591a\u79cd\u6d41\u884c\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u8fdb\u884c\u8986\u76d6\uff0c\u5305\u62ec log4js \u548c bunyan\u7b49\u7b49\u3002logging utility with a built-in logger (winston) and can be overriden with a number of popular loggers including log4js and bunyan    \u53ef\u63d2\u5f0fCryptoSuite \u754c\u9762\u63cf\u8ff0\u4e86\u4e0eFabric\u8fdb\u884c\u6210\u529f\u4ea4\u4e92\u65f6\u9700\u8981\u7684\u52a0\u5bc6\u64cd\u4f5c\u3002\u5176\u4e2d\u5305\u62ec\u4e24\u79cd\u5b9e\u73b0\uff1apluggable CryptoSuite interface describe the cryptographic operations required for successful interactions with the Fabric. Two implementations are provided out of box:   Software-based ECDSA  PKCS#11-compliant ECDSA     \u53ef\u63d2\u5f0f\u72b6\u6001\u5b58\u50a8\u754c\u9762\uff0c\u7528\u4e8e\u6301\u7eed\u6027\u72b6\u6001\u7f13\u5b58\uff0c\u6bd4\u5982\u7528\u6237\u3002pluggable State Store interface for persisting state caches such as users   \u57fa\u4e8e\u6587\u4ef6\u7684\u5b58\u50a8 (File-based store)  \u57fa\u4e8eCouchDB\u7684\u5b58\u50a8 \uff0c\u4e0eCouchDB\u6570\u636e\u5e93\u548cIBM Cloudant\u517c\u5bb9(CouchDB-base store which works with both CouchDB database and IBM Cloudant)     \u81ea\u5b9a\u4e49\u7684\u5bc6\u94a5\u5b58\u50a8\u7528\u4e8e\u6240\u6709\u57fa\u4e8e\u8f6f\u4ef6\u7684\u52a0\u5bc6\u5957\u4ef6\u5b9e\u73b0\u3002customizable Crypto Key Store for any software-based cryptographic suite implementation   \u540c\u65f6\u652f\u6301TLS\u548c\u975eTLS\u94fe\u63a5\u5230peer\u548corderer\uff0c\u8bf7\u53c2\u9605peer\u548corderer\u7684\u8d85\u7c7b\u3002 supports both TLS (grpcs://) or non-TLS (grpc://) connections to peers and orderers, see Remote which is the superclass for peers and orderers   \u00b7 fabric-ca-client:   \u6ce8\u518c \u65b0\u7528\u6237(register a new user)  \u767b\u8bb0 \u7528\u6237\u540c\u65f6\u83b7\u5f97\u7531Fabric CA\u7b7e\u7f72\u7684\u6ce8\u518c\u8bc1\u4e66(enroll a user to obtain the enrollment certificate signed by the Fabric CA)  \u901a\u8fc7\u6ce8\u518cID \u5e9f\u9664 \u5df2\u6709\u7528\u6237\u6216\u5e9f\u9664\u7279\u5b9a\u8bc1\u4e66(evoke an existing user by enrollment ID or revoke a specific certificate)  \u81ea\u5b9a\u4e49\u7684\u6301\u4e45\u50a8\u5b58 (customizable persistence store)", 
            "title": "Node.js SDK\u529f\u80fd"
        }, 
        {
            "location": "/sdk_node_zh/#api", 
            "text": "The SDK is made up of 3 top-level modules that can be accessed through the navigation menu Modules:  SDK\u75313\u4e2a\u9876\u7ea7\u6a21\u5757\u7ec4\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bfc\u822a\u83dc\u5355\u8bbf\u95ee\u6a21\u5757\uff1a    api:\u53ef\u63d2\u5f0fAPI\uff0c\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u6765\u901a\u8fc7SDK\u6765\u63d0\u4f9b\u6709\u9009\u62e9\u6027\u5173\u952e\u754c\u9762\u7684\u66ff\u4ee3\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u63a5\u53e3\uff0c\u90fd\u6709\u5185\u7f6e\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002api: pluggable APIs for application developers to supply alternative implementations of key interfaces used by the SDK. For each interface there are built-in default implementations.    fabric-client: \u8be5\u6a21\u5757\u63d0\u4f9bAPI\u6765\u8fdb\u884c\u540c\u57fa\u4e8eHypreledger Fabric\u7684\u533a\u5757\u94fe\u7f51\u7edc\u7684\u4ea4\u4e92\uff0c\u4e5f\u5c31\u662f\u540cpeer\uff0corderer\u548c\u4e8b\u4ef6\u6d41\u3002fabric-client: this module provides APIs to interact with the core components of a Hypreledger Fabric-based blockchain network, namely the peers, orderers and event streams.    fabric-ca-client:\u8be5\u6a21\u5757\u63d0\u4f9b\u80fd\u4e0e\u5305\u542b\u6210\u5458\u7ba1\u7406\u8d44\u683c\u7684\u670d\u52a1\u7684\u53ef\u9009\u7ec4\u4ef6(fabric-ca)\u8fdb\u884c\u4ea4\u4e92\u7684API\u3002\u8be5\u5de5\u4f5c\u5177\u6709 Commons Attribution 4.0 International License \u3002fabric-ca-client: this module provides APIs to interact with the optional component, fabric-ca, that contains services for membership management. Creative Commons License\nThis work is licensed under a Creative Commons Attribution 4.0 International License.", 
            "title": "API\u53c2\u8003"
        }, 
        {
            "location": "/sdk_java_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nXuanyong Wu\n\n\n\n\n\n\n\n\n\n\nWelcome to Java SDK for Hyperledger project. The SDK helps facilitate Java applications to manage the lifecycle of Hyperledger channels  and user chaincode. The SDK also provides a means to execute user chaincode, query blocks and transactions on the channel, and monitor events on the channel.\n\n\n\u6b22\u8fce\u4f7f\u7528Hyperledger\u9879\u76ee\u7684Java SDK\u3002 \u8be5SDK\u5e2e\u52a9\u4fc3\u8fdbJava\u5e94\u7528\u7a0b\u5e8f\u5bf9Hyperledger\u901a\u9053\u548c\u7528\u6237\u94fe\u7801\u7684\u751f\u547d\u5468\u671f\u7684\u7ba1\u7406\u3002\u8be5SDK\u540c\u65f6\u63d0\u4f9b\u6267\u884c\u7528\u6237\u94fe\u7801\u3001\u5728\u901a\u9053\u4e0a\u67e5\u8be2\u533a\u5757\u548c\u4ea4\u6613\u4ee5\u53ca\u76d1\u542c\u901a\u9053\u4e0a\u7684\u4e8b\u4ef6\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002\n\n\nThe SDK acts on behave of a particular User which is defined by the embedding application through the implementation of the SDK\ns \nUser\n interface.\n\n\n\u8be5SDK\u80fd\u591f\u5b9e\u73b0\u4e00\u4e9b\u7279\u5b9a\u7528\u6237\u7684\u884c\u4e3a\uff0c\u8fd9\u662f\u7531\u5d4c\u5165\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5b9e\u73b0SDK\u7684\nUser\n\u63a5\u53e3\u6765\u5b8c\u6210\u7684\u3002\n\n\nNote, the SDK does \nnot\n provide a means of persistence for the application defined channels and user artifacts on the client. This is left for the embedding application to best manage.\n\n\n\u8bf7\u6ce8\u610f\uff0c\u8be5SDK\n\u4e0d\u63d0\u4f9b\n\u5ba2\u6237\u7aef\u4e0a\u5e94\u7528\u5b9a\u4e49\u7684\u901a\u9053\u548c\u7528\u6237\u7ed3\u679c\u7684\u6301\u4e45\u6027\u65b9\u6cd5\u3002\u8fd9\u4e2a\u662f\u9884\u7559\u7ed9\u5d4c\u5165\u7a0b\u5e8f\u80fd\u591f\u8fdb\u884c\u66f4\u6709\u6548\u7684\u7ba1\u7406\u3002\n\n\nThe SDK also provides a client for Hyperledger\ns certificate authority.  The SDK is however not dependent on this\nparticular implementation of a certificate authority. Other Certificate authority\ns maybe used by implementing the\nSDK\ns \nEnrollment\n interface.\n\n\n\u8be5SDK\u540c\u65f6\u63d0\u4f9b\u4e00\u4e2a\u8fde\u63a5Hyperledger\u8bc1\u4e66\u673a\u6784\u7684\u5ba2\u6237\u7aef\u3002\u4f46\u8be5SDK\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u8fd9\u79cd\u8fde\u63a5\u8bc1\u4e66\u673a\u6784\u7684\u65b9\u6cd5\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0SDK\u7684\nEnrollment\n\u63a5\u53e3\u6765\u4f7f\u7528\u5176\u4ed6\u7684\u8bc1\u4e66\u673a\u6784\u3002\n\n\nThis provides a summary of steps required to get you started with building and using the Java SDK. Please note that this is not the API documentation or a tutorial for the SDK, this will only help you familiarize to get started with the SDK if you are new in this domain.\n\n\n\u4ee5\u4e0b\u6b65\u9aa4\u8ba9\u4f60\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u548c\u4f7f\u7528Java SDK\u3002\n\u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6587\u6863\u4e0d\u662fAPI\u6587\u6863\u6216\u8005SDK\u6307\u5357\uff0c\u6240\u4ee5\u4ec5\u4ec5\u5e2e\u52a9\u65b0\u624b\u719f\u6089\u5982\u4f55\u5f00\u59cb\u4f7f\u7528SDK\u3002\n\n\n\u5df2\u77e5\u7684\u9650\u5236(Known limitations and restrictions)\n\n\n\n\nTCerts are not supported(\u4e0d\u652f\u6301TCerts): JIRA FAB-1401\n\n\nHSM not supported(\u4e0d\u652f\u6301HSM): JIRA FAB-3137\n\n\nSingle Crypto strength 256(\u5355\u5c42\u52a0\u5bc6\u957f\u5ea6\u4e3a256\u4f4d): JIRA FAB-2564\n\n\nNetwork configuration updates not supported(\u4e0d\u652f\u6301\u7f51\u7edc\u914d\u7f6e\u66f4\u65b0): JIRA FAB-3103\n\n\n\n\n*************************************************\n\n\nv1.0.0\n\n\nThere is a git tagged v1.0.0 [e976abdc658f212d0c3a80ace4499a5cff4279c6] release of the SDK where there is no need to build the Hyperledger Fabric and Hyperledger Fabric CA described below. The provided docker-compose.yaml for the integration tests should pull v1.0.0  tagged images from Docker hub.\n\n\n\u5df2\u7ecf\u6709\u4e00\u4e2a\u6807\u8bb0\u4e3aV1.0.0[e976abdc658f212d0c3a80ace4499a5cff4279c6]\u7684SDK\u53d1\u884c\u7248\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u81ea\u5df1\u6253\u5305Hyperledge Fabric\u548cHyperledger Fabric CA\u3002\u63d0\u4f9b\u96c6\u6210\u6d4b\u8bd5\u7684docker-compose.yaml\u4f1a\u81ea\u52a8\u4eceDocker Hub\u4e0b\u8f7dV1.0.0\u7684\u955c\u50cf\u3002\n\n\nThe v1.0.0 version of the Hyperledger Fabric Java SDK is published to Maven so you can directly use in your application\ns pom.xml.\n\n\nV1.0.0\u7684Hyperledger Fabric Java SDK\u5df2\u7ecf\u53d1\u5e03\u5230\u4e86Maven\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684pom.xml\u6587\u4ef6\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002\n\n\nMaven Repository Hyperledger Fabric Java SDK\n\n\nMake sure you\nre using docker images at the level of the Fabric that matches the level of the SDK you\nre using in your application.\n\n\n\u8bf7\u786e\u8ba4\u4f60\u4f7f\u7528\u7684docker\u955c\u50cf\u7684\u7248\u672c\u548c\u4f60\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684SDK\u7248\u672c\u4e00\u81f4\u3002\n\n\n*************************************************\n\n\n\u9a8c\u8bc1Fabric\u548cFabric-ca\u5305(Valid builds of Fabric and Fabric-ca)\n\n\nHyperledger Fabric v1.0.1 is currently under active development and the very latest Hyperledger Fabric builds may not work with this sdk.\nYou should use the following commit levels of the Hyperledger projects:\n\n\nHyperledger Fabric V1.0.1 \u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u6700\u65b0\u7684Fabric\u6253\u5305\u53ef\u80fd\u4e0d\u9002\u7528\u8be5SDK\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u63d0\u4ea4\u7248\u672c\u7684Hyledger\u9879\u76ee\u3002\n\n\n\n\n\n\n\n\nProject\n\n\nCommit level\n\n\nDate\n\n\n\n\n\n\n\n\n\n\nfabric\n\n\nf56a82e36e040e1c1a986edfceac014ba1516571\n\n\nJul 11 12:48:33 2017 -0700\n\n\n\n\n\n\nfabric-ca\n\n\n74f8f4d4c29e45a79a8849efb057dbd8de3ae8d0\n\n\nJul 11 16:43:39 2017 +0200\n\n\n\n\n\n\n\n\nYou can clone these projects by going to the \nHyperledger repository\n.\n\n\n\u4f60\u53ef\u4ee5\u5230\nHyperledger\u4ed3\u5e93\n\u514b\u9686\u8fd9\u4e9b\u9879\u76ee\u3002\n\n\nAs SDK development continues, this file will be updated with compatible Hyperledger Fabric and Fabric-ca commit levels.\n\n\n\u968f\u7740SDK\u7684\u5f00\u53d1\u8fdb\u884c\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5c06\u4f1a\u968f\u7740Fabric\u548cFabric-ca\u7684\u63d0\u4ea4\u7248\u672c\u53d8\u5316\u800c\u66f4\u65b0\u3002\n\n\nOnce you have cloned \nfabric\n and \nfabric-ca\n, use the \ngit reset --hard commitlevel\n to set your repositories to the correct commit.\n\n\n\u4f60\u514b\u9686\nfabric\n\u548c\nfabric-ca\n\u65f6\uff0c\u4f7f\u7528\ngit reset --hard commitlevel\n\u6765\u8bbe\u7f6e\u4f60\u4ed3\u5e93\u7684\u4f7f\u7528\u6b63\u786e\u7684\u63d0\u4ea4\u7248\u672c\u3002\n\n\n\u4f7f\u7528Fabric Vagrant\u73af\u5883(Working with the Fabric Vagrant environment)\n\n\nVagrant is NOT required if your OS has Docker support and all the requirements needed to build directly in your\nenvironment.  For non Vagrant envrionment, the steps would be the same as below minus those parts involving Vagrant.\n Do the following if you want to run the Fabric components ( peer, orderer, fabric-ca ) in Vagrant:\n\n\n\u5982\u679c\u4f60\u7684\u73af\u5883\u652f\u6301Docker\uff0cVagrant\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4f60\u7684\u73af\u5883\u4e2d\u76f4\u63a5\u6253\u5305\u3002\u5728\u975eVagrant\u73af\u5883\uff0c\u7275\u6d89\u5230Vagrant\u7684\u6b65\u9aa4\u4f1a\u5c11\u8bb8\u6709\u4e9b\u4e0d\u540c\u3002\n\u6309\u7167\u4e0b\u9762\u7684\u6b65\u9aa4\u5728Vagrant\u4e2d\u8fd0\u884cFabric\u7ec4\u4ef6( peer, orderer, fabric-ca )\uff1a\n\n\n  git clone  https://github.com/hyperledger/fabric.git\n  git clone  https://github.com/hyperledger/fabric-ca.git\n  cd  fabric-ca\n  git reset --hard fabric-ca_commitlevel from above\n  cd ../fabric\n  git reset --hard fabric_commitlevel from above\n  cd devenv\n  change the Vagrant file as suggested below:\n  vagrant up\n  vagrant ssh\n  make docker\n  cd ../fabric-ca\n  make docker\n  cd ../fabric/sdkintegration\n  docker-compose down;  rm -rf /var/hyperledger/*; docker-compose up --force-recreate\n\n\n\n\n\n\nOpen the file \nVagrantfile\n and verify that the following \nconfig.vm.network\n statements are set. If not, then add them:\n\n\n\u6253\u5f00\nVagrantfile\n\u6587\u4ef6\u6765\u9a8c\u8bc1\u4e0b\u9762\u7684\nconfig.vm.network\n\u53c2\u6570\u662f\u5426\u8bbe\u7f6e\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u6dfb\u52a0\u4ee5\u4e0b\u884c\u3002\n\n\n\n\n  config.vm.network :forwarded_port, guest: 7050, host: 7050 # fabric orderer service\n  config.vm.network :forwarded_port, guest: 7051, host: 7051 # fabric peer vp0 service\n  config.vm.network :forwarded_port, guest: 7053, host: 7053 # fabric peer event service\n  config.vm.network :forwarded_port, guest: 7054, host: 7054 # fabric-ca service\n  config.vm.network :forwarded_port, guest: 5984, host: 15984 # CouchDB service\n  ### Below are probably missing.....\n  config.vm.network :forwarded_port, guest: 7056, host: 7056\n  config.vm.network :forwarded_port, guest: 7058, host: 7058\n  config.vm.network :forwarded_port, guest: 8051, host: 8051\n  config.vm.network :forwarded_port, guest: 8053, host: 8053\n  config.vm.network :forwarded_port, guest: 8054, host: 8054\n  config.vm.network :forwarded_port, guest: 8056, host: 8056\n  config.vm.network :forwarded_port, guest: 8058, host: 8058\n\n\n\n\n\nAdd to your Vagrant file a folder for referencing the sdkintegration folder between the lines below:\n\n\n\u5728Vagrant\u6587\u4ef6\u4e2d\uff0c\u589e\u52a0SDK\u96c6\u6210\u76ee\u5f55\u7684\u5f15\u7528\uff1a\n\n\nconfig.vm.synced_folder \n..\n, \n/opt/gopath/src/github.com/hyperledger/fabric\n\n\nconfig.vm.synced_folder \"/home/\nuser\n/fabric-sdk-java/src/test/fixture/sdkintegration\", \"/opt/gopath/src/github.com/hyperledger/fabric/sdkintegration\n\n\nconfig.vm.synced_folder ENV.fetch(\nLOCALDEVDIR\n, \n..\n), \n#{LOCALDEV}\n\n\nSDK \u4f9d\u8d56(SDK dependencies)\n\n\nSDK depends on few third party libraries that must be included in your classpath when using the JAR file. To get a list of dependencies, refer to pom.xml file or run\n\u5f53\u4f60\u4f7f\u7528JAR\u6587\u4ef6\u65f6\uff0cSDK\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9\u5e93\u5e94\u8be5\u5305\u542b\u5728classpath\u4e2d\u3002\u4e3a\u4e86\u53ef\u4ee5\u5f97\u5230\u4f9d\u8d56\u6e05\u5355\uff0c\u53ef\u4ee5\u53c2\u7167pom.xml\u6587\u4ef6\u6216\u8005\u8fd0\u884c\n\n\nmvn dependency:tree\n or \nmvn dependency:list\n.\n\nmvn dependency:tree\n \u6216 \nmvn dependency:list\n.\n\n\nAlternatively, \n mvn dependency:analyze-report \n will produce a report in HTML format in target directory listing all the dependencies in a more readable format.\n\u9664\u6b64\u4e4b\u5916\uff0c\n mvn dependency:analyze-report \n \u4f1a\u5728\u76ee\u6807\u76ee\u5f55\u4e2d\u751f\u6210\u4e00\u4e2aHTML\u683c\u5f0f\u7684\u62a5\u544a\u66f4\u6e05\u6670\u5730\u5217\u51fa\u6240\u6709\u7684\u4f9d\u8d56\u5305\u3002\n\n\n\u4f7f\u7528SDK(Using the SDK)\n\n\nThe SDK\ns test cases uses chaincode in the SDK\ns source tree: \n/src/test/fixture\n\nSDK\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4f7f\u7528\u94fe\u7801\u6e90\u7801\u6811\uff1a \n/src/test/fixture\n\n\nThe SDK\ns JAR is in \ntarget/fabric-sdk-java-1.0.0-SNAPSHOT.jar\n and you will need the additional dependencies listed above.\nWhen the SDK is published to \nMaven\n you will be able to simply include it in your application\ns \npom.xml\n.\n\n\nSDK\u7684JAR\u5305\u5728\ntarget/fabric-sdk-java-1.0.0-SNAPSHOT.jar\n\uff0c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u589e\u52a0\u4e0a\u9762\u63d0\u5230\u7684\u9644\u52a0\u7684\u4f9d\u8d56\u5305\u3002\n\u5f53SDK\u53d1\u5e03\u5230Maven\u540e\uff0c\u4f60\u53ea\u9700\u8981\u7b80\u5355\u7684\u5728\u4f60\u7684\u5e94\u7528\u7684\npom.xml\n\u5305\u542b\u5b83\u3002\n\n\nAdd below code in your \npom.xml\n to download fabric-sdk-java-1.0\n\u5728\u4f60\u7684\npom.xml\n\u6587\u4ef6\u589e\u52a0\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u4e0b\u8f7dfabric-sdk-java-1.0\n\n\n\n     \ndependencies\n\n     \ndependency\n\n            \ngroupId\norg.hyperledger.fabric-sdk-java\n/groupId\n\n            \nartifactId\nfabric-sdk-java\n/artifactId\n\n            \nversion\n1.0.0\n/version\n\n         \n/dependency\n\n     \n/dependencies\n\n\n\n\n\n\u7f16\u8bd1(Compiling)\n\n\nTo build this project, the following dependencies must be met\n\n\n\n\nJDK 1.8 or above\n\n\nApache Maven\n\n\n\n\n\u4e3a\u4e86\u80fd\u591f\u7f16\u8bd1\u8be5\u5de5\u7a0b\uff0c\u4f60\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\n\n\n\n\nJDK 1.8 \u6216\u66f4\u9ad8\n\n\nApache Maven\n\n\n\n\nOnce your JAVA_HOME points to your installation of JDK 1.8 (or above) and JAVA_HOME/bin and Apache maven are in your PATH, issue the following command to build the jar file:\n\u5f53\u4f60\u7684JAVA_HOME\u6307\u5411\u4e86JDK 1.8\u5b89\u88c5\u76ee\u5f55\uff0c\u5728PATH\u4e2d\u8bbe\u7f6e\u4e86JAVA_HOME/bin\u548c Apache Maven\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u6253\u5305jar\u6587\u4ef6\uff1a\n\n\n\n  mvn install\n\n\nor\n\n\n  mvn install -DskipTests\n\n \u5982\u679c\u4f60\u4e0d\u60f3\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002\n\n\n\u6267\u884c\u5355\u5143\u6d4b\u8bd5(Running the unit tests)\n\n\nTo run the unit tests, please use \nmvn test\n or \nmvn install\n which will run the unit tests and build the jar file.You must be running a local peer and orderer to be able to run the unit tests.\n\n\n\u901a\u8fc7\nmvn test\n \u6765\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u6216 \nmvn install\n \u6267\u884c\u5355\u5143\u6d4b\u8bd5\u5e76\u751f\u6210jar\u6587\u4ef6\u3002\u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86peer\u548corderer\u8282\u70b9\u624d\u80fd\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002\n\n\n\u6267\u884c\u96c6\u6210\u6d4b\u8bd5(Running the integration tests)\n\n\nYou must be running local instances of Fabric-ca, Fabric peers, and Fabric orderers to be able to run the integration tests. See above for running these services in Vagrant.\nUse this \nmaven\n command to run the integration tests:\n\n\n\u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86Fabric-ca, Fabric peers, and Fabric orderers\u8282\u70b9\u624d\u80fd\u591f\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\u3002\u53c2\u7167\u4e0a\u6587\u4e2d\u5982\u4f55\u5728Vagrant\u4e2d\u8fd0\u884c\u8fd9\u4e9b\u670d\u52a1\u3002\n\u4f7f\u7528\u4e0b\u9762\u7684\nmaven\n\u6307\u4ee4\u6765\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\uff1a\n\n\n\n\nmvn failsafe:integration-test -DskipITs=false\n\n\n\n\n\u7aef\u5230\u7aef\u6d4b\u8bd5\u573a\u666f(End to end test scenario)\n\n\nThe \nsrc/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java\n integration test is an example of installing, instantiating, invoking and querying a chaincode.\nIt constructs the Hyperledger channel, deploys the \nGO\n chaincode, invokes the chaincode to do a transfer amount operation and queries the resulting blockchain world state.\n\n\nThis test is a reworked version of the Fabric \ne2e_cli example\n to demonstrate the features of the SDK.\nTo better understand blockchain and Fabric concepts, we recommend you install and run the \ne2e_cli\n example.\n\n\n_src/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java_\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u3001\u8c03\u7528\u548c\u67e5\u8be2\u94fe\u7801\u7684\u4f8b\u5b50\u3002\u5b83\u6784\u5efa\u4e86Hyperledger\u901a\u9053\uff0c\u53d1\u5e03\nGO\n\u7248\u672c\u94fe\u7801\uff0c\u8c03\u7528\u94fe\u7801\uff0c\u6267\u884c\u8f6c\u8d26\u52a8\u4f5c\uff0c\u5e76\u5728\u533a\u5757\u94fe\u4e0a\u67e5\u8be2\u7ed3\u679c\u3002\n\n\n\u7aef\u5230\u7aef\u6d4b\u8bd5\u73af\u5883(End to end test environment)\n\n\nThe test defines one Fabric orderer and two organizations (peerOrg1, peerOrg2), each of which has 2 peers, one fabric-ca service.\n\n\n\u8be5\u6d4b\u8bd5\u5305\u542b\u4e00\u4e2aorderer\u8282\u70b9\uff0c\u4e24\u4e2a\u7ec4\u7ec7(peerOrg1, peerOrg2)\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u5404\u81ea\u5305\u542b\u4e24\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2afabric-ca\u670d\u52a1\u3002\n\n\n\u8bc1\u4e66\u53ca\u5176\u4ed6\u52a0\u5bc6\u5de5\u4ef6(Certificates and other cryptography artifacts)\n\n\nFabric requires that each organization has private keys and certificates for use in signing and verifying messages going to and from clients, peers and orderers.\nEach organization groups these artifacts in an \nMSP\n (Membership Service Provider) with a corresponding unique \nMSPID\n .\n\n\nFurthermore, each organization is assumed to generate these artifacts independently. The \nfabric-ca\n project is an example of such a certificate generation service.\nFabric also provides the \ncryptogen\n tool to automatically generate all cryptographic artifacts needed for the end to end test.\nIn the directory src/test/fixture/sdkintegration/e2e-2Orgs/channel\n\n\nThe command used to generate end2end \ncrypto-config\n artifacts:\n\n\nbuild/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config\n\n\nFor ease of assigning ports and mapping of artifacts to physical files, all peers, orderers, and fabric-ca are run as Docker containers controlled via a docker-compose configuration file.\n\n\nThe files used by the end to end are:\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n  (everything needed to bootstrap the orderer and create the channels)\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/crypto-config\n (as-is. Used by \nconfigtxgen\n and \ndocker-compose\n to map the MSP directories)\n * \nsrc/test/fixture/sdkintegration/docker-compose.yaml\n\n\nThe end to end test case artifacts are stored under the directory \nsrc/test/fixture/sdkintegration/e2e-2Org/channel\n .\n\n\nFabric\u9700\u8981\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u7528\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u5ba2\u6237\u7aef\u3001\u8282\u70b9\u548corderer\u4e4b\u95f4\u7684\u6d88\u606f\u3002\n\u6bcf\u4e2a\u7ec4\u7ec7\u7684\u8fd9\u4e9b\u5de5\u4ef6\u5728\nMSP\n (Membership Service Provider)\u4e2d\u90fd\u6709\u7edf\u4e00\u7684\u552f\u4e00 \nMSPID\n\u3002\n\n\n\u800c\u4e14\uff0c\u6211\u4eec\u5047\u8bbe\u5404\u4e2a\u7ec4\u7ec7\u90fd\u662f\u72ec\u7acb\u7684\u751f\u6210\u8fd9\u4e9b\u5de5\u4ef6\u3002\nfabric-ca\n\u5de5\u7a0b\u662f\u4e00\u4e2a\u8bc1\u4e66\u751f\u6210\u670d\u52a1\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\nFabric\u540c\u65f6\u63d0\u4f9b\ncryptogen\n\u5de5\u5177\u6765\u81ea\u52a8\u751f\u6210\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u6240\u9700\u7684\u52a0\u5bc6\u7528\u7684\u5de5\u4ef6\u3002\n\u5728src/test/fixture/sdkintegration/e2e-2Orgs/channel\u76ee\u5f55\n\n\n\u4f7f\u7528 \ncrypto-config\n \u547d\u4ee4\u6765\u751f\u6210 end2end \u5de5\u4ef6\uff1a\n\n   \nbuild/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config\n\n\n\u4e3a\u4e86\u65b9\u4fbf\u5206\u914d\u7aef\u53e3\u548c\u6620\u5c04\u8fd9\u4e9b\u5de5\u4ef6\u5230\u7269\u7406\u6587\u4ef6\uff0c\u6240\u6709\u7684peer\uff0c order \u548cfabric-ca\u90fd\u8fd0\u884c\u5728Docker\u5bb9\u5668\u4e2d\uff0c\u901a\u8fc7docker-compose\u914d\u7f6e\u6587\u4ef6\u6765\u63a7\u5236\u3002\n\n\n\u4f7f\u7528\u5230\u4e86\u4e0b\u9762\u8fd9\u4e9b\u6587\u4ef6\uff1a\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n  (everything needed to bootstrap the orderer and create the channels)\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/crypto-config\n (as-is. Used by \nconfigtxgen\n and \ndocker-compose\n to map the MSP directories)\n * \nsrc/test/fixture/sdkintegration/docker-compose.yaml\n\n\n\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u5de5\u4ef6\u5b58\u50a8\u5728_src/test/fixture/sdkintegration/e2e-2Org/channel_\u76ee\u5f55\u4e2d\u3002\n\n\n\u901a\u8fc7TLS\u8fde\u63a5\u5230Orderer\u548cPeer(TLS connection to Orderer and Peers)\n\n\nIBM Java needs the following properties defined to use TLS 1.2 to get an HTTPS connections to Fabric CA.\n\n\n-Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2\n\n\n\n\nWe need certificate and key for each of the Orderer and Peers for TLS connection. You can generate your certificate and key files with openssl command as follows:\n\n\n\n\nSet up your own Certificate Authority (CA) for issuing certificates\n\n\nFor each of orderers and peers:\n\n\ngenerate a private key: \nopenssl genrsa 512 \n key.pem\n.\n\n\ngenerate a certificate request (csr): \nopenssl req -new -days 365 -key key.pem -out csr.pem\n, which will request your input for some information, where CN has to be the container\ns alias name (e.g. peer0, peer1, etc), all others can be left blank.\n\n\nsign the csr with the CA private key to generate a certificate: \nopenssl ca -days 365 -in csr.pem -keyfile {CA\ns privatekey} -notext -out cert.pem\n\n\nput the resulting cert.pem and key.pem together with the CA\ns certificate (as the name cacert.pem) in the directory where the docker container can access.\n\n\n\n\nThe option -notext in the last openssl command in the above is important. Without the option, the resulting cert.pemmay does not work for some Java implementation (e.g. IBM JDK).\nThe certificates and keys for the end-to-end test case are stored in the directory \nsrc/test/fixture/sdkintegration/e2e-2Org/tls/\n.\n\n\nCurrently, the pom.xml is set to use netty-tcnative-boringssl for TLS connection to Orderer and Peers, however, you can change the pom.xml (uncomment a few lines) to use an alternative TLS connection via ALPN.\n\n\nIBM Java\u9700\u8981\u4ee5\u4e0b\u5b9a\u4e49\u4e00\u4e0b\u53c2\u6570\u624d\u80fd\u4f7f\u7528TLS 1.2\u6765\u548cFabric CA\u5efa\u7acbHTTPS\u8fde\u63a5\u3002\n\n\n-Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2\n\n\n\n\n\u6bcf\u4e2aOrderer\u548cPeer\u5efa\u7acbTLS\u8fde\u63a5\u90fd\u9700\u8981\u8bc1\u4e66\u548c\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6b65\u9aa4\u901a\u8fc7openssl\u547d\u4ee4\u6765\u751f\u6210\u8bc1\u4e66\u548c\u79c1\u94a5\u6587\u4ef6\uff1a\n * \u8bbe\u7f6e\u4f60\u81ea\u5df1\u7684\u8bc1\u4e66\u8ba4\u8bc1\u673a\u6784\uff08CA\uff09\u6765\u53d1\u884c\u8bc1\u4e66\n * \u5bf9\u6bcf\u4e00\u4e2aOrderer\u548cPeer\n    * \u751f\u6210\u79c1\u94a5 \nopenssl genrsa 512 \n key.pem\n\u3002\n    * \u751f\u6210\u8bc1\u4e66\u8bf7\u6c42\uff08csr\uff09\nopenssl req -new -days 365 -key key.pem -out csr.pem\n\uff0c\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4f60\u586b\u5199\u4e00\u4e9b\u4fe1\u606f\uff0cCN\u5e94\u8be5\u662f\u5bb9\u5668\u7684\u522b\u540d\uff08\u6bd4\u5982peer0\uff0c peer1\u7b49\uff09\uff0c\u5176\u4f59\u7684\u90fd\u53ef\u4ee5\u7559\u7a7a\n    * \u901a\u8fc7CS\u7684\u79c1\u94a5\u6765\u7ed9\u8bc1\u4e66\u8bf7\u6c42\uff08CSR\uff09\u7b7e\u540d\u5e76\u751f\u6210\u8bc1\u4e66\uff1a\nopenssl ca -days 365 -in csr.pem -keyfile {CA\ns privatekey} -notext -out cert.pem\n\n    * \u5c06\u751f\u6210\u7684cert.pem \u548c key.pem \u540cCA\u7684\u8bc1\u4e66(\u540d\u5b57cacert.pem)\u4e00\u8d77\u653e\u5230docker\u5bb9\u5668\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u76ee\u5f55\u4e2d\u3002\n\n\n\u4e0a\u9762\u6700\u540e\u4e00\u6761openssl\u547d\u4ee4\u4e2d\u7684 -notext \u9009\u9879\u975e\u5e38\u91cd\u8981\u3002\u6ca1\u6709\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u751f\u6210\u7684cert.pemmay\u6ca1\u529e\u6cd5\u5728\u67d0\u4e9bjava\u73af\u5883\u4e2d\u7528\uff08\u6bd4\u5982java JDK\uff09\u3002\n\u8fd9\u4e9b\u8bc1\u4e66\u548c\u94a5\u5319\u6587\u4ef6\u653e\u5728_src/test/fixture/sdkintegration/e2e-2Org/tls/_\u76ee\u5f55\u4e2d\u3002\n\n\n\u76ee\u524d\uff0cpom.xml\u8bbe\u7f6e\u4f7f\u7528netty-tcnative-boringssl\u5728Orderer\u548cPeer\u4e4b\u95f4\u5efa\u7acbTLS\u8fde\u63a5\uff0c\u4f60\u53ef\u4ee5\u66f4\u8be5pom.xml(\u6ce8\u91ca\u5176\u4e2d\u4e00\u4e9b\u884c)\u6765\u901a\u8fc7ALPN\u6765\u4f7f\u7528\u5176\u4ed6\u7684TLS\u8fde\u63a5\u3002\n\n\n\u94fe\u7801\u80cc\u4e66\u7b56\u7565(Chaincode endorsement policies)\n\n\nPolicies are described in the \nFabric Endorsement Policies document\n.\nYou create a policy using a Fabric tool ( an example is shown in \nJIRA issue FAB-2376\n)\nand give it to the SDK either as a file or a byte array. The SDK, in turn, will use the policy when it creates chaincode instantiation requests.\n\n\nTo input a policy to the SDK, use the \nChaincodeEndorsementPolicy\n class.\n\n\nFor testing purposes, there are 2 policy files in the \nsrc/test/resources\n directory\n  * \npolicyBitsAdmin\n ( which has policy \nAND(DEFAULT.admin)\n meaning \n1 signature from the DEFAULT MSP admin\n is required\n )\n  * \npolicyBitsMember\n ( which has policy \nAND(DEFAULT.member)\n meaning \n1 signature from a member of the DEFAULT MSP is required\n )\n\n\nand one file in the \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n directory specifically for use in the end to end test scenario\n  * \nmembers_from_org1_or_2.policy\n ( which has policy \nOR(peerOrg1.member, peerOrg2.member)\n meaning  \n1 signature from a member of either organizations peerOrg1, PeerOrg2 is required\n)\n\n\nAlternatively, you can also use ChaincodeEndorsementPolicy class by giving it a YAML file that has the policy defined in it.\n See examples of this in the End2endIT testcases that use \nsrc/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml\n\n The file chaincodeendorsementpolicy.yaml has comments that help understand how to create these policies. The first section\n lists all the signature identities you can use in the policy. Currently, only ROLE types are supported.\n The policy section is comprised of \nn-of\n and \nsigned-by\n elements.  Then n-of (\n1-of\n \n2-of\n) require that many (\nn\n) in that\n section to be true. The \nsigned-by\n references an identity in the identities section.\n\n\n\u80cc\u4e66\u7b56\u7565\u5728\nFabric Endorsement Policies document\n\u4e0a\u505a\u4e86\u8be6\u7ec6\u7684\u9610\u91ca\u3002\n\u4f60\u53ef\u4ee5\u901a\u8fc7Fabric\u5de5\u5177\u6765\u521b\u5efa\u4e00\u4e2a\u7b56\u7565(\u5728 \nJIRA issue FAB-2376\n \u6709\u4e2a\u4f8b\u5b50)\u4ee5\u6587\u4ef6\u6216byte\u6570\u7ec4\u65b9\u5f0f\u4f20\u7ed9SDK\u3002\u540c\u65f6SDK\u4f1a\u4f7f\u7528\u8be5\u7b56\u7565\u6765\u521b\u5efa\u94fe\u7801\u521d\u59cb\u5316\u8bf7\u6c42\u3002\n\n\n\u4f7f\u7528\nChaincodeEndorsementPolicy\n\u7c7b\u5c06\u7b56\u7565\u4f20\u7ed9SDK\u3002\n\u4e3a\u4e86\u6d4b\u8bd5\u76ee\u7684\uff0c\u5728_src/test/resources_\u4e0b\u6709\u4e24\u4e2a\u7b56\u7565\u6587\u4ef6\u3002\n  * \npolicyBitsAdmin\n ( \u5305\u542b \nAND(DEFAULT.admin)\n \u7b56\u7565\uff0c \n\u9700\u8981\u4e00\u4e2aDEFAULT MSP \u7ba1\u7406\u5458\u7684\u7b7e\u540d\n )\n  * \npolicyBitsMember\n ( \u5305\u542b \nAND(DEFAULT.member)\n \u7b56\u7565\uff0c \n\u9700\u8981\u4e00\u4e2aDEFAULT MSP \u6210\u5458\u7684\u7b7e\u540d\n )\n\n\n\u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u4e0b\u6cb9\u4e00\u4e2a\u6587\u4ef6\uff0c\u6307\u5b9a\u4e86\u7aef\u5bf9\u7aef\u7684\u6d4b\u8bd5\u573a\u666f\n  * \nmembers_from_org1_or_2.policy\n ( \u5305\u542b \nOR(peerOrg1.member, peerOrg2.member)\n \u7b56\u7565  \n\u9700\u8981\u4efb\u4e00\u7ec4\u7ec7(peerOrg1, PeerOrg2)\u4e0b\u6210\u5458\u7684\u7b7e\u540d\n)\n\n\n\u53e6\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528ChaincodeEndorsementPolicy\u7c7b\uff0c\u901a\u8fc7\u7ed9\u4ed6\u6307\u5b9a\u4e00\u4e2a\u5305\u542b\u7b56\u7565\u5b9a\u4e49\u7684YAML\u6587\u4ef6\u6765\u5b9e\u73b0\u3002\n\u53c2\u7167_src/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml_\u76ee\u5f55\u4e0bEnd2endIT\u6d4b\u8bd5\u7528\u4f8b\u3002 \n\u6587\u4ef6chaincodeendorsementpolicy.yaml\u4e2d\uff0c\u6709\u4e00\u4e9b\u5e2e\u52a9\u7406\u89e3\u5982\u4f55\u521b\u5efa\u7b56\u7565\u7684\u6ce8\u91ca\u3002\u7b2c\u4e00\u90e8\u5206\u5217\u51fa\u4e86\u6240\u6709\u53ef\u4ee5\u5728\u7b56\u7565\u4e2d\u4f7f\u7528\u7684\u7b7e\u540d\u3002\u5f53\u524d\u53ea\u652f\u6301ROLE\u7c7b\u578b\u3002\npolicy\u533a\u5757\u5305\u542b\nn-of\n \u548c \nsigned-by\n \u5143\u7d20\u3002n-of (\n1-of\n \n2-of\n) \u5143\u7d20\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u5757\u4e2d\u5c06\u201cmany\u201d (\nn\n) \u8bbe\u7f6e\u4e3a true. \nsigned-by\n\u5143\u7d20\u5f15\u7528\u4e86\u5728identities\u533a\u5757\u7684\u8eab\u4efd\u4fe1\u606f\u3002\n\n\n\u901a\u9053\u521b\u5efa\u5de5\u4ef6(Channel creation artifacts)\n\n\nChannel configuration files and orderer bootstrap files ( see directory \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n ) are needed when creating a new channel.\nThis is created with the Hyperledger Fabric \nconfigtxgen\n tool.\n\n\nFor End2endIT.java the commands are\n\n\n\n\nbuild/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo\n\n\nbuild/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar\n\n\nbuild/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis\n\n\n\n\nwith the configtxgen config file \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml\n\n\nIf \nbuild/bin/configtxgen\n tool is not present  run \nmake configtxgen\n\n\nBefore running the end to end test case:\n *  you may need to modify \nconfigtx.yaml\n to change all hostname and port definitions to match\nyour server(s) hostname(s) and port(s).\n *  you \nWILL\n have to modify \nconfigtx.yaml\n to have the \nMSPDir\n point to the correct path to the \ncrypto-config\n directories.\n   * \nconfigtx.yaml\n currently assumes that you are running in a Vagrant environment where the fabric, fabric-ca and fabric-sdk-java projects exist under the \n/opt/gopath/src/github.com/hyperledger\n directory.\n\n\n\u521b\u5efa\u901a\u9053\u7684\u65f6\u5019\uff0c\u9700\u8981\u6709\u901a\u9053\u7684\u914d\u7f6e\u6587\u4ef6\u4ee5\u53caorderer\u5f15\u5bfc\u6587\u4ef6\uff08\u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u76ee\u5f55\u4e0b\uff09\u3002\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u901a\u8fc7\nconfigtxgen\n\u6765\u521b\u5efa\u7684\u3002\n\n\n\u5bf9\u4e8eEnd2endIT.java\u7c7b\u6765\u8bf4\uff0c\u547d\u4ee4\u662f\uff1a\n * build/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo\n * build/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar\n * build/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis\n\n\n\u914d\u7f6e\u6587\u4ef6\u662f  \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml\n\u3002\n\n\n\u5982\u679c\nbuild/bin/configtxgen\n\u5de5\u5177\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u6267\u884c\nmake configtxgen\n\u6765\u751f\u6210\u3002\n\n\n\u5728\u4f60\u8fd0\u884c\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u524d\uff1a\n\n \u4f60\u9700\u8981\u4fee\u6539\nconfigtx.yaml\n\u6587\u4ef6\uff0c\u5c06\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u5b9a\u4e49\u4fee\u6539\u6210\u4f60\u670d\u52a1\u5668\u771f\u5b9e\u7684\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u3002\n\n \u4f60\u5c06\u4f1a\u9700\u8981\u4fee\u6539\nconfigtx.yaml\n\u6587\u4ef6\uff0c\u5c06_MSPDir_\u6307\u5411\u5230\u6b63\u786e\u7684_crypto-config_\u76ee\u5f55\u3002\n  * \nconfigtx.yaml\n\u6587\u4ef6\u5f53\u524d\u5047\u8bbe\u4f60\u8fd0\u884c\u5728Vagrant\u73af\u5883\uff0c\u800c\u4e14fabric\u3001fabric-ca \u548cfabric-sdk-java \u5728_/opt/gopath/src/github.com/hyperledger_\u76ee\u5f55\u4e0b\u3002\n\n\nGO\u8bed\u8a00\u94fe\u7801(GO Lang chaincode)\n\n\nGo lang chaincode dependencies must be contained in vendor folder.\n For an explanation of this see \nVender folder explanation\n\n\nGo\u8bed\u8a00\u94fe\u7801\u7684\u4f9d\u8d56\u6587\u4ef6\u5fc5\u987b\u5305\u542b\u5728vendor\u76ee\u5f55\u4e0b\u3002\n\u8be6\u7ec6\u89e3\u91ca\u53c2\u7167\nVender folder explanation\n\n\n\u7b80\u5355\u7684\u95ee\u9898\u89e3\u51b3(Basic Troubleshooting)\n\n\nidentity or token do not match\n\n\nKeep in mind that you can perform the enrollment process with the membership services server only once, as the enrollmentSecret is a one-time-use password. If you have performed a FSUser registration/enrollment with the membership services and subsequently deleted the crypto tokens stored on the client side, the next time you try to enroll, errors similar to the ones below will be seen.\n\n\nError: identity or token do not match\n\n\nError: FSUser is already registered\n\n\nTo address this, remove any stored crypto material from the CA server by following the instructions \nhere\n which typically involves deleting the /var/hyperledger/production directory and restarting the membership services. You will also need to remove any of the crypto tokens stored on the client side by deleting the KeyValStore . That KeyValStore is configurable and is set to ${FSUser.home}/test.properties within the unit tests.\n\n\nWhen running the unit tests, you will always need to clean the membership services database and delete the KeyValStore file, otherwise, the unit tests will fail.\n\n\n\u8bb0\u4f4f\u4f60\u53ea\u80fd\u8fd0\u884c\u6210\u5458\u670d\u52a1\u7684\u767b\u8bb0\u8fdb\u7a0b\uff08enrollment process\uff09\u4e00\u6b21\uff0c\u56e0\u4e3aenrollmentSecret\u662f\u4e00\u6b21\u6027\u5bc6\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u8fc7\u4e00\u6b21FSUser registration/enrollment\uff0c\u7136\u540e\u5220\u9664\u4e86\u52a0\u5bc6\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\u7684token\u540e\uff0c\u4e0b\u4e00\u6b21enroll\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0b\u9762\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a\n\nError: identity or token do not match\n\n\nError: FSUser is already registered\n\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u53c2\u7167\nhere\n \u5220\u9664\u6240\u6709\u5b58\u50a8\u5728CA\u670d\u52a1\u5668\u4e0a\u7684\u7684\u52a0\u5bc6\u6587\u4ef6\uff0c\u6587\u4ef6\u76ee\u5f55\u5728/var/hyperledger/production\uff0c\u7136\u540e\u91cd\u542f\u6210\u5458\u670d\u52a1\u3002\u540c\u65f6\u4f60\u8fd8\u9700\u8981\u901a\u8fc7\u5220\u9664KeyValStore\u6765\u6e05\u695a\u5ba2\u6237\u7aef\u6240\u6709\u7684\u52a0\u5bc6token\u3002KeyValStore\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u53c2\u7167${FSUser.home}/test.properties\u6587\u4ef6\u3002\n\n\n\u5f53\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u4f60\u9700\u8981\u6e05\u7406\u6210\u5458\u670d\u52a1\u5668\u6570\u636e\u5e93\u5e76\u5220\u9664KeyValStore\u6587\u4ef6\uff0c\u5426\u5219\u5355\u5143\u6d4b\u8bd5\u4f1a\u5931\u8d25\u3002\n\n\njava.security.InvalidKeyException: Illegal key size\n\n\nIf you get this error, this means your JDK does not capable of handling unlimited strength crypto algorithms. To fix this issue, You will need to download the JCE libraries for your version of JDK. Please follow the instructions \nhere\n to download and install the JCE for your version of the JDK.\n\n\n\u5982\u679c\u4f60\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u4f60\u7684JDK\u4e0d\u652f\u6301\u65e0\u9650\u957f\u5ea6\u52a0\u5bc6\u903b\u8f91\u3002\u8981\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u4e0b\u8f7d\u6b63\u5bf9\u4f60JDK\u7248\u672c\u7684JCE\u5e93\uff0c\u8bf7\u53c2\u7167\n\u8fd9\u91cc\n\u6765\u4e0b\u8f7d\u548c\u5b89\u88c5JCE\u5e93\u3002\n\n\n\u548c\u5f00\u53d1\u8005\u4ea4\u6d41(Communicating with developers and fellow users)\n\n\nSign into \nHyperledger project\ns Rocket chat\n\n For this you will also need a \nLinux Foundation ID\n\n\nJoin the \nfabric-sdk-java\n channel.\n\n\n\u767b\u5f55\nHyperledger project\ns Rocket chat\n\u3002\u4f60\u9700\u8981\u4e00\u4e2a\nLinux Foundation ID\n\u3002 \u7136\u540e\u52a0\u5165\nfabric-sdk-java\n\u9891\u9053\u3002\n\n\n\u62a5\u544a\u95ee\u9898(Reporting Issues)\n\n\nIf your issue is with building Fabric development environment please discuss this on rocket.chat\ns #fabric-dev-env channel.\n\u5982\u679c\u4f60\u6709\u7f16\u8bd1Fabric\u5f00\u53d1\u73af\u5883\u7684\u95ee\u9898\uff0c\u8bf7\u5728rocket.chat\u7684 #fabric-dev-env channel\u8ba8\u8bba\u3002\n\n\nTo report an issue please use: \nHyperledger\ns JIRA\n.\nTo login you will need a Linux Foundation ID (LFID) which you get at \nThe Linux Foundation\n\nif you don\nt already have one.\n\n\n\u62a5\u544a\u95ee\u9898\u8bf7\u4f7f\u7528JIRA\uff1a\nHyperledger\ns JIRA\n\u3002\n\u4f60\u9700\u8981\u4f7f\u7528Linux\u57fa\u91d1\u4f1aID(LFID)\u6765\u767b\u5f55\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u5728\nThe Linux Foundation\n\u6ce8\u518c\u4e00\u4e2a\u3002\n\n\nJIRA Fields should be:\n\n\n  \nType\n\n  \nBug \nor\n New Feature\n\n\nComponent\n\n  \nfabric-sdk-java\n\n  \nFix Versions\n\n    \nv1.0.1\n\n\n\n\nPleases provide as much information that you can with the issue you\nre experiencing: stack traces logs.\n\n\nPlease provide the output of \njava -XshowSettings:properties -version\n\n\nLogging for the SDK can be enabled with setting environment variables:\n\n\nORG_HYPERLEDGER_FABRIC_SDK_LOGLEVEL=TRACE\n\n\nORG_HYPERLEDGER_FABRIC_CA_SDK_LOGLEVEL=TRACE\n\n\nFabric debug is by default enabled in the SDK docker-compose.yaml file with\n\n\nOn Orderer:\n\n\nORDERER_GENERAL_LOGLEVEL=debug\n\n\nOn peers:\nCORE_LOGGING_LEVEL=DEBUG\n\n\nFabric CA\nby starting command have the -d parameter.\n\n\nUpload full logs to the JIRA not just where the issue occurred if possible\n\n\n\u8bf7\u63d0\u4f9b\u5c3d\u91cf\u591a\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5806\u6808\u8ddf\u8e2a\u8bb0\u5f55\u3002\n\u8bf7\u63d0\u4f9b \njava -XshowSettings:properties -version\n \u547d\u4ee4\u7684\u8f93\u51fa\u7ed3\u679c\n\u53ef\u80fd\u7684\u8bdd\uff0c\u8bf7\u4e0a\u4f20\u5f53\u95ee\u9898\u53d1\u751f\u65f6\u5b8c\u6574\u7684\u65e5\u5fd7\u3002\n\n\nThis work is licensed under a \nCreative Commons Attribution 4.0 International License\n.", 
            "title": "SDK--java"
        }, 
        {
            "location": "/sdk_java_zh/#known-limitations-and-restrictions", 
            "text": "TCerts are not supported(\u4e0d\u652f\u6301TCerts): JIRA FAB-1401  HSM not supported(\u4e0d\u652f\u6301HSM): JIRA FAB-3137  Single Crypto strength 256(\u5355\u5c42\u52a0\u5bc6\u957f\u5ea6\u4e3a256\u4f4d): JIRA FAB-2564  Network configuration updates not supported(\u4e0d\u652f\u6301\u7f51\u7edc\u914d\u7f6e\u66f4\u65b0): JIRA FAB-3103   *************************************************", 
            "title": "\u5df2\u77e5\u7684\u9650\u5236(Known limitations and restrictions)"
        }, 
        {
            "location": "/sdk_java_zh/#v100", 
            "text": "There is a git tagged v1.0.0 [e976abdc658f212d0c3a80ace4499a5cff4279c6] release of the SDK where there is no need to build the Hyperledger Fabric and Hyperledger Fabric CA described below. The provided docker-compose.yaml for the integration tests should pull v1.0.0  tagged images from Docker hub.  \u5df2\u7ecf\u6709\u4e00\u4e2a\u6807\u8bb0\u4e3aV1.0.0[e976abdc658f212d0c3a80ace4499a5cff4279c6]\u7684SDK\u53d1\u884c\u7248\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u81ea\u5df1\u6253\u5305Hyperledge Fabric\u548cHyperledger Fabric CA\u3002\u63d0\u4f9b\u96c6\u6210\u6d4b\u8bd5\u7684docker-compose.yaml\u4f1a\u81ea\u52a8\u4eceDocker Hub\u4e0b\u8f7dV1.0.0\u7684\u955c\u50cf\u3002  The v1.0.0 version of the Hyperledger Fabric Java SDK is published to Maven so you can directly use in your application s pom.xml.  V1.0.0\u7684Hyperledger Fabric Java SDK\u5df2\u7ecf\u53d1\u5e03\u5230\u4e86Maven\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684pom.xml\u6587\u4ef6\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002  Maven Repository Hyperledger Fabric Java SDK  Make sure you re using docker images at the level of the Fabric that matches the level of the SDK you re using in your application.  \u8bf7\u786e\u8ba4\u4f60\u4f7f\u7528\u7684docker\u955c\u50cf\u7684\u7248\u672c\u548c\u4f60\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684SDK\u7248\u672c\u4e00\u81f4\u3002  *************************************************", 
            "title": "v1.0.0"
        }, 
        {
            "location": "/sdk_java_zh/#fabricfabric-cavalid-builds-of-fabric-and-fabric-ca", 
            "text": "Hyperledger Fabric v1.0.1 is currently under active development and the very latest Hyperledger Fabric builds may not work with this sdk.\nYou should use the following commit levels of the Hyperledger projects:  Hyperledger Fabric V1.0.1 \u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u6700\u65b0\u7684Fabric\u6253\u5305\u53ef\u80fd\u4e0d\u9002\u7528\u8be5SDK\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u63d0\u4ea4\u7248\u672c\u7684Hyledger\u9879\u76ee\u3002     Project  Commit level  Date      fabric  f56a82e36e040e1c1a986edfceac014ba1516571  Jul 11 12:48:33 2017 -0700    fabric-ca  74f8f4d4c29e45a79a8849efb057dbd8de3ae8d0  Jul 11 16:43:39 2017 +0200     You can clone these projects by going to the  Hyperledger repository .  \u4f60\u53ef\u4ee5\u5230 Hyperledger\u4ed3\u5e93 \u514b\u9686\u8fd9\u4e9b\u9879\u76ee\u3002  As SDK development continues, this file will be updated with compatible Hyperledger Fabric and Fabric-ca commit levels.  \u968f\u7740SDK\u7684\u5f00\u53d1\u8fdb\u884c\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5c06\u4f1a\u968f\u7740Fabric\u548cFabric-ca\u7684\u63d0\u4ea4\u7248\u672c\u53d8\u5316\u800c\u66f4\u65b0\u3002  Once you have cloned  fabric  and  fabric-ca , use the  git reset --hard commitlevel  to set your repositories to the correct commit.  \u4f60\u514b\u9686 fabric \u548c fabric-ca \u65f6\uff0c\u4f7f\u7528 git reset --hard commitlevel \u6765\u8bbe\u7f6e\u4f60\u4ed3\u5e93\u7684\u4f7f\u7528\u6b63\u786e\u7684\u63d0\u4ea4\u7248\u672c\u3002", 
            "title": "\u9a8c\u8bc1Fabric\u548cFabric-ca\u5305(Valid builds of Fabric and Fabric-ca)"
        }, 
        {
            "location": "/sdk_java_zh/#fabric-vagrantworking-with-the-fabric-vagrant-environment", 
            "text": "Vagrant is NOT required if your OS has Docker support and all the requirements needed to build directly in your\nenvironment.  For non Vagrant envrionment, the steps would be the same as below minus those parts involving Vagrant.\n Do the following if you want to run the Fabric components ( peer, orderer, fabric-ca ) in Vagrant:  \u5982\u679c\u4f60\u7684\u73af\u5883\u652f\u6301Docker\uff0cVagrant\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4f60\u7684\u73af\u5883\u4e2d\u76f4\u63a5\u6253\u5305\u3002\u5728\u975eVagrant\u73af\u5883\uff0c\u7275\u6d89\u5230Vagrant\u7684\u6b65\u9aa4\u4f1a\u5c11\u8bb8\u6709\u4e9b\u4e0d\u540c\u3002\n\u6309\u7167\u4e0b\u9762\u7684\u6b65\u9aa4\u5728Vagrant\u4e2d\u8fd0\u884cFabric\u7ec4\u4ef6( peer, orderer, fabric-ca )\uff1a    git clone  https://github.com/hyperledger/fabric.git\n  git clone  https://github.com/hyperledger/fabric-ca.git\n  cd  fabric-ca\n  git reset --hard fabric-ca_commitlevel from above\n  cd ../fabric\n  git reset --hard fabric_commitlevel from above\n  cd devenv\n  change the Vagrant file as suggested below:\n  vagrant up\n  vagrant ssh\n  make docker\n  cd ../fabric-ca\n  make docker\n  cd ../fabric/sdkintegration\n  docker-compose down;  rm -rf /var/hyperledger/*; docker-compose up --force-recreate   Open the file  Vagrantfile  and verify that the following  config.vm.network  statements are set. If not, then add them:  \u6253\u5f00 Vagrantfile \u6587\u4ef6\u6765\u9a8c\u8bc1\u4e0b\u9762\u7684 config.vm.network \u53c2\u6570\u662f\u5426\u8bbe\u7f6e\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u6dfb\u52a0\u4ee5\u4e0b\u884c\u3002     config.vm.network :forwarded_port, guest: 7050, host: 7050 # fabric orderer service\n  config.vm.network :forwarded_port, guest: 7051, host: 7051 # fabric peer vp0 service\n  config.vm.network :forwarded_port, guest: 7053, host: 7053 # fabric peer event service\n  config.vm.network :forwarded_port, guest: 7054, host: 7054 # fabric-ca service\n  config.vm.network :forwarded_port, guest: 5984, host: 15984 # CouchDB service\n  ### Below are probably missing.....\n  config.vm.network :forwarded_port, guest: 7056, host: 7056\n  config.vm.network :forwarded_port, guest: 7058, host: 7058\n  config.vm.network :forwarded_port, guest: 8051, host: 8051\n  config.vm.network :forwarded_port, guest: 8053, host: 8053\n  config.vm.network :forwarded_port, guest: 8054, host: 8054\n  config.vm.network :forwarded_port, guest: 8056, host: 8056\n  config.vm.network :forwarded_port, guest: 8058, host: 8058  Add to your Vagrant file a folder for referencing the sdkintegration folder between the lines below:  \u5728Vagrant\u6587\u4ef6\u4e2d\uff0c\u589e\u52a0SDK\u96c6\u6210\u76ee\u5f55\u7684\u5f15\u7528\uff1a  config.vm.synced_folder  .. ,  /opt/gopath/src/github.com/hyperledger/fabric  config.vm.synced_folder \"/home/ user /fabric-sdk-java/src/test/fixture/sdkintegration\", \"/opt/gopath/src/github.com/hyperledger/fabric/sdkintegration  config.vm.synced_folder ENV.fetch( LOCALDEVDIR ,  .. ),  #{LOCALDEV}", 
            "title": "\u4f7f\u7528Fabric Vagrant\u73af\u5883(Working with the Fabric Vagrant environment)"
        }, 
        {
            "location": "/sdk_java_zh/#sdk-sdk-dependencies", 
            "text": "SDK depends on few third party libraries that must be included in your classpath when using the JAR file. To get a list of dependencies, refer to pom.xml file or run\n\u5f53\u4f60\u4f7f\u7528JAR\u6587\u4ef6\u65f6\uff0cSDK\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9\u5e93\u5e94\u8be5\u5305\u542b\u5728classpath\u4e2d\u3002\u4e3a\u4e86\u53ef\u4ee5\u5f97\u5230\u4f9d\u8d56\u6e05\u5355\uff0c\u53ef\u4ee5\u53c2\u7167pom.xml\u6587\u4ef6\u6216\u8005\u8fd0\u884c  mvn dependency:tree  or  mvn dependency:list . mvn dependency:tree  \u6216  mvn dependency:list .  Alternatively,   mvn dependency:analyze-report   will produce a report in HTML format in target directory listing all the dependencies in a more readable format.\n\u9664\u6b64\u4e4b\u5916\uff0c  mvn dependency:analyze-report   \u4f1a\u5728\u76ee\u6807\u76ee\u5f55\u4e2d\u751f\u6210\u4e00\u4e2aHTML\u683c\u5f0f\u7684\u62a5\u544a\u66f4\u6e05\u6670\u5730\u5217\u51fa\u6240\u6709\u7684\u4f9d\u8d56\u5305\u3002", 
            "title": "SDK \u4f9d\u8d56(SDK dependencies)"
        }, 
        {
            "location": "/sdk_java_zh/#sdkusing-the-sdk", 
            "text": "The SDK s test cases uses chaincode in the SDK s source tree:  /src/test/fixture \nSDK\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4f7f\u7528\u94fe\u7801\u6e90\u7801\u6811\uff1a  /src/test/fixture  The SDK s JAR is in  target/fabric-sdk-java-1.0.0-SNAPSHOT.jar  and you will need the additional dependencies listed above.\nWhen the SDK is published to  Maven  you will be able to simply include it in your application s  pom.xml .  SDK\u7684JAR\u5305\u5728 target/fabric-sdk-java-1.0.0-SNAPSHOT.jar \uff0c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u589e\u52a0\u4e0a\u9762\u63d0\u5230\u7684\u9644\u52a0\u7684\u4f9d\u8d56\u5305\u3002\n\u5f53SDK\u53d1\u5e03\u5230Maven\u540e\uff0c\u4f60\u53ea\u9700\u8981\u7b80\u5355\u7684\u5728\u4f60\u7684\u5e94\u7528\u7684 pom.xml \u5305\u542b\u5b83\u3002  Add below code in your  pom.xml  to download fabric-sdk-java-1.0\n\u5728\u4f60\u7684 pom.xml \u6587\u4ef6\u589e\u52a0\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u4e0b\u8f7dfabric-sdk-java-1.0  \n      dependencies \n      dependency \n             groupId org.hyperledger.fabric-sdk-java /groupId \n             artifactId fabric-sdk-java /artifactId \n             version 1.0.0 /version \n          /dependency \n      /dependencies", 
            "title": "\u4f7f\u7528SDK(Using the SDK)"
        }, 
        {
            "location": "/sdk_java_zh/#compiling", 
            "text": "To build this project, the following dependencies must be met   JDK 1.8 or above  Apache Maven   \u4e3a\u4e86\u80fd\u591f\u7f16\u8bd1\u8be5\u5de5\u7a0b\uff0c\u4f60\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42   JDK 1.8 \u6216\u66f4\u9ad8  Apache Maven   Once your JAVA_HOME points to your installation of JDK 1.8 (or above) and JAVA_HOME/bin and Apache maven are in your PATH, issue the following command to build the jar file:\n\u5f53\u4f60\u7684JAVA_HOME\u6307\u5411\u4e86JDK 1.8\u5b89\u88c5\u76ee\u5f55\uff0c\u5728PATH\u4e2d\u8bbe\u7f6e\u4e86JAVA_HOME/bin\u548c Apache Maven\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u6253\u5305jar\u6587\u4ef6\uff1a  \n  mvn install \nor \n  mvn install -DskipTests  \u5982\u679c\u4f60\u4e0d\u60f3\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002", 
            "title": "\u7f16\u8bd1(Compiling)"
        }, 
        {
            "location": "/sdk_java_zh/#running-the-unit-tests", 
            "text": "To run the unit tests, please use  mvn test  or  mvn install  which will run the unit tests and build the jar file.You must be running a local peer and orderer to be able to run the unit tests.  \u901a\u8fc7 mvn test  \u6765\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u6216  mvn install  \u6267\u884c\u5355\u5143\u6d4b\u8bd5\u5e76\u751f\u6210jar\u6587\u4ef6\u3002\u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86peer\u548corderer\u8282\u70b9\u624d\u80fd\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002", 
            "title": "\u6267\u884c\u5355\u5143\u6d4b\u8bd5(Running the unit tests)"
        }, 
        {
            "location": "/sdk_java_zh/#running-the-integration-tests", 
            "text": "You must be running local instances of Fabric-ca, Fabric peers, and Fabric orderers to be able to run the integration tests. See above for running these services in Vagrant.\nUse this  maven  command to run the integration tests:  \u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86Fabric-ca, Fabric peers, and Fabric orderers\u8282\u70b9\u624d\u80fd\u591f\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\u3002\u53c2\u7167\u4e0a\u6587\u4e2d\u5982\u4f55\u5728Vagrant\u4e2d\u8fd0\u884c\u8fd9\u4e9b\u670d\u52a1\u3002\n\u4f7f\u7528\u4e0b\u9762\u7684 maven \u6307\u4ee4\u6765\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\uff1a   mvn failsafe:integration-test -DskipITs=false", 
            "title": "\u6267\u884c\u96c6\u6210\u6d4b\u8bd5(Running the integration tests)"
        }, 
        {
            "location": "/sdk_java_zh/#end-to-end-test-scenario", 
            "text": "The  src/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java  integration test is an example of installing, instantiating, invoking and querying a chaincode.\nIt constructs the Hyperledger channel, deploys the  GO  chaincode, invokes the chaincode to do a transfer amount operation and queries the resulting blockchain world state.  This test is a reworked version of the Fabric  e2e_cli example  to demonstrate the features of the SDK.\nTo better understand blockchain and Fabric concepts, we recommend you install and run the  e2e_cli  example.  _src/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java_\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u3001\u8c03\u7528\u548c\u67e5\u8be2\u94fe\u7801\u7684\u4f8b\u5b50\u3002\u5b83\u6784\u5efa\u4e86Hyperledger\u901a\u9053\uff0c\u53d1\u5e03 GO \u7248\u672c\u94fe\u7801\uff0c\u8c03\u7528\u94fe\u7801\uff0c\u6267\u884c\u8f6c\u8d26\u52a8\u4f5c\uff0c\u5e76\u5728\u533a\u5757\u94fe\u4e0a\u67e5\u8be2\u7ed3\u679c\u3002", 
            "title": "\u7aef\u5230\u7aef\u6d4b\u8bd5\u573a\u666f(End to end test scenario)"
        }, 
        {
            "location": "/sdk_java_zh/#end-to-end-test-environment", 
            "text": "The test defines one Fabric orderer and two organizations (peerOrg1, peerOrg2), each of which has 2 peers, one fabric-ca service.  \u8be5\u6d4b\u8bd5\u5305\u542b\u4e00\u4e2aorderer\u8282\u70b9\uff0c\u4e24\u4e2a\u7ec4\u7ec7(peerOrg1, peerOrg2)\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u5404\u81ea\u5305\u542b\u4e24\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2afabric-ca\u670d\u52a1\u3002", 
            "title": "\u7aef\u5230\u7aef\u6d4b\u8bd5\u73af\u5883(End to end test environment)"
        }, 
        {
            "location": "/sdk_java_zh/#certificates-and-other-cryptography-artifacts", 
            "text": "Fabric requires that each organization has private keys and certificates for use in signing and verifying messages going to and from clients, peers and orderers.\nEach organization groups these artifacts in an  MSP  (Membership Service Provider) with a corresponding unique  MSPID  .  Furthermore, each organization is assumed to generate these artifacts independently. The  fabric-ca  project is an example of such a certificate generation service.\nFabric also provides the  cryptogen  tool to automatically generate all cryptographic artifacts needed for the end to end test.\nIn the directory src/test/fixture/sdkintegration/e2e-2Orgs/channel  The command used to generate end2end  crypto-config  artifacts:  build/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config  For ease of assigning ports and mapping of artifacts to physical files, all peers, orderers, and fabric-ca are run as Docker containers controlled via a docker-compose configuration file.  The files used by the end to end are:\n *  src/test/fixture/sdkintegration/e2e-2Orgs/channel   (everything needed to bootstrap the orderer and create the channels)\n *  src/test/fixture/sdkintegration/e2e-2Orgs/crypto-config  (as-is. Used by  configtxgen  and  docker-compose  to map the MSP directories)\n *  src/test/fixture/sdkintegration/docker-compose.yaml  The end to end test case artifacts are stored under the directory  src/test/fixture/sdkintegration/e2e-2Org/channel  .  Fabric\u9700\u8981\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u7528\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u5ba2\u6237\u7aef\u3001\u8282\u70b9\u548corderer\u4e4b\u95f4\u7684\u6d88\u606f\u3002\n\u6bcf\u4e2a\u7ec4\u7ec7\u7684\u8fd9\u4e9b\u5de5\u4ef6\u5728 MSP  (Membership Service Provider)\u4e2d\u90fd\u6709\u7edf\u4e00\u7684\u552f\u4e00  MSPID \u3002  \u800c\u4e14\uff0c\u6211\u4eec\u5047\u8bbe\u5404\u4e2a\u7ec4\u7ec7\u90fd\u662f\u72ec\u7acb\u7684\u751f\u6210\u8fd9\u4e9b\u5de5\u4ef6\u3002 fabric-ca \u5de5\u7a0b\u662f\u4e00\u4e2a\u8bc1\u4e66\u751f\u6210\u670d\u52a1\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\nFabric\u540c\u65f6\u63d0\u4f9b cryptogen \u5de5\u5177\u6765\u81ea\u52a8\u751f\u6210\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u6240\u9700\u7684\u52a0\u5bc6\u7528\u7684\u5de5\u4ef6\u3002\n\u5728src/test/fixture/sdkintegration/e2e-2Orgs/channel\u76ee\u5f55  \u4f7f\u7528  crypto-config  \u547d\u4ee4\u6765\u751f\u6210 end2end \u5de5\u4ef6\uff1a \n    build/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config  \u4e3a\u4e86\u65b9\u4fbf\u5206\u914d\u7aef\u53e3\u548c\u6620\u5c04\u8fd9\u4e9b\u5de5\u4ef6\u5230\u7269\u7406\u6587\u4ef6\uff0c\u6240\u6709\u7684peer\uff0c order \u548cfabric-ca\u90fd\u8fd0\u884c\u5728Docker\u5bb9\u5668\u4e2d\uff0c\u901a\u8fc7docker-compose\u914d\u7f6e\u6587\u4ef6\u6765\u63a7\u5236\u3002  \u4f7f\u7528\u5230\u4e86\u4e0b\u9762\u8fd9\u4e9b\u6587\u4ef6\uff1a\n *  src/test/fixture/sdkintegration/e2e-2Orgs/channel   (everything needed to bootstrap the orderer and create the channels)\n *  src/test/fixture/sdkintegration/e2e-2Orgs/crypto-config  (as-is. Used by  configtxgen  and  docker-compose  to map the MSP directories)\n *  src/test/fixture/sdkintegration/docker-compose.yaml  \u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u5de5\u4ef6\u5b58\u50a8\u5728_src/test/fixture/sdkintegration/e2e-2Org/channel_\u76ee\u5f55\u4e2d\u3002", 
            "title": "\u8bc1\u4e66\u53ca\u5176\u4ed6\u52a0\u5bc6\u5de5\u4ef6(Certificates and other cryptography artifacts)"
        }, 
        {
            "location": "/sdk_java_zh/#tlsordererpeertls-connection-to-orderer-and-peers", 
            "text": "IBM Java needs the following properties defined to use TLS 1.2 to get an HTTPS connections to Fabric CA.  -Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2  We need certificate and key for each of the Orderer and Peers for TLS connection. You can generate your certificate and key files with openssl command as follows:   Set up your own Certificate Authority (CA) for issuing certificates  For each of orderers and peers:  generate a private key:  openssl genrsa 512   key.pem .  generate a certificate request (csr):  openssl req -new -days 365 -key key.pem -out csr.pem , which will request your input for some information, where CN has to be the container s alias name (e.g. peer0, peer1, etc), all others can be left blank.  sign the csr with the CA private key to generate a certificate:  openssl ca -days 365 -in csr.pem -keyfile {CA s privatekey} -notext -out cert.pem  put the resulting cert.pem and key.pem together with the CA s certificate (as the name cacert.pem) in the directory where the docker container can access.   The option -notext in the last openssl command in the above is important. Without the option, the resulting cert.pemmay does not work for some Java implementation (e.g. IBM JDK).\nThe certificates and keys for the end-to-end test case are stored in the directory  src/test/fixture/sdkintegration/e2e-2Org/tls/ .  Currently, the pom.xml is set to use netty-tcnative-boringssl for TLS connection to Orderer and Peers, however, you can change the pom.xml (uncomment a few lines) to use an alternative TLS connection via ALPN.  IBM Java\u9700\u8981\u4ee5\u4e0b\u5b9a\u4e49\u4e00\u4e0b\u53c2\u6570\u624d\u80fd\u4f7f\u7528TLS 1.2\u6765\u548cFabric CA\u5efa\u7acbHTTPS\u8fde\u63a5\u3002  -Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2  \u6bcf\u4e2aOrderer\u548cPeer\u5efa\u7acbTLS\u8fde\u63a5\u90fd\u9700\u8981\u8bc1\u4e66\u548c\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6b65\u9aa4\u901a\u8fc7openssl\u547d\u4ee4\u6765\u751f\u6210\u8bc1\u4e66\u548c\u79c1\u94a5\u6587\u4ef6\uff1a\n * \u8bbe\u7f6e\u4f60\u81ea\u5df1\u7684\u8bc1\u4e66\u8ba4\u8bc1\u673a\u6784\uff08CA\uff09\u6765\u53d1\u884c\u8bc1\u4e66\n * \u5bf9\u6bcf\u4e00\u4e2aOrderer\u548cPeer\n    * \u751f\u6210\u79c1\u94a5  openssl genrsa 512   key.pem \u3002\n    * \u751f\u6210\u8bc1\u4e66\u8bf7\u6c42\uff08csr\uff09 openssl req -new -days 365 -key key.pem -out csr.pem \uff0c\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4f60\u586b\u5199\u4e00\u4e9b\u4fe1\u606f\uff0cCN\u5e94\u8be5\u662f\u5bb9\u5668\u7684\u522b\u540d\uff08\u6bd4\u5982peer0\uff0c peer1\u7b49\uff09\uff0c\u5176\u4f59\u7684\u90fd\u53ef\u4ee5\u7559\u7a7a\n    * \u901a\u8fc7CS\u7684\u79c1\u94a5\u6765\u7ed9\u8bc1\u4e66\u8bf7\u6c42\uff08CSR\uff09\u7b7e\u540d\u5e76\u751f\u6210\u8bc1\u4e66\uff1a openssl ca -days 365 -in csr.pem -keyfile {CA s privatekey} -notext -out cert.pem \n    * \u5c06\u751f\u6210\u7684cert.pem \u548c key.pem \u540cCA\u7684\u8bc1\u4e66(\u540d\u5b57cacert.pem)\u4e00\u8d77\u653e\u5230docker\u5bb9\u5668\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u76ee\u5f55\u4e2d\u3002  \u4e0a\u9762\u6700\u540e\u4e00\u6761openssl\u547d\u4ee4\u4e2d\u7684 -notext \u9009\u9879\u975e\u5e38\u91cd\u8981\u3002\u6ca1\u6709\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u751f\u6210\u7684cert.pemmay\u6ca1\u529e\u6cd5\u5728\u67d0\u4e9bjava\u73af\u5883\u4e2d\u7528\uff08\u6bd4\u5982java JDK\uff09\u3002\n\u8fd9\u4e9b\u8bc1\u4e66\u548c\u94a5\u5319\u6587\u4ef6\u653e\u5728_src/test/fixture/sdkintegration/e2e-2Org/tls/_\u76ee\u5f55\u4e2d\u3002  \u76ee\u524d\uff0cpom.xml\u8bbe\u7f6e\u4f7f\u7528netty-tcnative-boringssl\u5728Orderer\u548cPeer\u4e4b\u95f4\u5efa\u7acbTLS\u8fde\u63a5\uff0c\u4f60\u53ef\u4ee5\u66f4\u8be5pom.xml(\u6ce8\u91ca\u5176\u4e2d\u4e00\u4e9b\u884c)\u6765\u901a\u8fc7ALPN\u6765\u4f7f\u7528\u5176\u4ed6\u7684TLS\u8fde\u63a5\u3002", 
            "title": "\u901a\u8fc7TLS\u8fde\u63a5\u5230Orderer\u548cPeer(TLS connection to Orderer and Peers)"
        }, 
        {
            "location": "/sdk_java_zh/#chaincode-endorsement-policies", 
            "text": "Policies are described in the  Fabric Endorsement Policies document .\nYou create a policy using a Fabric tool ( an example is shown in  JIRA issue FAB-2376 )\nand give it to the SDK either as a file or a byte array. The SDK, in turn, will use the policy when it creates chaincode instantiation requests.  To input a policy to the SDK, use the  ChaincodeEndorsementPolicy  class.  For testing purposes, there are 2 policy files in the  src/test/resources  directory\n  *  policyBitsAdmin  ( which has policy  AND(DEFAULT.admin)  meaning  1 signature from the DEFAULT MSP admin  is required  )\n  *  policyBitsMember  ( which has policy  AND(DEFAULT.member)  meaning  1 signature from a member of the DEFAULT MSP is required  )  and one file in the  src/test/fixture/sdkintegration/e2e-2Orgs/channel  directory specifically for use in the end to end test scenario\n  *  members_from_org1_or_2.policy  ( which has policy  OR(peerOrg1.member, peerOrg2.member)  meaning   1 signature from a member of either organizations peerOrg1, PeerOrg2 is required )  Alternatively, you can also use ChaincodeEndorsementPolicy class by giving it a YAML file that has the policy defined in it.\n See examples of this in the End2endIT testcases that use  src/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml \n The file chaincodeendorsementpolicy.yaml has comments that help understand how to create these policies. The first section\n lists all the signature identities you can use in the policy. Currently, only ROLE types are supported.\n The policy section is comprised of  n-of  and  signed-by  elements.  Then n-of ( 1-of   2-of ) require that many ( n ) in that\n section to be true. The  signed-by  references an identity in the identities section.  \u80cc\u4e66\u7b56\u7565\u5728 Fabric Endorsement Policies document \u4e0a\u505a\u4e86\u8be6\u7ec6\u7684\u9610\u91ca\u3002\n\u4f60\u53ef\u4ee5\u901a\u8fc7Fabric\u5de5\u5177\u6765\u521b\u5efa\u4e00\u4e2a\u7b56\u7565(\u5728  JIRA issue FAB-2376  \u6709\u4e2a\u4f8b\u5b50)\u4ee5\u6587\u4ef6\u6216byte\u6570\u7ec4\u65b9\u5f0f\u4f20\u7ed9SDK\u3002\u540c\u65f6SDK\u4f1a\u4f7f\u7528\u8be5\u7b56\u7565\u6765\u521b\u5efa\u94fe\u7801\u521d\u59cb\u5316\u8bf7\u6c42\u3002  \u4f7f\u7528 ChaincodeEndorsementPolicy \u7c7b\u5c06\u7b56\u7565\u4f20\u7ed9SDK\u3002\n\u4e3a\u4e86\u6d4b\u8bd5\u76ee\u7684\uff0c\u5728_src/test/resources_\u4e0b\u6709\u4e24\u4e2a\u7b56\u7565\u6587\u4ef6\u3002\n  *  policyBitsAdmin  ( \u5305\u542b  AND(DEFAULT.admin)  \u7b56\u7565\uff0c  \u9700\u8981\u4e00\u4e2aDEFAULT MSP \u7ba1\u7406\u5458\u7684\u7b7e\u540d  )\n  *  policyBitsMember  ( \u5305\u542b  AND(DEFAULT.member)  \u7b56\u7565\uff0c  \u9700\u8981\u4e00\u4e2aDEFAULT MSP \u6210\u5458\u7684\u7b7e\u540d  )  \u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u4e0b\u6cb9\u4e00\u4e2a\u6587\u4ef6\uff0c\u6307\u5b9a\u4e86\u7aef\u5bf9\u7aef\u7684\u6d4b\u8bd5\u573a\u666f\n  *  members_from_org1_or_2.policy  ( \u5305\u542b  OR(peerOrg1.member, peerOrg2.member)  \u7b56\u7565   \u9700\u8981\u4efb\u4e00\u7ec4\u7ec7(peerOrg1, PeerOrg2)\u4e0b\u6210\u5458\u7684\u7b7e\u540d )  \u53e6\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528ChaincodeEndorsementPolicy\u7c7b\uff0c\u901a\u8fc7\u7ed9\u4ed6\u6307\u5b9a\u4e00\u4e2a\u5305\u542b\u7b56\u7565\u5b9a\u4e49\u7684YAML\u6587\u4ef6\u6765\u5b9e\u73b0\u3002\n\u53c2\u7167_src/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml_\u76ee\u5f55\u4e0bEnd2endIT\u6d4b\u8bd5\u7528\u4f8b\u3002 \n\u6587\u4ef6chaincodeendorsementpolicy.yaml\u4e2d\uff0c\u6709\u4e00\u4e9b\u5e2e\u52a9\u7406\u89e3\u5982\u4f55\u521b\u5efa\u7b56\u7565\u7684\u6ce8\u91ca\u3002\u7b2c\u4e00\u90e8\u5206\u5217\u51fa\u4e86\u6240\u6709\u53ef\u4ee5\u5728\u7b56\u7565\u4e2d\u4f7f\u7528\u7684\u7b7e\u540d\u3002\u5f53\u524d\u53ea\u652f\u6301ROLE\u7c7b\u578b\u3002\npolicy\u533a\u5757\u5305\u542b n-of  \u548c  signed-by  \u5143\u7d20\u3002n-of ( 1-of   2-of ) \u5143\u7d20\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u5757\u4e2d\u5c06\u201cmany\u201d ( n ) \u8bbe\u7f6e\u4e3a true.  signed-by \u5143\u7d20\u5f15\u7528\u4e86\u5728identities\u533a\u5757\u7684\u8eab\u4efd\u4fe1\u606f\u3002", 
            "title": "\u94fe\u7801\u80cc\u4e66\u7b56\u7565(Chaincode endorsement policies)"
        }, 
        {
            "location": "/sdk_java_zh/#channel-creation-artifacts", 
            "text": "Channel configuration files and orderer bootstrap files ( see directory  src/test/fixture/sdkintegration/e2e-2Orgs/channel  ) are needed when creating a new channel.\nThis is created with the Hyperledger Fabric  configtxgen  tool.  For End2endIT.java the commands are   build/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo  build/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar  build/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis   with the configtxgen config file  src/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml  If  build/bin/configtxgen  tool is not present  run  make configtxgen  Before running the end to end test case:\n *  you may need to modify  configtx.yaml  to change all hostname and port definitions to match\nyour server(s) hostname(s) and port(s).\n *  you  WILL  have to modify  configtx.yaml  to have the  MSPDir  point to the correct path to the  crypto-config  directories.\n   *  configtx.yaml  currently assumes that you are running in a Vagrant environment where the fabric, fabric-ca and fabric-sdk-java projects exist under the  /opt/gopath/src/github.com/hyperledger  directory.  \u521b\u5efa\u901a\u9053\u7684\u65f6\u5019\uff0c\u9700\u8981\u6709\u901a\u9053\u7684\u914d\u7f6e\u6587\u4ef6\u4ee5\u53caorderer\u5f15\u5bfc\u6587\u4ef6\uff08\u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u76ee\u5f55\u4e0b\uff09\u3002\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u901a\u8fc7 configtxgen \u6765\u521b\u5efa\u7684\u3002  \u5bf9\u4e8eEnd2endIT.java\u7c7b\u6765\u8bf4\uff0c\u547d\u4ee4\u662f\uff1a\n * build/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo\n * build/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar\n * build/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis  \u914d\u7f6e\u6587\u4ef6\u662f   src/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml \u3002  \u5982\u679c build/bin/configtxgen \u5de5\u5177\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u6267\u884c make configtxgen \u6765\u751f\u6210\u3002  \u5728\u4f60\u8fd0\u884c\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u524d\uff1a  \u4f60\u9700\u8981\u4fee\u6539 configtx.yaml \u6587\u4ef6\uff0c\u5c06\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u5b9a\u4e49\u4fee\u6539\u6210\u4f60\u670d\u52a1\u5668\u771f\u5b9e\u7684\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u3002  \u4f60\u5c06\u4f1a\u9700\u8981\u4fee\u6539 configtx.yaml \u6587\u4ef6\uff0c\u5c06_MSPDir_\u6307\u5411\u5230\u6b63\u786e\u7684_crypto-config_\u76ee\u5f55\u3002\n  *  configtx.yaml \u6587\u4ef6\u5f53\u524d\u5047\u8bbe\u4f60\u8fd0\u884c\u5728Vagrant\u73af\u5883\uff0c\u800c\u4e14fabric\u3001fabric-ca \u548cfabric-sdk-java \u5728_/opt/gopath/src/github.com/hyperledger_\u76ee\u5f55\u4e0b\u3002", 
            "title": "\u901a\u9053\u521b\u5efa\u5de5\u4ef6(Channel creation artifacts)"
        }, 
        {
            "location": "/sdk_java_zh/#gogo-lang-chaincode", 
            "text": "Go lang chaincode dependencies must be contained in vendor folder.\n For an explanation of this see  Vender folder explanation  Go\u8bed\u8a00\u94fe\u7801\u7684\u4f9d\u8d56\u6587\u4ef6\u5fc5\u987b\u5305\u542b\u5728vendor\u76ee\u5f55\u4e0b\u3002\n\u8be6\u7ec6\u89e3\u91ca\u53c2\u7167 Vender folder explanation", 
            "title": "GO\u8bed\u8a00\u94fe\u7801(GO Lang chaincode)"
        }, 
        {
            "location": "/sdk_java_zh/#basic-troubleshooting", 
            "text": "identity or token do not match  Keep in mind that you can perform the enrollment process with the membership services server only once, as the enrollmentSecret is a one-time-use password. If you have performed a FSUser registration/enrollment with the membership services and subsequently deleted the crypto tokens stored on the client side, the next time you try to enroll, errors similar to the ones below will be seen.  Error: identity or token do not match  Error: FSUser is already registered  To address this, remove any stored crypto material from the CA server by following the instructions  here  which typically involves deleting the /var/hyperledger/production directory and restarting the membership services. You will also need to remove any of the crypto tokens stored on the client side by deleting the KeyValStore . That KeyValStore is configurable and is set to ${FSUser.home}/test.properties within the unit tests.  When running the unit tests, you will always need to clean the membership services database and delete the KeyValStore file, otherwise, the unit tests will fail.  \u8bb0\u4f4f\u4f60\u53ea\u80fd\u8fd0\u884c\u6210\u5458\u670d\u52a1\u7684\u767b\u8bb0\u8fdb\u7a0b\uff08enrollment process\uff09\u4e00\u6b21\uff0c\u56e0\u4e3aenrollmentSecret\u662f\u4e00\u6b21\u6027\u5bc6\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u8fc7\u4e00\u6b21FSUser registration/enrollment\uff0c\u7136\u540e\u5220\u9664\u4e86\u52a0\u5bc6\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\u7684token\u540e\uff0c\u4e0b\u4e00\u6b21enroll\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0b\u9762\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a Error: identity or token do not match  Error: FSUser is already registered  \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u53c2\u7167 here  \u5220\u9664\u6240\u6709\u5b58\u50a8\u5728CA\u670d\u52a1\u5668\u4e0a\u7684\u7684\u52a0\u5bc6\u6587\u4ef6\uff0c\u6587\u4ef6\u76ee\u5f55\u5728/var/hyperledger/production\uff0c\u7136\u540e\u91cd\u542f\u6210\u5458\u670d\u52a1\u3002\u540c\u65f6\u4f60\u8fd8\u9700\u8981\u901a\u8fc7\u5220\u9664KeyValStore\u6765\u6e05\u695a\u5ba2\u6237\u7aef\u6240\u6709\u7684\u52a0\u5bc6token\u3002KeyValStore\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u53c2\u7167${FSUser.home}/test.properties\u6587\u4ef6\u3002  \u5f53\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u4f60\u9700\u8981\u6e05\u7406\u6210\u5458\u670d\u52a1\u5668\u6570\u636e\u5e93\u5e76\u5220\u9664KeyValStore\u6587\u4ef6\uff0c\u5426\u5219\u5355\u5143\u6d4b\u8bd5\u4f1a\u5931\u8d25\u3002  java.security.InvalidKeyException: Illegal key size  If you get this error, this means your JDK does not capable of handling unlimited strength crypto algorithms. To fix this issue, You will need to download the JCE libraries for your version of JDK. Please follow the instructions  here  to download and install the JCE for your version of the JDK.  \u5982\u679c\u4f60\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u4f60\u7684JDK\u4e0d\u652f\u6301\u65e0\u9650\u957f\u5ea6\u52a0\u5bc6\u903b\u8f91\u3002\u8981\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u4e0b\u8f7d\u6b63\u5bf9\u4f60JDK\u7248\u672c\u7684JCE\u5e93\uff0c\u8bf7\u53c2\u7167 \u8fd9\u91cc \u6765\u4e0b\u8f7d\u548c\u5b89\u88c5JCE\u5e93\u3002", 
            "title": "\u7b80\u5355\u7684\u95ee\u9898\u89e3\u51b3(Basic Troubleshooting)"
        }, 
        {
            "location": "/sdk_java_zh/#communicating-with-developers-and-fellow-users", 
            "text": "Sign into  Hyperledger project s Rocket chat \n For this you will also need a  Linux Foundation ID  Join the  fabric-sdk-java  channel.  \u767b\u5f55 Hyperledger project s Rocket chat \u3002\u4f60\u9700\u8981\u4e00\u4e2a Linux Foundation ID \u3002 \u7136\u540e\u52a0\u5165 fabric-sdk-java \u9891\u9053\u3002", 
            "title": "\u548c\u5f00\u53d1\u8005\u4ea4\u6d41(Communicating with developers and fellow users)"
        }, 
        {
            "location": "/sdk_java_zh/#reporting-issues", 
            "text": "If your issue is with building Fabric development environment please discuss this on rocket.chat s #fabric-dev-env channel.\n\u5982\u679c\u4f60\u6709\u7f16\u8bd1Fabric\u5f00\u53d1\u73af\u5883\u7684\u95ee\u9898\uff0c\u8bf7\u5728rocket.chat\u7684 #fabric-dev-env channel\u8ba8\u8bba\u3002  To report an issue please use:  Hyperledger s JIRA .\nTo login you will need a Linux Foundation ID (LFID) which you get at  The Linux Foundation \nif you don t already have one.  \u62a5\u544a\u95ee\u9898\u8bf7\u4f7f\u7528JIRA\uff1a Hyperledger s JIRA \u3002\n\u4f60\u9700\u8981\u4f7f\u7528Linux\u57fa\u91d1\u4f1aID(LFID)\u6765\u767b\u5f55\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u5728 The Linux Foundation \u6ce8\u518c\u4e00\u4e2a\u3002  JIRA Fields should be: \n   Type \n   Bug  or  New Feature  Component \n   fabric-sdk-java \n   Fix Versions \n     v1.0.1   Pleases provide as much information that you can with the issue you re experiencing: stack traces logs.  Please provide the output of  java -XshowSettings:properties -version  Logging for the SDK can be enabled with setting environment variables:  ORG_HYPERLEDGER_FABRIC_SDK_LOGLEVEL=TRACE  ORG_HYPERLEDGER_FABRIC_CA_SDK_LOGLEVEL=TRACE  Fabric debug is by default enabled in the SDK docker-compose.yaml file with  On Orderer:  ORDERER_GENERAL_LOGLEVEL=debug  On peers:\nCORE_LOGGING_LEVEL=DEBUG  Fabric CA\nby starting command have the -d parameter.  Upload full logs to the JIRA not just where the issue occurred if possible  \u8bf7\u63d0\u4f9b\u5c3d\u91cf\u591a\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5806\u6808\u8ddf\u8e2a\u8bb0\u5f55\u3002\n\u8bf7\u63d0\u4f9b  java -XshowSettings:properties -version  \u547d\u4ee4\u7684\u8f93\u51fa\u7ed3\u679c\n\u53ef\u80fd\u7684\u8bdd\uff0c\u8bf7\u4e0a\u4f20\u5f53\u95ee\u9898\u53d1\u751f\u65f6\u5b8c\u6574\u7684\u65e5\u5fd7\u3002  This work is licensed under a  Creative Commons Attribution 4.0 International License .", 
            "title": "\u62a5\u544a\u95ee\u9898(Reporting Issues)"
        }, 
        {
            "location": "/kafka_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nShaoxi Qiu\n\n\n\n\n\n\n\n\n\n\n\u987b\u77e5\uff08Caveat emptor\uff09\n\n\nThis document assumes that the reader generally knows how to set up a Kafka\ncluster and a ZooKeeper ensemble. The purpose of this guide is to identify the\nsteps you need to take so as to have a set of Hyperledger Fabric ordering\nservice nodes (OSNs) use your Kafka cluster and provide an ordering service to\nyour blockchain network.\n\n\n\u8be5\u6587\u6863\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u57fa\u672c\u4e86\u89e3\u5982\u4f55\u53bb\u642d\u5efaKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u3002\u672c\u6587\u6863\u7684\u76ee\u7684\u662f\u786e\u5b9a\u60a8\u4f7f\u7528Kafka\u96c6\u7fa4\u642d\u5efa\u4e00\u5957Hyperledger Fabric\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u96c6(OSNs)\u4ee5\u53ca\u4e3a\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u63d0\u4f9b\u6392\u5e8f\u670d\u52a1\u6240\u9700\u8981\u91c7\u53d6\u7684\u6b65\u9aa4\u3002\n\n\n\u6982\u89c8\uff08Big picture\uff09\n\n\nEach channel maps to a separate single-partition topic in Kafka. \n\n\n\u6bcf\u4e00\u4e2a\u901a\u9053(channel)\u5728Kafka\u4e2d\u88ab\u6620\u5c04\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5355\u5206\u533a(partition)\u7c7b\u522b(topic)\u3002(\u8bd1\u8005\u6ce8\uff1a\u901a\u5e38\u6bcf\u4e2aTopic\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aPartition\uff0c\u6b64\u5904\u6bcf\u4e2aTopic\u53ea\u5305\u542b\u4e00\u4e2aPartition)\n\n\nWhen an OSN receives transactions via the \nBroadcast\n RPC, it checks to make sure\nthat the broadcasting client has permissions to write on the channel, then\nrelays (i.e. produces) those transactions to the appropriate partition in Kafka.\n\n\n\u5f53\u6392\u5e8f\u8282\u70b9\u901a\u8fc7RPC\n\u5e7f\u64ad\n(\nBroadcast\n)\u63a5\u6536\u5230\u4ea4\u6613\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u5e7f\u64ad\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u662f\u5426\u6709\u6743\u9650\u53bb\u4fee\u6539\u901a\u9053(channel)\u6570\u636e\uff0c\u7136\u540e\u53cd\u9988\uff08\u5373\u4ea7\u751f\uff09\u8fd9\u4e9b\u4ea4\u6613\u5230Kafka\u7684\u9002\u5f53\u5206\u533a(partition)\u4e2d\u3002\n\n\nThis partition is also consumed by the OSN which groups the received\ntransactions into blocks locally, persists them in its local ledger, and serves\nthem to receiving clients via the \nDeliver\n RPC. \n\n\n\u8be5\u5206\u533a\u4e5f\u88ab\u6392\u5e8f\u8282\u70b9\u6240\u6d88\u8d39(consume)\uff0c\u6392\u5e8f\u8282\u70b9\u5c06\u63a5\u6536\u5230\u7684\u4ea4\u6613\u5206\u7ec4\u5199\u5165\u5230\u672c\u5730\u533a\u5757\uff0c\u5c06\u5176\u4fdd\u7559\u5728\u672c\u5730\u8d26\u672c\u4e2d\uff0c\u5e76\u901a\u8fc7\nDeliver\n RPC\u63d0\u4f9b\u7ed9\u9700\u8981\u63a5\u6536\u7684\u5ba2\u6237\u7aef\u3002\n\n\nFor low-level details, refer\nto \nthe document that describes how we came to this design\n\nhttps://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit\n_\n\n Figure 8 is a schematic representation of the process described above.\n\n\n\u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\nthe document that describes how we came to this design\n\nhttps://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit\n_\n\n \u56fe8\u662f\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u793a\u610f\u56fe\u3002\n\n\n\u6b65\u9aa4\uff08Steps\uff09\n\n\nLet \nK\n and \nZ\n be the number of nodes in the Kafka cluster and the\nZooKeeper ensemble respectively:\n\n\n\u8bbe\u5b9a\u53d8\u91cf \nK\n \u548c \nZ\n \u5206\u522b\u662fKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u7684\u8282\u70b9\u6570\u91cf\uff1a\n\n\ni. At a minimum, \nK\n should be set to 4. (As we will explain in Step 4 below,\nthis is the minimum number of nodes necessary in order to exhibit crash fault\ntolerance, i.e. with 4 brokers, you can have 1 broker go down, all channels will\ncontinue to be writeable and readable, and new channels can be created.)\n\n\ni. \nK\n\u7684\u6700\u5c0f\u503c\u9700\u8981\u662f4\u3002(\u6211\u4eec\u5c06\u5728\u6b65\u9aa44\u4e2d\u89e3\u91ca\uff0c\u8fd9\u662f\u5b9e\u73b0 \u6545\u969c\u5bb9\u9519(crash fault tolerance) \u6240\u9700\u8981\u7684\u6700\u5c0f\u6570\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\n4\u4e2a\u8282\u70b9\u53ef\u4ee5\u5bb9\u8bb81\u4e2a\u8282\u70b9\u5b95\u673a\uff0c\u6240\u6709\u7684\u901a\u9053\u80fd\u591f\u7ee7\u7eed\u8bfb\u5199\u4e14\u53ef\u4ee5\u521b\u5efa\u901a\u9053\u3002)(\u8bd1\u8005\uff1aKafka\u8282\u70b9\u88ab\u79f0\u4e3abroker)\n\n\nii. \nZ\n will either be 3, 5, or 7. It has to be an odd number to avoid\nsplit-brain scenarios, and larger than 1 in order to avoid single point of\nfailures. Anything beyond 7 ZooKeeper servers is considered an overkill.\n\n\nii. \nZ\n\u53ef\u4ee5\u662f3\u30015\u6216\u80057\u3002\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u5947\u6570\u6765\u907f\u514d\u5206\u88c2(split-brain)\u60c5\u666f\uff0c\u5927\u4e8e1\u4ee5\u907f\u514d\u5355\u70b9\u6545\u969c\u3002\n\u8d85\u8fc77\u4e2aZooKeeper\u670d\u52a1\u5668\u5219\u88ab\u8ba4\u4e3a\u662f\u591a\u4f59\u7684\u3002\n\n\nProceed as follows:\n\n\n\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c:\n\n\n\n\nOrderers: \nEncode the Kafka-related information in the network\ns genesis\nblock.\n If you are using \nconfigtxgen\n, edit \nconfigtx.yaml\n \n or pick a\npreset profile for the system channel\ns genesis block \n  so that:\n\n\n\n\nOrderers: \nKafka \u76f8\u5173\u4fe1\u606f\u88ab\u5199\u5728\u7f51\u7edc\u7684\u521d\u59cb\u533a\u5757\u4e2d.\n \u5982\u679c\u4f60\u4f7f\u7528 \nconfigtxgen\n \u5de5\u5177, \u7f16\u8f91 \nconfigtx.yaml\n \u6587\u4ef6\n \u6216\u8005\u6311\u4e00\u4e2a\u73b0\u6210\u7684\u7cfb\u7edf\u901a\u9053\u7684\u521d\u59cb\u533a\u5757\u914d\u7f6e\u6587\u4ef6 \n  \u5176\u4e2d:\n\n\n    a. ``Orderer.OrdererType`` is set to ``kafka``.\n\n    a. ``Orderer.OrdererType`` \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a ``kafka``.\n\n    b. ``Orderer.Kafka.Brokers`` contains the address of *at least two* of the\n    Kafka brokers in your cluster in ``IP:port`` notation. The list does not\n    need to be exhaustive. (These are your seed brokers.)\n\n    b. ``Orderer.Kafka.Brokers`` \u5b57\u6bb5\u5305\u542b *\u81f3\u5c11\u4e24\u4e2a* Kafka\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9``IP:port`` \u6837\u5f0f\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u5217\u8868\u6ca1\u6709\u5fc5\u8981\u8be6\u5c3d\u65e0\u9057(\u8fd9\u4e9b\u662f\u4f60\u7684 seed brokers.)\n\n\n\n\n\nOrderers: \nSet the maximum block size.\n Each block will have at most\n\nOrderer.AbsoluteMaxBytes\n bytes (not including headers), a value that you can\nset in \nconfigtx.yaml\n. Let the value you pick here be \nA\n and make note of\nit \n it will affect how you configure your Kafka brokers in Step 4.\n\n\n\n\nOrderers: \n\u8bbe\u7f6e\u533a\u5757\u6700\u5927\u5bb9\u91cf.\n \u6bcf\u4e00\u4e2a\u533a\u5757\u6700\u591a\u53ea\u80fd\u6709 \nOrderer.AbsoluteMaxBytes\n bytes\u7684\u5bb9\u91cf(\u4e0d\u542b\u533a\u5757\u5934\u4fe1\u606f), \u8fd9\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u4fee\u6539\u7684\u503c\uff0c\u5b58\u653e\u5728 \nconfigtx.yaml\n \u914d\u7f6e\u6587\u4ef6\u4e2d. \u5047\u8bbe\u6b64\u5904\u4f60\u8bbe\u7f6e\u7684\u6570\u503c\u4e3a\nA\n,\u5c06\u6b64\u6570\u5b57\u8bb0\u4e0b\u6765 \n \u8fd9\u4f1a\u5f71\u54cd\u4f60\u5728\u6b65\u9aa44\u4e2d\u5bf9\u4e8eKafka brokers \u7684\u914d\u7f6e.\n\n\n\n\nOrderers: \nCreate the genesis block.\n Use \nconfigtxgen\n. The settings you\npicked in Steps 1 and 2 above are system-wide settings, i.e. they apply across\nthe network for all the OSNs. Make note of the genesis block\ns location.\n\n\n\n\nOrderers:  \u4f7f\u7528 \nconfigtxgen\n \u5de5\u5177 \n\u521b\u5efa\u521d\u59cb\u533a\u5757.\n \u5728\u6b65\u9aa41\u548c2\u4e2d\u7684\u8bbe\u7f6e\u662f\u5168\u5c40\u7684\u8bbe\u7f6e, \u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u8bbe\u7f6e\u7684\u751f\u6548\u8303\u56f4\u662f\u7f51\u7edc\u4e2d\u6240\u6709\u7684\u6392\u5e8f\u8282\u70b9. \u8bb0\u5f55\u4e0b\u521d\u59cb\u533a\u5757\u7684\u4f4d\u7f6e. \n\n\n\n\nKafka cluster: \nConfigure your Kafka brokers appropriately.\n Ensure that\nevery Kafka broker has these keys configured:\n\n\n\n\nKafka \u96c6\u7fa4: \n\u9002\u5f53\u914d\u7f6e\u4f60\u7684Kafka\u96c6\u7fa4.\n \u786e\u4fdd\u6bcf\u4e00\u4e2aKafka\u8282\u70b9\u90fd\u914d\u7f6e\u4e86\u4ee5\u4e0b\u7684\u503c:\n\n\na. ``unclean.leader.election.enable = false`` -- Data consistency is key in\na blockchain environment. We cannot have a channel leader chosen outside of\nthe in-sync replica set, or we run the risk of overwriting the offsets that\nthe previous leader produced, and --as a result-- rewrite the blockchain\nthat the orderers produce.\n\na. ``unclean.leader.election.enable = false`` -- \u6570\u636e\u4e00\u81f4\u6027\u662f\u533a\u5757\u94fe\u73af\u5883\u7684\u5173\u952e. \u6211\u4eec\u4e0d\u80fd\u9009\u62e9\u4e0d\u5728\u540c\u6b65\u526f\u672c\u96c6\u4e2d\u7684channel leader, \u4e5f\u4e0d\u80fd\u5192\u98ce\u9669\u53bb\u8986\u76d6\u524d\u4e00leader\u6240\u4ea7\u751f\u7684\u504f\u79fb\u91cf, \u90a3\u6837\u7684\u7ed3\u679c\u5c31\u662f\u91cd\u5199orderers\u6240\u4ea7\u751f\u7684\u533a\u5757\u94fe\u6570\u636e.\n\nb.  ``min.insync.replicas = M`` -- Where you pick a value ``M`` such that\n1 \n M \n N (see ``default.replication.factor`` below). Data is considered\ncommitted when it is written to at least ``M`` replicas (which are then\nconsidered in-sync and belong to the in-sync replica set, or ISR). In any\nother case, the write operation returns an error. Then:\n\nb.  ``min.insync.replicas = M`` --  ``M`` \u7684\u503c\u9700\u8981\u6ee1\u8db3\n1 \n M \n N (N\u7684\u503c\u53c2\u8003\u540e\u9762\u7684 ``default.replication.factor``). \u6570\u636e\u88ab\u8ba4\u4e3a\u662f\u5b8c\u6210\u63d0\u4ea4\u5f53\u5b83\u88ab\u5199\u5165\u5230\u81f3\u5c11 ``M`` \u4e2a\u526f\u672c\u4e2d(\u4e5f\u5c31\u662f\u8bf4\u5b83\u88ab\u8ba4\u4e3a\u662f\u540c\u6b65\u7684,\u7136\u540e\u88ab\u5199\u5165\u5230\u540c\u6b65\u526f\u672c\u96c6\u4e2d,\u4e5f\u6210\u4e3aISR). \u5176\u4ed6\u60c5\u51b5, \u5199\u5165\u64cd\u4f5c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f. \u7136\u540e:\n\n    i. If up to N-M replicas -- out of the N that the channel data is\n    written to -- become unavailable, operations proceed normally.\n    i. \u5982\u679c\u6709 N-M \u4e2a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, \u64cd\u4f5c\u5c06\u6b63\u5e38\u8fdb\u884c.\n    ii. If more replicas become unavailable, Kafka cannot maintain an ISR\n    set of M, so it stops accepting writes. Reads work without issues.\n    The channel becomes writeable again when M replicas get in-sync.\n    ii. \u5982\u679c\u66f4\u591a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, Kafka \u4e0d\u80fd\u4f4d\u7f6e\u6570\u91cf M \u7684\u540c\u6b65\u526f\u672c\u96c6(ISR), \u6240\u4ee5\u5b83\u4f1a\u505c\u6b62\u63a5\u53d7\u5199\u5165\u64cd\u4f5c. \u8bfb\u64cd\u4f5c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c.\n    \u5f53M\u4e2a\u526f\u672c\u91cd\u65b0\u540c\u6b65\u540e,\u901a\u9053\u5c31\u53ef\u4ee5\u518d\u6b21\u53d8\u4e3a\u53ef\u5199\u5165\u72b6\u6001.\n\n\nc. ``default.replication.factor = N`` -- Where you pick a value ``N`` such\nthat N \n K. A replication factor of ``N`` means that each channel will have\nits data replicated to ``N`` brokers. These are the candidates for the ISR\nset of a channel. As we noted in the ``min.insync.replicas section`` above,\nnot all of these brokers have to be available all the time. ``N`` should be\nset *strictly smaller* to ``K`` because channel creations cannot go forward\nif less than ``N`` brokers are up. So if you set N = K, a single broker\ngoing down means that no new channels can be created on the blockchain\nnetwork -- the crash fault tolerance of the ordering service is\nnon-existent.\n\nc. ``default.replication.factor = N`` -- \u9009\u62e9\u4e00\u4e2a ``N`` \u7684\u6570\u503c\u6ee1\u8db3 N \n K (Kafak\u96c6\u7fa4\u6570\u91cf). \u53c2\u6570 ``N`` \u8868\u793a\u6bcf\u4e2achannel \u7684\u6570\u636e\u4f1a\u590d\u5236\u5230 ``N`` \u4e2a broker \u4e2d. \u8fd9\u4e9b\u662f channel \u540c\u6b65\u526f\u672c\u96c6\u7684\u5019\u9009. \u6b63\u5982\u524d\u9762 ``min.insync.replicas`` \u90e8\u5206\u6240\u8bf4\u7684, \u4e0d\u662f\u6240\u6709broker\u90fd\u9700\u8981\u662f\u968f\u65f6\u53ef\u7528\u7684. ``N`` \u503c\u9700\u8981\u8bbe\u7f6e\u4e3a\u7edd\u5bf9\u5c0f\u4e8e ``K`` , \u56e0\u4e3achannel\u7684\u521b\u5efa\u9700\u8981\u4e0d\u5c11\u4e8e ``N`` \u4e2abroker\u662f\u542f\u52a8\u7684. \u6240\u4ee5\u5982\u679c\u8bbe\u7f6e N = K , \u4e00\u4e2a broker \u5b95\u673a\u5c31\u610f\u5473\u7740\u533a\u5757\u94fe\u7f51\u7edc\u4e0d\u80fd\u518d\u521b\u5efachannel. \u90a3\u4e48\u6545\u969c\u5bb9\u9519\u7684\u6392\u5e8f\u670d\u52a1\u4e5f\u5c31\u4e0d\u5b58\u5728\u4e86.\n\n\nd. ``message.max.bytes`` and ``replica.fetch.max.bytes`` should be set to a\nvalue larger than ``A``, the value you picked in\n``Orderer.AbsoluteMaxBytes`` in Step 2 above. Add some buffer to account for\nheaders -- 1 MiB is more than enough. The following condition applies:\n\nd. ``message.max.bytes`` \u548c ``replica.fetch.max.bytes`` \u7684\u503c\u9700\u8981\u5927\u4e8e ``A``, \u5c31\u662f\u5728\u6b65\u9aa42\u4e2d\u9009\u53d6\u7684 ``Orderer.AbsoluteMaxBytes`` \u7684\u503c. \u518d\u4e3a\u533a\u5757\u5934\u589e\u52a0\u4e00\u4e9b\u4f59\u91cf -- 1 MiB \u5c31\u8db3\u591f\u4e86. \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n\n::\n\n    Orderer.AbsoluteMaxBytes \n replica.fetch.max.bytes \n= message.max.bytes\n\n(For completeness, we note that ``message.max.bytes`` should be strictly\nsmaller to ``socket.request.max.bytes`` which is set by default to 100 MiB.\nIf you wish to have blocks larger than 100 MiB you will need to edit the\nhard-coded value in ``brokerConfig.Producer.MaxMessageBytes`` in\n``fabric/orderer/kafka/config.go`` and rebuild the binary from source.\nThis is not advisable.)\n\n(\u8865\u5145, \u6211\u4eec\u6ce8\u610f\u5230 ``message.max.bytes`` \u9700\u8981\u4e25\u683c\u5c0f\u4e8e ``socket.request.max.bytes`` , \u8fd9\u4e2a\u503c\u9ed8\u8ba4\u662f100Mib. \u5982\u679c\u4f60\u5e0c\u671b\u533a\u5757\u5927\u4e8e100MiB, \u4f60\u9700\u8981\u53bb\u4fee\u6539\u786c\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf ``brokerConfig.Producer.MaxMessageBytes`` , \u4ee3\u7801\u4f4d\u7f6e\u662f ``fabric/orderer/kafka/config.go`` , \u518d\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801, \u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a.)\n\ne. ``log.retention.ms = -1``. Until the ordering service adds\nsupport for pruning of the Kafka logs, you should disable time-based\nretention and prevent segments from expiring. (Size-based retention -- see\n``log.retention.bytes`` -- is disabled by default in Kafka at the time of\nthis writing, so there's no need to set it explicitly.)\n\ne. ``log.retention.ms = -1``. \u76f4\u5230\u6392\u5e8f\u670d\u52a1\u589e\u52a0\u4e86\u5bf9\u4e8e Kafka \u65e5\u5fd7\u5206\u5272(pruning)\u7684\u652f\u6301\u4e4b\u524d, \u5e94\u8be5\u7981\u7528\u57fa\u4e8e\u65f6\u95f4\u5206\u5272\u7684\u65b9\u5f0f\u4ee5\u907f\u514d\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u5230\u671f\u5206\u6bb5. (\u57fa\u4e8e\u6587\u4ef6\u5927\u5c0f\u7684\u5206\u5272\u65b9\u5f0f -- \u770b\u53c2\u6570 ``log.retention.bytes`` -- \u5728\u672c\u6587\u4e66\u5199\u65f6, \u5728 Kafka \u4e2d\u662f\u9ed8\u8ba4\u88ab\u7981\u7528\u7684, \u6240\u4ee5\u8fd9\u4e2a\u503c\u6ca1\u6709\u5fc5\u8981\u6307\u5b9a\u5730\u5f88\u660e\u786e. )\n\nBased on what we've described above, the minimum allowed values for ``M``\nand ``N`` are 2 and 3 respectively. This configuration allows for the\ncreation of new channels to go forward, and for all channels to continue to\nbe writeable.\n\n\u57fa\u4e8e\u4e0a\u6587\u6240\u63cf\u8ff0\u7684, ``M`` \u548c ``N`` \u7684\u6700\u5c0f\u503c\u5206\u522b\u4e3a 2 \u548c 3 . \u8fd9\u4e2a\u914d\u7f6e\u53ef\u4ee5\u521b\u5efa channel \u5e76\u8ba9\u6240\u6709 channel \u90fd\u662f\u968f\u65f6\u53ef\u4ee5\u5199\u5165\u7684.\n\n\n\n\n\nOrderers: \nPoint each OSN to the genesis block.\n Edit\n\nGeneral.GenesisFile\n in \norderer.yaml\n so that it points to the genesis\nblock created in Step 3 above. (While at it, ensure all other keys in that YAML\nfile are set appropriately.)\n\n\n\n\nOrderers: \n\u5c06\u6240\u6709\u6392\u5e8f\u8282\u70b9\u6307\u5411\u521d\u59cb\u533a\u5757.\n \u7f16\u8f91 \norderer.yaml\n \u6587\u4ef6\u4e2d\u7684\u53c2\u6570 \nGeneral.GenesisFile\n \u4f7f\u5176\u6307\u5411\u6b65\u9aa43\u4e2d\u6240\u521b\u5efa\u7684\u521d\u59cb\u533a\u5757. (\u540c\u65f6, \u786e\u4fddYAML\u6587\u4ef6\u4e2d\u6240\u6709\u5176\u4ed6\u53c2\u6570\u90fd\u662f\u6b63\u786e\u7684.)\n\n\n\n\n\n\nOrderers: \nAdjust polling intervals and timeouts.\n (Optional step.)\n Orderers: \n\u8c03\u6574\u8f6e\u8be2\u95f4\u9694\u548c\u8d85\u65f6\u65f6\u95f4.\n (\u53ef\u9009\u6b65\u9aa4.)\n\n\na. The \nKafka.Retry\n section in the \norderer.yaml\n file allows you to\nadjust the frequency of the metadata/producer/consumer requests, as well as\nthe socket timeouts. (These are all settings you would expect to see in a\nKafka producer or consumer.)\n\n\na.  \norderer.yaml\n \u6587\u4ef6\u4e2d\u7684 \nKafka.Retry\n \u533a\u57df\u8ba9\u4f60\u80fd\u591f\u8c03\u6574  metadata/producer/consumer \u8bf7\u6c42\u7684\u9891\u7387\u4ee5\u53casocket\u7684\u8d85\u65f6\u65f6\u95f4. (\u8fd9\u4e9b\u5e94\u8be5\u5c31\u662f\u6240\u6709\u5728 kafka \u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 \u4e2d\u4f60\u9700\u8981\u7684\u8bbe\u7f6e)\n\n\nb. Additionally, when a new channel is created, or when an existing channel\nis reloaded (in case of a just-restarted orderer), the orderer interacts\nwith the Kafka cluster in the following ways:\n\n\nb. \u53e6\u5916, \u5f53\u4e00\u4e2a channel \u88ab\u521b\u5efa, \u6216\u5f53\u4e00\u4e2a\u73b0\u6709\u7684 channel \u88ab\u91cd\u65b0\u8bfb\u53d6(\u521a\u542f\u52a8 orderer \u7684\u60c5\u51b5), orderer \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c Kafka \u96c6\u7fa4\u8fdb\u884c\u4ea4\u4e92. \n\n\na. It creates a Kafka producer (writer) for the Kafka partition that\ncorresponds to the channel.\n\na. \u4e3a channel \u5bf9\u5e94\u7684 Kafka \u5206\u533a \u521b\u5efa\u4e00\u4e2a Kafka \u751f\u4ea7\u8005.\n\nb. It uses that producer to post a no-op ``CONNECT`` message to that\npartition.\n\nb. \u901a\u8fc7\u751f\u4ea7\u8005\u5411\u8fd9\u4e2a\u5206\u533a\u53d1\u4e00\u4e2a\u7a7a\u7684\u8fde\u63a5\u4fe1\u606f.\n\nc. It creates a Kafka consumer (reader) for that partition.\n\nc. \u4e3a\u8fd9\u4e2a\u5206\u533a\u521b\u5efa\u4e00\u4e2a Kafka \u6d88\u8d39\u8005.\n\nIf any of these steps fail, you can adjust the frequency with which they\nare repeated. Specifically they will be re-attempted every\n``Kafka.Retry.ShortInterval`` for a total of ``Kafka.Retry.ShortTotal``,\nand then every ``Kafka.Retry.LongInterval`` for a total of\n``Kafka.Retry.LongTotal`` until they succeed. Note that the orderer will\nbe unable to write to or read from a channel until all of the steps\nabove have been completed successfully.\n\n\u5982\u679c\u4efb\u610f\u6b65\u9aa4\u51fa\u9519, \u4f60\u53ef\u4ee5\u8c03\u6574\u5176\u91cd\u590d\u7684\u9891\u7387. \n\u8fd9\u4e9b\u6b65\u9aa4\u4f1a\u5728\u6bcf\u4e00\u4e2a Kafka.Retry.ShortInterval \u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u540e\u8fdb\u884c\u91cd\u8bd5 Kafka.Retry.ShortTotal \u6b21, \n\u518d\u4ee5 Kafka.Retry.LongInterval \u89c4\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91cd\u8bd5 Kafka.Retry.LongTotal \u6b21\u76f4\u5230\u6210\u529f. \n\u9700\u8981\u6ce8\u610f\u7684\u662f orderer \u4e0d\u80fd\u8bfb\u5199\u8be5 channel \u7684\u6570\u636e\u76f4\u5230\u6240\u6709\u4e0a\u8ff0\u6b65\u9aa4\u90fd\u6210\u529f\u6267\u884c.\n\n\n\n\n\n\n\nSet up the OSNs and Kafka cluster so that they communicate over SSL.\n\n(Optional step, but highly recommended.) Refer to \nthe Confluent guide\n\nhttp://docs.confluent.io/2.0.0/kafka/ssl.html\n_ for the Kafka cluster side of\nthe equation, and set the keys under \nKafka.TLS\n in \norderer.yaml\n on every\nOSN accordingly.\n\n\n\n\n\n\n\u5c06\u6392\u5e8f\u8282\u70b9\u548c Kafka \u96c6\u7fa4\u95f4\u8bbe\u7f6e\u4e3a\u901a\u8fc7 SSL \u901a\u8baf.\n \n(\u53ef\u9009\u6b65\u9aa4,\u5f3a\u70c8\u63a8\u8350) \u53c2\u8003 \nthe Confluent guide\n\nhttp://docs.confluent.io/2.0.0/kafka/ssl.html\n_ \u6587\u6863\u4e2d\u5173\u4e8e Kafka \u96c6\u7fa4\u7684\u8bbe\u7f6e, \u6765\u8bbe\u7f6e\u6bcf\u4e2a\u6392\u5e8f\u8282\u70b9 \norderer.yaml\n \u6587\u4ef6\u4e2d  \nKafka.TLS\n \u90e8\u5206\u7684\u5185\u5bb9.\n\n\n\n\nBring up the nodes in the following order: ZooKeeper ensemble, Kafka\ncluster, ordering service nodes.\n\n\n\n\n\u542f\u52a8\u8282\u70b9\u8bf7\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f: ZooKeeper \u96c6\u7fa4, Kafka \u96c6\u7fa4, \u6392\u5e8f\u8282\u70b9\n\n\n\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879\uff08Additional considerations\uff09\n\n\n\n\nPreferred message size.\n In Step 2 above (see \nSteps\n_ section) you can\nalso set the preferred size of blocks by setting the\n\nOrderer.Batchsize.PreferredMaxBytes\n key. Kafka offers higher throughput when\ndealing with relatively small messages; aim for a value no bigger than 1 MiB.\n\n\n\n\n\u9996\u9009\u7684\u6d88\u606f\u5927\u5c0f.\n \u5728\u4e0a\u9762\u7684\u6b65\u9aa42\u4e2d, \u4f60\u4e5f\u80fd\u901a\u8fc7\u53c2\u6570 \nOrderer.Batchsize.PreferredMaxBytes\n \u8bbe\u7f6e\u9996\u9009\u7684\u533a\u5757\u5927\u5c0f.\nKafka \u5904\u7406\u76f8\u5bf9\u8f83\u5c0f\u7684\u4fe1\u606f\u6709\u66f4\u9ad8\u7684\u541e\u5410\u91cf; \u9488\u5bf9\u5c0f\u4e8e 1 MiB \u5927\u5c0f\u7684\u503c.\n\n\n\n\nUsing environment variables to override settings.\n You can override a\nKafka broker or a ZooKeeper server\ns settings by using environment variables.\nReplace the dots of the configuration key with underscores \n\ne.g. \nKAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false\n will allow you to override\nthe default value of \nunclean.leader.election.enable\n. The same applies to the\nOSNs for their \nlocal\n configuration, i.e. what can be set in \norderer.yaml\n.\nFor example \nORDERER_KAFKA_RETRY_SHORTINTERVAL=1s\n allows you to override the\ndefault value for \nOrderer.Kafka.Retry.ShortInterval\n.\n\n\n\n\n\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u91cd\u5199\u8bbe\u7f6e.\n \u4f60\u80fd\u591f\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u91cd\u5199 Kafka \u8282\u70b9\u548c Zookeeper \u670d\u52a1\u5668\u7684\u8bbe\u7f6e. \u66ff\u6362\u914d\u7f6e\u53c2\u6570\u4e2d\u7684 \u70b9 \u4e3a \u4e0b\u5212\u7ebf \n \u4f8b\u5982 \nKAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false\n \u73af\u5883\u53d8\u91cf\u91cd\u5199\u914d\u7f6e\u53c2\u6570 \nunclean.leader.election.enable\n. \u73af\u5883\u53d8\u91cf\u91cd\u5199\u540c\u6837\u9002\u7528\u4e8e\u6392\u5e8f\u8282\u70b9\u7684\n\u672c\u5730\n\u914d\u7f6e, \u5373 \norderer.yaml\n \u4e2d\u6240\u80fd\u8bbe\u7f6e\u7684. \u4f8b\u5982 \nORDERER_KAFKA_RETRY_SHORTINTERVAL=1s\n \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u91cd\u5199\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 \nOrderer.Kafka.Retry.ShortInterval\n.\n\n\nSupported Kafka versions and upgrading\n\n\n\u652f\u6301\u7684 Kafka \u7248\u672c\u548c\u5347\u7ea7\n\n\nSupported Kafka versions for v1 are \n0.9\n and \n0.10\n. (Hyperledger Fabric\nuses the \nsarama client library \nhttps://github.com/Shopify/sarama\n_\nand vendors a version of it that supports Kafka 0.9 and 0.10.)\n\n\nFabric V1 \u652f\u6301\u7684 Kafka \u7248\u672c\u662f \n0.9\n \u548c \n0.10\n. (Hyperledger Fabric \u4f7f\u7528\u4ee3\u7801\u5e93: \nsarama client library \nhttps://github.com/Shopify/sarama\n_ \u652f\u6301\u7684 Kafka \u7248\u672c\u662f \n0.9\n \u548c \n0.10\n)\n\n\nOut of the box the Kafka version defaults to \n0.9.0.1\n. If you wish to use a\ndifferent supported version, specify a supported version using the\n\nKafka.Version\n key in \norderer.yaml\n.\n\n\n\u9ed8\u8ba4\u7684 Kafka \u7248\u672c\u662f \n0.9.0.1\n. \u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u7684\u7248\u672c, \u4fee\u6539 \norderer.yaml\n \u6587\u4ef6\u4e2d\u7684\u53c2\u6570 \nKafka.Version\n.\n\n\nThe current supported Kafka versions are:\n\n\n\u76ee\u524d\u652f\u6301\u7684 Kafka \u7248\u672c\u662f:\n\n\n\n\nVersion: 0.9.0.1\n\n\nVersion: 0.10.0.0\n\n\nVersion: 0.10.0.1\n\n\nVersion: 0.10.1.0\n\n\n\n\n\u8c03\u8bd5\uff08Debugging\uff09\n\n\nSet \nGeneral.LogLevel\n to \nDEBUG\n and \nKafka.Verbose\n in \norderer.yaml\n\nto \ntrue\n.\n\n\n\u8bbe\u7f6e \norderer.yaml\n \u6587\u4ef6\u4e2d \nGeneral.LogLevel\n \u4e3a \nDEBUG\n \u548c \nKafka.Verbose\n \u4e3a \ntrue\n.\n\n\n\u4f8b\u5b50\uff08Example\uff09\n\n\nSample Docker Compose configuration files inline with the recommended settings\nabove can be found under the \nfabric/bddtests\n directory. Look for\n\ndc-orderer-kafka-base.yml\n and \ndc-orderer-kafka.yml\n.\n\n\n\u5305\u542b\u4e86\u63a8\u8350\u7684\u8bbe\u7f6e\u7684Docker Compose \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u80fd\u591f\u5728 \nfabric/bddtests\n \u76ee\u5f55\u4e2d\u627e\u5230. \u5305\u62ec \ndc-orderer-kafka-base.yml\n \u6587\u4ef6\u548c \ndc-orderer-kafka.yml\n \u6587\u4ef6.\n\n\n.. Licensed under Creative Commons Attribution 4.0 International License\n   https://creativecommons.org/licenses/by/4.0/", 
            "title": "\u57fa\u4e8ekafka\u7684\u6392\u5e8f\u670d\u52a1"
        }, 
        {
            "location": "/kafka_zh/#caveat-emptor", 
            "text": "This document assumes that the reader generally knows how to set up a Kafka\ncluster and a ZooKeeper ensemble. The purpose of this guide is to identify the\nsteps you need to take so as to have a set of Hyperledger Fabric ordering\nservice nodes (OSNs) use your Kafka cluster and provide an ordering service to\nyour blockchain network.  \u8be5\u6587\u6863\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u57fa\u672c\u4e86\u89e3\u5982\u4f55\u53bb\u642d\u5efaKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u3002\u672c\u6587\u6863\u7684\u76ee\u7684\u662f\u786e\u5b9a\u60a8\u4f7f\u7528Kafka\u96c6\u7fa4\u642d\u5efa\u4e00\u5957Hyperledger Fabric\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u96c6(OSNs)\u4ee5\u53ca\u4e3a\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u63d0\u4f9b\u6392\u5e8f\u670d\u52a1\u6240\u9700\u8981\u91c7\u53d6\u7684\u6b65\u9aa4\u3002", 
            "title": "\u987b\u77e5\uff08Caveat emptor\uff09"
        }, 
        {
            "location": "/kafka_zh/#big-picture", 
            "text": "Each channel maps to a separate single-partition topic in Kafka.   \u6bcf\u4e00\u4e2a\u901a\u9053(channel)\u5728Kafka\u4e2d\u88ab\u6620\u5c04\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5355\u5206\u533a(partition)\u7c7b\u522b(topic)\u3002(\u8bd1\u8005\u6ce8\uff1a\u901a\u5e38\u6bcf\u4e2aTopic\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aPartition\uff0c\u6b64\u5904\u6bcf\u4e2aTopic\u53ea\u5305\u542b\u4e00\u4e2aPartition)  When an OSN receives transactions via the  Broadcast  RPC, it checks to make sure\nthat the broadcasting client has permissions to write on the channel, then\nrelays (i.e. produces) those transactions to the appropriate partition in Kafka.  \u5f53\u6392\u5e8f\u8282\u70b9\u901a\u8fc7RPC \u5e7f\u64ad ( Broadcast )\u63a5\u6536\u5230\u4ea4\u6613\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u5e7f\u64ad\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u662f\u5426\u6709\u6743\u9650\u53bb\u4fee\u6539\u901a\u9053(channel)\u6570\u636e\uff0c\u7136\u540e\u53cd\u9988\uff08\u5373\u4ea7\u751f\uff09\u8fd9\u4e9b\u4ea4\u6613\u5230Kafka\u7684\u9002\u5f53\u5206\u533a(partition)\u4e2d\u3002  This partition is also consumed by the OSN which groups the received\ntransactions into blocks locally, persists them in its local ledger, and serves\nthem to receiving clients via the  Deliver  RPC.   \u8be5\u5206\u533a\u4e5f\u88ab\u6392\u5e8f\u8282\u70b9\u6240\u6d88\u8d39(consume)\uff0c\u6392\u5e8f\u8282\u70b9\u5c06\u63a5\u6536\u5230\u7684\u4ea4\u6613\u5206\u7ec4\u5199\u5165\u5230\u672c\u5730\u533a\u5757\uff0c\u5c06\u5176\u4fdd\u7559\u5728\u672c\u5730\u8d26\u672c\u4e2d\uff0c\u5e76\u901a\u8fc7 Deliver  RPC\u63d0\u4f9b\u7ed9\u9700\u8981\u63a5\u6536\u7684\u5ba2\u6237\u7aef\u3002  For low-level details, refer\nto  the document that describes how we came to this design https://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit _  Figure 8 is a schematic representation of the process described above.  \u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 the document that describes how we came to this design https://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit _  \u56fe8\u662f\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u793a\u610f\u56fe\u3002", 
            "title": "\u6982\u89c8\uff08Big picture\uff09"
        }, 
        {
            "location": "/kafka_zh/#steps", 
            "text": "Let  K  and  Z  be the number of nodes in the Kafka cluster and the\nZooKeeper ensemble respectively:  \u8bbe\u5b9a\u53d8\u91cf  K  \u548c  Z  \u5206\u522b\u662fKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u7684\u8282\u70b9\u6570\u91cf\uff1a  i. At a minimum,  K  should be set to 4. (As we will explain in Step 4 below,\nthis is the minimum number of nodes necessary in order to exhibit crash fault\ntolerance, i.e. with 4 brokers, you can have 1 broker go down, all channels will\ncontinue to be writeable and readable, and new channels can be created.)  i.  K \u7684\u6700\u5c0f\u503c\u9700\u8981\u662f4\u3002(\u6211\u4eec\u5c06\u5728\u6b65\u9aa44\u4e2d\u89e3\u91ca\uff0c\u8fd9\u662f\u5b9e\u73b0 \u6545\u969c\u5bb9\u9519(crash fault tolerance) \u6240\u9700\u8981\u7684\u6700\u5c0f\u6570\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\n4\u4e2a\u8282\u70b9\u53ef\u4ee5\u5bb9\u8bb81\u4e2a\u8282\u70b9\u5b95\u673a\uff0c\u6240\u6709\u7684\u901a\u9053\u80fd\u591f\u7ee7\u7eed\u8bfb\u5199\u4e14\u53ef\u4ee5\u521b\u5efa\u901a\u9053\u3002)(\u8bd1\u8005\uff1aKafka\u8282\u70b9\u88ab\u79f0\u4e3abroker)  ii.  Z  will either be 3, 5, or 7. It has to be an odd number to avoid\nsplit-brain scenarios, and larger than 1 in order to avoid single point of\nfailures. Anything beyond 7 ZooKeeper servers is considered an overkill.  ii.  Z \u53ef\u4ee5\u662f3\u30015\u6216\u80057\u3002\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u5947\u6570\u6765\u907f\u514d\u5206\u88c2(split-brain)\u60c5\u666f\uff0c\u5927\u4e8e1\u4ee5\u907f\u514d\u5355\u70b9\u6545\u969c\u3002\n\u8d85\u8fc77\u4e2aZooKeeper\u670d\u52a1\u5668\u5219\u88ab\u8ba4\u4e3a\u662f\u591a\u4f59\u7684\u3002  Proceed as follows:  \u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c:   Orderers:  Encode the Kafka-related information in the network s genesis\nblock.  If you are using  configtxgen , edit  configtx.yaml    or pick a\npreset profile for the system channel s genesis block    so that:   Orderers:  Kafka \u76f8\u5173\u4fe1\u606f\u88ab\u5199\u5728\u7f51\u7edc\u7684\u521d\u59cb\u533a\u5757\u4e2d.  \u5982\u679c\u4f60\u4f7f\u7528  configtxgen  \u5de5\u5177, \u7f16\u8f91  configtx.yaml  \u6587\u4ef6  \u6216\u8005\u6311\u4e00\u4e2a\u73b0\u6210\u7684\u7cfb\u7edf\u901a\u9053\u7684\u521d\u59cb\u533a\u5757\u914d\u7f6e\u6587\u4ef6    \u5176\u4e2d:      a. ``Orderer.OrdererType`` is set to ``kafka``.\n\n    a. ``Orderer.OrdererType`` \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a ``kafka``.\n\n    b. ``Orderer.Kafka.Brokers`` contains the address of *at least two* of the\n    Kafka brokers in your cluster in ``IP:port`` notation. The list does not\n    need to be exhaustive. (These are your seed brokers.)\n\n    b. ``Orderer.Kafka.Brokers`` \u5b57\u6bb5\u5305\u542b *\u81f3\u5c11\u4e24\u4e2a* Kafka\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9``IP:port`` \u6837\u5f0f\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u5217\u8868\u6ca1\u6709\u5fc5\u8981\u8be6\u5c3d\u65e0\u9057(\u8fd9\u4e9b\u662f\u4f60\u7684 seed brokers.)   Orderers:  Set the maximum block size.  Each block will have at most Orderer.AbsoluteMaxBytes  bytes (not including headers), a value that you can\nset in  configtx.yaml . Let the value you pick here be  A  and make note of\nit   it will affect how you configure your Kafka brokers in Step 4.   Orderers:  \u8bbe\u7f6e\u533a\u5757\u6700\u5927\u5bb9\u91cf.  \u6bcf\u4e00\u4e2a\u533a\u5757\u6700\u591a\u53ea\u80fd\u6709  Orderer.AbsoluteMaxBytes  bytes\u7684\u5bb9\u91cf(\u4e0d\u542b\u533a\u5757\u5934\u4fe1\u606f), \u8fd9\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u4fee\u6539\u7684\u503c\uff0c\u5b58\u653e\u5728  configtx.yaml  \u914d\u7f6e\u6587\u4ef6\u4e2d. \u5047\u8bbe\u6b64\u5904\u4f60\u8bbe\u7f6e\u7684\u6570\u503c\u4e3a A ,\u5c06\u6b64\u6570\u5b57\u8bb0\u4e0b\u6765   \u8fd9\u4f1a\u5f71\u54cd\u4f60\u5728\u6b65\u9aa44\u4e2d\u5bf9\u4e8eKafka brokers \u7684\u914d\u7f6e.   Orderers:  Create the genesis block.  Use  configtxgen . The settings you\npicked in Steps 1 and 2 above are system-wide settings, i.e. they apply across\nthe network for all the OSNs. Make note of the genesis block s location.   Orderers:  \u4f7f\u7528  configtxgen  \u5de5\u5177  \u521b\u5efa\u521d\u59cb\u533a\u5757.  \u5728\u6b65\u9aa41\u548c2\u4e2d\u7684\u8bbe\u7f6e\u662f\u5168\u5c40\u7684\u8bbe\u7f6e, \u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u8bbe\u7f6e\u7684\u751f\u6548\u8303\u56f4\u662f\u7f51\u7edc\u4e2d\u6240\u6709\u7684\u6392\u5e8f\u8282\u70b9. \u8bb0\u5f55\u4e0b\u521d\u59cb\u533a\u5757\u7684\u4f4d\u7f6e.    Kafka cluster:  Configure your Kafka brokers appropriately.  Ensure that\nevery Kafka broker has these keys configured:   Kafka \u96c6\u7fa4:  \u9002\u5f53\u914d\u7f6e\u4f60\u7684Kafka\u96c6\u7fa4.  \u786e\u4fdd\u6bcf\u4e00\u4e2aKafka\u8282\u70b9\u90fd\u914d\u7f6e\u4e86\u4ee5\u4e0b\u7684\u503c:  a. ``unclean.leader.election.enable = false`` -- Data consistency is key in\na blockchain environment. We cannot have a channel leader chosen outside of\nthe in-sync replica set, or we run the risk of overwriting the offsets that\nthe previous leader produced, and --as a result-- rewrite the blockchain\nthat the orderers produce.\n\na. ``unclean.leader.election.enable = false`` -- \u6570\u636e\u4e00\u81f4\u6027\u662f\u533a\u5757\u94fe\u73af\u5883\u7684\u5173\u952e. \u6211\u4eec\u4e0d\u80fd\u9009\u62e9\u4e0d\u5728\u540c\u6b65\u526f\u672c\u96c6\u4e2d\u7684channel leader, \u4e5f\u4e0d\u80fd\u5192\u98ce\u9669\u53bb\u8986\u76d6\u524d\u4e00leader\u6240\u4ea7\u751f\u7684\u504f\u79fb\u91cf, \u90a3\u6837\u7684\u7ed3\u679c\u5c31\u662f\u91cd\u5199orderers\u6240\u4ea7\u751f\u7684\u533a\u5757\u94fe\u6570\u636e.\n\nb.  ``min.insync.replicas = M`` -- Where you pick a value ``M`` such that\n1   M   N (see ``default.replication.factor`` below). Data is considered\ncommitted when it is written to at least ``M`` replicas (which are then\nconsidered in-sync and belong to the in-sync replica set, or ISR). In any\nother case, the write operation returns an error. Then:\n\nb.  ``min.insync.replicas = M`` --  ``M`` \u7684\u503c\u9700\u8981\u6ee1\u8db3\n1   M   N (N\u7684\u503c\u53c2\u8003\u540e\u9762\u7684 ``default.replication.factor``). \u6570\u636e\u88ab\u8ba4\u4e3a\u662f\u5b8c\u6210\u63d0\u4ea4\u5f53\u5b83\u88ab\u5199\u5165\u5230\u81f3\u5c11 ``M`` \u4e2a\u526f\u672c\u4e2d(\u4e5f\u5c31\u662f\u8bf4\u5b83\u88ab\u8ba4\u4e3a\u662f\u540c\u6b65\u7684,\u7136\u540e\u88ab\u5199\u5165\u5230\u540c\u6b65\u526f\u672c\u96c6\u4e2d,\u4e5f\u6210\u4e3aISR). \u5176\u4ed6\u60c5\u51b5, \u5199\u5165\u64cd\u4f5c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f. \u7136\u540e:\n\n    i. If up to N-M replicas -- out of the N that the channel data is\n    written to -- become unavailable, operations proceed normally.\n    i. \u5982\u679c\u6709 N-M \u4e2a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, \u64cd\u4f5c\u5c06\u6b63\u5e38\u8fdb\u884c.\n    ii. If more replicas become unavailable, Kafka cannot maintain an ISR\n    set of M, so it stops accepting writes. Reads work without issues.\n    The channel becomes writeable again when M replicas get in-sync.\n    ii. \u5982\u679c\u66f4\u591a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, Kafka \u4e0d\u80fd\u4f4d\u7f6e\u6570\u91cf M \u7684\u540c\u6b65\u526f\u672c\u96c6(ISR), \u6240\u4ee5\u5b83\u4f1a\u505c\u6b62\u63a5\u53d7\u5199\u5165\u64cd\u4f5c. \u8bfb\u64cd\u4f5c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c.\n    \u5f53M\u4e2a\u526f\u672c\u91cd\u65b0\u540c\u6b65\u540e,\u901a\u9053\u5c31\u53ef\u4ee5\u518d\u6b21\u53d8\u4e3a\u53ef\u5199\u5165\u72b6\u6001.\n\n\nc. ``default.replication.factor = N`` -- Where you pick a value ``N`` such\nthat N   K. A replication factor of ``N`` means that each channel will have\nits data replicated to ``N`` brokers. These are the candidates for the ISR\nset of a channel. As we noted in the ``min.insync.replicas section`` above,\nnot all of these brokers have to be available all the time. ``N`` should be\nset *strictly smaller* to ``K`` because channel creations cannot go forward\nif less than ``N`` brokers are up. So if you set N = K, a single broker\ngoing down means that no new channels can be created on the blockchain\nnetwork -- the crash fault tolerance of the ordering service is\nnon-existent.\n\nc. ``default.replication.factor = N`` -- \u9009\u62e9\u4e00\u4e2a ``N`` \u7684\u6570\u503c\u6ee1\u8db3 N   K (Kafak\u96c6\u7fa4\u6570\u91cf). \u53c2\u6570 ``N`` \u8868\u793a\u6bcf\u4e2achannel \u7684\u6570\u636e\u4f1a\u590d\u5236\u5230 ``N`` \u4e2a broker \u4e2d. \u8fd9\u4e9b\u662f channel \u540c\u6b65\u526f\u672c\u96c6\u7684\u5019\u9009. \u6b63\u5982\u524d\u9762 ``min.insync.replicas`` \u90e8\u5206\u6240\u8bf4\u7684, \u4e0d\u662f\u6240\u6709broker\u90fd\u9700\u8981\u662f\u968f\u65f6\u53ef\u7528\u7684. ``N`` \u503c\u9700\u8981\u8bbe\u7f6e\u4e3a\u7edd\u5bf9\u5c0f\u4e8e ``K`` , \u56e0\u4e3achannel\u7684\u521b\u5efa\u9700\u8981\u4e0d\u5c11\u4e8e ``N`` \u4e2abroker\u662f\u542f\u52a8\u7684. \u6240\u4ee5\u5982\u679c\u8bbe\u7f6e N = K , \u4e00\u4e2a broker \u5b95\u673a\u5c31\u610f\u5473\u7740\u533a\u5757\u94fe\u7f51\u7edc\u4e0d\u80fd\u518d\u521b\u5efachannel. \u90a3\u4e48\u6545\u969c\u5bb9\u9519\u7684\u6392\u5e8f\u670d\u52a1\u4e5f\u5c31\u4e0d\u5b58\u5728\u4e86.\n\n\nd. ``message.max.bytes`` and ``replica.fetch.max.bytes`` should be set to a\nvalue larger than ``A``, the value you picked in\n``Orderer.AbsoluteMaxBytes`` in Step 2 above. Add some buffer to account for\nheaders -- 1 MiB is more than enough. The following condition applies:\n\nd. ``message.max.bytes`` \u548c ``replica.fetch.max.bytes`` \u7684\u503c\u9700\u8981\u5927\u4e8e ``A``, \u5c31\u662f\u5728\u6b65\u9aa42\u4e2d\u9009\u53d6\u7684 ``Orderer.AbsoluteMaxBytes`` \u7684\u503c. \u518d\u4e3a\u533a\u5757\u5934\u589e\u52a0\u4e00\u4e9b\u4f59\u91cf -- 1 MiB \u5c31\u8db3\u591f\u4e86. \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n\n::\n\n    Orderer.AbsoluteMaxBytes   replica.fetch.max.bytes  = message.max.bytes\n\n(For completeness, we note that ``message.max.bytes`` should be strictly\nsmaller to ``socket.request.max.bytes`` which is set by default to 100 MiB.\nIf you wish to have blocks larger than 100 MiB you will need to edit the\nhard-coded value in ``brokerConfig.Producer.MaxMessageBytes`` in\n``fabric/orderer/kafka/config.go`` and rebuild the binary from source.\nThis is not advisable.)\n\n(\u8865\u5145, \u6211\u4eec\u6ce8\u610f\u5230 ``message.max.bytes`` \u9700\u8981\u4e25\u683c\u5c0f\u4e8e ``socket.request.max.bytes`` , \u8fd9\u4e2a\u503c\u9ed8\u8ba4\u662f100Mib. \u5982\u679c\u4f60\u5e0c\u671b\u533a\u5757\u5927\u4e8e100MiB, \u4f60\u9700\u8981\u53bb\u4fee\u6539\u786c\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf ``brokerConfig.Producer.MaxMessageBytes`` , \u4ee3\u7801\u4f4d\u7f6e\u662f ``fabric/orderer/kafka/config.go`` , \u518d\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801, \u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a.)\n\ne. ``log.retention.ms = -1``. Until the ordering service adds\nsupport for pruning of the Kafka logs, you should disable time-based\nretention and prevent segments from expiring. (Size-based retention -- see\n``log.retention.bytes`` -- is disabled by default in Kafka at the time of\nthis writing, so there's no need to set it explicitly.)\n\ne. ``log.retention.ms = -1``. \u76f4\u5230\u6392\u5e8f\u670d\u52a1\u589e\u52a0\u4e86\u5bf9\u4e8e Kafka \u65e5\u5fd7\u5206\u5272(pruning)\u7684\u652f\u6301\u4e4b\u524d, \u5e94\u8be5\u7981\u7528\u57fa\u4e8e\u65f6\u95f4\u5206\u5272\u7684\u65b9\u5f0f\u4ee5\u907f\u514d\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u5230\u671f\u5206\u6bb5. (\u57fa\u4e8e\u6587\u4ef6\u5927\u5c0f\u7684\u5206\u5272\u65b9\u5f0f -- \u770b\u53c2\u6570 ``log.retention.bytes`` -- \u5728\u672c\u6587\u4e66\u5199\u65f6, \u5728 Kafka \u4e2d\u662f\u9ed8\u8ba4\u88ab\u7981\u7528\u7684, \u6240\u4ee5\u8fd9\u4e2a\u503c\u6ca1\u6709\u5fc5\u8981\u6307\u5b9a\u5730\u5f88\u660e\u786e. )\n\nBased on what we've described above, the minimum allowed values for ``M``\nand ``N`` are 2 and 3 respectively. This configuration allows for the\ncreation of new channels to go forward, and for all channels to continue to\nbe writeable.\n\n\u57fa\u4e8e\u4e0a\u6587\u6240\u63cf\u8ff0\u7684, ``M`` \u548c ``N`` \u7684\u6700\u5c0f\u503c\u5206\u522b\u4e3a 2 \u548c 3 . \u8fd9\u4e2a\u914d\u7f6e\u53ef\u4ee5\u521b\u5efa channel \u5e76\u8ba9\u6240\u6709 channel \u90fd\u662f\u968f\u65f6\u53ef\u4ee5\u5199\u5165\u7684.   Orderers:  Point each OSN to the genesis block.  Edit General.GenesisFile  in  orderer.yaml  so that it points to the genesis\nblock created in Step 3 above. (While at it, ensure all other keys in that YAML\nfile are set appropriately.)   Orderers:  \u5c06\u6240\u6709\u6392\u5e8f\u8282\u70b9\u6307\u5411\u521d\u59cb\u533a\u5757.  \u7f16\u8f91  orderer.yaml  \u6587\u4ef6\u4e2d\u7684\u53c2\u6570  General.GenesisFile  \u4f7f\u5176\u6307\u5411\u6b65\u9aa43\u4e2d\u6240\u521b\u5efa\u7684\u521d\u59cb\u533a\u5757. (\u540c\u65f6, \u786e\u4fddYAML\u6587\u4ef6\u4e2d\u6240\u6709\u5176\u4ed6\u53c2\u6570\u90fd\u662f\u6b63\u786e\u7684.)    Orderers:  Adjust polling intervals and timeouts.  (Optional step.)\n Orderers:  \u8c03\u6574\u8f6e\u8be2\u95f4\u9694\u548c\u8d85\u65f6\u65f6\u95f4.  (\u53ef\u9009\u6b65\u9aa4.)  a. The  Kafka.Retry  section in the  orderer.yaml  file allows you to\nadjust the frequency of the metadata/producer/consumer requests, as well as\nthe socket timeouts. (These are all settings you would expect to see in a\nKafka producer or consumer.)  a.   orderer.yaml  \u6587\u4ef6\u4e2d\u7684  Kafka.Retry  \u533a\u57df\u8ba9\u4f60\u80fd\u591f\u8c03\u6574  metadata/producer/consumer \u8bf7\u6c42\u7684\u9891\u7387\u4ee5\u53casocket\u7684\u8d85\u65f6\u65f6\u95f4. (\u8fd9\u4e9b\u5e94\u8be5\u5c31\u662f\u6240\u6709\u5728 kafka \u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 \u4e2d\u4f60\u9700\u8981\u7684\u8bbe\u7f6e)  b. Additionally, when a new channel is created, or when an existing channel\nis reloaded (in case of a just-restarted orderer), the orderer interacts\nwith the Kafka cluster in the following ways:  b. \u53e6\u5916, \u5f53\u4e00\u4e2a channel \u88ab\u521b\u5efa, \u6216\u5f53\u4e00\u4e2a\u73b0\u6709\u7684 channel \u88ab\u91cd\u65b0\u8bfb\u53d6(\u521a\u542f\u52a8 orderer \u7684\u60c5\u51b5), orderer \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c Kafka \u96c6\u7fa4\u8fdb\u884c\u4ea4\u4e92.   a. It creates a Kafka producer (writer) for the Kafka partition that\ncorresponds to the channel.\n\na. \u4e3a channel \u5bf9\u5e94\u7684 Kafka \u5206\u533a \u521b\u5efa\u4e00\u4e2a Kafka \u751f\u4ea7\u8005.\n\nb. It uses that producer to post a no-op ``CONNECT`` message to that\npartition.\n\nb. \u901a\u8fc7\u751f\u4ea7\u8005\u5411\u8fd9\u4e2a\u5206\u533a\u53d1\u4e00\u4e2a\u7a7a\u7684\u8fde\u63a5\u4fe1\u606f.\n\nc. It creates a Kafka consumer (reader) for that partition.\n\nc. \u4e3a\u8fd9\u4e2a\u5206\u533a\u521b\u5efa\u4e00\u4e2a Kafka \u6d88\u8d39\u8005.\n\nIf any of these steps fail, you can adjust the frequency with which they\nare repeated. Specifically they will be re-attempted every\n``Kafka.Retry.ShortInterval`` for a total of ``Kafka.Retry.ShortTotal``,\nand then every ``Kafka.Retry.LongInterval`` for a total of\n``Kafka.Retry.LongTotal`` until they succeed. Note that the orderer will\nbe unable to write to or read from a channel until all of the steps\nabove have been completed successfully.\n\n\u5982\u679c\u4efb\u610f\u6b65\u9aa4\u51fa\u9519, \u4f60\u53ef\u4ee5\u8c03\u6574\u5176\u91cd\u590d\u7684\u9891\u7387. \n\u8fd9\u4e9b\u6b65\u9aa4\u4f1a\u5728\u6bcf\u4e00\u4e2a Kafka.Retry.ShortInterval \u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u540e\u8fdb\u884c\u91cd\u8bd5 Kafka.Retry.ShortTotal \u6b21, \n\u518d\u4ee5 Kafka.Retry.LongInterval \u89c4\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91cd\u8bd5 Kafka.Retry.LongTotal \u6b21\u76f4\u5230\u6210\u529f. \n\u9700\u8981\u6ce8\u610f\u7684\u662f orderer \u4e0d\u80fd\u8bfb\u5199\u8be5 channel \u7684\u6570\u636e\u76f4\u5230\u6240\u6709\u4e0a\u8ff0\u6b65\u9aa4\u90fd\u6210\u529f\u6267\u884c.    Set up the OSNs and Kafka cluster so that they communicate over SSL. \n(Optional step, but highly recommended.) Refer to  the Confluent guide http://docs.confluent.io/2.0.0/kafka/ssl.html _ for the Kafka cluster side of\nthe equation, and set the keys under  Kafka.TLS  in  orderer.yaml  on every\nOSN accordingly.    \u5c06\u6392\u5e8f\u8282\u70b9\u548c Kafka \u96c6\u7fa4\u95f4\u8bbe\u7f6e\u4e3a\u901a\u8fc7 SSL \u901a\u8baf.  \n(\u53ef\u9009\u6b65\u9aa4,\u5f3a\u70c8\u63a8\u8350) \u53c2\u8003  the Confluent guide http://docs.confluent.io/2.0.0/kafka/ssl.html _ \u6587\u6863\u4e2d\u5173\u4e8e Kafka \u96c6\u7fa4\u7684\u8bbe\u7f6e, \u6765\u8bbe\u7f6e\u6bcf\u4e2a\u6392\u5e8f\u8282\u70b9  orderer.yaml  \u6587\u4ef6\u4e2d   Kafka.TLS  \u90e8\u5206\u7684\u5185\u5bb9.   Bring up the nodes in the following order: ZooKeeper ensemble, Kafka\ncluster, ordering service nodes.   \u542f\u52a8\u8282\u70b9\u8bf7\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f: ZooKeeper \u96c6\u7fa4, Kafka \u96c6\u7fa4, \u6392\u5e8f\u8282\u70b9", 
            "title": "\u6b65\u9aa4\uff08Steps\uff09"
        }, 
        {
            "location": "/kafka_zh/#additional-considerations", 
            "text": "Preferred message size.  In Step 2 above (see  Steps _ section) you can\nalso set the preferred size of blocks by setting the Orderer.Batchsize.PreferredMaxBytes  key. Kafka offers higher throughput when\ndealing with relatively small messages; aim for a value no bigger than 1 MiB.   \u9996\u9009\u7684\u6d88\u606f\u5927\u5c0f.  \u5728\u4e0a\u9762\u7684\u6b65\u9aa42\u4e2d, \u4f60\u4e5f\u80fd\u901a\u8fc7\u53c2\u6570  Orderer.Batchsize.PreferredMaxBytes  \u8bbe\u7f6e\u9996\u9009\u7684\u533a\u5757\u5927\u5c0f.\nKafka \u5904\u7406\u76f8\u5bf9\u8f83\u5c0f\u7684\u4fe1\u606f\u6709\u66f4\u9ad8\u7684\u541e\u5410\u91cf; \u9488\u5bf9\u5c0f\u4e8e 1 MiB \u5927\u5c0f\u7684\u503c.   Using environment variables to override settings.  You can override a\nKafka broker or a ZooKeeper server s settings by using environment variables.\nReplace the dots of the configuration key with underscores  \ne.g.  KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false  will allow you to override\nthe default value of  unclean.leader.election.enable . The same applies to the\nOSNs for their  local  configuration, i.e. what can be set in  orderer.yaml .\nFor example  ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s  allows you to override the\ndefault value for  Orderer.Kafka.Retry.ShortInterval .   \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u91cd\u5199\u8bbe\u7f6e.  \u4f60\u80fd\u591f\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u91cd\u5199 Kafka \u8282\u70b9\u548c Zookeeper \u670d\u52a1\u5668\u7684\u8bbe\u7f6e. \u66ff\u6362\u914d\u7f6e\u53c2\u6570\u4e2d\u7684 \u70b9 \u4e3a \u4e0b\u5212\u7ebf   \u4f8b\u5982  KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false  \u73af\u5883\u53d8\u91cf\u91cd\u5199\u914d\u7f6e\u53c2\u6570  unclean.leader.election.enable . \u73af\u5883\u53d8\u91cf\u91cd\u5199\u540c\u6837\u9002\u7528\u4e8e\u6392\u5e8f\u8282\u70b9\u7684 \u672c\u5730 \u914d\u7f6e, \u5373  orderer.yaml  \u4e2d\u6240\u80fd\u8bbe\u7f6e\u7684. \u4f8b\u5982  ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s  \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u91cd\u5199\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684  Orderer.Kafka.Retry.ShortInterval .", 
            "title": "\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879\uff08Additional considerations\uff09"
        }, 
        {
            "location": "/kafka_zh/#supported-kafka-versions-and-upgrading", 
            "text": "", 
            "title": "Supported Kafka versions and upgrading"
        }, 
        {
            "location": "/kafka_zh/#kafka", 
            "text": "Supported Kafka versions for v1 are  0.9  and  0.10 . (Hyperledger Fabric\nuses the  sarama client library  https://github.com/Shopify/sarama _\nand vendors a version of it that supports Kafka 0.9 and 0.10.)  Fabric V1 \u652f\u6301\u7684 Kafka \u7248\u672c\u662f  0.9  \u548c  0.10 . (Hyperledger Fabric \u4f7f\u7528\u4ee3\u7801\u5e93:  sarama client library  https://github.com/Shopify/sarama _ \u652f\u6301\u7684 Kafka \u7248\u672c\u662f  0.9  \u548c  0.10 )  Out of the box the Kafka version defaults to  0.9.0.1 . If you wish to use a\ndifferent supported version, specify a supported version using the Kafka.Version  key in  orderer.yaml .  \u9ed8\u8ba4\u7684 Kafka \u7248\u672c\u662f  0.9.0.1 . \u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u7684\u7248\u672c, \u4fee\u6539  orderer.yaml  \u6587\u4ef6\u4e2d\u7684\u53c2\u6570  Kafka.Version .  The current supported Kafka versions are:  \u76ee\u524d\u652f\u6301\u7684 Kafka \u7248\u672c\u662f:   Version: 0.9.0.1  Version: 0.10.0.0  Version: 0.10.0.1  Version: 0.10.1.0", 
            "title": "\u652f\u6301\u7684 Kafka \u7248\u672c\u548c\u5347\u7ea7"
        }, 
        {
            "location": "/kafka_zh/#debugging", 
            "text": "Set  General.LogLevel  to  DEBUG  and  Kafka.Verbose  in  orderer.yaml \nto  true .  \u8bbe\u7f6e  orderer.yaml  \u6587\u4ef6\u4e2d  General.LogLevel  \u4e3a  DEBUG  \u548c  Kafka.Verbose  \u4e3a  true .", 
            "title": "\u8c03\u8bd5\uff08Debugging\uff09"
        }, 
        {
            "location": "/kafka_zh/#example", 
            "text": "Sample Docker Compose configuration files inline with the recommended settings\nabove can be found under the  fabric/bddtests  directory. Look for dc-orderer-kafka-base.yml  and  dc-orderer-kafka.yml .  \u5305\u542b\u4e86\u63a8\u8350\u7684\u8bbe\u7f6e\u7684Docker Compose \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u80fd\u591f\u5728  fabric/bddtests  \u76ee\u5f55\u4e2d\u627e\u5230. \u5305\u62ec  dc-orderer-kafka-base.yml  \u6587\u4ef6\u548c  dc-orderer-kafka.yml  \u6587\u4ef6.  .. Licensed under Creative Commons Attribution 4.0 International License\n   https://creativecommons.org/licenses/by/4.0/", 
            "title": "\u4f8b\u5b50\uff08Example\uff09"
        }, 
        {
            "location": "/channels_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYi Zeng\n\n\n\n\n\n\n\n\n\n\nA Hyperledger Fabric channel is a private \u201csubnet\u201d of communication between two or more specific network members, for the purpose of conducting private and confidential transactions. A channel is defined by members (organizations), anchor peers per member, the shared ledger, chaincode application(s) and the ordering service node(s). Each transaction on the network is executed on a channel, where each party must be authenticated and authorized to transact on that channel. Each peer that joins a channel, has its own identity given by a membership services provider (MSP), which authenticates each peer to its channel peers and services.\n\n\n\u5728\u8d85\u7ea7\u8d26\u672cFabric\u4e2d\uff0c\u4e00\u4e2a\u901a\u9053\u662f\u6307\u4e00\u4e2a\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u7279\u5b9a\u7f51\u7edc\u6210\u5458\u95f4\u7684\u4e13\u95e8\u4e3a\u79c1\u4eba\u7684\u548c\u673a\u5bc6\u7684\u4ea4\u6613\u4e3a\u76ee\u7684\u800c\u5efa\u7acb\u7684\u79c1\u6709\n\u5b50\u7f51\n\u3002\u4e00\u4e2a\u901a\u9053\u7684\u5b9a\u4e49\u4e2d\u5305\u542b\uff1a\u6210\u5458\uff08\u7ec4\u7ec7\uff09\uff0c\u6bcf\u4e2a\u6210\u5458\u7684\u951a\u8282\u70b9\uff0c\u5171\u4eab\u5e10\u672c\uff0c\u94fe\u4e0a\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u548c\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u3002\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e2a\u4ea4\u6613\u90fd\u5728\u4e00\u4e2a\u6307\u5b9a\u7684\u901a\u9053\u4e2d\u6267\u884c\uff0c\u5728\u901a\u9053\u4e2d\u4ea4\u6613\u5fc5\u987b\u901a\u8fc7\u901a\u9053\u4e2d\u7684\u6bcf\u90e8\u5206\u7684\u8ba4\u8bc1\u548c\u6388\u6743\u3002\u8981\u52a0\u5165\u4e00\u4e2a\u901a\u9053\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5fc5\u987b\u6709\u81ea\u5df1\u7684\u901a\u8fc7\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u5546\uff08MSP\uff09\u83b7\u5f97\u7684\u8eab\u4efd\u6807\u8bc6\uff0c\u7528\u4e8e\u9274\u5b9a\u6bcf\u4e2a\u8282\u70b9\u5728\u901a\u9053\u4e2d\u7684\u662f\u4ec0\u4e48\u8282\u70b9\u548c\u670d\u52a1\u3002\n\n\nTo create a new channel, the client SDK calls configuration system chaincode and references properties such as anchor peer\ns, and members (organizations). This request creates a \ngenesis block for the channel ledger, which stores configuration information about the channel policies, members and anchor peers. When adding a new member to an existing channel, either this genesis block, or if applicable, a more recent reconfiguration block, is shared with the new member.\n\n\n\u8981\u521b\u5efa\u4e00\u4e2a\u901a\u9053\uff0c\u5ba2\u6237\u7aefSDK\u8c03\u7528\u914d\u7f6e\u7cfb\u7edf\u94fe\u4e0a\u4ee3\u7801\u548c\u53c2\u8003\u5c5e\u6027\uff0c\u6bd4\u5982\u951a\u8282\u70b9\u548c\u6210\u5458\uff08\u7ec4\u7ec7\uff09\u3002\u8fd9\u4e2a\u8bf7\u6c42\u4f1a\u4e3a\u901a\u9053\u7684\u8d26\u672c\u521b\u5efa\u4e00\u4e2a\u521b\u4e16\u533a\u5757\uff0c\u7528\u4e8e\u5b58\u50a8\u5173\u4e8e\u901a\u9053\u7684\u7b56\u7565\uff0c\u6210\u5458\u548c\u951a\u8282\u70b9\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5f53\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u6210\u5458\u5230\u73b0\u6709\u901a\u9053\u65f6\uff0c\u8fd9\u4e2a\u521b\u4e16\u533a\u5757\uff0c\u6216\u8005\u6700\u65b0\u7684\u65b0\u914d\u7f6e\u533a\u5757\uff08\u5982\u679c\u53ef\u7528\uff09\uff0c\u5c06\u4f1a\u5171\u4eab\u7ed9\u8fd9\u4e2a\u65b0\u6210\u5458\u3002\n\n\nNote\n\u6ce8\u610f\n\n\nSee the Channel Configuration (configtx) section for more more details on the properties and proto structures of config transactions.\n\n\n\u53c2\u8003\u901a\u9053\u914d\u7f6e\uff08configtx\uff09\u7ae0\u8282\uff0c\u53ef\u4ee5\u67e5\u770b\u66f4\u591a\u5173\u4e8e\u4ea4\u6613\u7684\u914d\u7f6e\u5c5e\u6027\u548c\u5178\u578b\u7684\u7ed3\u6784\u7684\u660e\u7ec6\u4fe1\u606f\u3002\n\n\nThe election of a leading peer for each member on a channel determines which peer communicates with the ordering service on behalf of the member. If no leader is identified, an algorithm can be used to identify the leader. The consensus service orders transactions and delivers them, in a block, to each leading peer, which then distributes the block to its member peers, and across the channel, using the gossip protocol.\n\n\n\u4ece\u901a\u9053\u7684\u6240\u6709\u8282\u70b9\u4e2d\u9009\u4e3e\u51fa\u7684\u9886\u5bfc\u8282\u70b9\u51b3\u5b9a\u54ea\u4e2a\u8282\u70b9\u7528\u4e8e\u4ee3\u8868\u5176\u4ed6\u6210\u5458\u8282\u70b9\u4e0e\u6392\u5e8f\u670d\u52a1\u901a\u8baf\u3002\u5982\u679c\u8fd8\u6ca1\u6709\u9886\u5bfc\u8282\u70b9\uff0c\u90a3\u4e48\u4e00\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6807\u8bc6\u51fa\u9886\u5bfc\u8282\u70b9\u3002\u5171\u8bc6\u670d\u52a1\u5bf9\u4ea4\u6613\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u6253\u5305\u6210\u533a\u5757\uff0c\u53d1\u9001\u533a\u5757\u7ed9\u6bcf\u4e2a\u9886\u5bfc\u8282\u70b9\uff0c\u7136\u540e\u9886\u5bfc\u8282\u70b9\u628a\u533a\u5757\u5206\u53d1\u7ed9\u5176\u6210\u5458\u8282\u70b9\uff0c\u7136\u540e\u4f7f\u7528gossip\u534f\u8bae\u7a7f\u8fc7\u901a\u9053\u3002\n\n\nAlthough any one anchor peer can belong to multiple channels, and therefore maintain multiple ledgers, no ledger data can pass from one channel to another. This separation of ledgers, by channel, is defined and implemented by configuration chaincode, the identity membership service and the gossip data dissemination protocol. The dissemination of data, which includes information on transactions, ledger state and channel membership, is restricted to peers with verifiable membership on the channel. This isolation of peers and ledger data, by channel, allows network members that require private and confidential transactions to coexist with business competitors and other restricted members, on the same blockchain network.\n\n\n\u867d\u7136\u4efb\u610f\u4e00\u4e2a\u951a\u8282\u70b9\u90fd\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u800c\u4e14\u7ef4\u62a4\u4e86\u591a\u4e2a\u8d26\u672c\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u8d26\u672c\u6570\u636e\u4f1a\u4ece\u4e00\u4e2a\u901a\u9053\u4f20\u5230\u53e6\u4e00\u4e2a\u901a\u9053\u3002\u8fd9\u5c31\u662f\u6839\u636e\u901a\u9053\u5bf9\u8d26\u672c\u7684\u5206\u79bb\uff0c\u8fd9\u79cd\u5206\u79bb\u662f\u5728\u914d\u7f6e\u94fe\u4e0a\u4ee3\u7801\uff0c\u6210\u5458\u6807\u8bc6\u670d\u52a1\u548cgossip\u4f20\u64ad\u534f\u8bae\u4e2d\u5b9a\u4e49\u548c\u5b9e\u73b0\u3002\u6570\u636e\u7684\u4f20\u64ad\uff0c\u5305\u62ec\u4ea4\u6613\u7684\u4fe1\u606f\uff0c\u8d26\u672c\u72b6\u6001\u548c\u901a\u9053\u6210\u5458\u7b49\u90fd\u5728\u901a\u9053\u5185\u53d7\u9650\u5236\u7684\u9a8c\u8bc1\u6210\u5458\u8eab\u4efd\u7684\u8282\u70b9\u4e4b\u95f4\u3002\u8fd9\u79cd\u6839\u636e\u901a\u9053\u5bf9\u8282\u70b9\u548c\u8d26\u672c\u6570\u636e\u8fdb\u884c\u9694\u79bb\uff0c\u5141\u8bb8\u7f51\u7edc\u6210\u5458\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u8bf7\u6c42\u79c1\u6709\u7684\u548c\u4fdd\u5bc6\u7684\u4ea4\u6613\u7ed9\u4e1a\u52a1\u4e0a\u7684\u7ade\u4e89\u5bf9\u624b\u548c\u5176\u4ed6\u53d7\u9650\u7684\u6210\u5458\u3002", 
            "title": "Channels"
        }, 
        {
            "location": "/ledger_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYuan Jin\n\n\nLinsheng Yu\n\n\n\n\n\n\n\n\nLedger - \u8d26\u672c\n\n\nThe ledger is the sequenced, tamper-resistant record of all state transitions in the fabric. State transitions are a result of chaincode invocations (\u2018transactions\u2019) submitted by participating parties. Each transaction results in a set of asset key-value pairs that are committed to the ledger as creates, updates, or deletes.\n\n\n\u8d26\u672c\u662fFabric\u4e2d\u6240\u6709\u72b6\u6001\u8f6c\u6362\u7684\u8bb0\u5f55\uff0c\u5177\u6709\u6709\u5e8f\u548c\u9632\u7be1\u6539\u7684\u7279\u70b9\u3002\u72b6\u6001\u8f6c\u6362\u662f\u53c2\u4e0e\u5404\u65b9\u63d0\u4ea4\u94fe\u4ee3\u7801\u8c03\u7528\uff08\u4ea4\u6613\uff09\u4ea7\u751f\u7684\u7ed3\u679c\u3002\u6bcf\u4e2a\u4ea4\u6613\u4f1a\u4ea7\u751f\u4e00\u7ec4\u8d44\u4ea7\u952e\u503c\u5bf9\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f5c\u4e3a\u201c\u521b\u5efa\u201d\u3001\u201c\u66f4\u65b0\u201d\u6216\u8005\u201c\u5220\u9664\u201d\u63d0\u4ea4\u7ed9\u8d26\u672c\u3002\n\n\nThe ledger is comprised of a blockchain (\u2018chain\u2019) to store the immutable, sequenced record in blocks, as well as a state database to maintain current fabric state. There is one ledger per channel. Each peer maintains a copy of the ledger for each channel of which they are a member.\n\n\n\u8d26\u672c\u7531\u4e00\u4e2a\u533a\u5757\u94fe\uff08\u94fe\uff09\u6784\u6210\uff0c\u5e76\u5c06\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u8bb0\u5f55\u5b58\u653e\u5728\u533a\u5757\u4e2d\uff1b\u540c\u65f6\u5305\u542b\u4e00\u4e2a\u72b6\u6001\u6570\u636e\u5e93\u6765\u8bb0\u5f55\u5f53\u524d\u7684Fabric\u72b6\u6001\u3002\u6bcf\u4e2a\u901a\u9053\u4e2d\u5404\u6709\u4e00\u4e2a\u8d26\u672c\u3002\u5404\u4e2a\u8282\u70b9\u5bf9\u4e8e\u5b83\u6240\u5c5e\u7684\u6bcf\u4e2a\u901a\u9053\uff0c\u90fd\u4f1a\u4fdd\u5b58\u4e00\u4efd\u8be5\u901a\u9053\u7684\u8d26\u672c\u526f\u672c\u3002\n\n\nChain - \u94fe\n\n\nThe chain is a transaction log, structured as hash-linked blocks, where each block contains a sequence of N transactions. The block header includes a hash of the block\u2019s transactions, as well as a hash of the prior block\u2019s header. In this way, all transactions on the ledger are sequenced and cryptographically linked together. In other words, it is not possible to tamper with the ledger data, without breaking the hash links. The hash of the latest block represents every transaction that has come before, making it possible to ensure that all peers are in a consistent and trusted state.\n\n\n\u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u65e5\u5fd7\uff0c\u5b83\u7531\u54c8\u5e0c\u503c\u94fe\u63a5\u7684\u533a\u5757\u6784\u9020\u800c\u6210\uff0c\u6bcf\u4e2a\u533a\u5757\u5305\u542bN\u4e2a\u6709\u5e8f\u7684\u4ea4\u6613\u3002\u5757\u5934\u4e2d\u5305\u542b\u4e86\u672c\u533a\u5757\u6240\u8bb0\u5f55\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff0c\u4ee5\u53ca\u4e0a\u4e00\u4e2a\u533a\u5757\u5934\u7684\u54c8\u5e0c\u503c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8d26\u672c\u4e2d\u7684\u6240\u6709\u4ea4\u6613\u90fd\u88ab\u6709\u5e8f\u7684\u3001\u52a0\u5bc6\u7684\u5f62\u5f0f\u4e32\u8054\u5728\u4e86\u4e00\u8d77\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e0d\u7834\u574f\u54c8\u5e0c\u94fe\u7684\u8bdd\uff0c\u662f\u65e0\u6cd5\u7be1\u6539\u8d26\u672c\u6570\u636e\u7684\u3002\u6700\u65b0\u533a\u5757\u7684\u54c8\u5e0c\u662f\u4e4b\u524d\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4f53\u73b0\uff0c\u4ece\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u8282\u70b9\u5904\u4e8e\u4e00\u81f4\u7684\u53ef\u4fe1\u4efb\u7684\u72b6\u6001\u3002\n\n\nThe chain is stored on the peer file system (either local or attached storage), efficiently supporting the append-only nature of the blockchain workload.\n\n\n\u94fe\u88ab\u5b58\u653e\u4e8e\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff08\u672c\u5730\u7684\u6216\u8005\u6302\u8f7d\u7684\uff09\uff0c\u6709\u6548\u5730\u652f\u6301\u7740\u533a\u5757\u94fe\u5de5\u4f5c\u91cf\u53ea\u8ffd\u52a0\u7684\u7279\u6027\u3002\n\n\nState Database - \u72b6\u6001\u6570\u636e\u5e93\n\n\nThe ledger\u2019s current state data represents the latest values for all keys ever included in the chain transaction log. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State.\n\n\n\u8d26\u672c\u7684\u5f53\u524d\u72b6\u6001\u4fe1\u606f\u5448\u73b0\u7684\u662f\u94fe\u4ea4\u6613\u65e5\u5fd7\u4e2d\u8bb0\u5f55\u8fc7\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u3002\u7531\u4e8e\u5f53\u524d\u72b6\u6001\u8868\u793a\u7684\u662f\u901a\u9053\u5df2\u77e5\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\uff0c\u7531\u6b64\u4e5f\u5e38\u88ab\u79f0\u4f5c\u4e16\u754c\u72b6\u6001\u3002\n\n\nChaincode invocations execute transactions against the current state data. To make these chaincode interactions extremely efficient, the latest values of all keys are stored in a state database. The state database is simply an indexed view into the chain\u2019s transaction log, it can therefore be regenerated from the chain at any time. The state database will automatically get recovered (or generated if needed) upon peer startup, before transactions are accepted.\n\n\n\u94fe\u7801\u8c03\u7528\u57fa\u4e8e\u5f53\u524d\u7684\u72b6\u6001\u6570\u636e\u6267\u884c\u4ea4\u6613\u3002\u4e3a\u4e86\u4f7f\u94fe\u7801\u8c03\u7528\u9ad8\u6548\u8fd0\u884c\uff0c\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u88ab\u5b58\u50a8\u5728\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002\u72b6\u6001\u6570\u636e\u5e93\u662f\u94fe\u7684\u4ea4\u6613\u65e5\u5fd7\u7684\u7d22\u5f15\u89c6\u56fe\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u968f\u65f6\u4ece\u94fe\u4e2d\u91cd\u65b0\u5bfc\u51fa\u3002\u8282\u70b9\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5728\u63a5\u53d7\u4ea4\u6613\u4e4b\u524d\uff0c\u72b6\u6001\u6570\u636e\u5e93\u5c06\u88ab\u81ea\u52a8\u6062\u590d\uff08\u6216\u8005\u6839\u636e\u9700\u8981\u4ea7\u751f\uff09\u3002\n\n\nTransaction Flow - \u4ea4\u6613\u6d41\u7a0b\n\n\nAt a high level, the transaction flow consists of a transaction proposal sent by an application client to specific endorsing peers. The endorsing peers verify the client signature, and execute a chaincode function to simulate the transaction. The output is the chaincode results, a set of key/value versions that were read in the chaincode (read set), and the set of keys/values that were written in chaincode (write set). The proposal response gets sent back to the client along with an endorsement signature.\n\n\n\u6982\u62ec\u800c\u8a00\uff0c\u4ea4\u6613\u6d41\u7a0b\u7531\u5e94\u7528\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9\u80cc\u4e66\u8282\u70b9\u4ea4\u6613\u63d0\u6848\u7ec4\u6210\u3002\u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7684\u7b7e\u540d\uff0c\u7136\u540e\u6267\u884c\u94fe\u7801\u6765\u6a21\u62df\u4ea4\u6613\u3002\u4ea7\u751f\u7684\u8f93\u51fa\u5c31\u662f\u94fe\u7801\u7ed3\u679c\uff0c\u4e00\u7ec4\u94fe\u7801\u8bfb\u53d6\u7684\u952e\u503c\u7248\u672c\uff08\u8bfb\u96c6\u5408\uff09\uff0c\u548c\u4e00\u7ec4\u88ab\u5199\u5165\u94fe\u7801\u7684\u952e\u503c\u96c6\u5408\uff08\u5199\u96c6\u5408\uff09\u3002\u4ea4\u6613\u63d0\u6848\u7684\u54cd\u5e94\u88ab\u53d1\u9001\u56de\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u5305\u542b\u4e86\u80cc\u4e66\u7b7e\u540d\u3002\n\n\nThe client assembles the endorsements into a transaction payload and broadcasts it to an ordering service. The ordering service delivers ordered transactions as blocks to all peers on a channel.\n\n\n\u5ba2\u6237\u7aef\u6c47\u603b\u6240\u6709\u7684\u80cc\u4e66\u5230\u4e00\u4e2a\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\uff0c\u5e76\u5c06\u5b83\u5e7f\u64ad\u5230\u6392\u5e8f\u670d\u52a1\u3002\u6392\u5e8f\u670d\u52a1\u5c06\u6392\u597d\u5e8f\u7684\u4ea4\u6613\u653e\u5165\u533a\u5757\u5e76\u53d1\u9001\u5230\u901a\u9053\u5185\u7684\u6240\u6709\u8282\u70b9\u3002\n\n\nBefore committal, peers will validate the transactions. First, they will check the endorsement policy to ensure that the correct allotment of the specified peers have signed the results, and they will authenticate the signatures against the transaction payload.\n\n\n\u5728\u63d0\u4ea4\u4e4b\u524d\uff0c\u8282\u70b9\u4eec\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u3002\u9996\u5148\u5b83\u4eec\u4f1a\u68c0\u67e5\u80cc\u4e66\u7b56\u7565\u6765\u4fdd\u8bc1\u8db3\u591f\u7684\u6307\u5b9a\u8282\u70b9\u6b63\u786e\u5730\u5bf9\u7ed3\u679c\u8fdb\u884c\u4e86\u7b7e\u540d\uff0c\u5e76\u4e14\u4f1a\u8ba4\u8bc1\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\u7684\u7b7e\u540d\u3002\n\n\nSecondly, peers will perform a versioning check against the transaction read set, to ensure data integrity and protect against threats such as double-spending. The fabric has concurrency control whereby transactions execute in parallel (by endorsers) to increase throughput, and upon commit (by all peers) each transaction is verified to ensure that no other transaction has modified data it has read. In other words, it ensures that the data that was read during chaincode execution has not changed since execution (endorsement) time, and therefore the execution results are still valid and can be committed to the ledger state database. If the data that was read has been changed by another transaction, then the transaction in the block is marked as invalid and is not applied to the ledger state database. The client application is alerted, and can handle the error or retry as appropriate.\n\n\n\u5176\u6b21\uff0c\u8282\u70b9\u4eec\u4f1a\u5bf9\u4ea4\u6613\u7684\u8bfb\u96c6\u5408\u8fdb\u884c\u7248\u672c\u68c0\u67e5\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u5e76\u9632\u8303\u4e00\u4e9b\u653b\u51fb\uff0c\u6bd4\u5982\u53cc\u82b1\u3002Fabric\u62e5\u6709\u5e76\u53d1\u63a7\u5236\uff0c\u4ece\u800c\u4ea4\u6613\u53ef\u4ee5\uff08\u88ab\u80cc\u4e66\u8282\u70b9\uff09\u5e76\u884c\u8fd0\u884c\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u800c\u4e14\u5f53\u4ea4\u6613\uff08\u88ab\u8282\u70b9\uff09\u63d0\u4ea4\u65f6\uff0c\u6bcf\u4e2a\u4ea4\u6613\u90fd\u4f1a\u88ab\u9a8c\u8bc1\u6765\u4fdd\u8bc1\u5b83\u6240\u8bfb\u53d6\u7684\u6570\u636e\u6ca1\u6709\u88ab\u5176\u4ed6\u4ea4\u6613\u66f4\u6539\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u786e\u4fdd\u94fe\u7801\u6267\u884c\u671f\u95f4\u6240\u8bfb\u53d6\u7684\u6570\u636e\u4ece\u6267\u884c\uff08\u80cc\u4e66\uff09\u5f00\u59cb\u540e\u6ca1\u6709\u53d8\u52a8\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u88ab\u5176\u4ed6\u4ea4\u6613\u6539\u52a8\u4e86\uff0c\u90a3\u4e48\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u5c06\u88ab\u6807\u8bb0\u6210\u65e0\u6548\u7684\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5e94\u7528\u5230\u8d26\u672c\u72b6\u6001\u6570\u636e\u5e93\u3002\u5ba2\u6237\u7aef\u5e94\u7528\u4f1a\u6536\u5230\u63d0\u9192\uff0c\u4ece\u800c\u8fdb\u884c\u7ea0\u9519\u6216\u9002\u5f53\u91cd\u8bd5\u3002\n\n\nSee the \nTransaction Flow\n and \nRead-Write set semantics\n topics for a deeper dive on transaction structure, concurrency control, and the state DB.\n\n\n\u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u4ea4\u6613\u7684\u7ed3\u6784\uff0c\u5e76\u53d1\u63a7\u5236\u548c\u72b6\u6001\u6570\u636e\u5e93\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\n\u4ea4\u6613\u6d41\u7a0b\n\u548c\n\u8bfb\u5199\u96c6\u5408\u8bed\u8a00\u5b66\n\u3002\n\n\nState Database options - \u72b6\u6001\u6570\u636e\u5e93\u9009\u9879\n\n\nState database options include LevelDB and CouchDB (beta). LevelDB is the default key/value state database embedded in the peer process. CouchDB is an optional alternative external state database. Like the LevelDB key/value store, CouchDB can store any binary data that is modeled in chaincode (CouchDB attachment functionality is used internally for non-JSON binary data). But as a JSON document store, CouchDB additionally enables rich query against the chaincode data, when chaincode values (e.g. assets) are modeled as JSON data.\n\n\n\u72b6\u6001\u6570\u636e\u5e93\u9009\u9879\u5305\u62ecLevelDB\u548cCouchDB(beta)\u3002LevelDB\u662f\u8282\u70b9\u6d41\u7a0b\u4e2d\u96c6\u6210\u7684\u7f3a\u7701\u952e\u503c\u72b6\u6001\u6570\u636e\u5e93\u3002CouchDB\u662f\u53ef\u9009\u7684\u5916\u90e8\u72b6\u6001\u6570\u636e\u5e93\u3002\u7c7b\u4f3c\u4e8eLevelDB\u7684\u952e\u503c\u5e93\uff0cCouchDB\u80fd\u5b58\u50a8\u4efb\u4f55\u94fe\u7801\u4e2d\u5efa\u6a21\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff08CouchDB\u9644\u4ef6\u529f\u80fd\u88ab\u5185\u90e8\u7528\u4e8e\u975eJSON\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u3002\u4f46\u4f5c\u4e3a\u4e00\u4e2aJSON\u683c\u5f0f\u6587\u6863\u5e93\uff0c\u5f53\u94fe\u7801\u7684\u6570\u636e\uff08\u6bd4\u5982\u8d44\u4ea7\uff09\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u65f6\uff0cCouchDB\u989d\u5916\u63d0\u4f9b\u4e86\u8bb8\u591a\u9488\u5bf9\u94fe\u7801\u6570\u636e\u7684\u67e5\u8be2\u65b9\u5f0f\u3002\n\n\nBoth LevelDB and CouchDB support core chaincode operations such as getting and setting a key (asset), and querying based on keys. Keys can be queried by range, and composite keys can be modeled to enable equivalence queries against multiple parameters. For example a composite key of (owner,asset_id) can be used to query all assets owned by a certain entity. These key-based queries can be used for read-only queries against the ledger, as well as in transactions that update the ledger.\n\n\nLevelDB\u548cCouchDB\u90fd\u652f\u6301\u6838\u5fc3\u7684\u94fe\u7801\u64cd\u4f5c\uff0c\u6bd4\u5982\u83b7\u53d6\u548c\u8bbe\u7f6e\u4e00\u4e2a\u952e\uff08\u8d44\u4ea7\uff09\uff0c\u4ee5\u53ca\u57fa\u4e8e\u952e\u8fdb\u884c\u67e5\u8be2\u7b49\u3002\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8303\u56f4\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u6784\u5efa\u7ec4\u5408\u952e\u6765\u8fbe\u5230\u6309\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u67e5\u8be2\u7684\u540c\u7b49\u6548\u679c\u3002\u6bd4\u5982\u4e00\u4e2a\u7ec4\u5408\u952e\uff08\u62e5\u6709\u8005\uff0c\u8d44\u4ea7\u7f16\u53f7\uff09\u53ef\u4ee5\u88ab\u7528\u6765\u67e5\u8be2\u67d0\u5b9e\u4f53\u6240\u62e5\u6709\u7684\u6240\u6709\u8d44\u4ea7\u3002\u8fd9\u4e9b\u57fa\u4e8e\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u88ab\u7528\u505a\u9488\u5bf9\u8d26\u672c\u7684\u53ea\u8bfb\u67e5\u8be2\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u88ab\u5e94\u7528\u5728\u5bf9\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\u7684\u4ea4\u6613\u4e2d\u3002\n\n\nIf you model assets as JSON and use CouchDB, you can also perform complex rich queries against the chaincode data values, using the CouchDB JSON query language within chaincode. These types of queries are excellent for understanding what is on the ledger. Proposal responses for these types of queries are typically useful to the client application, but are not typically submitted as transactions to the ordering service. In fact the fabric does not guarantee the result set is stable between chaincode execution and commit time for rich queries, and therefore rich queries are not appropriate for use in update transactions, unless your application can guarantee the result set is stable between chaincode execution time and commit time, or can handle potential changes in subsequent transactions. For example, if you perform a rich query for all assets owned by Alice and transfer them to Bob, a new asset may be assigned to Alice by another transaction between chaincode execution time and commit time, and you would miss this \u2018phantom\u2019 item.\n\n\n\u5982\u679c\u4f60\u5c06\u8d44\u4ea7\u4ee5JSON\u683c\u5f0f\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u662fCouchDB\uff0c\u90a3\u4f60\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684JSON\u67e5\u8be2\u8bed\u8a00\uff0c\u5bf9\u94fe\u7801\u7684\u6570\u636e\u503c\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002\u8fd9\u4e9b\u67e5\u8be2\u7c7b\u578b\u53ef\u4ee5\u5f88\u597d\u7684\u5e2e\u52a9\u7406\u89e3\u8d26\u672c\u4e2d\u5305\u542b\u4ec0\u4e48\u3002\u67e5\u8be2\u7c7b\u578b\u7684\u63d0\u6848\u54cd\u5e94\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u901a\u5e38\u5f88\u6709\u7528\uff0c\u4f46\u5e76\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u4ea4\u6613\u63d0\u4ea4\u5230\u6392\u5e8f\u670d\u52a1\u3002\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u5bcc\u67e5\u8be2\uff08rich query\uff09\uff0cFabric\u5e76\u4e0d\u4fdd\u8bc1\u7ed3\u679c\u96c6\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u8fc7\u7a0b\u4e2d\u95f4\u662f\u7a33\u5b9a\u7684\uff0c\u6216\u8005\u80fd\u5904\u7406\u540e\u7eed\u4ea4\u6613\u4e2d\u6f5c\u5728\u7684\u53d8\u5316\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u5bf9\u6240\u6709Alice\u62e5\u6709\u7684\u8d44\u4ea7\u8fdb\u884c\u5bcc\u67e5\u8be2\uff0c\u5e76\u8f6c\u79fb\u7ed9Bob\uff0c\u90a3\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u53e6\u4e00\u4e2a\u4ea4\u6613\u5c06\u4e00\u4e2a\u65b0\u7684\u8d44\u4ea7\u5206\u914d\u7ed9\u4e86Alice\uff0c\u4f60\u5c06\u4f1a\u9519\u5931\u8fd9\u4e2a\u201c\u5e7b\u5f71\u201d\u9879\u3002\n\n\nCouchDB runs as a separate database process alongside the peer, therefore there are additional considerations in terms of setup, management, and operations. You may consider starting with the default embedded LevelDB, and move to CouchDB if you require the additional complex rich queries. It is a good practice to model chaincode asset data as JSON, so that you have the option to perform complex rich queries if needed in the future.\n\n\nCouchDB\u4f5c\u4e3a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u8fdb\u7a0b\u8ddf\u8282\u70b9\u4e00\u8d77\u8fd0\u884c\uff0c\u6240\u4ee5\u5b89\u88c5\u3001\u7ba1\u7406\u548c\u64cd\u4f5c\u7684\u65f6\u5019\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u8003\u8651\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5f00\u59cb\u7684\u65f6\u5019\u7528\u7f3a\u7701\u96c6\u6210\u7684LevelDB\uff0c\u7136\u540e\u5f53\u4f60\u9700\u8981\u989d\u5916\u7684\u590d\u6742\u67e5\u8be2\u65f6\u518d\u5207\u6362\u5230CouchDB\u3002\u5c06\u94fe\u7801\u7684\u8d44\u4ea7\u6570\u636e\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5b9e\u8df5\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u4f60\u5c06\u6765\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002\n\n\nTo enable CouchDB as the state database, configure the /fabric/sampleconfig/core.yaml stateDatabase section.\n\n\n\u5982\u679c\u8981\u7528CouchDB\u4f5c\u4e3a\u72b6\u6001\u6570\u636e\u5e93\uff0c\u9700\u8981\u5bf9/fabric/sampleconfig/core.yaml stateDatabase\u8fd9\u90e8\u5206\u8fdb\u884c\u914d\u7f6e\u3002", 
            "title": "\u8d26\u672c"
        }, 
        {
            "location": "/ledger_zh/#ledger-", 
            "text": "The ledger is the sequenced, tamper-resistant record of all state transitions in the fabric. State transitions are a result of chaincode invocations (\u2018transactions\u2019) submitted by participating parties. Each transaction results in a set of asset key-value pairs that are committed to the ledger as creates, updates, or deletes.  \u8d26\u672c\u662fFabric\u4e2d\u6240\u6709\u72b6\u6001\u8f6c\u6362\u7684\u8bb0\u5f55\uff0c\u5177\u6709\u6709\u5e8f\u548c\u9632\u7be1\u6539\u7684\u7279\u70b9\u3002\u72b6\u6001\u8f6c\u6362\u662f\u53c2\u4e0e\u5404\u65b9\u63d0\u4ea4\u94fe\u4ee3\u7801\u8c03\u7528\uff08\u4ea4\u6613\uff09\u4ea7\u751f\u7684\u7ed3\u679c\u3002\u6bcf\u4e2a\u4ea4\u6613\u4f1a\u4ea7\u751f\u4e00\u7ec4\u8d44\u4ea7\u952e\u503c\u5bf9\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f5c\u4e3a\u201c\u521b\u5efa\u201d\u3001\u201c\u66f4\u65b0\u201d\u6216\u8005\u201c\u5220\u9664\u201d\u63d0\u4ea4\u7ed9\u8d26\u672c\u3002  The ledger is comprised of a blockchain (\u2018chain\u2019) to store the immutable, sequenced record in blocks, as well as a state database to maintain current fabric state. There is one ledger per channel. Each peer maintains a copy of the ledger for each channel of which they are a member.  \u8d26\u672c\u7531\u4e00\u4e2a\u533a\u5757\u94fe\uff08\u94fe\uff09\u6784\u6210\uff0c\u5e76\u5c06\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u8bb0\u5f55\u5b58\u653e\u5728\u533a\u5757\u4e2d\uff1b\u540c\u65f6\u5305\u542b\u4e00\u4e2a\u72b6\u6001\u6570\u636e\u5e93\u6765\u8bb0\u5f55\u5f53\u524d\u7684Fabric\u72b6\u6001\u3002\u6bcf\u4e2a\u901a\u9053\u4e2d\u5404\u6709\u4e00\u4e2a\u8d26\u672c\u3002\u5404\u4e2a\u8282\u70b9\u5bf9\u4e8e\u5b83\u6240\u5c5e\u7684\u6bcf\u4e2a\u901a\u9053\uff0c\u90fd\u4f1a\u4fdd\u5b58\u4e00\u4efd\u8be5\u901a\u9053\u7684\u8d26\u672c\u526f\u672c\u3002", 
            "title": "Ledger - \u8d26\u672c"
        }, 
        {
            "location": "/ledger_zh/#chain-", 
            "text": "The chain is a transaction log, structured as hash-linked blocks, where each block contains a sequence of N transactions. The block header includes a hash of the block\u2019s transactions, as well as a hash of the prior block\u2019s header. In this way, all transactions on the ledger are sequenced and cryptographically linked together. In other words, it is not possible to tamper with the ledger data, without breaking the hash links. The hash of the latest block represents every transaction that has come before, making it possible to ensure that all peers are in a consistent and trusted state.  \u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u65e5\u5fd7\uff0c\u5b83\u7531\u54c8\u5e0c\u503c\u94fe\u63a5\u7684\u533a\u5757\u6784\u9020\u800c\u6210\uff0c\u6bcf\u4e2a\u533a\u5757\u5305\u542bN\u4e2a\u6709\u5e8f\u7684\u4ea4\u6613\u3002\u5757\u5934\u4e2d\u5305\u542b\u4e86\u672c\u533a\u5757\u6240\u8bb0\u5f55\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff0c\u4ee5\u53ca\u4e0a\u4e00\u4e2a\u533a\u5757\u5934\u7684\u54c8\u5e0c\u503c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8d26\u672c\u4e2d\u7684\u6240\u6709\u4ea4\u6613\u90fd\u88ab\u6709\u5e8f\u7684\u3001\u52a0\u5bc6\u7684\u5f62\u5f0f\u4e32\u8054\u5728\u4e86\u4e00\u8d77\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e0d\u7834\u574f\u54c8\u5e0c\u94fe\u7684\u8bdd\uff0c\u662f\u65e0\u6cd5\u7be1\u6539\u8d26\u672c\u6570\u636e\u7684\u3002\u6700\u65b0\u533a\u5757\u7684\u54c8\u5e0c\u662f\u4e4b\u524d\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4f53\u73b0\uff0c\u4ece\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u8282\u70b9\u5904\u4e8e\u4e00\u81f4\u7684\u53ef\u4fe1\u4efb\u7684\u72b6\u6001\u3002  The chain is stored on the peer file system (either local or attached storage), efficiently supporting the append-only nature of the blockchain workload.  \u94fe\u88ab\u5b58\u653e\u4e8e\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff08\u672c\u5730\u7684\u6216\u8005\u6302\u8f7d\u7684\uff09\uff0c\u6709\u6548\u5730\u652f\u6301\u7740\u533a\u5757\u94fe\u5de5\u4f5c\u91cf\u53ea\u8ffd\u52a0\u7684\u7279\u6027\u3002", 
            "title": "Chain - \u94fe"
        }, 
        {
            "location": "/ledger_zh/#state-database-", 
            "text": "The ledger\u2019s current state data represents the latest values for all keys ever included in the chain transaction log. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State.  \u8d26\u672c\u7684\u5f53\u524d\u72b6\u6001\u4fe1\u606f\u5448\u73b0\u7684\u662f\u94fe\u4ea4\u6613\u65e5\u5fd7\u4e2d\u8bb0\u5f55\u8fc7\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u3002\u7531\u4e8e\u5f53\u524d\u72b6\u6001\u8868\u793a\u7684\u662f\u901a\u9053\u5df2\u77e5\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\uff0c\u7531\u6b64\u4e5f\u5e38\u88ab\u79f0\u4f5c\u4e16\u754c\u72b6\u6001\u3002  Chaincode invocations execute transactions against the current state data. To make these chaincode interactions extremely efficient, the latest values of all keys are stored in a state database. The state database is simply an indexed view into the chain\u2019s transaction log, it can therefore be regenerated from the chain at any time. The state database will automatically get recovered (or generated if needed) upon peer startup, before transactions are accepted.  \u94fe\u7801\u8c03\u7528\u57fa\u4e8e\u5f53\u524d\u7684\u72b6\u6001\u6570\u636e\u6267\u884c\u4ea4\u6613\u3002\u4e3a\u4e86\u4f7f\u94fe\u7801\u8c03\u7528\u9ad8\u6548\u8fd0\u884c\uff0c\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u88ab\u5b58\u50a8\u5728\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002\u72b6\u6001\u6570\u636e\u5e93\u662f\u94fe\u7684\u4ea4\u6613\u65e5\u5fd7\u7684\u7d22\u5f15\u89c6\u56fe\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u968f\u65f6\u4ece\u94fe\u4e2d\u91cd\u65b0\u5bfc\u51fa\u3002\u8282\u70b9\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5728\u63a5\u53d7\u4ea4\u6613\u4e4b\u524d\uff0c\u72b6\u6001\u6570\u636e\u5e93\u5c06\u88ab\u81ea\u52a8\u6062\u590d\uff08\u6216\u8005\u6839\u636e\u9700\u8981\u4ea7\u751f\uff09\u3002", 
            "title": "State Database - \u72b6\u6001\u6570\u636e\u5e93"
        }, 
        {
            "location": "/ledger_zh/#transaction-flow-", 
            "text": "At a high level, the transaction flow consists of a transaction proposal sent by an application client to specific endorsing peers. The endorsing peers verify the client signature, and execute a chaincode function to simulate the transaction. The output is the chaincode results, a set of key/value versions that were read in the chaincode (read set), and the set of keys/values that were written in chaincode (write set). The proposal response gets sent back to the client along with an endorsement signature.  \u6982\u62ec\u800c\u8a00\uff0c\u4ea4\u6613\u6d41\u7a0b\u7531\u5e94\u7528\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9\u80cc\u4e66\u8282\u70b9\u4ea4\u6613\u63d0\u6848\u7ec4\u6210\u3002\u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7684\u7b7e\u540d\uff0c\u7136\u540e\u6267\u884c\u94fe\u7801\u6765\u6a21\u62df\u4ea4\u6613\u3002\u4ea7\u751f\u7684\u8f93\u51fa\u5c31\u662f\u94fe\u7801\u7ed3\u679c\uff0c\u4e00\u7ec4\u94fe\u7801\u8bfb\u53d6\u7684\u952e\u503c\u7248\u672c\uff08\u8bfb\u96c6\u5408\uff09\uff0c\u548c\u4e00\u7ec4\u88ab\u5199\u5165\u94fe\u7801\u7684\u952e\u503c\u96c6\u5408\uff08\u5199\u96c6\u5408\uff09\u3002\u4ea4\u6613\u63d0\u6848\u7684\u54cd\u5e94\u88ab\u53d1\u9001\u56de\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u5305\u542b\u4e86\u80cc\u4e66\u7b7e\u540d\u3002  The client assembles the endorsements into a transaction payload and broadcasts it to an ordering service. The ordering service delivers ordered transactions as blocks to all peers on a channel.  \u5ba2\u6237\u7aef\u6c47\u603b\u6240\u6709\u7684\u80cc\u4e66\u5230\u4e00\u4e2a\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\uff0c\u5e76\u5c06\u5b83\u5e7f\u64ad\u5230\u6392\u5e8f\u670d\u52a1\u3002\u6392\u5e8f\u670d\u52a1\u5c06\u6392\u597d\u5e8f\u7684\u4ea4\u6613\u653e\u5165\u533a\u5757\u5e76\u53d1\u9001\u5230\u901a\u9053\u5185\u7684\u6240\u6709\u8282\u70b9\u3002  Before committal, peers will validate the transactions. First, they will check the endorsement policy to ensure that the correct allotment of the specified peers have signed the results, and they will authenticate the signatures against the transaction payload.  \u5728\u63d0\u4ea4\u4e4b\u524d\uff0c\u8282\u70b9\u4eec\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u3002\u9996\u5148\u5b83\u4eec\u4f1a\u68c0\u67e5\u80cc\u4e66\u7b56\u7565\u6765\u4fdd\u8bc1\u8db3\u591f\u7684\u6307\u5b9a\u8282\u70b9\u6b63\u786e\u5730\u5bf9\u7ed3\u679c\u8fdb\u884c\u4e86\u7b7e\u540d\uff0c\u5e76\u4e14\u4f1a\u8ba4\u8bc1\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\u7684\u7b7e\u540d\u3002  Secondly, peers will perform a versioning check against the transaction read set, to ensure data integrity and protect against threats such as double-spending. The fabric has concurrency control whereby transactions execute in parallel (by endorsers) to increase throughput, and upon commit (by all peers) each transaction is verified to ensure that no other transaction has modified data it has read. In other words, it ensures that the data that was read during chaincode execution has not changed since execution (endorsement) time, and therefore the execution results are still valid and can be committed to the ledger state database. If the data that was read has been changed by another transaction, then the transaction in the block is marked as invalid and is not applied to the ledger state database. The client application is alerted, and can handle the error or retry as appropriate.  \u5176\u6b21\uff0c\u8282\u70b9\u4eec\u4f1a\u5bf9\u4ea4\u6613\u7684\u8bfb\u96c6\u5408\u8fdb\u884c\u7248\u672c\u68c0\u67e5\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u5e76\u9632\u8303\u4e00\u4e9b\u653b\u51fb\uff0c\u6bd4\u5982\u53cc\u82b1\u3002Fabric\u62e5\u6709\u5e76\u53d1\u63a7\u5236\uff0c\u4ece\u800c\u4ea4\u6613\u53ef\u4ee5\uff08\u88ab\u80cc\u4e66\u8282\u70b9\uff09\u5e76\u884c\u8fd0\u884c\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u800c\u4e14\u5f53\u4ea4\u6613\uff08\u88ab\u8282\u70b9\uff09\u63d0\u4ea4\u65f6\uff0c\u6bcf\u4e2a\u4ea4\u6613\u90fd\u4f1a\u88ab\u9a8c\u8bc1\u6765\u4fdd\u8bc1\u5b83\u6240\u8bfb\u53d6\u7684\u6570\u636e\u6ca1\u6709\u88ab\u5176\u4ed6\u4ea4\u6613\u66f4\u6539\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u786e\u4fdd\u94fe\u7801\u6267\u884c\u671f\u95f4\u6240\u8bfb\u53d6\u7684\u6570\u636e\u4ece\u6267\u884c\uff08\u80cc\u4e66\uff09\u5f00\u59cb\u540e\u6ca1\u6709\u53d8\u52a8\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u88ab\u5176\u4ed6\u4ea4\u6613\u6539\u52a8\u4e86\uff0c\u90a3\u4e48\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u5c06\u88ab\u6807\u8bb0\u6210\u65e0\u6548\u7684\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5e94\u7528\u5230\u8d26\u672c\u72b6\u6001\u6570\u636e\u5e93\u3002\u5ba2\u6237\u7aef\u5e94\u7528\u4f1a\u6536\u5230\u63d0\u9192\uff0c\u4ece\u800c\u8fdb\u884c\u7ea0\u9519\u6216\u9002\u5f53\u91cd\u8bd5\u3002  See the  Transaction Flow  and  Read-Write set semantics  topics for a deeper dive on transaction structure, concurrency control, and the state DB.  \u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u4ea4\u6613\u7684\u7ed3\u6784\uff0c\u5e76\u53d1\u63a7\u5236\u548c\u72b6\u6001\u6570\u636e\u5e93\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u4ea4\u6613\u6d41\u7a0b \u548c \u8bfb\u5199\u96c6\u5408\u8bed\u8a00\u5b66 \u3002", 
            "title": "Transaction Flow - \u4ea4\u6613\u6d41\u7a0b"
        }, 
        {
            "location": "/ledger_zh/#state-database-options-", 
            "text": "State database options include LevelDB and CouchDB (beta). LevelDB is the default key/value state database embedded in the peer process. CouchDB is an optional alternative external state database. Like the LevelDB key/value store, CouchDB can store any binary data that is modeled in chaincode (CouchDB attachment functionality is used internally for non-JSON binary data). But as a JSON document store, CouchDB additionally enables rich query against the chaincode data, when chaincode values (e.g. assets) are modeled as JSON data.  \u72b6\u6001\u6570\u636e\u5e93\u9009\u9879\u5305\u62ecLevelDB\u548cCouchDB(beta)\u3002LevelDB\u662f\u8282\u70b9\u6d41\u7a0b\u4e2d\u96c6\u6210\u7684\u7f3a\u7701\u952e\u503c\u72b6\u6001\u6570\u636e\u5e93\u3002CouchDB\u662f\u53ef\u9009\u7684\u5916\u90e8\u72b6\u6001\u6570\u636e\u5e93\u3002\u7c7b\u4f3c\u4e8eLevelDB\u7684\u952e\u503c\u5e93\uff0cCouchDB\u80fd\u5b58\u50a8\u4efb\u4f55\u94fe\u7801\u4e2d\u5efa\u6a21\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff08CouchDB\u9644\u4ef6\u529f\u80fd\u88ab\u5185\u90e8\u7528\u4e8e\u975eJSON\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u3002\u4f46\u4f5c\u4e3a\u4e00\u4e2aJSON\u683c\u5f0f\u6587\u6863\u5e93\uff0c\u5f53\u94fe\u7801\u7684\u6570\u636e\uff08\u6bd4\u5982\u8d44\u4ea7\uff09\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u65f6\uff0cCouchDB\u989d\u5916\u63d0\u4f9b\u4e86\u8bb8\u591a\u9488\u5bf9\u94fe\u7801\u6570\u636e\u7684\u67e5\u8be2\u65b9\u5f0f\u3002  Both LevelDB and CouchDB support core chaincode operations such as getting and setting a key (asset), and querying based on keys. Keys can be queried by range, and composite keys can be modeled to enable equivalence queries against multiple parameters. For example a composite key of (owner,asset_id) can be used to query all assets owned by a certain entity. These key-based queries can be used for read-only queries against the ledger, as well as in transactions that update the ledger.  LevelDB\u548cCouchDB\u90fd\u652f\u6301\u6838\u5fc3\u7684\u94fe\u7801\u64cd\u4f5c\uff0c\u6bd4\u5982\u83b7\u53d6\u548c\u8bbe\u7f6e\u4e00\u4e2a\u952e\uff08\u8d44\u4ea7\uff09\uff0c\u4ee5\u53ca\u57fa\u4e8e\u952e\u8fdb\u884c\u67e5\u8be2\u7b49\u3002\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8303\u56f4\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u6784\u5efa\u7ec4\u5408\u952e\u6765\u8fbe\u5230\u6309\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u67e5\u8be2\u7684\u540c\u7b49\u6548\u679c\u3002\u6bd4\u5982\u4e00\u4e2a\u7ec4\u5408\u952e\uff08\u62e5\u6709\u8005\uff0c\u8d44\u4ea7\u7f16\u53f7\uff09\u53ef\u4ee5\u88ab\u7528\u6765\u67e5\u8be2\u67d0\u5b9e\u4f53\u6240\u62e5\u6709\u7684\u6240\u6709\u8d44\u4ea7\u3002\u8fd9\u4e9b\u57fa\u4e8e\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u88ab\u7528\u505a\u9488\u5bf9\u8d26\u672c\u7684\u53ea\u8bfb\u67e5\u8be2\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u88ab\u5e94\u7528\u5728\u5bf9\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\u7684\u4ea4\u6613\u4e2d\u3002  If you model assets as JSON and use CouchDB, you can also perform complex rich queries against the chaincode data values, using the CouchDB JSON query language within chaincode. These types of queries are excellent for understanding what is on the ledger. Proposal responses for these types of queries are typically useful to the client application, but are not typically submitted as transactions to the ordering service. In fact the fabric does not guarantee the result set is stable between chaincode execution and commit time for rich queries, and therefore rich queries are not appropriate for use in update transactions, unless your application can guarantee the result set is stable between chaincode execution time and commit time, or can handle potential changes in subsequent transactions. For example, if you perform a rich query for all assets owned by Alice and transfer them to Bob, a new asset may be assigned to Alice by another transaction between chaincode execution time and commit time, and you would miss this \u2018phantom\u2019 item.  \u5982\u679c\u4f60\u5c06\u8d44\u4ea7\u4ee5JSON\u683c\u5f0f\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u662fCouchDB\uff0c\u90a3\u4f60\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684JSON\u67e5\u8be2\u8bed\u8a00\uff0c\u5bf9\u94fe\u7801\u7684\u6570\u636e\u503c\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002\u8fd9\u4e9b\u67e5\u8be2\u7c7b\u578b\u53ef\u4ee5\u5f88\u597d\u7684\u5e2e\u52a9\u7406\u89e3\u8d26\u672c\u4e2d\u5305\u542b\u4ec0\u4e48\u3002\u67e5\u8be2\u7c7b\u578b\u7684\u63d0\u6848\u54cd\u5e94\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u901a\u5e38\u5f88\u6709\u7528\uff0c\u4f46\u5e76\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u4ea4\u6613\u63d0\u4ea4\u5230\u6392\u5e8f\u670d\u52a1\u3002\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u5bcc\u67e5\u8be2\uff08rich query\uff09\uff0cFabric\u5e76\u4e0d\u4fdd\u8bc1\u7ed3\u679c\u96c6\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u8fc7\u7a0b\u4e2d\u95f4\u662f\u7a33\u5b9a\u7684\uff0c\u6216\u8005\u80fd\u5904\u7406\u540e\u7eed\u4ea4\u6613\u4e2d\u6f5c\u5728\u7684\u53d8\u5316\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u5bf9\u6240\u6709Alice\u62e5\u6709\u7684\u8d44\u4ea7\u8fdb\u884c\u5bcc\u67e5\u8be2\uff0c\u5e76\u8f6c\u79fb\u7ed9Bob\uff0c\u90a3\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u53e6\u4e00\u4e2a\u4ea4\u6613\u5c06\u4e00\u4e2a\u65b0\u7684\u8d44\u4ea7\u5206\u914d\u7ed9\u4e86Alice\uff0c\u4f60\u5c06\u4f1a\u9519\u5931\u8fd9\u4e2a\u201c\u5e7b\u5f71\u201d\u9879\u3002  CouchDB runs as a separate database process alongside the peer, therefore there are additional considerations in terms of setup, management, and operations. You may consider starting with the default embedded LevelDB, and move to CouchDB if you require the additional complex rich queries. It is a good practice to model chaincode asset data as JSON, so that you have the option to perform complex rich queries if needed in the future.  CouchDB\u4f5c\u4e3a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u8fdb\u7a0b\u8ddf\u8282\u70b9\u4e00\u8d77\u8fd0\u884c\uff0c\u6240\u4ee5\u5b89\u88c5\u3001\u7ba1\u7406\u548c\u64cd\u4f5c\u7684\u65f6\u5019\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u8003\u8651\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5f00\u59cb\u7684\u65f6\u5019\u7528\u7f3a\u7701\u96c6\u6210\u7684LevelDB\uff0c\u7136\u540e\u5f53\u4f60\u9700\u8981\u989d\u5916\u7684\u590d\u6742\u67e5\u8be2\u65f6\u518d\u5207\u6362\u5230CouchDB\u3002\u5c06\u94fe\u7801\u7684\u8d44\u4ea7\u6570\u636e\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5b9e\u8df5\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u4f60\u5c06\u6765\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002  To enable CouchDB as the state database, configure the /fabric/sampleconfig/core.yaml stateDatabase section.  \u5982\u679c\u8981\u7528CouchDB\u4f5c\u4e3a\u72b6\u6001\u6570\u636e\u5e93\uff0c\u9700\u8981\u5bf9/fabric/sampleconfig/core.yaml stateDatabase\u8fd9\u90e8\u5206\u8fdb\u884c\u914d\u7f6e\u3002", 
            "title": "State Database options - \u72b6\u6001\u6570\u636e\u5e93\u9009\u9879"
        }, 
        {
            "location": "/read-write-set/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\nDijun Liu\n\n\n\n\n\n\n\n\n\u4ea4\u6613\u6a21\u62df\u548cread-write set\n\n\n\u5728\u80cc\u4e66\u8282\u70b9\u4e0a\u7684\u4ea4\u6613\u6a21\u62df\u671f\u95f4\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4ea4\u6613\u7684read-write set\u3002\nread set\n\u5305\u542b\u5728\u6a21\u62df\u671f\u95f4\u4ea4\u6613\u8bfb\u53d6\u5230\u7684\u552f\u4e00key\u53ca\u5bf9\u5e94version\u3002\nwrite set\n\u4ea4\u6613\u6539\u5199\u7684\u552f\u4e00key\uff08\u53ef\u80fd\u4e0e\nread set\n\u4e2d\u7684key\u91cd\u53e0\uff09\u53ca\u5bf9\u5e94\u7684\u65b0value\u3002\u5982\u679c\u4ea4\u6613\u7684\u66f4\u65b0\u64cd\u4f5c\u662f\u5220\u9664\u4e00\u4e2akey\uff0c\u5219\u5728\nwrite set\n\u4e3a\u8be5key\u8bbe\u7f6e\u4e00\u4e2adelete\u6807\u8bb0\u3002\n\n\n\u6b64\u5916\uff0c\u5982\u679c\u4ea4\u6613\u4e2d\u5bf9\u4e00\u4e2akey\u6539\u5199\u591a\u6b21\uff0c\u5219\u53ea\u4fdd\u7559\u6700\u540e\u7684\u4fee\u6539\u503c\u3002\u5982\u679c\u4ea4\u6613\u4e2d\u8bfb\u53d6\u4e00\u4e2akey\u7684\u503c\uff0c\u5373\u4f7f\u4ea4\u6613\u5728\u8bfb\u53d6\u4e4b\u524d\u66f4\u65b0\u4e86\u8be5key\u7684\u503c\uff0c\u8bfb\u53d6\u5230\u7684\u4e5f\u4f1a\u662f\u4e4b\u524d\u63d0\u4ea4\u8fc7\u7684\u800c\u4e0d\u662f\u521a\u66f4\u65b0\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u80fd\u8bfb\u53d6\u5230\u540c\u4e00\u4ea4\u6613\u4e2d\u4fee\u6539\u7684\u503c\u3002\n\n\n\u5982\u524d\u6240\u8ff0\uff0ckey\u7684version\u53ea\u8bb0\u5f55\u5728\nread set\n\uff1b\nwrite set\n\u53ea\u5305\u542bkey\u53ca\u5bf9\u5e94\u65b0value\u3002\n\n\n\u5bf9\u4e8e\nread set\n\u7684version\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\u65b9\u6848\uff0c\u6700\u57fa\u672c\u8981\u6c42\u5c31\u662f\u4e3akey\u751f\u6210\u4e00\u4e2a\u975e\u91cd\u590d\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\u7528\u9012\u589e\u7684\u5e8f\u53f7\u4f5c\u4e3aversion\u3002\u5728\u76ee\u524d\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86blockchain height\u4f5c\u4e3aversion\u65b9\u6848\uff0c\u5c31\u662f\u7528\u4ea4\u6613\u7684height\u4f5c\u4e3a\u8be5\u4ea4\u6613\u6240\u4fee\u6539\u7684key\u7684version\u3002\u4ea4\u6613height\u7531\u4e00\u4e2a\u7ed3\u6784\u8868\u793a\uff08\u89c1\u4e0b\u9762Height struc\uff09\uff0c\u5176\u4e2dTxNum\u8868\u793a\u8fd9\u4e2atx\u5728block\u4e2d\u7684height\uff08\u8bd1\u6ce8\uff1a\u4e5f\u5c31\u662f\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u987a\u5e8f\uff09\u3002\u8be5\u65b9\u6848\u76f8\u8f83\u4e8e\u9012\u589e\u5e8f\u53f7\u6709\u5f88\u591a\u4f18\u70b9\n\u4e3b\u8981\u662f\u8fd9\u6837\u7684version\u53ef\u4ee5\u5f88\u597d\u5730\u5229\u7528\u5230\u8bf8\u5982statedb\u3001\u4ea4\u6613\u6a21\u62df\u548c\u6821\u9a8c\u8fd9\u4e9b\u6a21\u5757\u4e2d\u3002\n\n\n\u6b64\u5916\uff0c\u5982\u679c\u6a21\u62df\u4ea4\u6613\u4e2d\u6267\u884c\u4e86\u6279\u91cf\u67e5\u8be2\uff08range query\uff09\uff0c\u6279\u91cf\u67e5\u8be2\u7ed3\u679c\u4f1a\u88ab\u653e\u5230read-write set\u4e2d\u7684\nquery-info\n\u3002\n\n\n// \u8bd1\u6ce8\n\n// read-write set \u7ed3\u6784\ntype TxReadWriteSet struct {\n    NsRWs []*NsReadWriteSet\n}\ntype NsReadWriteSet struct {\n    NameSpace        string\n    Reads            []*KVRead\n    Writes           []*KVWrite\n    RangeQueriesInfo []*RangeQueryInfo\n}\ntype RangeQueryInfo struct {\n    StartKey     string\n    EndKey       string\n    ItrExhausted bool\n    Results      []*KVRead\n    ResultHash   *MerkleSummary\n}\ntype MerkleSummary struct {\n    MaxDegree      int\n    MaxLevel       MerkleTreeLevel\n    MaxLevelHashes []Hash\n}\ntype MerkleTreeLevel int\ntype Hash []byte\n\n// read set \u7ed3\u6784\ntype KVRead struct {\n    Key     string\n    Version *Height\n}\ntype Height struct {\n    BlockNum uint64\n    TxNum    uint64\n}\n\n// write set \u7ed3\u6784\ntype KVWrite struct {\n    Key      string\n    IsDelete bool\n    Value    []byte\n}\n\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5047\u8bbe\u7684\u4ea4\u6613\u6a21\u62df\u751f\u6210\u7684read-write set\u793a\u4f8b\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u9012\u589e\u5e8f\u53f7\u4f5c\u4e3aversion\u3002\n\n\nTxReadWriteSet\n\n  \nNsReadWriteSet name=\"chaincode1\"\n\n    \nread-set\n\n      \nread key=\"K1\", version=\"1\"\n\n      \nread key=\"K2\", version=\"1\"\n\n    \n/read-set\n\n    \nwrite-set\n\n      \nwrite key=\"K1\", value=\"V1\"\n\n      \nwrite key=\"K3\", value=\"V2\"\n\n      \nwrite key=\"K4\", isDelete=\"true\"\n\n    \n/write-set\n\n  \n/NsReadWriteSet\n\n\nTxReadWriteSet\n\n\n\n\n\u4f7f\u7528read-write set \u9a8c\u8bc1\u4ea4\u6613\u548c\u66f4\u65b0worldState\n\n\n\u63d0\u4ea4\u8282\u70b9\uff08committer\uff09\u5229\u7528\nread set\n\u90e8\u5206\u6821\u9a8c\u4ea4\u6613\u7684\u6709\u6548\u6027\uff1b\u7528\nwrite set\n\u90e8\u5206\u66f4\u65b0key\u7684version\u548cvalue\u3002\n\n\n\u5728\u9a8c\u8bc1\u9636\u6bb5\uff0c\u5982\u679c\nread set\n\u4e2d\u6bcf\u4e2akey\u7684version\u90fd\u4e0estateDB\u4e2d\u5bf9\u5e94worldState\uff08\u5047\u8bbe\u6240\u6709\u4e4b\u524d\u7684\u6709\u6548\u4ea4\u6613\uff0c\u5305\u62ec\u540c\u4e00\u4e2ablock\u4e2d\u7684\u4ea4\u6613\uff0c\u90fd\u5df2\u7ecf\u63d0\u4ea4\u5b8c\u6210\uff0c\u5373\u5df2\u66f4\u65b0ledger\uff09\u7684version\u76f8\u5339\u914d\uff0c\u5219\u8ba4\u4e3a\u6b64\u4ea4\u6613\u6709\u6548\u3002\n\n\n\u5982\u679cread-write set\u4e2d\u5305\u542b\nquery-info\n\uff0c\u5219\u8fd8\u8981\u5bf9\u6b64\u6267\u884c\u989d\u5916\u7684\u6821\u9a8c\u3002\u8be5\u6821\u9a8c\u786e\u4fdd\u5728\u6b64\u6279\u91cf\u67e5\u8be2\u7684\u7ed3\u679c\u8303\u56f4\u5185\u6ca1\u6709key\u88ab\u589e\u5220\u6539\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5728\u9a8c\u8bc1\u9636\u6bb5\u91cd\u65b0\u6267\u884c\u8be5\u6279\u91cf\u67e5\u8be2\uff08\u6a21\u62df\u671f\u95f4\u6267\u884c\u7684\u4ea4\u6613\uff09\u5e94\u8be5\u4ea7\u751f\u4e0e\u6a21\u62df\u4ea4\u6613\u671f\u95f4\u76f8\u540c\u7684\u7ed3\u679c\u3002\u6b64\u6821\u9a8c\u786e\u4fdd\u4ea4\u6613\u5728\u63d0\u4ea4\u65f6\u51fa\u73b0\u5e7b\u8bfb\u4f1a\u88ab\u8ba4\u4e3a\u65e0\u6548\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5e7b\u8bfb\u4fdd\u62a4\u4ec5\u9650\u4e8eChaincode\u7684\nGetStateByRange\n\u548c\nGetStateByPartialCompositeKey\n\u4e24\u4e2a\u65b9\u6cd5\n\uff08\u8bd1\u6ce8\uff1a\u6b64\u5904\u6587\u6863\u4e0a\u63d0\u5230\u7684\u662f\nGetStateByRange\n\u548c\nGetQueryResult\n\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4f46\u5728\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u5374\u4e0d\u662f\u8fd9\u6837\uff0c\u6b64\u5904\u4ee5\u4ee3\u7801\u4e3a\u51c6\u3002\u8be6\u89c1fabric/examples/chaincode/go/marbles02/marbles_chaincode.go\uff09\n\u3002\u800c\u5176\u4ed6\u6279\u91cf\u67e5\u8be2\u65b9\u6cd5\uff08\u5982\uff1a\nGetQueryResult\n\uff09\u4f1a\u6709\u5e7b\u8bfb\u98ce\u9669\uff0c\u56e0\u6b64\u8fd9\u79cd\u67e5\u8be2\u5e94\u8be5\u53ea\u7528\u4e8e\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u5230ordering\u7684\n\u53ea\u8bfb\u4ea4\u6613\n\uff0c\u9664\u975eapp\u80fd\u4fdd\u8bc1\u4ea4\u6613\u6a21\u62df\u548c\u4ea4\u6613\u9a8c\u8bc1\u63d0\u4ea4\u4e24\u9636\u6bb5\u4e4b\u95f4\u7ed3\u679c\u96c6\u7a33\u5b9a\u3002\n\n\n\u5982\u679c\u4ea4\u6613\u9a8c\u8bc1\u901a\u8fc7\uff0ccommitter\u5c31\u4f1a\u7528\nwrite set\n\u66f4\u65b0worldState\u3002\u5728\u66f4\u65b0\u9636\u6bb5\uff0c\nwrite set\n\u4e2d\u7684\u6bcf\u4e2akey\u5728worldState\u4e2d\u5bf9\u5e94\u7684value\u90fd\u4f1a\u88ab\u66f4\u65b0\uff0c\u7136\u540eworldState\u4e2d\u8fd9\u4e9bkey\u7684version\u4e5f\u4f1a\u968f\u7740\u66f4\u65b0\u3002\n\n\n\u4ea4\u6613\u6a21\u62df\u4e0e\u4ea4\u6613\u9a8c\u8bc1 \u793a\u4f8b\n\n\n\u672c\u8282\u901a\u8fc7\u793a\u4f8b\u573a\u666f\u5e2e\u52a9\u7406\u89e3read-write set\u3002\u5b58\u5728\u4e00\u4e2akey\u8bbe\u4e3a\nk\n\uff0c\u5728worldState\u4e2d\u7531\u5143\u7ec4\n(k,var,val)\n\u8868\u793a\uff0c\u5176\u4e2d\nver\n\u662f\nk\n\u7684\u6700\u65b0\u7684version\uff0c\nval\n\u662f\nk\n\u7684value\u3002\n\n\n\u73b0\u5728\u6709\u4e94\u4e2a\u4ea4\u6613\uff0c\u5206\u522b\u662f\nT1,T2,T3,T4,T5\n\uff0c\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u9488\u5bf9\u76f8\u540c\u7684worldSate\u5feb\u7167\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u6a21\u62df\u4ea4\u6613\u7684worldState\u5feb\u7167\u4ee5\u53ca\u6bcf\u4e2a\u4ea4\u6613\u6267\u884c\u8bfb\u5199\u7684\u987a\u5e8f\u3002\n\n\nWorld state: (k1,1,v1), (k2,1,v2), (k3,1,v3), (k4,1,v4), (k5,1,v5)\nT1 -\n Write(k1, v1'), Write(k2, v2')\nT2 -\n Read(k1), Write(k3, v3')\nT3 -\n Write(k2, v2'')\nT4 -\n Write(k2, v2'''), read(k2)\nT5 -\n Write(k6, v6'), read(k5)\n\n\n\n\u5047\u8bbe\u8fd9\u4e9b\u4ea4\u6613\u7684\u987a\u5e8f\u662fT1,\nT5\uff08\u53ef\u80fd\u5728\u540c\u4e00\u4e2ablock\u6216\u8005\u4e0d\u540cblock\uff09\n\n\n\n\nT1\n\u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684\nk1\n\u548c\nk2\n\u4f1a\u88ab\u66f4\u65b0\u6210\n(k1,2,v1'), (k2,2,v2')\n\n\nT2\n\u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684\nk1\n\u5728\u4e4b\u524d\u7684\u4ea4\u6613\nT1\n\u4e2d\u88ab\u4fee\u6539\u4e86\n\uff08\u8bd1\u6ce8\uff1a\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u524d\u63d0\uff0c\u5373\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u5bf9\u4e8e\u76f8\u540c\u7684worldState\u5feb\u7167\uff0c\u800c\u4e14T2\u53c8\u6709write\u64cd\u4f5c\uff0c\u6240\u4ee5T2\u4f1a\u8fdb\u5165commit\u9636\u6bb5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u6837T2\u7684k1.ver=1\uff0cT1\u5b8c\u6210\u540e\u5b9e\u9645\u7684k1.ver=2\u4e86\uff0c\u7136\u540eT2\u5728commit\u6821\u9a8c\u662f\u5c31\u4f1a\u5931\u8d25\u3002\u4e5f\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\u4e00\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u548c\u63d0\u4ea4\u671f\u95f4\uff0c\u67d0key\u7684\u503c\u88ab\u4fee\u6539\u3002\u3002\u3002\n\u4f46\u662f\u6709\u4e2a\u7591\u95ee\uff0c\u6b63\u5e38\u4f7f\u7528\u4e2d\u5e94\u8be5\u4f1a\u7ecf\u5e38\u51fa\u73b0T1\u3001T2\u8fd9\u79cd\u987a\u5e8f\u7684\u60c5\u51b5\uff0c\u96be\u9053\u4f1a\u7ecf\u5e38\u53d1\u751f\u4ea4\u6613\u6821\u9a8c\u5931\u8d25\uff1f\uff1f\u5982\u679c\u5982\u6b64\uff0c\u90a3\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u5c82\u4e0d\u5f88\u96be\u7528?\u6682\u6709\u6b64\u7591\uff0c\u6709\u5f85\u7814\u7a76\n\uff09\n\n\nT3\n\u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684\nk2\n\u4f1a\u88ab\u66f4\u65b0\u6210\n(k2,3,v2'')\n\n\nT4\n\u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684\nk2\n\u5728\u4e4b\u524d\u7684\u4ea4\u6613\nT1\n\u4e2d\u88ab\u4fee\u6539\u4e86\n\n\nT5\n\u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684\nk5\n\u6ca1\u6709\u5728\u4e4b\u524d\u7684\u4efb\u4f55\u4ea4\u6613\u4e2d\u4fee\u6539\n\n\n\n\n\u8bd1\u6ce8\uff1a\n\n\n\u539f\u6587\u793a\u4f8b\u4ea4\u6613\u9700\u8981\u8fdb\u4e00\u6b65\u9610\u8ff0\n\n\n\n\n\n\n\u4ea4\u6613\u4e2d\uff0c\u793a\u4f8b\u91cc\u9762\u5ffd\u7565\u4e86\u5728\u8bfb\u53d6key\u7684\u65f6\u5019\uff0c\u662f\u9700\u8981\u5e26\u6709\u8fd9\u4e2akey\u7684\u7248\u672c\u4fe1\u606f\u7684\u3002\n\n\n\n\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cT1\nT5\u5728\u540c\u4e00\u4e2a\u533a\u5757\u548c\u4e0d\u540c\u533a\u5757\u7684\u5904\u7406\u65b9\u5f0f\u4e0d\u540c\u3002\n\n\n\n\n\u5982\u679c\u8bfb\u53d6\u7684key\u5728\u6b64\u533a\u5757\u524d\u9762\u7684\u4ea4\u6613\u4e2d\u5df2\u7ecf\u6709update\uff0c\u5219\u76f4\u63a5\u7f6e\u6b64\u4ea4\u6613\u4e3a\u5931\u6548\n\n\n\u5982\u679c\u8bfb\u53d6\u7684key\u5728\u672c\u533a\u5757\u524d\u9762\u7684\u4ea4\u6613\u6ca1\u6709\u505aupdate\uff0c\u5219\u9700\u8981\u5224\u65adstate\u4e2d\u7684\u7248\u672c\u548ccommit\u7684\u7248\u672c\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u7f6e\u4e3a\u5931\u6548\u4ea4\u6613\n\n\n\n\n\u4e3a\u4e86\u5c3d\u91cf\u907f\u514d\u5931\u6548\u4ea4\u6613\uff0capplication\u548cchaincode\u9700\u8981\u8fdb\u884c\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u907f\u514d\u540c\u4e00\u4e2a\u8d44\u4ea7\u4ea4\u6613\u4fe1\u606f\u5c1d\u8bd5\u5728\u4e00\u4e2a\u533a\u5757\u4e0a\u8fdb\u884cupdate\u64cd\u4f5c\u3002\u5982\u679c\u907f\u514d\u4e0d\u5230\uff0c\u53ef\u4ee5\u9002\u5ea6\u91cd\u8bd5\u4ea4\u6613\u3002\n\n\n\n\n\n\n\u6ce8\u610f\uff1a\n \u4ea4\u6613\u4e0d\u652f\u6301\u591aread-write set", 
            "title": "Read-Write set"
        }, 
        {
            "location": "/read-write-set/#read-write-set", 
            "text": "\u5728\u80cc\u4e66\u8282\u70b9\u4e0a\u7684\u4ea4\u6613\u6a21\u62df\u671f\u95f4\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4ea4\u6613\u7684read-write set\u3002 read set \u5305\u542b\u5728\u6a21\u62df\u671f\u95f4\u4ea4\u6613\u8bfb\u53d6\u5230\u7684\u552f\u4e00key\u53ca\u5bf9\u5e94version\u3002 write set \u4ea4\u6613\u6539\u5199\u7684\u552f\u4e00key\uff08\u53ef\u80fd\u4e0e read set \u4e2d\u7684key\u91cd\u53e0\uff09\u53ca\u5bf9\u5e94\u7684\u65b0value\u3002\u5982\u679c\u4ea4\u6613\u7684\u66f4\u65b0\u64cd\u4f5c\u662f\u5220\u9664\u4e00\u4e2akey\uff0c\u5219\u5728 write set \u4e3a\u8be5key\u8bbe\u7f6e\u4e00\u4e2adelete\u6807\u8bb0\u3002  \u6b64\u5916\uff0c\u5982\u679c\u4ea4\u6613\u4e2d\u5bf9\u4e00\u4e2akey\u6539\u5199\u591a\u6b21\uff0c\u5219\u53ea\u4fdd\u7559\u6700\u540e\u7684\u4fee\u6539\u503c\u3002\u5982\u679c\u4ea4\u6613\u4e2d\u8bfb\u53d6\u4e00\u4e2akey\u7684\u503c\uff0c\u5373\u4f7f\u4ea4\u6613\u5728\u8bfb\u53d6\u4e4b\u524d\u66f4\u65b0\u4e86\u8be5key\u7684\u503c\uff0c\u8bfb\u53d6\u5230\u7684\u4e5f\u4f1a\u662f\u4e4b\u524d\u63d0\u4ea4\u8fc7\u7684\u800c\u4e0d\u662f\u521a\u66f4\u65b0\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u80fd\u8bfb\u53d6\u5230\u540c\u4e00\u4ea4\u6613\u4e2d\u4fee\u6539\u7684\u503c\u3002  \u5982\u524d\u6240\u8ff0\uff0ckey\u7684version\u53ea\u8bb0\u5f55\u5728 read set \uff1b write set \u53ea\u5305\u542bkey\u53ca\u5bf9\u5e94\u65b0value\u3002  \u5bf9\u4e8e read set \u7684version\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\u65b9\u6848\uff0c\u6700\u57fa\u672c\u8981\u6c42\u5c31\u662f\u4e3akey\u751f\u6210\u4e00\u4e2a\u975e\u91cd\u590d\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\u7528\u9012\u589e\u7684\u5e8f\u53f7\u4f5c\u4e3aversion\u3002\u5728\u76ee\u524d\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86blockchain height\u4f5c\u4e3aversion\u65b9\u6848\uff0c\u5c31\u662f\u7528\u4ea4\u6613\u7684height\u4f5c\u4e3a\u8be5\u4ea4\u6613\u6240\u4fee\u6539\u7684key\u7684version\u3002\u4ea4\u6613height\u7531\u4e00\u4e2a\u7ed3\u6784\u8868\u793a\uff08\u89c1\u4e0b\u9762Height struc\uff09\uff0c\u5176\u4e2dTxNum\u8868\u793a\u8fd9\u4e2atx\u5728block\u4e2d\u7684height\uff08\u8bd1\u6ce8\uff1a\u4e5f\u5c31\u662f\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u987a\u5e8f\uff09\u3002\u8be5\u65b9\u6848\u76f8\u8f83\u4e8e\u9012\u589e\u5e8f\u53f7\u6709\u5f88\u591a\u4f18\u70b9 \u4e3b\u8981\u662f\u8fd9\u6837\u7684version\u53ef\u4ee5\u5f88\u597d\u5730\u5229\u7528\u5230\u8bf8\u5982statedb\u3001\u4ea4\u6613\u6a21\u62df\u548c\u6821\u9a8c\u8fd9\u4e9b\u6a21\u5757\u4e2d\u3002  \u6b64\u5916\uff0c\u5982\u679c\u6a21\u62df\u4ea4\u6613\u4e2d\u6267\u884c\u4e86\u6279\u91cf\u67e5\u8be2\uff08range query\uff09\uff0c\u6279\u91cf\u67e5\u8be2\u7ed3\u679c\u4f1a\u88ab\u653e\u5230read-write set\u4e2d\u7684 query-info \u3002  // \u8bd1\u6ce8\n\n// read-write set \u7ed3\u6784\ntype TxReadWriteSet struct {\n    NsRWs []*NsReadWriteSet\n}\ntype NsReadWriteSet struct {\n    NameSpace        string\n    Reads            []*KVRead\n    Writes           []*KVWrite\n    RangeQueriesInfo []*RangeQueryInfo\n}\ntype RangeQueryInfo struct {\n    StartKey     string\n    EndKey       string\n    ItrExhausted bool\n    Results      []*KVRead\n    ResultHash   *MerkleSummary\n}\ntype MerkleSummary struct {\n    MaxDegree      int\n    MaxLevel       MerkleTreeLevel\n    MaxLevelHashes []Hash\n}\ntype MerkleTreeLevel int\ntype Hash []byte\n\n// read set \u7ed3\u6784\ntype KVRead struct {\n    Key     string\n    Version *Height\n}\ntype Height struct {\n    BlockNum uint64\n    TxNum    uint64\n}\n\n// write set \u7ed3\u6784\ntype KVWrite struct {\n    Key      string\n    IsDelete bool\n    Value    []byte\n}  \u4e0b\u9762\u662f\u4e00\u4e2a\u5047\u8bbe\u7684\u4ea4\u6613\u6a21\u62df\u751f\u6210\u7684read-write set\u793a\u4f8b\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u9012\u589e\u5e8f\u53f7\u4f5c\u4e3aversion\u3002  TxReadWriteSet \n   NsReadWriteSet name=\"chaincode1\" \n     read-set \n       read key=\"K1\", version=\"1\" \n       read key=\"K2\", version=\"1\" \n     /read-set \n     write-set \n       write key=\"K1\", value=\"V1\" \n       write key=\"K3\", value=\"V2\" \n       write key=\"K4\", isDelete=\"true\" \n     /write-set \n   /NsReadWriteSet  TxReadWriteSet", 
            "title": "\u4ea4\u6613\u6a21\u62df\u548cread-write set"
        }, 
        {
            "location": "/read-write-set/#read-write-set-worldstate", 
            "text": "\u63d0\u4ea4\u8282\u70b9\uff08committer\uff09\u5229\u7528 read set \u90e8\u5206\u6821\u9a8c\u4ea4\u6613\u7684\u6709\u6548\u6027\uff1b\u7528 write set \u90e8\u5206\u66f4\u65b0key\u7684version\u548cvalue\u3002  \u5728\u9a8c\u8bc1\u9636\u6bb5\uff0c\u5982\u679c read set \u4e2d\u6bcf\u4e2akey\u7684version\u90fd\u4e0estateDB\u4e2d\u5bf9\u5e94worldState\uff08\u5047\u8bbe\u6240\u6709\u4e4b\u524d\u7684\u6709\u6548\u4ea4\u6613\uff0c\u5305\u62ec\u540c\u4e00\u4e2ablock\u4e2d\u7684\u4ea4\u6613\uff0c\u90fd\u5df2\u7ecf\u63d0\u4ea4\u5b8c\u6210\uff0c\u5373\u5df2\u66f4\u65b0ledger\uff09\u7684version\u76f8\u5339\u914d\uff0c\u5219\u8ba4\u4e3a\u6b64\u4ea4\u6613\u6709\u6548\u3002  \u5982\u679cread-write set\u4e2d\u5305\u542b query-info \uff0c\u5219\u8fd8\u8981\u5bf9\u6b64\u6267\u884c\u989d\u5916\u7684\u6821\u9a8c\u3002\u8be5\u6821\u9a8c\u786e\u4fdd\u5728\u6b64\u6279\u91cf\u67e5\u8be2\u7684\u7ed3\u679c\u8303\u56f4\u5185\u6ca1\u6709key\u88ab\u589e\u5220\u6539\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5728\u9a8c\u8bc1\u9636\u6bb5\u91cd\u65b0\u6267\u884c\u8be5\u6279\u91cf\u67e5\u8be2\uff08\u6a21\u62df\u671f\u95f4\u6267\u884c\u7684\u4ea4\u6613\uff09\u5e94\u8be5\u4ea7\u751f\u4e0e\u6a21\u62df\u4ea4\u6613\u671f\u95f4\u76f8\u540c\u7684\u7ed3\u679c\u3002\u6b64\u6821\u9a8c\u786e\u4fdd\u4ea4\u6613\u5728\u63d0\u4ea4\u65f6\u51fa\u73b0\u5e7b\u8bfb\u4f1a\u88ab\u8ba4\u4e3a\u65e0\u6548\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5e7b\u8bfb\u4fdd\u62a4\u4ec5\u9650\u4e8eChaincode\u7684 GetStateByRange \u548c GetStateByPartialCompositeKey \u4e24\u4e2a\u65b9\u6cd5 \uff08\u8bd1\u6ce8\uff1a\u6b64\u5904\u6587\u6863\u4e0a\u63d0\u5230\u7684\u662f GetStateByRange \u548c GetQueryResult \u4e24\u4e2a\u65b9\u6cd5\uff0c\u4f46\u5728\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u5374\u4e0d\u662f\u8fd9\u6837\uff0c\u6b64\u5904\u4ee5\u4ee3\u7801\u4e3a\u51c6\u3002\u8be6\u89c1fabric/examples/chaincode/go/marbles02/marbles_chaincode.go\uff09 \u3002\u800c\u5176\u4ed6\u6279\u91cf\u67e5\u8be2\u65b9\u6cd5\uff08\u5982\uff1a GetQueryResult \uff09\u4f1a\u6709\u5e7b\u8bfb\u98ce\u9669\uff0c\u56e0\u6b64\u8fd9\u79cd\u67e5\u8be2\u5e94\u8be5\u53ea\u7528\u4e8e\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u5230ordering\u7684 \u53ea\u8bfb\u4ea4\u6613 \uff0c\u9664\u975eapp\u80fd\u4fdd\u8bc1\u4ea4\u6613\u6a21\u62df\u548c\u4ea4\u6613\u9a8c\u8bc1\u63d0\u4ea4\u4e24\u9636\u6bb5\u4e4b\u95f4\u7ed3\u679c\u96c6\u7a33\u5b9a\u3002  \u5982\u679c\u4ea4\u6613\u9a8c\u8bc1\u901a\u8fc7\uff0ccommitter\u5c31\u4f1a\u7528 write set \u66f4\u65b0worldState\u3002\u5728\u66f4\u65b0\u9636\u6bb5\uff0c write set \u4e2d\u7684\u6bcf\u4e2akey\u5728worldState\u4e2d\u5bf9\u5e94\u7684value\u90fd\u4f1a\u88ab\u66f4\u65b0\uff0c\u7136\u540eworldState\u4e2d\u8fd9\u4e9bkey\u7684version\u4e5f\u4f1a\u968f\u7740\u66f4\u65b0\u3002", 
            "title": "\u4f7f\u7528read-write set \u9a8c\u8bc1\u4ea4\u6613\u548c\u66f4\u65b0worldState"
        }, 
        {
            "location": "/read-write-set/#_1", 
            "text": "\u672c\u8282\u901a\u8fc7\u793a\u4f8b\u573a\u666f\u5e2e\u52a9\u7406\u89e3read-write set\u3002\u5b58\u5728\u4e00\u4e2akey\u8bbe\u4e3a k \uff0c\u5728worldState\u4e2d\u7531\u5143\u7ec4 (k,var,val) \u8868\u793a\uff0c\u5176\u4e2d ver \u662f k \u7684\u6700\u65b0\u7684version\uff0c val \u662f k \u7684value\u3002  \u73b0\u5728\u6709\u4e94\u4e2a\u4ea4\u6613\uff0c\u5206\u522b\u662f T1,T2,T3,T4,T5 \uff0c\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u9488\u5bf9\u76f8\u540c\u7684worldSate\u5feb\u7167\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u6a21\u62df\u4ea4\u6613\u7684worldState\u5feb\u7167\u4ee5\u53ca\u6bcf\u4e2a\u4ea4\u6613\u6267\u884c\u8bfb\u5199\u7684\u987a\u5e8f\u3002  World state: (k1,1,v1), (k2,1,v2), (k3,1,v3), (k4,1,v4), (k5,1,v5)\nT1 -  Write(k1, v1'), Write(k2, v2')\nT2 -  Read(k1), Write(k3, v3')\nT3 -  Write(k2, v2'')\nT4 -  Write(k2, v2'''), read(k2)\nT5 -  Write(k6, v6'), read(k5)  \u5047\u8bbe\u8fd9\u4e9b\u4ea4\u6613\u7684\u987a\u5e8f\u662fT1, T5\uff08\u53ef\u80fd\u5728\u540c\u4e00\u4e2ablock\u6216\u8005\u4e0d\u540cblock\uff09   T1 \u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684 k1 \u548c k2 \u4f1a\u88ab\u66f4\u65b0\u6210 (k1,2,v1'), (k2,2,v2')  T2 \u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684 k1 \u5728\u4e4b\u524d\u7684\u4ea4\u6613 T1 \u4e2d\u88ab\u4fee\u6539\u4e86 \uff08\u8bd1\u6ce8\uff1a\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u524d\u63d0\uff0c\u5373\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u5bf9\u4e8e\u76f8\u540c\u7684worldState\u5feb\u7167\uff0c\u800c\u4e14T2\u53c8\u6709write\u64cd\u4f5c\uff0c\u6240\u4ee5T2\u4f1a\u8fdb\u5165commit\u9636\u6bb5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u6837T2\u7684k1.ver=1\uff0cT1\u5b8c\u6210\u540e\u5b9e\u9645\u7684k1.ver=2\u4e86\uff0c\u7136\u540eT2\u5728commit\u6821\u9a8c\u662f\u5c31\u4f1a\u5931\u8d25\u3002\u4e5f\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\u4e00\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u548c\u63d0\u4ea4\u671f\u95f4\uff0c\u67d0key\u7684\u503c\u88ab\u4fee\u6539\u3002\u3002\u3002 \u4f46\u662f\u6709\u4e2a\u7591\u95ee\uff0c\u6b63\u5e38\u4f7f\u7528\u4e2d\u5e94\u8be5\u4f1a\u7ecf\u5e38\u51fa\u73b0T1\u3001T2\u8fd9\u79cd\u987a\u5e8f\u7684\u60c5\u51b5\uff0c\u96be\u9053\u4f1a\u7ecf\u5e38\u53d1\u751f\u4ea4\u6613\u6821\u9a8c\u5931\u8d25\uff1f\uff1f\u5982\u679c\u5982\u6b64\uff0c\u90a3\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u5c82\u4e0d\u5f88\u96be\u7528?\u6682\u6709\u6b64\u7591\uff0c\u6709\u5f85\u7814\u7a76 \uff09  T3 \u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684 k2 \u4f1a\u88ab\u66f4\u65b0\u6210 (k2,3,v2'')  T4 \u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684 k2 \u5728\u4e4b\u524d\u7684\u4ea4\u6613 T1 \u4e2d\u88ab\u4fee\u6539\u4e86  T5 \u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684 k5 \u6ca1\u6709\u5728\u4e4b\u524d\u7684\u4efb\u4f55\u4ea4\u6613\u4e2d\u4fee\u6539   \u8bd1\u6ce8\uff1a  \u539f\u6587\u793a\u4f8b\u4ea4\u6613\u9700\u8981\u8fdb\u4e00\u6b65\u9610\u8ff0    \u4ea4\u6613\u4e2d\uff0c\u793a\u4f8b\u91cc\u9762\u5ffd\u7565\u4e86\u5728\u8bfb\u53d6key\u7684\u65f6\u5019\uff0c\u662f\u9700\u8981\u5e26\u6709\u8fd9\u4e2akey\u7684\u7248\u672c\u4fe1\u606f\u7684\u3002    \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cT1 T5\u5728\u540c\u4e00\u4e2a\u533a\u5757\u548c\u4e0d\u540c\u533a\u5757\u7684\u5904\u7406\u65b9\u5f0f\u4e0d\u540c\u3002   \u5982\u679c\u8bfb\u53d6\u7684key\u5728\u6b64\u533a\u5757\u524d\u9762\u7684\u4ea4\u6613\u4e2d\u5df2\u7ecf\u6709update\uff0c\u5219\u76f4\u63a5\u7f6e\u6b64\u4ea4\u6613\u4e3a\u5931\u6548  \u5982\u679c\u8bfb\u53d6\u7684key\u5728\u672c\u533a\u5757\u524d\u9762\u7684\u4ea4\u6613\u6ca1\u6709\u505aupdate\uff0c\u5219\u9700\u8981\u5224\u65adstate\u4e2d\u7684\u7248\u672c\u548ccommit\u7684\u7248\u672c\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u7f6e\u4e3a\u5931\u6548\u4ea4\u6613   \u4e3a\u4e86\u5c3d\u91cf\u907f\u514d\u5931\u6548\u4ea4\u6613\uff0capplication\u548cchaincode\u9700\u8981\u8fdb\u884c\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u907f\u514d\u540c\u4e00\u4e2a\u8d44\u4ea7\u4ea4\u6613\u4fe1\u606f\u5c1d\u8bd5\u5728\u4e00\u4e2a\u533a\u5757\u4e0a\u8fdb\u884cupdate\u64cd\u4f5c\u3002\u5982\u679c\u907f\u514d\u4e0d\u5230\uff0c\u53ef\u4ee5\u9002\u5ea6\u91cd\u8bd5\u4ea4\u6613\u3002    \u6ce8\u610f\uff1a  \u4ea4\u6613\u4e0d\u652f\u6301\u591aread-write set", 
            "title": "\u4ea4\u6613\u6a21\u62df\u4e0e\u4ea4\u6613\u9a8c\u8bc1 \u793a\u4f8b"
        }, 
        {
            "location": "/gossip_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nXiao Zhang\n\n\n\n\n\n\n\n\n\n\nHyperledger Fabric optimizes blockchain network performance, security and scalability by dividing workload across transaction execution (endorsing and committing) peers and transaction ordering nodes. This decoupling of network operations requires a secure, reliable and scalable data dissemination protocol to ensure data integrity and consistency. To meet these requirements, the fabric implements a \ngossip data dissemination protocol\n.\n\n\nHyperLedger Fabric\u901a\u8fc7\u628a\u5de5\u4f5c\u8282\u70b9\u5206\u89e3\u4e3a\u6267\u884c\u4ea4\u6613\uff08\u80cc\u4e66\u548c\u63d0\u4ea4\uff09\u8282\u70b9\u548c\u4ea4\u6613\u6392\u5e8f\u8282\u70b9\u6765\u4f18\u5316\u533a\u5757\u94fe\u7f51\u7edc\u6027\u80fd\uff0c\u5b89\u5168\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002\u8fd9\u79cd\u89e3\u8026\u7f51\u7edc\u64cd\u4f5c\u7684\u65b9\u5f0f\u9700\u8981\u4e00\u4e2a\u5b89\u5168\u3001\u53ef\u9760\u3001\u53ef\u6269\u5c55\u7684\u6570\u636e\u5206\u53d1\u534f\u8bae\u6765\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u4e00\u81f4\u6027\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\uff0cFabric\u5e94\u7528\u4e86\nGossip\u6570\u636e\u5206\u53d1\u534f\u8bae\n\u3002\n\n\nGossip\u534f\u8bae(Gossip protocol)\n\n\nPeers leverage gossip to broadcast ledger and channel data in a scalable fashion. Gossip messaging is continuous, and each peer on a channel is constantly receiving current and consistent ledger data, from multiple peers. Each gossiped message is signed, thereby allowing Byzantine participants sending faked messages to be easily identified and the distribution of the message(s) to unwanted targets to be prevented. Peers affected by delays, network partitions or other causations resulting in missed blocks, will eventually be synced up to the current ledger state by contacting peers in possession of these missing blocks.\n\n\n\u8282\u70b9\u5229\u7528Gossip\u6765\u4ee5\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u5e7f\u64ad\u8d26\u672c\u548c\u901a\u9053\u6570\u636e\u3002Gossip\u51fa\u6765\u6d88\u606f\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u901a\u9053\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5728\u4e0d\u65ad\u5730\u63a5\u6536\u5f53\u524d\u6765\u81ea\u591a\u4e2a\u8282\u70b9\u7684\u8d26\u672c\u4e2d\u5df2\u8fbe\u6210\u4e00\u81f4\u6027\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u901a\u8fc7Gossip\u4f20\u8f93\u7684\u6d88\u606f\u90fd\u4f1a\u88ab\u7b7e\u540d\uff0c\u56e0\u6b64\u7531\u62dc\u5360\u5ead\u8282\u70b9\u53d1\u9001\u7684\u4f2a\u9020\u7684\u6d88\u606f\u5c06\u4f1a\u5f88\u5bb9\u6613\u5730\u88ab\u8bc6\u522b\u51fa\u6765\uff0c\u800c\u4e14\u53ef\u4ee5\u9632\u6b62\u5c06\u6d88\u606f\u5206\u53d1\u5230\u4e0d\u5e0c\u671b\u53d1\u9001\u7684\u76ee\u6807\u5904\u3002\u8282\u70b9\u56e0\u4e3a\u53d7\u5230\u5ef6\u8fdf\u3001\u7f51\u7edc\u5206\u533a\u6216\u8005\u5176\u4ed6\u539f\u56e0\u7684\u5f71\u54cd\u5bfc\u81f4\u7f3a\u5c11\u90e8\u5206\u533a\u5757\u7684\u60c5\u51b5\uff0c\u6700\u7ec8\u5c06\u901a\u8fc7\u8054\u7cfb\u5df2\u62e5\u6709\u8fd9\u4e9b\u7f3a\u5931\u7684\u533a\u5757\u7684\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u4e0e\u5f53\u524d\u8d26\u672c\u72b6\u6001\u8fdb\u884c\u540c\u6b65\u3002\n\n\nThe gossip-based data dissemination protocol performs three primary functions on a Fabric network:\n1.  Manages peer discovery and channel membership, by continually identifying available member peers, and eventually detecting peers that have gone offline.\n2.  Disseminates ledger data across all peers on a channel. Any peer with data that is out of sync with the rest of the channel identifies the missing blocks and syncs itself by copying the correct data.\n3.  Bring newly connected peers up to speed by allowing peer-to-peer state transfer update of ledger data.\n\n\n\u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\u534f\u8bae\u5728Fabric\u7f51\u7edc\u4e0a\u6267\u884c\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff1a\n1.  \u901a\u8fc7\u4e0d\u65ad\u8bc6\u522b\u53ef\u7528\u7684\u6210\u5458\u8282\u70b9\u5e76\u6700\u7ec8\u76d1\u6d4b\u8282\u70b9\u79bb\u7ebf\u72b6\u6001\u7684\u65b9\u5f0f\uff0c\u5bf9\u8282\u70b9\u7684\u53d1\u73b0\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8fdb\u884c\u7ba1\u7406\u3002\n2.  \u901a\u8fc7\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u6765\u5206\u53d1\u8d26\u672c\u6570\u636e\u3002\u4efb\u4f55\u6570\u636e\u672a\u540c\u6b65\u7684\u8282\u70b9\u90fd\u53ef\u4ee5\u901a\u8fc7\u901a\u9053\u4e2d\u5176\u4ed6\u8282\u70b9\u6765\u6807\u8bc6\u7f3a\u5931\u7684\u533a\u5757\uff0c\u5e76\u901a\u8fc7\u590d\u5236\u6b63\u786e\u7684\u6570\u636e\u6765\u8fdb\u884c\u540c\u6b65\u3002\n3.  \u901a\u8fc7\u5141\u8bb8\u70b9\u5bf9\u70b9\u72b6\u6001\u4f20\u8f93\u66f4\u65b0\u8d26\u672c\u6570\u636e\uff0c\u4f7f\u65b0\u52a0\u5165\u8fde\u63a5\u7684\u8282\u70b9\u5feb\u901f\u5f97\u5230\u540c\u6b65\u3002\n\n\nGossip-based broadcasting operates by peers receiving messages from other peers on the channel, and then forwarding these messages to a number of randomly-selected peers on the channel, where this number is a configurable constant. Peers can also exercise a pull mechanism, rather than waiting for delivery of a message. This cycle repeats, with the result of channel membership, ledger and state information continually being kept current and in sync. For dissemination of new blocks, the \nleader\n peer on the channel pulls the data from the ordering service and initiates gossip dissemination to peers.\n\n\n\u57fa\u4e8eGossip\u7684\u5e7f\u64ad\u7531\u8282\u70b9\u63a5\u6536\u6765\u81ea\u8be5\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u7684\u6d88\u606f\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6d88\u606f\u8f6c\u53d1\u5230\u901a\u9053\u4e0a\u7684\u591a\u4e2a\u968f\u673a\u9009\u62e9\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u8282\u70b9\u6570\u662f\u4e2a\u53ef\u914d\u7f6e\u7684\u5e38\u6570\u3002\u8282\u70b9\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u62c9\u53d6\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u6d88\u606f\u53d1\u9001\u3002\u5faa\u73af\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4f7f\u901a\u9053\u4e2d\u6210\u5458\u7684\u8d26\u672c\u548c\u72b6\u6001\u4fe1\u606f\u4e0d\u65ad\u4fdd\u6301\u548c\u5f53\u524d\u6700\u65b0\u72b6\u6001\u540c\u6b65\u3002\u4e3a\u4e86\u4f20\u64ad\u65b0\u533a\u5757\uff0c\u901a\u9053\u4e2d\u7684\n\u9886\u5bfc\u8005\n\u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u4e2d\u62c9\u53d6\u6570\u636e\uff0c\u5e76\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001Gossip\u6d88\u606f\u3002\n\n\nGossip\u6d88\u606f\u4f20\u8f93(Gossip messaging)\n\n\nOnline peers indicate their availability by continually broadcasting \u201calive\u201d messages, with each containing the \npublic key infrastructure (PKI)\n ID and the signature of the sender over the message. Peers maintain channel membership by collecting these alive messages; if no peer receives an alive message from a specific peer, this \u201cdead\u201d peer is eventually purged from channel membership. Because \u201calive\u201d messages are cryptographically signed, malicious peers can never impersonate other peers, as they lack a signing key authorized by a root certificate authority (CA).\n\n\n\u5728\u7ebf\u7684\u8282\u70b9\u901a\u8fc7\u6301\u7eed\u5730\u5e7f\u64ad\u201c\u6d3b\u8dc3\u201d\u6d88\u606f\u6765\u8868\u660e\u4ed6\u4eec\u7684\u53ef\u7528\u6027\uff0c\u6bcf\u6761\u6d88\u606f\u90fd\u5305\u542b\n\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09\n\u7684ID\u548c\u6d88\u606f\u53d1\u9001\u8005\u5bf9\u6d88\u606f\u7684\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u6536\u96c6\u8fd9\u4e9b\u6d3b\u8dc3\u6d88\u606f\u6765\u7ef4\u62a4\u901a\u9053\u6210\u5458\u8eab\u4efd\u3002\u5982\u679c\u6ca1\u6709\u8282\u70b9\u80fd\u4ece\u67d0\u4e2a\u7279\u5b9a\u7684\u8282\u70b9\u6536\u5230\u6d3b\u8dc3\u6d88\u606f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u201c\u6b7b\u4ea1\u201d\u7684\u8282\u70b9\u6700\u7ec8\u5c06\u4ece\u901a\u9053\u6210\u5458\u8eab\u4efd\u5217\u8868\u4e2d\u88ab\u5220\u9664\u3002\u7531\u4e8e\u201c\u6d3b\u8dc3\u201d\u4fe1\u606f\u662f\u901a\u8fc7\u5bc6\u7801\u5b66\u7b97\u6cd5\u8fdb\u884c\u7b7e\u540d\u7684\uff0c\u56e0\u6b64\u6076\u610f\u8282\u70b9\u65e0\u6cd5\u4f2a\u88c5\u6210\u5176\u4ed6\u8282\u70b9\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7f3a\u5c11\u6839\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff08CA\uff09\u6388\u6743\u7684\u7b7e\u540d\u5bc6\u94a5\u3002\n\n\nIn addition to the automatic forwarding of received messages, a state reconciliation process synchronizes \nworld state\n across peers on each channel. Each peer continually pulls blocks from other peers on the channel, in order to repair its own state if discrepancies are identified. Because fixed connectivity is not required to maintain gossip-based data dissemination, the process reliably provides data consistency and integrity to the shared ledger, including tolerance for node crashes.\n\n\n\u9664\u4e86\u5c06\u63a5\u6536\u5230\u7684\u6d88\u606f\u7684\u81ea\u52a8\u8f6c\u53d1\u4e4b\u5916\uff0c\u72b6\u6001\u534f\u7a0b\u8fd8\u4f1a\u5728\u6bcf\u4e2a\u901a\u9053\u4e0a\u540c\u6b65\u8282\u70b9\u95f4\u7684\n\u4e16\u754c\u72b6\u6001\n\u3002\u6bcf\u4e2a\u8282\u70b9\u4e0d\u505c\u5730\u4ece\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u4e2d\u63d0\u53d6\u533a\u5757\uff0c\u4ee5\u4fbf\u5728\u51fa\u73b0\u5dee\u5f02\u65f6\u4fee\u6b63\u81ea\u5df1\u7684\u72b6\u6001\u3002\u7531\u4e8e\u4e0d\u9700\u8981\u56fa\u5b9a\u8fde\u63a5\u6765\u7ef4\u62a4\u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\uff0c\u56e0\u6b64\u8be5\u6d41\u7a0b\u53ef\u4ee5\u53ef\u9760\u5730\u4e3a\u5171\u4eab\u8d26\u672c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u5b8c\u6574\u6027\uff0c\u5305\u62ec\u5bf9\u8282\u70b9\u5d29\u6e83\u7684\u5bb9\u9519\u3002\n\n\nBecause channels are segregated, peers on one channel cannot message or share information on any other channel. Though any peer can belong to multiple channels, partitioned messaging prevents blocks from being disseminated to peers that are not in the channel by applying message routing policies based on peers\u2019 channel subscriptions.\n\n\n\u7531\u4e8e\u901a\u9053\u4e4b\u95f4\u76f8\u4e92\u9694\u79bb\uff0c\u4e00\u4e2a\u901a\u9053\u4e0a\u7684\u8282\u70b9\u4e0d\u80fd\u5728\u5176\u4ed6\u4efb\u4f55\u901a\u9053\u4e0a\u53d1\u9001\u6216\u5171\u4eab\u4fe1\u606f\u3002\u5c3d\u7ba1\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u4f46\u662f\u901a\u8fc7\u5c06\u57fa\u4e8e\u8282\u70b9\u901a\u9053\u8ba2\u9605\u7684\u673a\u5236\u4f5c\u4e3a\u6d88\u606f\u5206\u53d1\u7b56\u7565\uff0c\u8282\u70b9\u65e0\u6cd5\u5c06\u88ab\u5206\u9694\u5f00\u7684\u6d88\u606f\u4f20\u64ad\u7ed9\u4e0d\u5728\u901a\u9053\u4e2d\u7684\u8282\u70b9\u3002\n\n\nNotes:\n\n1. Security of point-to-point messages are handled by the peer TLS layer, and do not require signatures. Peers are authenticated by their certificates, which are assigned by a CA. Although TLS certs are also used, it is the peer certificates that are authenticated in the gossip layer. Ledger blocks are signed by the ordering service, and then delivered to the leader peers on a channel. 2. Authentication is governed by the membership service provider for the peer. When the peer connects to the channel for the first time, the TLS session binds with fabric membership identity. This essentially authenticates each peer to the connecting peer, with respect to membership in the network and channel.\n\n\n\u6ce8\u610f\uff1a\n\n1.  \u70b9\u5bf9\u70b9\u6d88\u606f\u7684\u5b89\u5168\u6027\u7531\u8282\u70b9\u7684TLS\u5c42\u5904\u7406\uff0c\u4e0d\u9700\u8981\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u5176\u7531CA\u5206\u914d\u7684\u8bc1\u4e66\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u8282\u70b9\u5728Gossip\u5c42\u7684\u8eab\u4efd\u8ba4\u8bc1\u4f1a\u901a\u8fc7TLS\u8bc1\u4e66\u4f53\u73b0\u3002\u8d26\u672c\u4e2d\u7684\u533a\u5757\u7531\u6392\u5e8f\u670d\u52a1\u8fdb\u884c\u7b7e\u540d\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u901a\u9053\u4e2d\u7684\u9886\u5bfc\u8005\u8282\u70b9\u3002\n2.  \u8ba4\u8bc1\u8fc7\u7a0b\u7531\u8282\u70b9\u7684\u6210\u5458\u7ba1\u7406\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u8282\u70b9\u7b2c\u4e00\u6b21\u8fde\u63a5\u5230\u901a\u9053\u4e2d\u7684\u65f6\u5019\uff0cTLS\u4f1a\u8bdd\u5c06\u4e0eFabric\u6210\u5458\u8eab\u4efd\u7ed1\u5b9a\u3002\u8fd9\u6837\u672c\u8d28\u4e0a\u4f7f\u6bcf\u4e2a\u8282\u70b9\u4e0e\u76f8\u8fde\u7684\u8282\u70b9\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4ece\u800c\u4e0e\u7f51\u7edc\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8eab\u4efd\u5173\u8054\u8d77\u6765\u3002", 
            "title": "Gossip\u6570\u636e\u4f20\u8f93\u534f\u8bae"
        }, 
        {
            "location": "/gossip_zh/#gossipgossip-protocol", 
            "text": "Peers leverage gossip to broadcast ledger and channel data in a scalable fashion. Gossip messaging is continuous, and each peer on a channel is constantly receiving current and consistent ledger data, from multiple peers. Each gossiped message is signed, thereby allowing Byzantine participants sending faked messages to be easily identified and the distribution of the message(s) to unwanted targets to be prevented. Peers affected by delays, network partitions or other causations resulting in missed blocks, will eventually be synced up to the current ledger state by contacting peers in possession of these missing blocks.  \u8282\u70b9\u5229\u7528Gossip\u6765\u4ee5\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u5e7f\u64ad\u8d26\u672c\u548c\u901a\u9053\u6570\u636e\u3002Gossip\u51fa\u6765\u6d88\u606f\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u901a\u9053\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5728\u4e0d\u65ad\u5730\u63a5\u6536\u5f53\u524d\u6765\u81ea\u591a\u4e2a\u8282\u70b9\u7684\u8d26\u672c\u4e2d\u5df2\u8fbe\u6210\u4e00\u81f4\u6027\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u901a\u8fc7Gossip\u4f20\u8f93\u7684\u6d88\u606f\u90fd\u4f1a\u88ab\u7b7e\u540d\uff0c\u56e0\u6b64\u7531\u62dc\u5360\u5ead\u8282\u70b9\u53d1\u9001\u7684\u4f2a\u9020\u7684\u6d88\u606f\u5c06\u4f1a\u5f88\u5bb9\u6613\u5730\u88ab\u8bc6\u522b\u51fa\u6765\uff0c\u800c\u4e14\u53ef\u4ee5\u9632\u6b62\u5c06\u6d88\u606f\u5206\u53d1\u5230\u4e0d\u5e0c\u671b\u53d1\u9001\u7684\u76ee\u6807\u5904\u3002\u8282\u70b9\u56e0\u4e3a\u53d7\u5230\u5ef6\u8fdf\u3001\u7f51\u7edc\u5206\u533a\u6216\u8005\u5176\u4ed6\u539f\u56e0\u7684\u5f71\u54cd\u5bfc\u81f4\u7f3a\u5c11\u90e8\u5206\u533a\u5757\u7684\u60c5\u51b5\uff0c\u6700\u7ec8\u5c06\u901a\u8fc7\u8054\u7cfb\u5df2\u62e5\u6709\u8fd9\u4e9b\u7f3a\u5931\u7684\u533a\u5757\u7684\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u4e0e\u5f53\u524d\u8d26\u672c\u72b6\u6001\u8fdb\u884c\u540c\u6b65\u3002  The gossip-based data dissemination protocol performs three primary functions on a Fabric network:\n1.  Manages peer discovery and channel membership, by continually identifying available member peers, and eventually detecting peers that have gone offline.\n2.  Disseminates ledger data across all peers on a channel. Any peer with data that is out of sync with the rest of the channel identifies the missing blocks and syncs itself by copying the correct data.\n3.  Bring newly connected peers up to speed by allowing peer-to-peer state transfer update of ledger data.  \u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\u534f\u8bae\u5728Fabric\u7f51\u7edc\u4e0a\u6267\u884c\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff1a\n1.  \u901a\u8fc7\u4e0d\u65ad\u8bc6\u522b\u53ef\u7528\u7684\u6210\u5458\u8282\u70b9\u5e76\u6700\u7ec8\u76d1\u6d4b\u8282\u70b9\u79bb\u7ebf\u72b6\u6001\u7684\u65b9\u5f0f\uff0c\u5bf9\u8282\u70b9\u7684\u53d1\u73b0\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8fdb\u884c\u7ba1\u7406\u3002\n2.  \u901a\u8fc7\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u6765\u5206\u53d1\u8d26\u672c\u6570\u636e\u3002\u4efb\u4f55\u6570\u636e\u672a\u540c\u6b65\u7684\u8282\u70b9\u90fd\u53ef\u4ee5\u901a\u8fc7\u901a\u9053\u4e2d\u5176\u4ed6\u8282\u70b9\u6765\u6807\u8bc6\u7f3a\u5931\u7684\u533a\u5757\uff0c\u5e76\u901a\u8fc7\u590d\u5236\u6b63\u786e\u7684\u6570\u636e\u6765\u8fdb\u884c\u540c\u6b65\u3002\n3.  \u901a\u8fc7\u5141\u8bb8\u70b9\u5bf9\u70b9\u72b6\u6001\u4f20\u8f93\u66f4\u65b0\u8d26\u672c\u6570\u636e\uff0c\u4f7f\u65b0\u52a0\u5165\u8fde\u63a5\u7684\u8282\u70b9\u5feb\u901f\u5f97\u5230\u540c\u6b65\u3002  Gossip-based broadcasting operates by peers receiving messages from other peers on the channel, and then forwarding these messages to a number of randomly-selected peers on the channel, where this number is a configurable constant. Peers can also exercise a pull mechanism, rather than waiting for delivery of a message. This cycle repeats, with the result of channel membership, ledger and state information continually being kept current and in sync. For dissemination of new blocks, the  leader  peer on the channel pulls the data from the ordering service and initiates gossip dissemination to peers.  \u57fa\u4e8eGossip\u7684\u5e7f\u64ad\u7531\u8282\u70b9\u63a5\u6536\u6765\u81ea\u8be5\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u7684\u6d88\u606f\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6d88\u606f\u8f6c\u53d1\u5230\u901a\u9053\u4e0a\u7684\u591a\u4e2a\u968f\u673a\u9009\u62e9\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u8282\u70b9\u6570\u662f\u4e2a\u53ef\u914d\u7f6e\u7684\u5e38\u6570\u3002\u8282\u70b9\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u62c9\u53d6\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u6d88\u606f\u53d1\u9001\u3002\u5faa\u73af\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4f7f\u901a\u9053\u4e2d\u6210\u5458\u7684\u8d26\u672c\u548c\u72b6\u6001\u4fe1\u606f\u4e0d\u65ad\u4fdd\u6301\u548c\u5f53\u524d\u6700\u65b0\u72b6\u6001\u540c\u6b65\u3002\u4e3a\u4e86\u4f20\u64ad\u65b0\u533a\u5757\uff0c\u901a\u9053\u4e2d\u7684 \u9886\u5bfc\u8005 \u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u4e2d\u62c9\u53d6\u6570\u636e\uff0c\u5e76\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001Gossip\u6d88\u606f\u3002", 
            "title": "Gossip\u534f\u8bae(Gossip protocol)"
        }, 
        {
            "location": "/gossip_zh/#gossipgossip-messaging", 
            "text": "Online peers indicate their availability by continually broadcasting \u201calive\u201d messages, with each containing the  public key infrastructure (PKI)  ID and the signature of the sender over the message. Peers maintain channel membership by collecting these alive messages; if no peer receives an alive message from a specific peer, this \u201cdead\u201d peer is eventually purged from channel membership. Because \u201calive\u201d messages are cryptographically signed, malicious peers can never impersonate other peers, as they lack a signing key authorized by a root certificate authority (CA).  \u5728\u7ebf\u7684\u8282\u70b9\u901a\u8fc7\u6301\u7eed\u5730\u5e7f\u64ad\u201c\u6d3b\u8dc3\u201d\u6d88\u606f\u6765\u8868\u660e\u4ed6\u4eec\u7684\u53ef\u7528\u6027\uff0c\u6bcf\u6761\u6d88\u606f\u90fd\u5305\u542b \u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09 \u7684ID\u548c\u6d88\u606f\u53d1\u9001\u8005\u5bf9\u6d88\u606f\u7684\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u6536\u96c6\u8fd9\u4e9b\u6d3b\u8dc3\u6d88\u606f\u6765\u7ef4\u62a4\u901a\u9053\u6210\u5458\u8eab\u4efd\u3002\u5982\u679c\u6ca1\u6709\u8282\u70b9\u80fd\u4ece\u67d0\u4e2a\u7279\u5b9a\u7684\u8282\u70b9\u6536\u5230\u6d3b\u8dc3\u6d88\u606f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u201c\u6b7b\u4ea1\u201d\u7684\u8282\u70b9\u6700\u7ec8\u5c06\u4ece\u901a\u9053\u6210\u5458\u8eab\u4efd\u5217\u8868\u4e2d\u88ab\u5220\u9664\u3002\u7531\u4e8e\u201c\u6d3b\u8dc3\u201d\u4fe1\u606f\u662f\u901a\u8fc7\u5bc6\u7801\u5b66\u7b97\u6cd5\u8fdb\u884c\u7b7e\u540d\u7684\uff0c\u56e0\u6b64\u6076\u610f\u8282\u70b9\u65e0\u6cd5\u4f2a\u88c5\u6210\u5176\u4ed6\u8282\u70b9\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7f3a\u5c11\u6839\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff08CA\uff09\u6388\u6743\u7684\u7b7e\u540d\u5bc6\u94a5\u3002  In addition to the automatic forwarding of received messages, a state reconciliation process synchronizes  world state  across peers on each channel. Each peer continually pulls blocks from other peers on the channel, in order to repair its own state if discrepancies are identified. Because fixed connectivity is not required to maintain gossip-based data dissemination, the process reliably provides data consistency and integrity to the shared ledger, including tolerance for node crashes.  \u9664\u4e86\u5c06\u63a5\u6536\u5230\u7684\u6d88\u606f\u7684\u81ea\u52a8\u8f6c\u53d1\u4e4b\u5916\uff0c\u72b6\u6001\u534f\u7a0b\u8fd8\u4f1a\u5728\u6bcf\u4e2a\u901a\u9053\u4e0a\u540c\u6b65\u8282\u70b9\u95f4\u7684 \u4e16\u754c\u72b6\u6001 \u3002\u6bcf\u4e2a\u8282\u70b9\u4e0d\u505c\u5730\u4ece\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u4e2d\u63d0\u53d6\u533a\u5757\uff0c\u4ee5\u4fbf\u5728\u51fa\u73b0\u5dee\u5f02\u65f6\u4fee\u6b63\u81ea\u5df1\u7684\u72b6\u6001\u3002\u7531\u4e8e\u4e0d\u9700\u8981\u56fa\u5b9a\u8fde\u63a5\u6765\u7ef4\u62a4\u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\uff0c\u56e0\u6b64\u8be5\u6d41\u7a0b\u53ef\u4ee5\u53ef\u9760\u5730\u4e3a\u5171\u4eab\u8d26\u672c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u5b8c\u6574\u6027\uff0c\u5305\u62ec\u5bf9\u8282\u70b9\u5d29\u6e83\u7684\u5bb9\u9519\u3002  Because channels are segregated, peers on one channel cannot message or share information on any other channel. Though any peer can belong to multiple channels, partitioned messaging prevents blocks from being disseminated to peers that are not in the channel by applying message routing policies based on peers\u2019 channel subscriptions.  \u7531\u4e8e\u901a\u9053\u4e4b\u95f4\u76f8\u4e92\u9694\u79bb\uff0c\u4e00\u4e2a\u901a\u9053\u4e0a\u7684\u8282\u70b9\u4e0d\u80fd\u5728\u5176\u4ed6\u4efb\u4f55\u901a\u9053\u4e0a\u53d1\u9001\u6216\u5171\u4eab\u4fe1\u606f\u3002\u5c3d\u7ba1\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u4f46\u662f\u901a\u8fc7\u5c06\u57fa\u4e8e\u8282\u70b9\u901a\u9053\u8ba2\u9605\u7684\u673a\u5236\u4f5c\u4e3a\u6d88\u606f\u5206\u53d1\u7b56\u7565\uff0c\u8282\u70b9\u65e0\u6cd5\u5c06\u88ab\u5206\u9694\u5f00\u7684\u6d88\u606f\u4f20\u64ad\u7ed9\u4e0d\u5728\u901a\u9053\u4e2d\u7684\u8282\u70b9\u3002  Notes: \n1. Security of point-to-point messages are handled by the peer TLS layer, and do not require signatures. Peers are authenticated by their certificates, which are assigned by a CA. Although TLS certs are also used, it is the peer certificates that are authenticated in the gossip layer. Ledger blocks are signed by the ordering service, and then delivered to the leader peers on a channel. 2. Authentication is governed by the membership service provider for the peer. When the peer connects to the channel for the first time, the TLS session binds with fabric membership identity. This essentially authenticates each peer to the connecting peer, with respect to membership in the network and channel.  \u6ce8\u610f\uff1a \n1.  \u70b9\u5bf9\u70b9\u6d88\u606f\u7684\u5b89\u5168\u6027\u7531\u8282\u70b9\u7684TLS\u5c42\u5904\u7406\uff0c\u4e0d\u9700\u8981\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u5176\u7531CA\u5206\u914d\u7684\u8bc1\u4e66\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u8282\u70b9\u5728Gossip\u5c42\u7684\u8eab\u4efd\u8ba4\u8bc1\u4f1a\u901a\u8fc7TLS\u8bc1\u4e66\u4f53\u73b0\u3002\u8d26\u672c\u4e2d\u7684\u533a\u5757\u7531\u6392\u5e8f\u670d\u52a1\u8fdb\u884c\u7b7e\u540d\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u901a\u9053\u4e2d\u7684\u9886\u5bfc\u8005\u8282\u70b9\u3002\n2.  \u8ba4\u8bc1\u8fc7\u7a0b\u7531\u8282\u70b9\u7684\u6210\u5458\u7ba1\u7406\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u8282\u70b9\u7b2c\u4e00\u6b21\u8fde\u63a5\u5230\u901a\u9053\u4e2d\u7684\u65f6\u5019\uff0cTLS\u4f1a\u8bdd\u5c06\u4e0eFabric\u6210\u5458\u8eab\u4efd\u7ed1\u5b9a\u3002\u8fd9\u6837\u672c\u8d28\u4e0a\u4f7f\u6bcf\u4e2a\u8282\u70b9\u4e0e\u76f8\u8fde\u7684\u8282\u70b9\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4ece\u800c\u4e0e\u7f51\u7edc\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8eab\u4efd\u5173\u8054\u8d77\u6765\u3002", 
            "title": "Gossip\u6d88\u606f\u4f20\u8f93(Gossip messaging)"
        }, 
        {
            "location": "/Fabric-FAQ/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nShaoxi Qiu\n\n\n\n\n\n\n\n\n\n\nHyperledger Fabric FAQ\nHyperledger Fabric \u7b54\u7591\n\n\nEndorsement\n\u80cc\u4e66\n\n\nEndorsement architecture\n:\n\n\n\u80cc\u4e66\u64cd\u4f5c\u67b6\u6784\n:\n\n\nQ. How many peers in the network need to endorse a transaction?\n\n\n\u95ee\u9898\uff1a\u591a\u5c11\u4e2a\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u9700\u8981\u5bf9\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff1f\n\n\nA. The number of peers required to endorse a transaction is driven by the endorsement\npolicy that is specified at chaincode deployment time.\n\n\n\u7b54\u6848\uff1a\u9700\u8981\u5bf9\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u64cd\u4f5c\u7684\u8282\u70b9\u6570\u91cf\u7531\u80cc\u4e66\u7b56\u7565\u51b3\u5b9a\uff0c\u80cc\u4e66\u7b56\u7565\u5728\u94fe\u7801\u90e8\u7f72\u7684\u65f6\u5019\u6307\u5b9a\u3002\n\n\nQ. Does an application client need to connect to all peers?\n\n\n\u95ee\u9898\uff1a\u5e94\u7528\u5ba2\u6237\u7aef\u9700\u8981\u8fde\u63a5\u5230\u6240\u6709\u8282\u70b9\u5417\uff1f\n\n\nA. Clients only need to connect to as many peers as are required by the\nendorsement policy for the chaincode.\n\n\n\u7b54\u6848\uff1a\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u8fde\u63a5\u5230\u94fe\u7801\u5bf9\u5e94\u7684\u80cc\u4e66\u7b56\u7565\u6240\u8981\u6c42\u7684\u8db3\u591f\u591a\u7684\u8282\u70b9\u3002\n\n\nSecurity \n Access Control\n\u5b89\u5168\u548c\u6743\u9650\u63a7\u5236\n\n\nData Privacy and Access Control\n:\n\n\n\u6570\u636e\u9690\u79c1\u548c\u6743\u9650\u63a7\u5236\n:\n\n\nQ. How do I ensure data privacy?\n\n\n\u95ee\u9898\uff1a\u6211\u5982\u4f55\u80fd\u591f\u4fdd\u8bc1\u6570\u636e\u7684\u9690\u79c1\uff1f\n\n\nA. There are various aspects to data privacy.\nFirst, you can segregate your network into channels, where each channel\nrepresents a subset of participants that are authorized to see the data\nfor the chaincodes that are deployed to that channel.\nSecond, within a channel you can restrict the input data to chaincode to the\nset of endorsers only, by using visibility settings. The visibility setting\nwill determine whether input and output chaincode data is included in the\nsubmitted transaction,  versus just output data.\nThird, you can hash or encrypt the data before calling chaincode. If you hash\nthe data then you will need to provide a means to share the source data.\nIf you encrypt the data then you will need to provide a means to share the\ndecryption keys.\nFourth, you can restrict data access to certain roles in your organization, by\nbuilding access control into the chaincode logic.\nFifth, ledger data at rest can be encrypted via file system encryption on\nthe peer, and data in-transit is encrypted via TLS.\n\n\n\u7b54\u6848\uff1a\u6570\u636e\u9690\u79c1\u5305\u62ec\u51e0\u4e2a\u65b9\u9762\u3002\n\n\n\u7b2c\u4e00\u3001\u4f60\u53ef\u4ee5\u5c06\u4f60\u7684\u7f51\u7edc\u62c6\u5206\u4e3a\u591a\u4e2a\u901a\u9053\uff0c\u6bcf\u4e2a\u901a\u9053\u4ee3\u8868\u53c2\u4e0e\u8005\u7684\u5b50\u96c6\uff0c\u8fd9\u4e9b\u53c2\u4e0e\u8005\u6709\u6743\u8bbf\u95ee\u8be5\u901a\u9053\u6240\u90e8\u7f72\u7684\u94fe\u7801\u6240\u5305\u542b\u7684\u6570\u636e\u3002\n\n\n\u7b2c\u4e8c\u3001\u901a\u8fc7\u901a\u9053\u4f60\u53ef\u4ee5\u9650\u5236\u94fe\u7801\u7684\u8f93\u5165\u6570\u636e\u53ea\u5bf9\u80cc\u4e66\u8282\u70b9\u53ef\u89c1\u3002\u53ef\u89c1\u6027\u8bbe\u7f6e\u5c06\u51b3\u5b9a\u94fe\u7801\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u662f\u5426\u5305\u542b\u5728\u63d0\u4ea4\u4ea4\u6613\u4e2d\uff0c\u53ef\u4ee5\u53ea\u5305\u542b\u8f93\u51fa\u6570\u636e\u3002\n\n\n\u7b2c\u4e09\u3001\u4f60\u80fd\u5728\u8c03\u7528\u94fe\u7801\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\u6216\u8005\u52a0\u5bc6\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u539f\u6570\u636e\u7684\u65b9\u5f0f\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u5bc6\u94a5\u7684\u65b9\u5f0f\u3002\n\n\n\u7b2c\u56db\u3001\u4f60\u53ef\u4ee5\u901a\u8fc7\u94fe\u7801\u4e2d\u7684\u8bbf\u95ee\u63a7\u5236\u903b\u8f91\u9650\u5236\u6570\u636e\u8bbf\u95ee\u6743\u9650\uff0c\u53ea\u6709\u673a\u6784\u4e2d\u7279\u5b9a\u7684\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\u3002\n\n\n\u7b2c\u4e94\u3001\u8282\u70b9\u4e2d\u7684\u8d26\u672c\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u52a0\u5bc6\uff0c\u8282\u70b9\u95f4\u6570\u636e\u4f20\u8f93\u901a\u8fc7TLS\u8fdb\u884c\u52a0\u5bc6\u3002\n\n\nQ. Do the orderers see the transaction data?\n\n\n\u95ee\u9898\uff1a\u6392\u5e8f\u8282\u70b9\u80fd\u5426\u770b\u5230\u4ea4\u6613\u6570\u636e\uff1f\n\n\nA. No, the orderers only order transactions, they do not open the transactions.\nIf you do not want the data to go through the orderers at all, and you are only\nconcerned about the input data, then you can use visibility settings. The\nvisibility setting will determine whether input and output chaincode data is\nincluded in the submitted transaction,  versus just output data. Therefore,\nthe input data can be private to the endorsers only.\nIf you do not want the orderers to see chaincode output, then you can hash or\nencrypt the data before calling chaincode. If you hash the data then you will\nneed to provide a meansto share the source data. If you encrypt the data then\nyou will need to provide a means to share the decryption keys.\n\n\n\u7b54\u6848\uff1a\u4e0d\u80fd\uff0c\u6392\u5e8f\u8282\u70b9\u53ea\u662f\u6392\u5e8f\u4ea4\u6613\uff0c\u4e0d\u80fd\u89e3\u6790\u4ea4\u6613\u3002\u5982\u679c\u4f60\u53ea\u5173\u5fc3\u8f93\u5165\u6570\u636e\uff0c\u4e0d\u5e0c\u671b\u7ecf\u8fc7\u6392\u5e8f\u8282\u70b9\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u89c1\u6027\u8bbe\u7f6e\u3002\u53ef\u89c1\u6027\u8bbe\u7f6e\u5c06\u51b3\u5b9a\u94fe\u7801\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u662f\u5426\u5305\u542b\u5728\u63d0\u4ea4\u4ea4\u6613\u4e2d\uff0c\u53ef\u4ee5\u53ea\u5305\u542b\u8f93\u51fa\u6570\u636e\uff0c\u8fd9\u6837\u53ea\u6709\u80cc\u4e66\u8282\u70b9\u80fd\u770b\u5230\u8f93\u5165\u6570\u636e\u3002\u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u6392\u5e8f\u8282\u70b9\u770b\u5230\u4ea4\u6613\u8f93\u51fa\u6570\u636e\uff0c\u4f60\u80fd\u5728\u8c03\u7528\u94fe\u7801\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\u6216\u8005\u52a0\u5bc6\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u539f\u6570\u636e\u7684\u65b9\u5f0f\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u5bc6\u94a5\u7684\u65b9\u5f0f\u3002\n\n\nApplication-side Programming Model\n\u5e94\u7528\u7aef\u7f16\u7a0b\u6a21\u578b\n\n\nTransaction execution result\n:\n\n\n\u4ea4\u6613\u6267\u884c\u7ed3\u679c\n:\n\n\nQ. How do application clients know the outcome of a transaction?\n\n\n\u95ee\u9898\uff1a\u5e94\u7528\u5ba2\u6237\u7aef\u5982\u4f55\u77e5\u9053\u4ea4\u6613\u7684\u8f93\u51fa\uff1f\n\n\nA. The transaction simulation results are returned to the client by the\nendorser in the proposal response.  If there are multiple endorsers, the\nclient can check that the responses are all the same, and submit the results\nand endorsements for ordering and commitment. Ultimately the committing peers\nwill validate or invalidate the transaction, and the client becomes\naware of the outcome via an event, that the SDK makes available to the\napplication client.\n\n\n\u7b54\u6848\uff1a\u80cc\u4e66\u8282\u70b9\u4f1a\u8fd4\u56de\u63d0\u6848\u6a21\u62df\u4ea4\u6613\u7684\u7ed3\u679c\u3002\u5982\u679c\u6709\u591a\u4e2a\u80cc\u4e66\u8282\u70b9\uff0c\u5ba2\u6237\u7aef\u80fd\u68c0\u67e5\u8fd4\u56de\u7ed3\u679c\u662f\u5426\u76f8\u540c\u540e\u518d\u63d0\u4ea4\u4ea4\u6613\u7ed3\u679c\u4ee5\u53ca\u6392\u5e8f\u548c\u751f\u6548\u6240\u9700\u8981\u7684\u80cc\u4e66\u3002\u6700\u7ec8\uff0c\u751f\u6548\u8282\u70b9\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u662f\u5426\u5408\u6cd5\uff0c\u5ba2\u6237\u7aef\u901a\u8fc7SDK\u63d0\u4f9b\u7684\u4e8b\u4ef6\u901a\u77e5\u65b9\u5f0f\u63a5\u6536\u4ea4\u6613\u7ed3\u679c\u3002\n\n\nLedger queries\n:\n\n\n\u8d26\u672c\u67e5\u8be2\n:\n\n\nQ. How do I query the ledger data?\n\n\n\u95ee\u9898\uff1a\u5982\u4f55\u67e5\u8be2\u8d26\u672c\u6570\u636e\uff1f\n\n\nA. Within chaincode you can query based on keys. Keys can be queried by range,\nand composite keys can be modeled to enable equivalence queries against multiple\nparameters. For example a composite key of (owner,asset_id) can be used to\nquery all assets owned by a certain entity. These key-based queries can be used\nfor read-only queries against the ledger, as well as in transactions that\nupdate the ledger.\n\n\nIf you model asset data as JSON in chaincode and use CouchDB as the state\ndatabase, you can also perform complex rich queries against the chaincode\ndata values, using the CouchDB JSON query language within chaincode. The\napplication client can perform read-only queries, but these responses are\nnot typically submitted as part of transactions to the ordering service.\n\n\n\u7b54\u6848\uff1a\u901a\u8fc7\u94fe\u7801\u53ef\u4ee5\u901a\u8fc7\u952e\u503c\u67e5\u8be2\u6570\u636e\u3002\u53ef\u4ee5\u5bf9\u952e\u503c\u8fdb\u884c\u8303\u56f4\u67e5\u8be2\uff0c\u590d\u5408\u4e3b\u952e\u53ef\u4ee5\u5141\u8bb8\u67e5\u8be2\u51fa\u90e8\u5206\u952e\u503c\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982\u7531 (owner,asset_id) \u7ec4\u6210\u7684\u590d\u5408\u4e3b\u952e\u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u7279\u5b9a\u5b9e\u4f53\u6240\u62e5\u6709\u7684\u6240\u6709asset\u3002\n\n\nQ. How do I query the historical data to understand data provenance?\n\n\n\u95ee\u9898\uff1a\u5982\u4f55\u67e5\u8be2\u6570\u636e\u5386\u53f2\u6765\u7406\u89e3\u6570\u636e\u51fa\u5904\uff1f\n\n\nA. The chaincode API \nGetHistoryForKey()\n will return history of\nvalues for a key.\n\n\n\u7b54\u6848\uff1a \u94fe\u7801\u4e2dAPI  \nGetHistoryForKey()\n \u4f1a\u8fd4\u56de\u952e\u503c\u5bf9\u5e94\u7684\u6570\u636e\u5386\u53f2\u3002\n\n\nQ. How to guarantee the query result is correct, especially when the peer being\nqueried may be recovering and catching up on block processing?\n\n\n\u95ee\u9898\uff1a\u5982\u4f55\u4fdd\u8bc1\u67e5\u8be2\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u7279\u522b\u662f\u5f53\u67e5\u8be2\u7684\u8282\u70b9\u53ef\u80fd\u6b63\u5904\u5728\u6062\u590d\u548c\u83b7\u53d6\u6700\u65b0\u533a\u5757\u7684\u8fc7\u7a0b\u4e2d\uff1f\n\n\nA. The client can query multiple peers, compare their block heights, compare\ntheir query results, and favor the peers at the higher block heights.\n\n\n\u7b54\u6848\uff1a\u5ba2\u6237\u7aef\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u8282\u70b9\uff0c\u6bd4\u8f83\u4ed6\u4eec\u7684\u533a\u5757\u9ad8\u5ea6\u67e5\u8be2\u7ed3\u679c\uff0c\u9009\u7528\u533a\u5757\u9ad8\u5ea6\u6700\u9ad8\u7684\u7ed3\u679c\u3002\n\n\nChaincode (Smart Contracts and Digital Assets)\n\u94fe\u7801\uff08\u667a\u80fd\u5408\u7ea6\u548c\u6570\u5b57\u8d44\u4ea7\uff09\n\n\nQ. Does Hyperledger Fabric support smart contract logic?\n\n\n\u95ee\u9898\uff1aHyperledger Fabric \u662f\u5426\u652f\u6301\u667a\u80fd\u5408\u7ea6\u903b\u8f91\uff1f\n\n\nA. Yes. We call this feature :ref:\nchaincode\n. It is our interpretation of the\nsmart contract method/algorithm, with additional features.\n\n\nA chaincode is programmatic code deployed on the network, where it is\nexecuted and validated by chain validators together during the consensus\nprocess. Developers can use chaincodes to develop business contracts,\nasset definitions, and collectively-managed decentralized applications.\n\n\n\u7b54\u6848\uff1a\u662f\u7684\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u529f\u80fd\u4e3a :ref:\nchaincode\n. \u8fd9\u662f\u6211\u4eec\u5bf9\u5e26\u6709\u9644\u52a0\u529f\u80fd\u7684\u667a\u80fd\u5408\u540c\u65b9\u6cd5/\u7b97\u6cd5\u7684\u7406\u89e3\u3002\n\n\n\u94fe\u7801\u662f\u90e8\u7f72\u5728\u7f51\u7edc\u4e2d\u7684\u7a0b\u5e8f\u4ee3\u7801\uff0c\u901a\u8fc7\u5171\u8bc6\u6d41\u7a0b\u88ab\u94fe\u7684\u9a8c\u8bc1\u8005\u5171\u540c\u6267\u884c\u5e76\u9a8c\u8bc1\u3002\u5f00\u53d1\u8005\u80fd\u4f7f\u7528\u94fe\u7801\u6765\u5f00\u53d1\u5546\u4e1a\u5408\u540c\u3001\u8d44\u4ea7\u5b9a\u4e49\u548c\u96c6\u4f53\u7ba1\u7406\u7684\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\u3002\n\n\nQ. How do I create a business contract?\n\n\n\u95ee\u9898\uff1a\u5982\u4f55\u521b\u5efa\u5546\u4e1a\u5408\u540c\uff1f\n\n\nA. There are generally two ways to develop business contracts: the first way is\nto code individual contracts into standalone instances of chaincode; the\nsecond way, and probably the more efficient way, is to use chaincode to\ncreate decentralized applications that manage the life cycle of one or\nmultiple types of business contracts, and let end users instantiate\ninstances of contracts within these applications.\n\n\n\u7b54\u6848\uff1a\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5f00\u53d1\u5546\u4e1a\u5408\u540c\uff1a\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u5f00\u53d1\u5355\u72ec\u7684\u5408\u540c\u5728\u72ec\u7acb\u7684\u94fe\u7801\u5b9e\u4f8b;\u7b2c\u4e8c\u4e2a\u4e5f\u662f\u6700\u6709\u6548\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u94fe\u7801\u521b\u5efa\u53bb\u4e2d\u5fc3\u5316\u7684\u5e94\u7528\u6765\u7ba1\u7406\u4e00\u79cd\u6216\u591a\u79cd\u7c7b\u578b\u7684\u5546\u4e1a\u5408\u540c\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u8ba9\u7ec8\u7aef\u7528\u6237\u5b9e\u4f8b\u5316\u5e26\u6709\u8fd9\u4e9b\u5e94\u7528\u7684\u5408\u540c\u5b9e\u4f8b\u3002\n\n\nQ. How do I create assets?\n\n\n\u5982\u4f55\u521b\u5efa\u8d44\u4ea7\uff1f\n\n\nA. Users can use chaincode (for business rules) and membership service (for digital tokens) to\ndesign assets, as well as the logic that manages them.\n\n\nThere are two popular approaches to defining assets in most blockchain\nsolutions: the stateless UTXO model, where account balances are encoded\ninto past transaction records; and the account model, where account\nbalances are kept in state storage space on the ledger.\n\n\nEach approach carries its own benefits and drawbacks. This blockchain\ntechnology does not advocate either one over the other. Instead, one of our\nfirst requirements was to ensure that both approaches can be easily\nimplemented.\n\n\n\u7b54\u6848\uff1a\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u94fe\u7801\uff08\u5728\u5546\u4e1a\u89c4\u5219\u65b9\u9762\uff09\u548c\u6210\u5458\u7ba1\u7406\u670d\u52a1\uff08\u5728\u6570\u5b57\u5bc6\u94a5\u65b9\u9762\uff09\u6765\u8bbe\u8ba1\u8d44\u4ea7\u548c\u8d44\u4ea7\u7ba1\u7406\u903b\u8f91\u3002\n\n\n\u533a\u5757\u94fe\u89e3\u51b3\u65b9\u6848\u4e2d\u6709\u4e24\u79cd\u6d41\u884c\u7684\u65b9\u6cd5\u6765\u8bbe\u8ba1\u8d44\u4ea7\uff1a\u65e0\u72b6\u6001\u7684UTXO\u6a21\u578b\uff0c\u8d26\u6237\u4f59\u989d\u662f\u8fc7\u53bb\u4ea4\u6613\u8bb0\u5f55\u4e2d\u6ca1\u6709\u4f7f\u7528\u7684\u4ea4\u6613\u8f93\u51fa\u7684\u5408\u8ba1;\u53e6\u4e00\u79cd\u662f\u8d26\u6237\u6a21\u578b\uff0c\u8d26\u6237\u4f59\u989d\u88ab\u5b58\u50a8\u5728\u8d26\u672c\u4e2d\u7684\u72b6\u6001\u503c\u4e2d\u3002\n\n\n\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u6709\u597d\u5904\u548c\u5f0a\u7aef\u3002\u672c\u533a\u5757\u94fe\u6280\u672f\u5bf9\u4e24\u79cd\u65b9\u6cd5\u6ca1\u6709\u503e\u5411\u3002\u6211\u4eec\u6700\u521d\u7684\u8981\u6c42\u5c31\u662f\u786e\u4fdd\u4e24\u4e2a\u65b9\u6cd5\u90fd\u80fd\u591f\u88ab\u5bb9\u6613\u5b9e\u73b0\u3002\n\n\nQ. Which languages are supported for writing chaincode?\n\n\n\u95ee\u9898\uff1a\u94fe\u7801\u652f\u6301\u54ea\u4e9b\u8bed\u8a00\uff1f\n\n\nA. Chaincode can be written in any programming language and executed in\ncontainers.  The first fully supported chaincode language is Golang.\n\n\nSupport for additional languages and the development of a templating language\nhave been discussed, and more details will be released in the near future.\n\n\nIt is also possible to build Hyperledger Fabric applications using\n\nHyperledger Composer\n.\n\n\n\u7b54\u6848\uff1a\u94fe\u7801\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u5e76\u5728\u5bb9\u5668\u5185\u6267\u884c\u3002\u7b2c\u4e00\u4e2a\u5168\u529f\u80fd\u652f\u6301\u7684\u8bed\u8a00\u662fGolang\u3002\n\n\n\u5bf9\u5176\u4ed6\u8bed\u8a00\u7684\u652f\u6301\u548c\u6a21\u677f\u8bed\u8a00\u7684\u5f00\u53d1\u6b63\u5728\u88ab\u8ba8\u8bba\uff0c\u66f4\u591a\u7ec6\u8282\u4f1a\u5728\u8fd1\u671f\u53d1\u5e03\u3002\n\n\n\u8fd8\u53ef\u4ee5\u901a\u8fc7\nHyperledger Composer\n\u6765\u6784\u5efaHyperledger Fabric\u5e94\u7528\u3002\n\n\nQ. Does the Hyperledger Fabric have native currency?\n\n\n\u95ee\u9898\uff1aHyperledger Fabric\u662f\u5426\u6709\u539f\u751f\u7684\u8d27\u5e01\uff1f\n\n\nA. No. However, if you really need a native currency for your chain network,\nyou can develop your own native currency with chaincode. One common attribute\nof native currency is that some amount will get transacted (the chaincode\ndefining that currency will get called) every time a transaction is processed\non its chain.\n\n\n\u7b54\u6848\uff1a\u6ca1\u6709\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u786e\u5b9e\u9700\u8981\u539f\u751f\u7684\u8d27\u5e01\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u94fe\u7801\u6765\u5f00\u53d1\u8d27\u5e01\u3002\u539f\u751f\u8d27\u5e01\u7684\u4e00\u4e2a\u57fa\u672c\u7684\u5c5e\u6027\u662f\u4e00\u4e9b\u6570\u91cf\u4f1a\u88ab\u8f6c\u79fb\uff08\u5b9a\u4e49\u8d27\u5e01\u7684\u94fe\u7801\u4f1a\u88ab\u8c03\u7528\uff09\u5f53\u6bcf\u6b21\u94fe\u4e0a\u4ea4\u6613\u88ab\u6267\u884c\u3002\n\n\nDifferences in Most Recent Releases\n\u6700\u8fd1\u7248\u672c\u7684\u533a\u522b\n\n\nQ. As part of the v1.0.0 release, what are the highlight differences between v0.6 and v1.0?\n\n\n\u95ee\u9898\uff1aV0.6\u7248\u672c\u548cV1.0\u7248\u672c\u7684\u6700\u5927\u533a\u522b\u662f\u4ec0\u4e48\uff1f\n\n\nA. The differences between any subsequent releases are provided together with the\n\nRelease Notes\n.\nSince Fabric is a pluggable modular framework, you can refer to the \ndesign-docs\n for further information of these difference.\n\n\n\u7b54\u6848\uff1a\u4efb\u4f55\u540e\u7eed\u7248\u672c\u7684\u5dee\u5f02\u90fd\u5728\n\u7248\u672c\u8bf4\u660e\n\u4e2d\u5c55\u73b0\u3002\u56e0\u4e3aFabric\u662f\u4e00\u4e2a\u6a21\u5757\u53ef\u66ff\u6362\u7684\u6846\u67b6\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\n\u8bbe\u8ba1\u6587\u6863\n\u83b7\u53d6\u66f4\u591a\u5dee\u5f02\u4fe1\u606f\u3002\n\n\nQ. Where to get help for the technical questions not answered above?\n\n\n\u95ee\u9898\uff1a\u54ea\u91cc\u53ef\u4ee5\u83b7\u5f97\u4e0a\u6587\u4e2d\u6ca1\u88ab\u89e3\u7b54\u7684\u6280\u672f\u95ee\u9898\u7684\u5e2e\u52a9\uff1f\n\n\nA. Please use \nStackOverflow\n.\n\n\n\u7b54\u6848\uff1a\u8bf7\u4f7f\u7528 \nStackOverflow\n.\n\n\n.. Licensed under Creative Commons Attribution 4.0 International License\n\n\n.. \u672c\u6587\u901a\u8fc7Creative Commons Attribution 4.0 International License\u534f\u8bae\u8fdb\u884c\u6388\u6743\n\n\nhttps://creativecommons.org/licenses/by/4.0/", 
            "title": "Hyperledger Fabric \u7b54\u7591"
        }, 
        {
            "location": "/Fabric-FAQ/#hyperledger-fabric-faqhyperledger-fabric", 
            "text": "", 
            "title": "Hyperledger Fabric FAQHyperledger Fabric \u7b54\u7591"
        }, 
        {
            "location": "/Fabric-FAQ/#endorsement", 
            "text": "Endorsement architecture :  \u80cc\u4e66\u64cd\u4f5c\u67b6\u6784 :  Q. How many peers in the network need to endorse a transaction?  \u95ee\u9898\uff1a\u591a\u5c11\u4e2a\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u9700\u8981\u5bf9\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff1f  A. The number of peers required to endorse a transaction is driven by the endorsement\npolicy that is specified at chaincode deployment time.  \u7b54\u6848\uff1a\u9700\u8981\u5bf9\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u64cd\u4f5c\u7684\u8282\u70b9\u6570\u91cf\u7531\u80cc\u4e66\u7b56\u7565\u51b3\u5b9a\uff0c\u80cc\u4e66\u7b56\u7565\u5728\u94fe\u7801\u90e8\u7f72\u7684\u65f6\u5019\u6307\u5b9a\u3002  Q. Does an application client need to connect to all peers?  \u95ee\u9898\uff1a\u5e94\u7528\u5ba2\u6237\u7aef\u9700\u8981\u8fde\u63a5\u5230\u6240\u6709\u8282\u70b9\u5417\uff1f  A. Clients only need to connect to as many peers as are required by the\nendorsement policy for the chaincode.  \u7b54\u6848\uff1a\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u8fde\u63a5\u5230\u94fe\u7801\u5bf9\u5e94\u7684\u80cc\u4e66\u7b56\u7565\u6240\u8981\u6c42\u7684\u8db3\u591f\u591a\u7684\u8282\u70b9\u3002", 
            "title": "Endorsement\u80cc\u4e66"
        }, 
        {
            "location": "/Fabric-FAQ/#security-access-control", 
            "text": "Data Privacy and Access Control :  \u6570\u636e\u9690\u79c1\u548c\u6743\u9650\u63a7\u5236 :  Q. How do I ensure data privacy?  \u95ee\u9898\uff1a\u6211\u5982\u4f55\u80fd\u591f\u4fdd\u8bc1\u6570\u636e\u7684\u9690\u79c1\uff1f  A. There are various aspects to data privacy.\nFirst, you can segregate your network into channels, where each channel\nrepresents a subset of participants that are authorized to see the data\nfor the chaincodes that are deployed to that channel.\nSecond, within a channel you can restrict the input data to chaincode to the\nset of endorsers only, by using visibility settings. The visibility setting\nwill determine whether input and output chaincode data is included in the\nsubmitted transaction,  versus just output data.\nThird, you can hash or encrypt the data before calling chaincode. If you hash\nthe data then you will need to provide a means to share the source data.\nIf you encrypt the data then you will need to provide a means to share the\ndecryption keys.\nFourth, you can restrict data access to certain roles in your organization, by\nbuilding access control into the chaincode logic.\nFifth, ledger data at rest can be encrypted via file system encryption on\nthe peer, and data in-transit is encrypted via TLS.  \u7b54\u6848\uff1a\u6570\u636e\u9690\u79c1\u5305\u62ec\u51e0\u4e2a\u65b9\u9762\u3002  \u7b2c\u4e00\u3001\u4f60\u53ef\u4ee5\u5c06\u4f60\u7684\u7f51\u7edc\u62c6\u5206\u4e3a\u591a\u4e2a\u901a\u9053\uff0c\u6bcf\u4e2a\u901a\u9053\u4ee3\u8868\u53c2\u4e0e\u8005\u7684\u5b50\u96c6\uff0c\u8fd9\u4e9b\u53c2\u4e0e\u8005\u6709\u6743\u8bbf\u95ee\u8be5\u901a\u9053\u6240\u90e8\u7f72\u7684\u94fe\u7801\u6240\u5305\u542b\u7684\u6570\u636e\u3002  \u7b2c\u4e8c\u3001\u901a\u8fc7\u901a\u9053\u4f60\u53ef\u4ee5\u9650\u5236\u94fe\u7801\u7684\u8f93\u5165\u6570\u636e\u53ea\u5bf9\u80cc\u4e66\u8282\u70b9\u53ef\u89c1\u3002\u53ef\u89c1\u6027\u8bbe\u7f6e\u5c06\u51b3\u5b9a\u94fe\u7801\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u662f\u5426\u5305\u542b\u5728\u63d0\u4ea4\u4ea4\u6613\u4e2d\uff0c\u53ef\u4ee5\u53ea\u5305\u542b\u8f93\u51fa\u6570\u636e\u3002  \u7b2c\u4e09\u3001\u4f60\u80fd\u5728\u8c03\u7528\u94fe\u7801\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\u6216\u8005\u52a0\u5bc6\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u539f\u6570\u636e\u7684\u65b9\u5f0f\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u5bc6\u94a5\u7684\u65b9\u5f0f\u3002  \u7b2c\u56db\u3001\u4f60\u53ef\u4ee5\u901a\u8fc7\u94fe\u7801\u4e2d\u7684\u8bbf\u95ee\u63a7\u5236\u903b\u8f91\u9650\u5236\u6570\u636e\u8bbf\u95ee\u6743\u9650\uff0c\u53ea\u6709\u673a\u6784\u4e2d\u7279\u5b9a\u7684\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\u3002  \u7b2c\u4e94\u3001\u8282\u70b9\u4e2d\u7684\u8d26\u672c\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u52a0\u5bc6\uff0c\u8282\u70b9\u95f4\u6570\u636e\u4f20\u8f93\u901a\u8fc7TLS\u8fdb\u884c\u52a0\u5bc6\u3002  Q. Do the orderers see the transaction data?  \u95ee\u9898\uff1a\u6392\u5e8f\u8282\u70b9\u80fd\u5426\u770b\u5230\u4ea4\u6613\u6570\u636e\uff1f  A. No, the orderers only order transactions, they do not open the transactions.\nIf you do not want the data to go through the orderers at all, and you are only\nconcerned about the input data, then you can use visibility settings. The\nvisibility setting will determine whether input and output chaincode data is\nincluded in the submitted transaction,  versus just output data. Therefore,\nthe input data can be private to the endorsers only.\nIf you do not want the orderers to see chaincode output, then you can hash or\nencrypt the data before calling chaincode. If you hash the data then you will\nneed to provide a meansto share the source data. If you encrypt the data then\nyou will need to provide a means to share the decryption keys.  \u7b54\u6848\uff1a\u4e0d\u80fd\uff0c\u6392\u5e8f\u8282\u70b9\u53ea\u662f\u6392\u5e8f\u4ea4\u6613\uff0c\u4e0d\u80fd\u89e3\u6790\u4ea4\u6613\u3002\u5982\u679c\u4f60\u53ea\u5173\u5fc3\u8f93\u5165\u6570\u636e\uff0c\u4e0d\u5e0c\u671b\u7ecf\u8fc7\u6392\u5e8f\u8282\u70b9\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u89c1\u6027\u8bbe\u7f6e\u3002\u53ef\u89c1\u6027\u8bbe\u7f6e\u5c06\u51b3\u5b9a\u94fe\u7801\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u662f\u5426\u5305\u542b\u5728\u63d0\u4ea4\u4ea4\u6613\u4e2d\uff0c\u53ef\u4ee5\u53ea\u5305\u542b\u8f93\u51fa\u6570\u636e\uff0c\u8fd9\u6837\u53ea\u6709\u80cc\u4e66\u8282\u70b9\u80fd\u770b\u5230\u8f93\u5165\u6570\u636e\u3002\u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u6392\u5e8f\u8282\u70b9\u770b\u5230\u4ea4\u6613\u8f93\u51fa\u6570\u636e\uff0c\u4f60\u80fd\u5728\u8c03\u7528\u94fe\u7801\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\u6216\u8005\u52a0\u5bc6\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u539f\u6570\u636e\u7684\u65b9\u5f0f\u3002\u5982\u679c\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u83b7\u53d6\u5bc6\u94a5\u7684\u65b9\u5f0f\u3002", 
            "title": "Security &amp; Access Control\u5b89\u5168\u548c\u6743\u9650\u63a7\u5236"
        }, 
        {
            "location": "/Fabric-FAQ/#application-side-programming-model", 
            "text": "Transaction execution result :  \u4ea4\u6613\u6267\u884c\u7ed3\u679c :  Q. How do application clients know the outcome of a transaction?  \u95ee\u9898\uff1a\u5e94\u7528\u5ba2\u6237\u7aef\u5982\u4f55\u77e5\u9053\u4ea4\u6613\u7684\u8f93\u51fa\uff1f  A. The transaction simulation results are returned to the client by the\nendorser in the proposal response.  If there are multiple endorsers, the\nclient can check that the responses are all the same, and submit the results\nand endorsements for ordering and commitment. Ultimately the committing peers\nwill validate or invalidate the transaction, and the client becomes\naware of the outcome via an event, that the SDK makes available to the\napplication client.  \u7b54\u6848\uff1a\u80cc\u4e66\u8282\u70b9\u4f1a\u8fd4\u56de\u63d0\u6848\u6a21\u62df\u4ea4\u6613\u7684\u7ed3\u679c\u3002\u5982\u679c\u6709\u591a\u4e2a\u80cc\u4e66\u8282\u70b9\uff0c\u5ba2\u6237\u7aef\u80fd\u68c0\u67e5\u8fd4\u56de\u7ed3\u679c\u662f\u5426\u76f8\u540c\u540e\u518d\u63d0\u4ea4\u4ea4\u6613\u7ed3\u679c\u4ee5\u53ca\u6392\u5e8f\u548c\u751f\u6548\u6240\u9700\u8981\u7684\u80cc\u4e66\u3002\u6700\u7ec8\uff0c\u751f\u6548\u8282\u70b9\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u662f\u5426\u5408\u6cd5\uff0c\u5ba2\u6237\u7aef\u901a\u8fc7SDK\u63d0\u4f9b\u7684\u4e8b\u4ef6\u901a\u77e5\u65b9\u5f0f\u63a5\u6536\u4ea4\u6613\u7ed3\u679c\u3002  Ledger queries :  \u8d26\u672c\u67e5\u8be2 :  Q. How do I query the ledger data?  \u95ee\u9898\uff1a\u5982\u4f55\u67e5\u8be2\u8d26\u672c\u6570\u636e\uff1f  A. Within chaincode you can query based on keys. Keys can be queried by range,\nand composite keys can be modeled to enable equivalence queries against multiple\nparameters. For example a composite key of (owner,asset_id) can be used to\nquery all assets owned by a certain entity. These key-based queries can be used\nfor read-only queries against the ledger, as well as in transactions that\nupdate the ledger.  If you model asset data as JSON in chaincode and use CouchDB as the state\ndatabase, you can also perform complex rich queries against the chaincode\ndata values, using the CouchDB JSON query language within chaincode. The\napplication client can perform read-only queries, but these responses are\nnot typically submitted as part of transactions to the ordering service.  \u7b54\u6848\uff1a\u901a\u8fc7\u94fe\u7801\u53ef\u4ee5\u901a\u8fc7\u952e\u503c\u67e5\u8be2\u6570\u636e\u3002\u53ef\u4ee5\u5bf9\u952e\u503c\u8fdb\u884c\u8303\u56f4\u67e5\u8be2\uff0c\u590d\u5408\u4e3b\u952e\u53ef\u4ee5\u5141\u8bb8\u67e5\u8be2\u51fa\u90e8\u5206\u952e\u503c\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982\u7531 (owner,asset_id) \u7ec4\u6210\u7684\u590d\u5408\u4e3b\u952e\u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u7279\u5b9a\u5b9e\u4f53\u6240\u62e5\u6709\u7684\u6240\u6709asset\u3002  Q. How do I query the historical data to understand data provenance?  \u95ee\u9898\uff1a\u5982\u4f55\u67e5\u8be2\u6570\u636e\u5386\u53f2\u6765\u7406\u89e3\u6570\u636e\u51fa\u5904\uff1f  A. The chaincode API  GetHistoryForKey()  will return history of\nvalues for a key.  \u7b54\u6848\uff1a \u94fe\u7801\u4e2dAPI   GetHistoryForKey()  \u4f1a\u8fd4\u56de\u952e\u503c\u5bf9\u5e94\u7684\u6570\u636e\u5386\u53f2\u3002  Q. How to guarantee the query result is correct, especially when the peer being\nqueried may be recovering and catching up on block processing?  \u95ee\u9898\uff1a\u5982\u4f55\u4fdd\u8bc1\u67e5\u8be2\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u7279\u522b\u662f\u5f53\u67e5\u8be2\u7684\u8282\u70b9\u53ef\u80fd\u6b63\u5904\u5728\u6062\u590d\u548c\u83b7\u53d6\u6700\u65b0\u533a\u5757\u7684\u8fc7\u7a0b\u4e2d\uff1f  A. The client can query multiple peers, compare their block heights, compare\ntheir query results, and favor the peers at the higher block heights.  \u7b54\u6848\uff1a\u5ba2\u6237\u7aef\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u8282\u70b9\uff0c\u6bd4\u8f83\u4ed6\u4eec\u7684\u533a\u5757\u9ad8\u5ea6\u67e5\u8be2\u7ed3\u679c\uff0c\u9009\u7528\u533a\u5757\u9ad8\u5ea6\u6700\u9ad8\u7684\u7ed3\u679c\u3002", 
            "title": "Application-side Programming Model\u5e94\u7528\u7aef\u7f16\u7a0b\u6a21\u578b"
        }, 
        {
            "location": "/Fabric-FAQ/#chaincode-smart-contracts-and-digital-assets", 
            "text": "Q. Does Hyperledger Fabric support smart contract logic?  \u95ee\u9898\uff1aHyperledger Fabric \u662f\u5426\u652f\u6301\u667a\u80fd\u5408\u7ea6\u903b\u8f91\uff1f  A. Yes. We call this feature :ref: chaincode . It is our interpretation of the\nsmart contract method/algorithm, with additional features.  A chaincode is programmatic code deployed on the network, where it is\nexecuted and validated by chain validators together during the consensus\nprocess. Developers can use chaincodes to develop business contracts,\nasset definitions, and collectively-managed decentralized applications.  \u7b54\u6848\uff1a\u662f\u7684\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u529f\u80fd\u4e3a :ref: chaincode . \u8fd9\u662f\u6211\u4eec\u5bf9\u5e26\u6709\u9644\u52a0\u529f\u80fd\u7684\u667a\u80fd\u5408\u540c\u65b9\u6cd5/\u7b97\u6cd5\u7684\u7406\u89e3\u3002  \u94fe\u7801\u662f\u90e8\u7f72\u5728\u7f51\u7edc\u4e2d\u7684\u7a0b\u5e8f\u4ee3\u7801\uff0c\u901a\u8fc7\u5171\u8bc6\u6d41\u7a0b\u88ab\u94fe\u7684\u9a8c\u8bc1\u8005\u5171\u540c\u6267\u884c\u5e76\u9a8c\u8bc1\u3002\u5f00\u53d1\u8005\u80fd\u4f7f\u7528\u94fe\u7801\u6765\u5f00\u53d1\u5546\u4e1a\u5408\u540c\u3001\u8d44\u4ea7\u5b9a\u4e49\u548c\u96c6\u4f53\u7ba1\u7406\u7684\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\u3002  Q. How do I create a business contract?  \u95ee\u9898\uff1a\u5982\u4f55\u521b\u5efa\u5546\u4e1a\u5408\u540c\uff1f  A. There are generally two ways to develop business contracts: the first way is\nto code individual contracts into standalone instances of chaincode; the\nsecond way, and probably the more efficient way, is to use chaincode to\ncreate decentralized applications that manage the life cycle of one or\nmultiple types of business contracts, and let end users instantiate\ninstances of contracts within these applications.  \u7b54\u6848\uff1a\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5f00\u53d1\u5546\u4e1a\u5408\u540c\uff1a\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u5f00\u53d1\u5355\u72ec\u7684\u5408\u540c\u5728\u72ec\u7acb\u7684\u94fe\u7801\u5b9e\u4f8b;\u7b2c\u4e8c\u4e2a\u4e5f\u662f\u6700\u6709\u6548\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u94fe\u7801\u521b\u5efa\u53bb\u4e2d\u5fc3\u5316\u7684\u5e94\u7528\u6765\u7ba1\u7406\u4e00\u79cd\u6216\u591a\u79cd\u7c7b\u578b\u7684\u5546\u4e1a\u5408\u540c\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u8ba9\u7ec8\u7aef\u7528\u6237\u5b9e\u4f8b\u5316\u5e26\u6709\u8fd9\u4e9b\u5e94\u7528\u7684\u5408\u540c\u5b9e\u4f8b\u3002  Q. How do I create assets?  \u5982\u4f55\u521b\u5efa\u8d44\u4ea7\uff1f  A. Users can use chaincode (for business rules) and membership service (for digital tokens) to\ndesign assets, as well as the logic that manages them.  There are two popular approaches to defining assets in most blockchain\nsolutions: the stateless UTXO model, where account balances are encoded\ninto past transaction records; and the account model, where account\nbalances are kept in state storage space on the ledger.  Each approach carries its own benefits and drawbacks. This blockchain\ntechnology does not advocate either one over the other. Instead, one of our\nfirst requirements was to ensure that both approaches can be easily\nimplemented.  \u7b54\u6848\uff1a\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u94fe\u7801\uff08\u5728\u5546\u4e1a\u89c4\u5219\u65b9\u9762\uff09\u548c\u6210\u5458\u7ba1\u7406\u670d\u52a1\uff08\u5728\u6570\u5b57\u5bc6\u94a5\u65b9\u9762\uff09\u6765\u8bbe\u8ba1\u8d44\u4ea7\u548c\u8d44\u4ea7\u7ba1\u7406\u903b\u8f91\u3002  \u533a\u5757\u94fe\u89e3\u51b3\u65b9\u6848\u4e2d\u6709\u4e24\u79cd\u6d41\u884c\u7684\u65b9\u6cd5\u6765\u8bbe\u8ba1\u8d44\u4ea7\uff1a\u65e0\u72b6\u6001\u7684UTXO\u6a21\u578b\uff0c\u8d26\u6237\u4f59\u989d\u662f\u8fc7\u53bb\u4ea4\u6613\u8bb0\u5f55\u4e2d\u6ca1\u6709\u4f7f\u7528\u7684\u4ea4\u6613\u8f93\u51fa\u7684\u5408\u8ba1;\u53e6\u4e00\u79cd\u662f\u8d26\u6237\u6a21\u578b\uff0c\u8d26\u6237\u4f59\u989d\u88ab\u5b58\u50a8\u5728\u8d26\u672c\u4e2d\u7684\u72b6\u6001\u503c\u4e2d\u3002  \u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u6709\u597d\u5904\u548c\u5f0a\u7aef\u3002\u672c\u533a\u5757\u94fe\u6280\u672f\u5bf9\u4e24\u79cd\u65b9\u6cd5\u6ca1\u6709\u503e\u5411\u3002\u6211\u4eec\u6700\u521d\u7684\u8981\u6c42\u5c31\u662f\u786e\u4fdd\u4e24\u4e2a\u65b9\u6cd5\u90fd\u80fd\u591f\u88ab\u5bb9\u6613\u5b9e\u73b0\u3002  Q. Which languages are supported for writing chaincode?  \u95ee\u9898\uff1a\u94fe\u7801\u652f\u6301\u54ea\u4e9b\u8bed\u8a00\uff1f  A. Chaincode can be written in any programming language and executed in\ncontainers.  The first fully supported chaincode language is Golang.  Support for additional languages and the development of a templating language\nhave been discussed, and more details will be released in the near future.  It is also possible to build Hyperledger Fabric applications using Hyperledger Composer .  \u7b54\u6848\uff1a\u94fe\u7801\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u5e76\u5728\u5bb9\u5668\u5185\u6267\u884c\u3002\u7b2c\u4e00\u4e2a\u5168\u529f\u80fd\u652f\u6301\u7684\u8bed\u8a00\u662fGolang\u3002  \u5bf9\u5176\u4ed6\u8bed\u8a00\u7684\u652f\u6301\u548c\u6a21\u677f\u8bed\u8a00\u7684\u5f00\u53d1\u6b63\u5728\u88ab\u8ba8\u8bba\uff0c\u66f4\u591a\u7ec6\u8282\u4f1a\u5728\u8fd1\u671f\u53d1\u5e03\u3002  \u8fd8\u53ef\u4ee5\u901a\u8fc7 Hyperledger Composer \u6765\u6784\u5efaHyperledger Fabric\u5e94\u7528\u3002  Q. Does the Hyperledger Fabric have native currency?  \u95ee\u9898\uff1aHyperledger Fabric\u662f\u5426\u6709\u539f\u751f\u7684\u8d27\u5e01\uff1f  A. No. However, if you really need a native currency for your chain network,\nyou can develop your own native currency with chaincode. One common attribute\nof native currency is that some amount will get transacted (the chaincode\ndefining that currency will get called) every time a transaction is processed\non its chain.  \u7b54\u6848\uff1a\u6ca1\u6709\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u786e\u5b9e\u9700\u8981\u539f\u751f\u7684\u8d27\u5e01\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u94fe\u7801\u6765\u5f00\u53d1\u8d27\u5e01\u3002\u539f\u751f\u8d27\u5e01\u7684\u4e00\u4e2a\u57fa\u672c\u7684\u5c5e\u6027\u662f\u4e00\u4e9b\u6570\u91cf\u4f1a\u88ab\u8f6c\u79fb\uff08\u5b9a\u4e49\u8d27\u5e01\u7684\u94fe\u7801\u4f1a\u88ab\u8c03\u7528\uff09\u5f53\u6bcf\u6b21\u94fe\u4e0a\u4ea4\u6613\u88ab\u6267\u884c\u3002", 
            "title": "Chaincode (Smart Contracts and Digital Assets)\u94fe\u7801\uff08\u667a\u80fd\u5408\u7ea6\u548c\u6570\u5b57\u8d44\u4ea7\uff09"
        }, 
        {
            "location": "/Fabric-FAQ/#differences-in-most-recent-releases", 
            "text": "Q. As part of the v1.0.0 release, what are the highlight differences between v0.6 and v1.0?  \u95ee\u9898\uff1aV0.6\u7248\u672c\u548cV1.0\u7248\u672c\u7684\u6700\u5927\u533a\u522b\u662f\u4ec0\u4e48\uff1f  A. The differences between any subsequent releases are provided together with the Release Notes .\nSince Fabric is a pluggable modular framework, you can refer to the  design-docs  for further information of these difference.  \u7b54\u6848\uff1a\u4efb\u4f55\u540e\u7eed\u7248\u672c\u7684\u5dee\u5f02\u90fd\u5728 \u7248\u672c\u8bf4\u660e \u4e2d\u5c55\u73b0\u3002\u56e0\u4e3aFabric\u662f\u4e00\u4e2a\u6a21\u5757\u53ef\u66ff\u6362\u7684\u6846\u67b6\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u8bbe\u8ba1\u6587\u6863 \u83b7\u53d6\u66f4\u591a\u5dee\u5f02\u4fe1\u606f\u3002  Q. Where to get help for the technical questions not answered above?  \u95ee\u9898\uff1a\u54ea\u91cc\u53ef\u4ee5\u83b7\u5f97\u4e0a\u6587\u4e2d\u6ca1\u88ab\u89e3\u7b54\u7684\u6280\u672f\u95ee\u9898\u7684\u5e2e\u52a9\uff1f  A. Please use  StackOverflow .  \u7b54\u6848\uff1a\u8bf7\u4f7f\u7528  StackOverflow .  .. Licensed under Creative Commons Attribution 4.0 International License  .. \u672c\u6587\u901a\u8fc7Creative Commons Attribution 4.0 International License\u534f\u8bae\u8fdb\u884c\u6388\u6743  https://creativecommons.org/licenses/by/4.0/", 
            "title": "Differences in Most Recent Releases\u6700\u8fd1\u7248\u672c\u7684\u533a\u522b"
        }, 
        {
            "location": "/msp_acl_zh/", 
            "text": "\u539f\u6587\n\n\n\u7ffb\u8bd1\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\n\u6881\u6c38\u752b\n\n\n\n\n\n\n\n\n\n\nMembership Service Providers \n Access Control in Hyperledger Fabric\n\n\nAuthors\n: Elli Androulaki, Angelo De Caro, Binh Nguyen, Alessandro Sorniotti, Murali Srinivasan, Jason Yellick\n\n\n\u7ffb\u8bd1\uff1a\u6881\u6c38\u752b\n\n\n1. Terminology\n\n\nA \nBlockchain network\n consists of the following entities: \n\n\n\u533a\u5757\u94fe\u7f51\u7edc\u5305\u542b\u5982\u4e0b\u7ec4\u6210\u90e8\u5206\uff1a\n- Application(s) network (can include peers and clients or only clients)\n- \u5e94\u7528\u7a0b\u5e8f\u7f51\u7edc\uff08\u53ef\u4ee5\u5305\u542bpeer\u548cclient\uff0c\u4e5f\u53ef\u4ee5\u53ea\u5305\u542bclient\uff09\n- Network of peers (if not part of the application network)\n- peer\u7f51\u7edc\uff08\u9664\u4e86\u5e94\u7528\u7f51\u7edc\u4e2d\u7684peer\u7ec4\u6210\u7684\u7f51\u7edc\uff09\n- Ordering service (can be decentralized or centralized)\n- \u6392\u5e8f\u670d\u52a1\uff08\u53ef\u4ee5\u662f\u4e2d\u5fc3\u5316\u7684\uff0c\u4e5f\u53ef\u4ee5\u5206\u5e03\u5f0f\uff09\n- Set of protocols to facilitate the communication between the clients, peers and the ordering service, enabling the application to create one or more chains throughout the operation of the system and submit transactions to it, as well as manage the access to these chains.\n- \u4e00\u7ec4\u901a\u8baf\u534f\u8bae\uff0c\u8fd9\u4e9b\u534f\u8bae\u7528\u4e8e\uff1aclient\uff0cpeer\uff0corderer\u4e4b\u95f4\u7684\u901a\u4fe1\uff1b\u5e94\u7528\u901a\u8fc7\u7cfb\u7edf\u64cd\u4f5c\u521b\u5efa\u4e00\u4e2a\u6216\u8005\u591a\u4e2achain\uff0c\u5e76\u63d0\u4ea4\u4ea4\u6613\uff1b\u7ba1\u7406\u5bf9chains\u7684\u8bbf\u95ee\u3002\n\n\nFor some of these terms we refer the reader to Hyperledger Fabric architecture.\n\n\nOrdering service\n is the component of a Blockchain network that offers atomic broadcast services. It can create one or more \u201catomic broadcast channels\u201d upon authenticated request from appropriately authorized entities. The internal structure of the ordering service may differ from one implementation to the other, as it can be a service offered by one entity (centralized version) or more entities, e.g., running BFT or CFT protocols (decentralized version). In any case, ordering service should come with its client that should expose the following functionalities to ordering service users, i.e., entities that leverage atomic broadcast functionalities of the ordering service:\n\n\n\u6392\u5e8f\u670d\u52a1\n \u662f\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u63d0\u4f9b\u539f\u5b50\u5e7f\u64ad\u670d\u52a1\u7684\u7ec4\u4ef6\u3002 \u5b83\u80fd\u591f\u901a\u8fc7\u4e00\u4e9b\u7ecf\u8fc7\u8ba4\u8bc1\u7684\u5b9e\u4f53\u521b\u5efa\u591a\u4e2a\u201c\u539f\u5b50\u5e7f\u64ad\u901a\u9053\u201d \u3002 \u6839\u636e\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6392\u5e8f\u670d\u52a1\u5185\u90e8\u7ed3\u6784\u53ef\u80fd\u4e0d\u540c\uff0c \u5b83\u53ef\u4ee5\u662f\u4e2d\u5fc3\u5316\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5206\u5e03\u5f0f\u7684\uff08\u6bd4\u5982\u8fd0\u884cBFT\u6216\u8005CFT\u534f\u8bae\u7684\u591a\u4e2a\u5b9e\u4f53\uff09\u3002 \u4e0d\u7ba1\u90a3\u79cd\u65b9\u5f0f\uff0c \u6392\u5e8f\u670d\u52a1\u548c\u5176\u5ba2\u6237\u7aef\u8981\u4e3a\u7528\u6237\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff0c\n\n\n\n\nCreate and submit channel creation requests\n\n\n\u521b\u5efa\u548c\u63d0\u4ea4\u521b\u5efachannel\u7684\u8bf7\u6c42\n\n\nReconfigure channel permissions, e.g., update the channel access policies\n\n\n\u91cd\u65b0\u914d\u7f6echannel\u6743\u9650\uff0c\u5982\uff1a\u66f4\u65b0channel\u51c6\u5165\u7b56\u7565\n\n\nReconfigure permissions of members concerning the ordering service functionalities (e.g., channel creation)\n\n\n\u4e3a\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u7684\u6210\u5458\u91cd\u65b0\u914d\u7f6e\u6743\u9650\uff08\u5982\u521b\u5efachannel\uff09\n\n\n\n\nThe ordering client is also equipped with reconfiguration mechanisms that are triggered by properly authenticated transactions advertised within application or system channel. E.g., if the ordering service is decentralized, the ordering service client would need to know \n understand the policies associated to updates of that ordering service\u2019s membership mechanism, and other parameters, e.g., batch size, etc.\n\n\n\u6392\u5e8f\u5ba2\u6237\u7aef\u4e5f\u8981\u5177\u5907\u91cd\u65b0\u914d\u7f6e\u7684\u673a\u5236\uff0c\u8fd9\u4e9b\u673a\u5236\u53ef\u4ee5\u901a\u8fc7\u5728\u5e94\u7528\u6216\u8005\u7cfb\u7edfchannel\u4e2d\u5e7f\u64ad\u4ea4\u6613\u6765\u89e6\u53d1\u3002 \u5982\uff0c\u5982\u679c\u6392\u5e8f\u670d\u52a1\u662f\u5206\u5e03\u5f0f\u7684\uff0c \u5ba2\u6237\u7aef\u5e94\u8be5\u77e5\u9053\u6392\u5e8f\u670d\u52a1\u7684\u6210\u5458\u7b56\u7565\u66f4\u65b0\u673a\u5236\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u53c2\u6570\uff0c\u5982batch size\u7b49\u3002\n\n\nChannel\n is an atomic broadcast channel managed by the ordering service. One or more channels may be created within the ordering service after request from the application network (see below for application network definition).\n\n\n__channel__\u662f\u6392\u5e8f\u670d\u52a1\u7ba1\u7406\u7684\u4e00\u4e2a\u539f\u5b50\u5e7f\u64ad\u901a\u9053\u3002 \u5e94\u7528\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u8bf7\u6c42\u7684\u65b9\u5f0f\uff0c\u5728\u6392\u5e8f\u670d\u52a1\u4e2d\u521b\u5efa\u591a\u4e2achannel\u3002\n\n\nChain\n is bound to a channel and is the data structure that maintains the history and state of transactions advertised within a channel. In particular, a chain consist of \n\n\nchain \u548cchannel\u7ed1\u5b9a\uff0c \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7528\u6765\u7ef4\u62a4channel\u5185\u5e7f\u64ad\u7684\u4ea4\u6613\u7684\u5386\u53f2\u548c\u72b6\u6001\u3002chain\u7531\u4e00\u4e0b\u7ec4\u6210\u90e8\u5206\uff1a\n\n\n\n\nThe total order of transactions as provided by the channel orderers\n\n\nchannel \u7684orderer\u63d0\u4f9b\u7684\u5168\u90e8\u4ea4\u6613\u5e8f\u5217\n\n\nThe state associated to chaincodes defined within the channel (i.e., the set of transactions of the channel that are valid)\n\n\nchannel\u4e2d\u8fde\u4ee3\u7801\u7684\u72b6\u6001\uff08channel\u4e2d\u6210\u529f\u7684\u4ea4\u6613\uff09\n\n\nMembership and access control information for this chain\u2019s operations (read-access to transactions, write-access to the state, etc).\n\n\nchain\u7684\u6210\u5458\u548c\u51c6\u5165\u63a7\u5236\u4fe1\u606f\uff08\u8bfb\u53d6\u4ea4\u6613\uff0c\u5199\u72b6\u6001\u7b49\uff09 \n\n\n\n\nMembership service provider (MSP)\n: A set of cryptographic mechanisms and protocols for issuing and validating certificates and identities in the Blockchain network. Identities issued in the scope of a membership service provider can be evaluated within that membership service provider\u2019s rules. \n\n\nMSP \n\uff1a \u4e00\u7ec4\u52a0\u5bc6\u673a\u5236\u548c\u534f\u8bae\uff0c\u7528\u6765\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u53d1\u653e\u9a8c\u8bc1\u8bc1\u4e66\u548cidentities \u3002msp\u4e2d\u53d1\u653e\u7684identities \u53ef\u4ee5\u5728msp\u4e2d\u9a8c\u8bc1\u3002\n\n\nClients\n are defined by their membership service provider type and respective (public) configuration. The latter for the default membership service provider includes a list of root CAs and intermediate CAs, and a list of administrators.\n\n\nClients\n \u901a\u8fc7\u5b83\u7684msp type\u6765\u5b9a\u4e49\uff0c\u9ed8\u8ba4\u7684msp\u5305\u542b\u6839ca\uff0c\u4e2d\u95f4ca\u548c\u7ba1\u7406\u5458\u3002\n\n\nNetwork of peers\n are defined either the same way as clients. A peer network, like  the client network, comes along with a description of the membership service provider and its configuration. \n\n\npeer\u7f51\u7edc\n \u7528\u548cclient\u7f51\u7edc\u540c\u6837\u7684\u65b9\u5f0f\u5b9a\u4e49\u3002peer\u7f51\u7edc\u4e5f\u662f\u6709msp\u63cf\u8ff0\u548c\u81ea\u5df1\u7684\u914d\u7f6e\u3002\n\n\nApplication network\n is a broader term to cover entities that could be part of the application infrastructure. This could include a set of clients, and potentially also sets of peers. To understand this better, let\u2019s take the example of an auctioning service that is implemented as a chaincode that runs on peers A, and B. Now, let\u2019s assume that for the purpose of this use-case, the application service has implemented client-application software that runs on the end-user machine, and application server software that runs on the application server. Both cases leverage the client-sdk and are perceived by fabric network as clients. In this scenario the application owns the application-server side, as well as peers A, and B, that would install and instantiate/simulate the chaincodes controlled and submitted by that application.\n\n\n\u5e94\u7528\u7f51\u7edc\n \u662f\u4e00\u4e2a\u5e7f\u4e49\u7684\u5b9a\u4e49\uff0c\u6307\u90a3\u4e9b\u5e94\u7528\u67b6\u6784\u4e2d\u7684\u5b9e\u4f53\u3002\u5305\u62ec\u5ba2\u6237\u7aef\u548c\u4e00\u4e9bpeer\u3002\u4e3a\u4e86\u66f4\u597d\u7406\u89e3\uff0c \u6211\u4eec\u4e3e\u4e00\u4e2a\u62cd\u5356\u670d\u52a1\u7684\u4f8b\u5b50\uff0cchaincode\u5728peer A\u548cB\u4e0a\u8fd0\u884c\u3002\u73b0\u5728\uff0c\u5047\u8bbe\u5e94\u7528\u8fd0\u884c\u5728\u7ec8\u7aef\u7528\u6237\u7684\u8bbe\u5907\u4e0a\uff0c \u5e94\u7528\u670d\u52a1\u7aef\u8fd0\u884c\u5728\u5e94\u7528\u670d\u52a1\u5668\u4e0a\u3002\u4e24\u8005\u90fd\u662f\u7528client-sdk\uff0c\u5e76\u4e14\u88abfabric\u7f51\u7edc\u89c6\u4e3a\u5ba2\u6237\u7aef\u3002\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u5e94\u7528\u5305\u62ec\u5e94\u7528\u670d\u52a1\u7aef\uff0cpeer A \u548cpeer B\u3002\n\n\nInteraction between the ordering service, and application entities (clients, and peers)\n: This requires that the ordering service nodes have installed some piece of software to be able to minimally process messages coming from the application network. This includes membership-related functionalities, i.e., check whether a certain entity is authorized to do certain things or not, and membership-update functionalities. We will call this appshim. At the same time, as mentioned before, application network should run the ordering service client that is able to process ordering service specific messages that are advertised through a channel. We will call this osshim.\n\n\n\u6392\u5e8f\u670d\u52a1\u548c\u5e94\u7528\u5b9e\u4f53\u95f4\u7684\u4ea4\u4e92\n\uff1a \u8fd9\u9700\u8981\u6392\u5e8f\u670d\u52a1\u5b89\u88c5\u4e00\u4e9b\u8f6f\u4ef6\u6765\u5904\u7406\u6765\u81ea\u5e94\u7528\u7f51\u7edc\u7684\u6d88\u606f\u3002\u5305\u62ec\u6210\u5458\u76f8\u5173\u7684\u529f\u80fd\uff08\u5982\uff1a\u68c0\u67e5\u4e00\u4e2a\u5b9e\u4f53\u662f\u5426\u6709\u6743\u9650\u505a\u67d0\u4e9b\u4e8b\u60c5\uff09\u548c \u6210\u5458\u66f4\u65b0\u529f\u80fd\u3002\u6211\u4eec\u79f0\u4e4b\u4e3aappshim\u3002 \u540c\u6837\uff0c\u5e94\u7528\u7f51\u7edc\u9700\u8981\u8fd0\u884c\u6392\u5e8f\u670d\u52a1\u5ba2\u6237\u7aef\uff0c \u5904\u7406\u6392\u5e8f\u670d\u52a1\u5728channel\u4e2d\u5e7f\u64ad\u7684\u6d88\u606f\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3aosshim\u3002\n\n\nApplication chaincodes\n: Applications can deploy and invoke application chaincodes. At deploy time the owner of a chaincode (application) should specify policies that will govern the impact of invocations of that chaincode in that chaincode\u2019s state. These policies are known as endorsement policies. These policies usually contain:\n\n\n\u5e94\u7528\u94fe\u4ee3\u7801\n\uff1a \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u90e8\u7f72\u548c\u8c03\u7528\u5e94\u7528\u94fe\u4ee3\u7801\uff0c\u5728\u90e8\u7f72\u7684\u65f6\u5019\uff0c\u5e94\u7528\u8981\u6307\u5b9a\u94fe\u4ee3\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u7ba1\u7406\u94fe\u4ee3\u7801\u7684\u8c03\u7528\u65b9\u5f0f\u3002\u80cc\u4e66\u7b56\u7565\u901a\u5e38\u5305\u542b\uff1a\n\n\n\n\nan endorsement specific part, i.e., defining how an endorser should \u201cendorse\u201d such invocations (e.g., add signatures, included in the endorsing peer code in the form of ESCC), and \n\n\n\u80cc\u4e66\u65b9\u5f0f\uff0c\u5b9a\u4e49\u80cc\u4e66\u8005\u5982\u4f55\u80cc\u4e66\u4e00\u4e2a\u8c03\u7528\uff08\u5982\u589e\u52a0\u81ea\u5df1\u7684\u7b7e\u540d\uff0c\u4ee5ESCC\u7684\u5f62\u5f0f\u5305\u5728\u542b\u80cc\u4e66\u8282\u70b9\u7684\u4ee3\u7801\u4e2d\uff09\n\n\na validation part, that is used by the committing peers to  assess if the endorsement policy is satisfied for a certain chaincode invocation transaction (included in the committing peer code in the form of the validation system chaincode (VSCC)). \n\n\n\u9a8c\u8bc1\u65b9\u5f0f\uff0c\u8fd9\u90e8\u5206\u5c06\u5728peer\u63d0\u4ea4\u7684\u65f6\u5019\u7528\u6765\u9a8c\u8bc1\u5bf9\u94fe\u4ee3\u7801\u7684\u8c03\u7528\u662f\u5426\u6ee1\u8db3\u80cc\u4e66\u7b56\u7565\uff08\u4ee5VSCC\u7684\u5f62\u5f0f\u5305\u542b\u5728\u63d0\u4ea4peer\u7684\u4ee3\u7801\u4e2d\uff09\u3002\n\n\n\n\nThus, at deploy time, the deployer needs to specify the id of a pair of ESCC, VSCC this chaincode should adhere to. Fabric equips the peers with default ESCC and VSCC implementations that  cover certain types of policies. Blockchain network provider may develop additional ESCC and VSCC to support specific endorsements that are not covered by the default. What is important is that VSCC given a transaction concludes to a decision in a deterministic manner. \n\n\n\u56e0\u6b64\uff0c\u90e8\u7f72\u7684\u65f6\u5019\uff0c\u90e8\u7f72\u8005\u9700\u8981\u6307\u5b9a\u4e00\u5bf9ESCC\u548cVSCC\u7684ID\uff0c Fabric\u5df2\u7ecf\u5b9e\u73b0\u4e86\u9ed8\u8ba4\u7684ESCC\u548cVSCC\uff0c\u5305\u62ec\u4e86\u4e00\u4e9b\u6307\u5b9a\u7684\u7b56\u7565\u3002\u533a\u5757\u94fe\u7f51\u7edc\u63d0\u4f9b\u8005\u53ef\u4ee5\u5f00\u53d1\u989d\u5916\u7684ESCC\u548cVSCC\u6765\u652f\u6301\u5176\u4ed6\u7684\u80cc\u4e66\u3002\u91cd\u8981\u7684\u662fVSCC\u80fd\u7ed9\u660e\u786e\u7684\u51b3\u5b9a\u4ea4\u6613\u662f\u5426\u6709\u6548\u3002\n\n\nOrganizations\n: Logical entities or corporations that constitute the stakeholders of a Blockchain network installation. Members of such organization could be authorized by that organization\u2019s membership service providers to submit transactions to certain chains.\n\n\n\u7ec4\u7ec7\n\uff1a \u7ec4\u6210\u533a\u5757\u94fe\u7f51\u7edc\u7684\u903b\u8f91\u5b9e\u4f53\u6216\u8005\u516c\u53f8\u3002\u7ec4\u7ec7\u7684\u6210\u5458\u7ecf\u8fc7\u7ec4\u7ec7\u7684msp\u8ba4\u8bc1\u540e\u624d\u80fd\u63d0\u4ea4\u4ea4\u6613\u5230\u6307\u5b9a\u7684chain\u3002\n\n\nMembers\n: Represent the end-users of the Blockchain network. Each organization may have one or more members and acts as the root of trust (MSP) for its members. For the default MSP used by fabric applications, each member has one long-term identity and can use its long-term identity to generate one or more ephemeral identities.\n\n\n\u6210\u5458\n\uff1a\u533a\u5757\u94fe\u7f51\u7edc\u7684\u7ec8\u7aef\u7528\u6237\u3002\u6bcf\u4e2a\u7ec4\u7ec7\u4e2d\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458\uff0c\u4f5c\u4e3a\u53ef\u4fe1\u7684msp\u6765\u9a8c\u8bc1\u5176\u4ed6\u6210\u5458\u3002 \u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u9ed8\u8ba4MSP\uff0c\u6bcf\u4e2a\u6210\u5458\u90fd\u6709\u4e00\u4e2a\u957f\u671fidentity \uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u5176\u957f\u671fidentity \u6765\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u77ed\u6682identity \u3002\n\n\nMapping between an organization and an MSP\n: This mapping is not enforced by the fabric configuration. It is up to the consortium of entities building their Blockchain network to decide how to leverage the modular nature of membership service providers, and the ability for many of them to co-exist in the network. \n\n\n\u7ec4\u7ec7\u548cmsp\u7684\u6620\u5c04\n\uff1a\u8fd9\u79cd\u6620\u5c04\u4e0d\u662f\u901a\u8fc7fabric\u914d\u7f6e\u5f3a\u5236\u6267\u884c\u7684\u3002\u8fd9\u53d6\u51b3\u4e8e\u533a\u5757\u94fe\u7684\u53c2\u4e0e\u8005\u5982\u4f55\u5229\u7528msp\u7684\u6a21\u5757\u5316\u7279\u6027\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5728\u7f51\u7edc\u4e2d\u5171\u5b58\u7684\u80fd\u529b\u3002\n\n\nThe simplest case would be that there is one to one mapping between an organization and a membership service provider. In this case, root certificates of the organization MSP could carry that organization\u2019s name, that can be used as the MSP\u2019s identifier within a chain. If an organization has more than one subdivisions, e.g., the ones that appear in the OU field of an X.509 based identity, then the identities of these divisions should be considered using the identity of the MSP/Organization as namespace for it.\n\n\n\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u548c\u4e00\u4e2amsp\u6620\u5c04\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ec4\u7ec7msp\u7684\u6839\u8bc1\u4e66\u4e2d\u53ef\u4ee5\u5305\u542b\u7ec4\u7ec7\u7684\u540d\u79f0\uff0c\u540d\u79f0\u5728\u53ef\u4ee5\u7528\u6765\u505amsp\u5728chain\u4e2d\u7684identifier \u3002\u5982\u679c\u4e00\u4e2a\u7ec4\u7ec7\u6709\u591a\u4e2a\u5206\u652f\u3002\u4f8b\u5982\uff0c\u5206\u652f\u540d\u5b57\u4f5c\u4e3ax.509\u8eab\u4efd\u8bc1\u4e66\u4e2d\u7684ou\u5b57\u6bb5\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5206\u652f\u7684identity\u5e94\u8be5\u5e94\u8be5\u8003\u8651\u7528msp/organization\u7684\u5f62\u5f0f\u8868\u793a\u3002 \n\n\nIn the last section we elaborate on best practices associated to membership service providers and their mapping to organizations.\n\n\n2. Membership Service Providers (MSPs) in a Blockchain network\n\n\n2.1 Definition of a Membership Service Provider\n\n\nMSP\u5b9a\u4e49\n\n\n\n\nA Blockchain network may be governed by one or more MSPs. An MSP can be logically defined by the following components:\n\n\n\n\n\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u53ef\u4ee5\u7531\u591a\u4e2aMSP\u7ba1\u7406\uff0c\u4e00\u4e2aMSP\u5305\u542b\u5982\u4e0b\u7ec4\u4ef6\uff1a\n\n\n\n\nAn identity format, also known as certificate, and optionally the algorithm to generate one identity\n\n\n\n\nidentity\u683c\u5f0f\uff0c\u5373\u8bc1\u4e66\u683c\u5f0f\uff0c\u4ee5\u53ca\u53ef\u9009\u7684\u751f\u6210\u751fidentity\u7684\u7b97\u6cd5\n\n\n\n\nA signing algorithm that utilizes the secret associated to an identity, and a message to produce a byte array that is also bound to the identity\n\n\n\n\n\u4e0eidentity\u5bf9\u5e94\u7684\u7b7e\u540d\u7684\u7b97\u6cd5\uff0c\u5c06identity\u5e8f\u5217\u5316\u7684\u65b9\u6cd5\u3002\n\n\n\n\nA signature verification algorithm that takes as input an identity, a message, and a signature (byte array), and outputs \u201caccept\u201d if the signature bytes correspond to a valid signature of the input message assuming the information in the input identity; otherwise, the algorithm outputs \u201creject\u201d\n\n\n\n\n\u7b7e\u540d\u9a8c\u8bc1\u7b97\u6cd5\uff0c\u7b97\u6cd5\u8f93\u5165identity\uff0c\u6d88\u606f\uff0c\u7b7e\u540d\uff0c\u5224\u65ad\u7b7e\u540d\u548cidentity\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5c31\u8f93\u51fa\u201c\u63a5\u53d7\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201c\u62d2\u7edd\u201d\u3002\n\n\n\n\nThe set of rules that need to be satisfied by an identity for the identity to be considered valid for this MSP\n\n\n\n\n\u4e00\u7ec4\u5224\u65adidentity\u662f\u5426\u7b26\u5408MSP\u8981\u6c42\u7684\u9a8c\u8bc1\u89c4\u5219\u3002\n\n\nA set of administration identities, that are authorized to change configuration parameters that are MSP-specific\n\n\n\u4e00\u7ec4\u7ba1\u7406\u8005identity\uff0c\u7ba1\u7406\u8005\u53ef\u4ee5\u4fee\u6539MSP\u7684\u914d\u7f6e\u4fe1\u606f\u3002\n\n\nFrom an implementation perspective, many MSPs are similar in items (1) and (2), and (3) but  differ in (4) and (5). For the purpose of this document we will overload the MSP notation to refer to a unique tuple of algorithms: \n\n\n\u5bf9\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u5927\u90e8\u5206MSP\u4e2d\uff0c\u4e0a\u8ff01,2,3\u6761\u90fd\u662f\u76f8\u4f3c\u7684\u3002\u4f46\u662f\u57284,5\u4e24\u6761\u4e0a\u6709\u5dee\u5f02\u3002\u672c\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u7528\u4e0b\u9762\u7684\u683c\u5f0f\u5206\u522b\u8868\u793a\u4e0a\u8ff05\u6761\u3002\n\n\nMSP.id, MSP.sign, MSP.verify, MSP.validateid, MSP.admin\n \n\n\n\n\n2.2 Examples\n\n\nExamples of MSPs used by Peers. Here we describe how the above MSP features are instantiated in the case of two popular MSP scenarios on the peer side. Notice that peers in the network are agnostic to the identity issuing process, as their role is restricted to the endorsement of client proposals, client identity validation and client identity signature validation. \n\n\nPeer\u4e2d\u4f7f\u7528\u7684MSP\u7684\u4f8b\u5b50\u3002 \u6211\u4eec\u63cf\u8ff0peer\u7aef\u4e24\u79cd\u573a\u666f\u4e0b\u5982\u4f55\u5b9e\u73b0\u4e0a\u9762\u7684\u7279\u6027\u3002\u6ce8\u610f\uff0cpeer\u5e76\u4e0d\u611f\u77e5identity\u7684\u4ea7\u751f\u673a\u5236\u662f\uff08\u5c31\u662f\u8bc1\u4e66\u53d1\u884c\uff09\u3002identity\u7684\u529f\u80fd\u5206\u5e03\u5728\u5ba2\u6237\u7aef\u63d0\u6848\u80cc\u4e66\uff0c \u5ba2\u6237\u7aefidentity\u9a8c\u8bc1\uff0c\u5ba2\u6237\u7aef\u7b7e\u540d\u9a8c\u8bc1\u3002\n\n\nExample 1: Classic MSP\n. Identities (i.e., MSP.id) in this case have the form of standard X.509 certificates, that are signed by exactly one root CA. The certificate of the root CA, that can also be a commercial CA, is part of this MSP description. Signing and signature verification algorithms (i.e., MSP.sign and MSP.verify) are ECDSA-based or RSA-based depending on the key-material in the certificate.  \n\n\n\u573a\u666f1\uff1a \u57fa\u672cMSP\n\u3002 \u8fd9\u79cd\u573a\u666f\u4e0b\uff0cidentity\uff08\u5373MSP.id\uff09\u662f\u7ecf\u8fc7\u6839CA\u7b7e\u540d\u7684x.509\u683c\u5f0f\u7684\u8bc1\u4e66\u3002\u6839CA\uff08\u53ef\u4ee5\u662f\u5546\u4e1a\u7684CA\uff09 \u4e5f\u662fMSP\u7684\u4e00\u90e8\u5206\u3002\u7b7e\u540d\u7b97\u6cd5\uff08MSP.sign\uff09\u548c\u7b7e\u540d\u9a8c\u8bc1\u7b97\u6cd5(MSP.verify) \u53ef\u4ee5\u662fECDSA\uff0c\u4e5f\u53ef\u4ee5\u662fRSA\uff0c\u5177\u4f53\u4f9d\u8d56\u4e8e\u8bc1\u4e66\u4e2d\u7684\u8bf4\u660e\u3002 \n\n\nValidation of an identity (i.e,. MSP.validateid) in this case involves: \n\n\n\u8fd9\u79cd\u573a\u666f\u4e0b\uff0cidentity\u9a8c\u8bc1\uff08MSP.validateid\uff09\u5305\u62ec\n\n\n\n\n\n\nVerifying the correctness of the signature (chain) included in the identity (X.509 certificate) assuming the trusted root CA, \n\n\n\n\n\n\n\u9a8c\u8bc1\u8bc1\u4e66\u4e2d\u7684\u7b7e\u540d\u94fe\uff0c\u5047\u8bbe\u76f8\u4fe1\u6839CA\u3002\n\n\n\n\n\n\nConfirming that the identity is not within the list of identities that have been revoked; \n\n\n\n\n\n\n\u786e\u8ba4\uff0cidentity\u4e0d\u5728revodedidentity\u5217\u8868\u4e2d\u3002\n\n\n\n\n\n\ndepending on the MSP implementation this can be done either by means of \u201cMSP identity revocation list\u201d (IdRL), or of \u201cMSP identity white-list\u201d (IdWL), that are updated regularly. In the Blockchain setting the IdRL/IdWL is passed as parameter at MSP setup time, and is updated through (properly authenticated) reconfiguration messages advertized through the Blockchain.\n\n\n\n\n\n\n\u4e0a\u9762\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u4e3a\u9ed1\u540d\u5355\uff08idRL\uff09\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u4e3a\u767d\u540d\u5355\uff08idWL\uff09\uff0c\u5e76\u4e14\u5b9a\u671f\u66f4\u65b0\u3002\u5728MSP\u542f\u52a8\u7684\u65f6\u5019\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6eIdRL/IdWL\uff0c \u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u5e7f\u64ad\u91cd\u914d\u7f6e\u6d88\u606f\u66f4\u65b0\u8fd9\u4e9b\u4fe1\u606f\u3002\n\n\n\n\n\n\nAdmin of such an MSP (i.e., MSP.admin) can be the X.509 certificate of the administrator of that MSP, i.e., the entity that can update the root CA certificate this MSP is governed by. By default, IdRLs or IdWLs are only updatable by the root CA itself, or the administrator. \n\n\nMSP\u7684\u7ba1\u7406\u5458\uff08\u5373MSP.admin\uff09\u53ef\u4ee5\u662fMSP\u7ba1\u7406\u5458\u7684X.509\u6570\u5b57\u8bc1\u4e66\uff0c \u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u65b0MSP\u7684\u6839CA\u8bc1\u4e66\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6839CA\u81ea\u5df1\u548c\u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u65b0IdRL\u548cIdWL\u3002\n\n\nExample 2: MSP allowing for cross-signed certificates\n. As in the previous example, identities in this case also have the form of an X.509 certificates. However, in this case, the MSP client leverages standard X.509 certificate structure to accommodate within a single certificate signatures of one or more root CAs. In this case, the MSP is parameterized with a list of trusted CAs (by means of standard X.509 certificates) and the threshold number of these whose signature should appear in a valid identity. As before, validation of certificates, apart from the signature validation relates to IdRLs/IdWLs, which can be advertised by either the administrator, or the identity issuer CA.  \n\n\n\u573a\u666f2\uff1aMSP\u5141\u8bb8\u4ea4\u53c9\u7b7e\u540d\u8bc1\u4e66\n\u3002 \u548c\u4e0a\u4e00\u79cd\u573a\u666f\u4e00\u6837\uff0cidentity\u5728\u8fd9\u79cd\u573a\u666f\u5199\u4e5f\u662fX.509\u8bc1\u4e66\u3002 \u4f46\u662fMSP\u5ba2\u6237\u7aef\u5728\u5728\u4e00\u4e2aX.509\u8bc1\u4e66\u4e2d\u52a0\u5165\u591a\u4e2a\u6839CA\u7b7e\u540d\u3002\u901a\u8fc7\u53c2\u6570\u914d\u7f6eMSP\u4fe1\u4efb\u7684MSP\u5217\u8868\uff08\u901a\u8fc7X.509\u8bc1\u4e66\u6307\u5b9a\uff09\u548c\u4e00\u4e2a\u6709\u6548\u8bc1\u4e66\u4e2d\u9700\u8981\u6709\u7684\u6839CA\u7b7e\u540d\u6570\u9600\u503c\u3002\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u8bc1\u4e66\u9a8c\u8bc1\u548c\u7b7e\u540d\u9a8c\u8bc1\u5206\u79bb\uff0c \u8bc1\u4e66\u9a8c\u8bc1\u4f9d\u8d56\u4e8eIdRL/IdWL, \u800cIdRL/IdWL\u53ea\u80fd\u7531\u6839CA\u81ea\u5df1\u6216\u8005\u7ba1\u7406\u624d\u80fd\u66f4\u65b0\u3002 \n\n\nSigning, and signature verification algorithm is an ECDSA based one or RSA based one depending on the key-material inside the certificate.  \n\n\n\u7b7e\u540d\u7b97\u6cd5\uff0c\u548c\u7b7e\u540d\u9a8c\u8bc1\u7b97\u6cd5\u53ef\u4ee5\u662fECDSA \uff0c\u4e5f\u53ef\u4ee5\u662fRSA\uff0c\u5728\u8bc1\u4e66\u4e2d\u6307\u5b9a\u3002 \n\n\n2.3 Generic interfaces for a fabric platform MSP\n\n\nReflecting the definition of an MSP from Section 2.1, we define generic interfaces for a membership service provider. These interfaces are shown in Figure1, and are strongly coupled with the notion of identity. Identity, that reflects the notion of publicly verifiable certificate is also defined in a generic way, through the interfaces described in Figure 2. Finally, Figure 3 depicts a SigningIdentity interface, i.e., an Identity with signing capabilities.\n\n\n\u4e3a\u4e86\u4f53\u73b02.1\u4e2dMSP\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5b9a\u4e49MSP\u7684\u901a\u7528\u63a5\u53e3\uff0c\u5982\u4e0b\u56fe1\u6240\u793a\u3002\u8fd9\u4e9b\u63a5\u53e3\u548cidentity\u7684\u6982\u5ff5\u662f\u5f3a\u76f8\u5173\u7684\u3002identity\u4f53\u73b0\u8bc1\u4e66\u7684\u6982\u5ff5\uff0cidentity\u4e5f\u662f\u4ee5\u4e00\u79cd\u901a\u7528\u63a5\u53e3\u7684\u5f62\u5f0f\u5b9a\u4e49\uff0c\u5982\u56fe2\u6240\u793a\u3002\u6700\u540e\u5728\u56fe3\u4e2d\u63cf\u8ff0SigningIdentity \u63a5\u53e3\uff0c \u5373\u5177\u5907\u7b7e\u540d\u529f\u80fd\u7684Identity\u3002\n\n\n// MSP is the minimal Membership Service Provider Interface to reflect Membership\n// Service Provider needs to be used on the peer and ordering node side. Notice that\n// on these nodes, MSP is needed for verifying purposes.\ntype MSP interface {\n\n      // Setup the MSP instance according to configuration information defined through\n      // an MSPConfig data structure. This struct is generic enough so as to capture\n      // any MSP configuration\n      Setup(config *MSPConfig) error\n\n     // Returns the type this MSP leverages. The default MSP type is \u201cFabric\u201d that implements\n     // a standard X.509 certificate based signature generation and verification. Notice that such \n     // a provider type can also parse and evaluate transaction certificate signatures \n      GetType() ProviderType\n\n      // GetIdentifier returns the identifier of this MSP; this is an identifier assigned to\n      // the MSP via configuration (Setup).\n      GetIdentifier() (string, error)\n\n       // GetSigningIdentity returns a signing identity that this MSP already manages,\n       // and that corresponds to the input identifier; IdentityIdentifier consists of two strings,\n       // the first is the provider identifier, and the second includes the identity\u2019s identifier\n       // within the provider.\n      GetSigningIdentity(identifier *IdentityIdentifier) (SigningIdentity, error)\n\n      // GetDefaultSigningIdentity returns the default signing identity of this MSP; this is \n      // helpful in cases where there is a main signing identity that is used throughout a\n      // node\u2019s operation\n      GetDefaultSigningIdentity() (SigningIdentity, error)\n\n      // DeserializeIdentity deserializes an identity, according to this MSP\u2019s deserialization\n      // rules and instantiates an Identity object that this MSP can \u201cunderstand\u201d\n      DeserializeIdentity(serializedIdentity []byte) (Identity, error)\n\n      // Validate checks whether the supplied identity is valid under this MSP\u2019s validation rules\n      Validate(id Identity) error\n\n     // SatisfiesPrincipal checks whether the identity matches\n     // the description supplied in MSPPrincipal. The check may\n     // involve a byte-by-byte comparison (if the principal is\n     // a serialized identity) or may require MSP validation). MSPPrincipal \n    // functionality will be discussed in Section 2.5.2.\n     SatisfiesPrincipal(id Identity, principal *common.MSPPrincipal) error\n}\n\n\n\n\nFigure1. Description of the generic platform MSP interface.\n\n\n// Identity interface defining operations associated to a \ncertificate\n.  That is, the public part of the \n// identity could be thought to be a certificate, and offers solely signature verification capabilities.\n// This is to be used at the peer side when verifying certificates that transactions are signed\n// with, and verifying signatures that correspond to these certificates.\ntype Identity interface {\n\n      // GetIdentifier returns the identifier of that identity\n      GetIdentifier() *IdentityIdentifier\n\n      // GetMSPIdentifier returns the MSP Id for this instance\n      GetMSPIdentifier() string\n\n      // Validate uses the rules that govern this identity to validate it.\n      // E.g., if it is a fabric TCert implemented as identity, validate\n      // will check the TCert signature against the assumed root certificate\n      // authority.\n      Validate() error\n\n      // GetOrganizationalUnits returns zero or more organization units or\n      // divisions this identity is related to as long as this is public\n      // information. Certain MSP implementations may use attributes\n      // that are publicly associated to this identity, or the identifier of\n      // the root certificate authority that has provided signatures on this\n      // certificate.\n      // Examples:\n      //  - if the identity is an x.509 certificate, this function returns one\n      //    or more string which is encoded in the Subject's Distinguished Name\n      //    of the type OU\n      GetOrganizationalUnits() []string\n\n      // Verify a signature over some message using this identity as reference\n      Verify(msg []byte, sig []byte) error\n\n      // Serialize converts an identity to bytes\n      Serialize() ([]byte, error)\n\n      // SatisfiesPrincipal checks whether this instance matches\n      // the description supplied in MSPPrincipal. The check may\n      // involve a byte-by-byte comparison (if the principal is\n      // a serialized identity) or may require MSP validation\n      SatisfiesPrincipal(principal *common.MSPPrincipal) error\n}  \n\n\n\n\nFigure 2  Description of a generic Identity interface devised for Fabric platform needs.\n\n\nIdentities equipped with the secret signing information that correspond to their public key, are called in our infrastructure \nSigningIdentities\n. In the case of an X.509 based MSP, Identity would be instantiated as an X.509 certificate. \nSigningIdentity\n in this case, would also carry a reference to the signing key of the certificate\u2019s public key. SigningIdentity interface is described in Figure 3.\n\n\n\u5305\u542b\u548c\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5\u4fe1\u606f\u7684identity \u79f0\u4e3a SigningIdentity\u3002 Identity\u5c31\u662f\u4e00\u4e2aX.509\u8bc1\u4e66\u3002 SigningIdentity \u8981\u4fdd\u5b58\u8bc1\u4e66\u516c\u94a5\u7684\u7b7e\u540d\u79c1\u94a5\uff08\u8ddf\u7b2c\u4e00\u53e5\u540c\u4e00\u4e2a\u610f\u601d\uff1f\uff09\u3002 SigningIdentity\u63a5\u53e3\u5b9a\u4e49\u5982\u56fe3\n\n\n// SigningIdentity is an extension of Identity to cover signing capabilities. E.g., signing identity\n// should be requested in the case of a peer who wishes to sign proposal responses. A form\n// of signing identity is also used at the client side who would sign proposals and transactions.\ntype SigningIdentity interface {\n\n      // Extends Identity\n      Identity\n\n      // Sign the input message using the singing identity\u2019s signing key\n      Sign(msg []byte) ([]byte, error)\n\n      // Removed SignOpts, GetAttributeProof for the same reasons as for VerifyOpts and VerifyAttributes\n\n      // GetPublicVersion returns the public parts of this identity. In a signing identity corresponding \n      // to X.509 certificates, GetPublicVersion would output the Identity object representing the \n      // actual X.509 certificate\n      GetPublicVersion() Identity\n\n }\n\n\n\n\n\nFigure 3. Description of a generic interface for a signing identity.\n\n\n2.4 Coupling node signing abilities with a (local) MSP\n\n\nOrderers, and peers need to be equipped with signing abilities. To do so, the administrator of a node needs to specify at node setup time the configuration of the MSP that would carry the signing identity of the peer or orderer. As the MSP instance included here is created solely to instantiate the node\u2019s signing identity, we refer to this MSP by \nSignerMSP\n. The latter is only possible to be updated manually by that node\u2019s administrator, and can naturally vary from node to node. For simplicity and for V.1, to setup SignerMSP, and assuming the default MSP type for fabric, the administrator is requested to copy to dedicated location in the node\u2019s file system four sets of files:\n\n\norderer\u548cpeer\u9700\u8981\u5177\u5907\u7b7e\u540d\u7684\u80fd\u529b\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u8282\u70b9\u7684\u7ba1\u7406\u5458\u5728\u8282\u70b9\u542f\u52a8\u7684\u65f6\u5019\u6307\u5b9a\u7b7e\u540dIdentity\u7684\u4fe1\u606f\u3002\u8fd9\u91cc\u7684MSP\u5b9e\u73b0\u4e86\u7b7e\u540dIdentity\uff0c \u6211\u4eec\u79f0\u4e4b\u4e3aSignerMSP\u3002\u521b\u5efa\u540e\uff0c\u53ea\u6709\u8282\u70b9\u7684\u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u65b0\uff0c\u5404\u4e2a\u8282\u70b9\u53ef\u4ee5\u4e0d\u540c\u3002 \u7b80\u5355\u63cf\u8ff0\uff0c\u5728V1.0\u4e2d\uff0c\u5047\u8bbe\u5173\u952e\u4e00\u4e2a\u7c7b\u578b\u4e3aFabric\u7684MSP\uff0c \u7ba1\u7406\u5458\u9700\u8981\u5728\u8282\u70b9\u7684\u6307\u5b9a\u76ee\u5f55\u62f7\u8d1d\u4e0b\u9762\u56db\u7c7b\u6587\u4ef6\u3002\n\n\n\n\ncacerts: PEM files containing the root authority certificates of the MSP\n\n\ncacerts: PEM\u683c\u5f0f\u7684MSP\u7684\u6839CA\u8bc1\u4e66\n\n\nadmincerts: PEM files containing the administrators\u2019 certificates of this MSP\n\n\nadmincerts\uff1a MSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\n\n\nkeystore: PEM files containing the signing private key of the node\n\n\nkeystore: \u8282\u70b9\u7684\u7b7e\u540d\u79c1\u94a5\n\n\nsigncerts: PEM encoded certificate files corresponding to the identity of the node\n\n\nsigncerts:\u8282\u70b9Identity\u7684\u8bc1\u4e66\uff08\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u8282\u70b9\u7684\u8bc1\u4e66\uff09\n\n\n\n\nIn particular, the node admin is required to modify the setup .yaml file with the information depicted in the figure below. First of all, the BC crypto service provider of the node is configured, where it needs to be determined whether a software (SW) or HSM based CSP is used to store the key-material of the node.  In the example below a SW provider is configured with the location of where the key material of the peer is to reside. In addition, for the default MSP case, the node is to retrieve from its .yaml file the location of the msp-related files (cacerts, admincerts, intermediatecas, and crls) are stored (parameter mspConfigPath), and identifier of the node\u2019s MSP (localMspId).\n\n\n\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8282\u70b9\u7684\u7ba1\u7406\u5458\u8981\u4fee\u6539\u542f\u52a8\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u9996\u5148\uff0c\u914d\u7f6eBC\u52a0\u5bc6\u670d\u52a1\uff0c \u8981\u9009\u62e9\u5b58\u50a8\u79c1\u94a5\u4fe1\u606f\u65f6\u7528\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0cSW\u6216\u8005HSM\u3002\u53e6\u5916\uff0c\u5982\u679c\u7528\u9ed8\u8ba4MSP\uff0c\u8282\u70b9\u4f1a\u4ece\u914d\u7f6e\u7684\u76ee\u5f55\u4e0b\u83b7\u53d6\u76f8\u5173\u7684\u8bc1\u4e66\u4fe1\u606f\uff0c\u4ee5\u53ca\u8282\u70b9\u7684Msp\u6807\u8bc6\uff08localMSpId\uff09\n\n\n# BCCSP (Blockchain crypto provider): Select which crypto implementation or\n# library to use\nBCCSP:\n   Default: SW\n   SW:\n       # TODO: The default Hash and Security level needs refactoring to be\n       # fully configurable. Changing these defaults requires coordination\n       # SHA2 is hardcoded in several places, not only BCCSP\n       Hash: SHA2\n       Security: 256\n       # Location of Key Store, can be subdirectory of SbftLocal.DataDir\n       FileKeyStore:\n           # If \n, defaults to 'mspConfigPath'/keystore\n           KeyStore:\n\n# Path on the file system where peer will find MSP local configurations\nmspConfigPath: msp/sampleconfig\n\n# Identifier of the local MSP\n# ----!!!!IMPORTANT!!!-!!!IMPORTANT!!!-!!!IMPORTANT!!!!----\n# Deployers need to change the value of the localMspId string.\n# In particular, the name of the local MSP ID of a peer needs\n# to match the name of one of the MSPs in each of the channel\n# that this peer is a member of. Otherwise this peer's messages\n# will not be identified as valid by other nodes.\nlocalMspId: DEFAULT\n\n\n\n\n\n\n\n2.5 Coupling chain participation with MSPs\n\n\nThe genesis block of a chain must contain the specification (description) of the MSPs that govern the chain participants\u2019 identities. If an MSP covers multiple chains, it is important that we keep the state of that MSP on each chain. This is to avoid reconfiguration inconsistency attacks that can be caused by reconfiguration transactions of the organization\u2019s MSP arriving in each chain in a different order. \n\n\n\u533a\u5757\u94fe\u7684\u521b\u59cb\u5757\u4e2d\u5fc5\u987b\u5305\u542b\u7ba1\u7406\u53c2\u4e0e\u8005\u8eab\u4efd\u7684MSP\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2aMSP\u6d89\u53ca\u591a\u4e2a\u94fe\uff0c \u5c31\u9700\u8981\u5728\u6bcf\u4e2a\u94fe\u4e2d\u4fdd\u5b58MSP\u7684\u72b6\u6001\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u91cd\u65b0\u914d\u7f6e\u653b\u51fb\uff08\u8ba9\u914d\u7f6e\u53d8\u66f4\u4ea4\u6613\u5728\u4e0d\u540c\u7684\u94fe\u4e2d\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u5230\u8fbe\u8282\u70b9\uff09\u3002\n\n\nMSPs defined in the context of a chain or channel would enable the orderers and peers to authenticate chain transaction signers, endorsers, and/or creators of requests for chain/channel creation/termination,  channel broadcast \n delivery and others. \n\n\n\u5728chain\u6216\u8005channel\u73af\u5883\u4e2d\u5b9a\u4e49\u7684MSP\uff0c\u80fd\u591f\u4f7forderer\u548cpeer\u6821\u9a8c\u94fe\u4ea4\u6613\u7b7e\u540d\u8005\uff0c\u80cc\u4e66\u8005\u548c\u91cd\u914d\u7f6e\u8bf7\u6c42\u7684\u521b\u5efa\u8005\uff0cchannel\u5e7f\u64ad\u548c\u63a8\u9001\uff0c\u4ee5\u53ca\u5176\u4ed6\u3002\n\n\nIn particular, MSPs specified in the orderer system channel would allow the specification of the policies governing channel readers (to authenticate \n validate channel delivery requests), writers (to authenticate \n validate channel broadcast requests), chainCreators (to evaluate chain creation requests), and admins (to authenticate \n validate channel reconfiguration requests). MSPs specified in an application chain or channel allow the specification of policies that govern chain readers, writers, admins, and chaincodeAdmins (to authenticate and validate chaincode instantiation requests). Evidently, MSPs within a chain have a \nverifier role\n, that comes in contrast to the \nsigner role\n that local MSP(s) mean to offer. More specifically, peers and orderers are required to setup MSPs in the context of a channel (for orderer system channel) or chain to be able to authenticate transactions and configuration-related requests, and carry \nno signature generation responsibility/ability\n.\n\n\n\u5c24\u5176\u662f\uff0corderer\u7cfb\u7edfchannel\u4e2d\u6307\u5b9a\u7684msp\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5bf9channel\u7684\u8bbf\u95ee\u7b56\u7565\uff0c\u7ba1\u7406\u76f8\u5173\u6210\u5458\uff0c\u5305\u62ec\uff1areader\uff08\u5411channel\u53d1\u83b7\u53d6\u8bf7\u6c42\uff09\uff0cwriter\uff08\u5411channel\u53d1\u9001\u5e7f\u64ad\u8bf7\u6c42\uff09\uff0cchainCreator\uff08\u53d1\u9001\u521b\u5efa\u94fe\u4ee3\u7801\u8bf7\u6c42\uff09\uff0cadmin\uff08\u53ef\u4ee5\u53d1\u9001\u91cd\u65b0\u914d\u7f6echannel\u8bf7\u6c42\uff09\u3002\u5e94\u7528\u94fe\u6216\u8005channel\u4e2d\u6307\u5b9a\u7684msp\uff0c\u53ef\u4ee5\u5b9a\u4e49\u8bbf\u95ee\u7b56\u7565\uff0c\u7ba1\u7406\u76f8\u5173\u6210\u5458\uff1areader\uff0c writer\uff0cadmins\uff0c chaincodeAdmin(\u53ef\u4ee5\u53d1\u9001\u94fe\u4ee3\u7801\u5b9e\u4f8b\u5316\u8bf7\u6c42)\u3002 \u663e\u7136\uff0c\u94fe\u5185\u7684msp\u5177\u6709\u7b7e\u540d\u9a8c\u8bc1\u89d2\u8272\uff0c\u4e0e\u672c\u5730msp\u63d0\u4f9b\u7684\u7b7e\u540d\u89d2\u8272\u76f8\u53cd\u3002\u66f4\u8be6\u7ec6\u7684\u8bf4\uff0cpeer\u548corderer\u9700\u8981\u5728channel\uff08orderer \u7cfb\u7edfchannel\uff09\u548cchain\u4e0a\u4e0b\u6587\u4e2d \u542f\u52a8msp\uff0c\u6765\u8ba4\u8bc1\u4ea4\u6613\u6216\u8005\u914d\u7f6e\u76f8\u5173\u7684\u8bf7\u6c42\uff0c\u5177\u5907\u751f\u6210\u7b7e\u540d\u7684\u80fd\u529b\u3002\n\n\nClearly, peers and orderers need to be able to verify signatures that correspond to identities issued by multiple MSPs. To facilitate this, Hyperledger fabric introduces the concept of an MSP manager. In particular, an MSPManager interface is the fabric component that would instantiate one or more MSPs at chain setup time (which is also relevant for the orderer channel setup that takes place at orderer bootstrap), and use these to validate transaction signatures transparently to the rest of the code. MSPManager interface brings in two important advantages to the fabric. \n\n\n\u663e\u7136\uff0cpeer\u548corderer \u8981\u80fd\u591f\u9a8c\u8bc1\u591a\u4e2amsp\u53d1\u884c\u7684\u8eab\u4efd\uff08Identity\uff09\u7684\u7b7e\u540d\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e00\u70b9\uff0cHyperledger Fabric \u5f15\u5165\u4e86msp\u7ba1\u7406\u5668\u7684\u6982\u5ff5\u3002MSPManager \u63a5\u53e3\u4f5c\u4e3aFabric\u7ec4\u4ef6\uff0c\u5728\u5efa\u7acbchain\u7684\u65f6\u5019\uff08\u5982\u679c\u662forderer\u5c31\u662f\u5728\u521b\u5efachannel\u7684\u65f6\u5019\uff09\u5b9e\u4f8b\u5316\u591a\u4e2aMSP\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u6765\u9a8c\u8bc1\u4ea4\u6613\u7b7e\u540d\u3002MSPManager\u7ed9Fabric\u5e26\u6765\u4e24\u4e2a\u597d\u5904\u3002\n\n\n\n\nPluggability of MSPs\n\n\nMSP\u53ef\u63d2\u62d4\u5316\u3002\n\n\nSupport for multiple MSP providers simultaneously\n\n\n\u53ef\u540c\u65f6\u63d0\u4f9b\u591a\u4e2aMSP\u3002\n\n\nHiding the complexity of internal policies of a single MSP and its architecture from the rest of the MSPs in the Blockchain network.\n\n\n\u5bf9\u533a\u5757\u94fe\u7f51\u7edc\u9690\u85cfMSP\u5185\u90e8\u7b56\u7565\u7684\u590d\u6742\u6027\u4ee5\u53ca\u5176\u67b6\u6784\u3002\n\n\n\n\nMSPManager uses the information from the configuration block of the chain (i.e., the Genesis block) to instantiate the MSPs, as shown in Figure 4.\n\n\nMSPManager \u4f7f\u7528chain\u7684\u914d\u7f6e\u5757\u4fe1\u606f\uff08\u5373\u521b\u59cb\u5757\uff09\u5b9e\u4f8b\u5316MSP\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\nFigure 4. Setup flow from chain configuration components, to MSPManager setup, and individual MSP setup.\n\n\n\u4ece\u94fe\u914d\u7f6e\u7ec4\u4ef6\u5230MSPManager\u548c\u4e2a\u4f53MSP\u542f\u52a8\u6d41\u7a0b\u3002\n\n\nThe MSPManager exposes an interface to the rest of the fabric-code that is simple for components to integrate. This interface is in Figure 5.\n\n\nMSPManager \u66b4\u6f0f\u7b80\u5355\u63a5\u53e3\u7ed9\u533a\u5757\u94fe\u7684\u5176\u4ed6\u7ec4\u4ef6\uff0c\u65b9\u4fbf\u5176\u4ed6\u7ec4\u4ef6 \u96c6\u6210\u3002\u63a5\u53e3\u5982\u4e0b\uff1a\n\n\n// MSPManager is an interface defining a manager of one or more MSPs. This essentially acts\n// as a mediator to MSP calls and routes MSP related calls to the appropriate MSP. This object\n// is immutable, it is initialized once and never changed.\ntype MSPManager interface {\n\n    // DeserializeIdentity deserializes an identity.\n    // Deserialization will fail if the identity is associated to\n    // an msp that is different from this one that is performing\n    // the deserialization.\n    DeserializeIdentity(serializedIdentity []byte) (Identity, error)\n\n\n    // Setup the MSP manager instance according to configuration information\n    Setup(msps []MSP) error\n\n    // GetMSPs Provides a list of Membership Service providers\n     GetMSPs() (map[string]MSP, error)\n}  \n\n\n\n\nFigure 5. In this Figure we can see the definition of MSPManager interface. Notice, that in the code, \u201cDeserializeIdentity\u201d function is part of a \u201cIdentityDeserializer\u201d interface, that MSPManager extends. However, for simplicity of description we list directly the function inside MSPManager interface. \n\n\n\u5728\u8fd9\u5e45\u56fe\uff0c\u6211\u4eec\u80fd\u770b\u5230MSPManager\u63a5\u53e3\u5b9a\u4e49\u3002\u6ce8\u610f\uff0c\u5728\u4ee3\u7801\u4e2d\u201cDeserializeIdentity\u201d\u51fd\u6570\u662fMSPManager \u6269\u5c55\u7684IdentifyDeserializer\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u3002\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0c\u5728MSPManager\u63a5\u53e3\u4e2d\u76f4\u63a5\u5217\u51fa\u4e86\u6b64\u51fd\u6570\u3002\n\n\n2.5.1 Setup of chain MSPs\n\n\nAn MSPManager instance is created for every new chain that is created through the \u201cSetup\u201d method, that takes as input a list of MSP configuration objects, i.e., \u201cmsp.MSPConfig\u201d. The proto message governing the structure of msp.MSPConfig is depicted in Figure 6.\n\n\n\u5728\u521b\u5efachain\u7684\u65f6\u5019\uff0c\u901a\u8fc7SetUp\u63a5\u53e3\u521b\u5efa\u4e00\u4e2aMSPManager\u5b9e\u4f8b\u3002\u6b64\u63a5\u53e3\u7684\u8f93\u5165\u662fmsp\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5373msp.MSPConfig. \u5c01\u88c5\u6b64\u7ed3\u6784\u7684\u6d88\u606f\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n// MSPConfig collects all the configuration information for\n// an MSP. The Config field should be unmarshalled in a way\n// that depends on the Type\nmessage MSPConfig {\n   // Type holds the type of the MSP; the default one would\n   // be of type FABRIC implementing an X.509 based provider\n   int32 Type = 1;\n\n   // Config is MSP dependent configuration info\n   bytes Config = 2;\n}\n\n\n\n\n\nFigure 6. Protocol message for generic configuration of an MSP.\n\n\nMarshalling of field \u201cConfig\u201d (and hence the way to be unmarshalled) is defined by the value of field \u201cType\u201d. For the default case where the default MSP type (Farbric) is used and being configured, \u201cConfig\u201d has the content shown in Figure 7.\n\n\n\u901a\u8fc7Type\u6307\u5b9aConfig\u7684\u7f16\u7801\u65b9\u5f0f\u548c\u89e3\u7801\u65b9\u5f0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cMSP\u7c7b\u578b\u662fFabirc\uff0c Config\u7684\u5185\u5982\u5982\u4e0b\uff1a\n\n\n// FabricMSPConfig collects all the configuration information for a Fabric MSP. \n// Here we assume a default certificate validation policy, where any certificate\n// signed by any of the listed rootCA certs would be considered as valid\n// under this MSP. This MSP may or may not come with a signing identity. If\n// it does, it can also issue signing identities. If it does not, it can only\n// be used to validate and verify certificates.\nmessage FabricMSPConfig {\n   // Name holds the identifier of the MSP; MSP identifier is chosen by the\n   // application that governs this MSP. For example, and assuming the default\n   // implementation of MSP, that is X.509-based and considers a single Issuer,\n   // this can refer to the Subject OU field or the Issuer OU field.\n   string Name = 1;\n\n   // List of root certificates associated\n   repeated bytes RootCerts = 2;\n\n   // Identity denoting the administrator of this MSP\n   repeated bytes Admins = 3;\n\n   // Identity revocation list\n   repeated bytes RevocationList = 4;\n\n   // SigningIdentity holds information on the signing identity\n   // this peer is to use, and which is to be imported by the\n   // MSP defined before\n   SigningIdentityInfo SigningIdentity = 5;\n}\n\n\n\n\n\nFigure 7. Protocol message for configuration of the default MSP.\n\n\nThe configuration transaction that constitutes the genesis transaction of the chain, contains a list of one or more MSPs that would govern the chain. An example of the content related to MSPManager setup content with three MSPs of type \u201cFabric\u201d is depicted in Figure 8.\n\n\n\u94fe\u7684\u521b\u59cb\u4ea4\u6613\u4ea7\u751f\u7684\u914d\u7f6e\u4ea4\u6613\uff0c\u5305\u542b\u7ba1\u7406\u94fe\u7684MSP\u5217\u8868\u3002\u4e0b\u56fe\u63cf\u8ff0\u4e86\u4e00\u4e2aMSPManager\u542f\u52a8\u4e09\u4e2aFabric\u7c7b\u578bMSP\u7684\u4f8b\u5b50\u3002\n\n\n{\n \nMSPManager\n:\n  [\n     {\n       \nType\n:0,\n       \nConfig\n:{\n           \nName\n:\norg1\n,\n           \nRootCerts\n:[\norg1-identity1bytes\n,\norg1-identity2bytes\n,\norg1-identity3bytes\n],\n           \nAdmins\n:[\nadminidOrg1bytes\n]\n         }\n     },\n     {\n       \nType\n:0,\n       \nConfig\n:{\n           \nName\n:\norg2\n,\n           \nRootCerts\n:[\norg2-identity1bytes\n,\norg2-identity2bytes\n,\norg2-identity3bytes\n],\n           \nAdmins\n:[\nadminidOrg2bytes\n]\n         }\n     },\n     {\n       \nType\n:0,\n       \nConfig\n:{\n           \nName\n:\norg3\n,\n           \nRootCerts\n:[\norg3-identity1bytes\n,\norg3-identity2bytes\n,\norg3-identity3bytes\n],\n           \nAdmins\n:[\nadminidOrg3bytes\n]\n         }\n     }\n   ]\n }\n\n\n\n\n\nFigure 8. Example of configuration content included in a chain genesis block. We emphasize that in this Figure, we use json format for simplicity of presentation.\n\n\n\u521b\u59cb\u5757\u5185\u5bb9\u7684\u4f8b\u5b50\uff0c\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u6b64\u56fe\u4e2d\uff0c\u6211\u4eec\u7528json\u683c\u5f0f\u63cf\u8ff0\u5185\u5bb9\u3002\n\n\nConfiguration information of a (simple) MSP: To setup an MSP one would need the type of MSP be supported by that node\u2019s executable, i.e., the MSP type to be among the ones already defined and implemented in the node\u2019s peer or orderer executable. Each MSP is required to implement the interface presented in Figure1 and can be configured with instructions provided at chain genesis time. The information included in the genesis block of a chain for each MSP, is MSP-type-dependent. For the the default fabric MSP type, MSP configuration includes the following parts:\n\n\n\u4e00\u4e2a\u7b80\u5355MSP\u7684\u914d\u7f6e\u4fe1\u606f\uff1a\u4e3a\u4e86\u5efa\u7acbMSP\uff0c\u9700\u8981\u77e5\u9053\u8282\u70b9\u652f\u6301\u7684MSP\u7c7b\u578b\uff0c\u5373peer\u6216\u8005 orderer\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u7684MSP\u3002 \u6bcf\u4e2aMSP\u9700\u8981\u5b9e\u73b0\u56fe1\u4e2d\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u7528\u5728\u94fe\u521b\u5efa\u7684\u65f6\u5019\u63d0\u4f9b\u7684\u4fe1\u606f\u8fdb\u884c\u914d\u7f6e\u3002\u8fd9\u4e9b\u4fe1\u606f\uff08\u5305\u62ec\u94fe\u7684\u521b\u59cb\u5757\u4e2d\u6bcf\u4e2aMSP\u7684\u4fe1\u606f\uff09\u4f9d\u8d56\u4e8eMSP\u7684\u7c7b\u578b\u3002\u9ed8\u8ba4\u7684MSP\u7c7b\u578b\u4e3aFabric\uff0c\u5176\u914d\u7f6e\u5305\u62ec\u5982\u4e0b\u4fe1\u606f\u3002\n\n\n\n\nA name to identify the MSP within the chain/Blockchain network; In the above example we use  \u201corg1\u201d, \u201corg2\u201d, and \u201corg3\u201d as MSPIDs of the MSPS that govern the chain.  This is because we follow the convention of Section 1. Terminology, where each MSP represents an organization. \n\n\n\u6807\u8bc6MSP\u5728\u94fe\u6216\u8005\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684\u8eab\u4efd\u7684\u540d\u5b57\uff1b \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u6211\u4eec\u7528 org1\uff0c org2 \u548corg3 \u4f5c\u4e3aMSPID\u6765\u7ba1\u7406chain\u3002\n\n\nThe type of MSP this provider uses; the provider mentioned in the example below is of type \u201cFabric\u201d, which aims to be the (default) MSP implementation in fabric. Alternative implementations may require cross-signed certificates from two or more root CAs etc, and would have a different type reference.\n\n\nMSP\u7c7b\u578b\uff1b\u4e0b\u9762\u4f8b\u5b50\u4e2d\u63d0\u7684\u7c7b\u578b\u4e3aFabric\uff0c\u8fd9\u662fFabric\u4e2d\u9ed8\u8ba4\u5b9e\u73b0\u7684MSP\u3002 \u5176\u4ed6\u7684\u5b9e\u73b0\u53ef\u80fd\u9700\u8981\u6765\u81ea\u591a\u4e2aRootCa\u7684\u4ea4\u53c9\u7b7e\u540d\u8bc1\u4e66\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b\u3002\n\n\nA set of parameter values that include\n\n\n\u4e00\u7ec4\u5305\u542b\u5982\u4e0b\u503c\u7684\u53c2\u6570\u4fe1\u606f\uff1a\n\n\na set of identities/certificates to constitute the root of trust, or CA server(s), e.g.,  \n\n\n\n\nRootCerts\n:[\norg1-identity1bytes\n,\norg1-identity2bytes\n,\norg1-identity3bytes\n],\n\n\n\n\nNotice that all these identities in the default case have the form of plain X.509 certificates in PEM format.\n  - \u4e00\u7ec4\u6784\u6210\u4fe1\u4efbrootCA\u7684\u8bc1\u4e66\uff0c\u6bd4\u5982\uff1a\nRootCerts\n:[\norg1-identity1bytes\n,\norg1-identity2bytes\n,\norg1-identity3bytes\n]\u3002 \u8fd9\u4e9bIdentity\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662fX.509\u7684PEM\u683c\u5f0f\u7684\u8bc1\u4e66\u3002\n  - the admin authorized to perform updates to this MSP parameters/configuration (consisting primarily on the root of trust/ root CA certificates, and CRLs); for simplicity we show a single certificate/identity as admin: \n\n\n  \nAdmins\n:[\nadminidOrg1bytes\n],\n\n\n\n\n\n\n\u7ba1\u7406\u5458\uff0c\u53ef\u4ee5\u66f4\u65b0MSP\u53c2\u6570\u548c\u914d\u7f6e\u4fe1\u606f\uff1b\u7b80\u5355\u8d77\u89c1\uff0c\u4e00\u822c\u63d0\u4f9b\u4e00\u4e2a\u8bc1\u4e66\u6216\u8005Identity\u4f5c\u4e3a\u7ba1\u7406\u5458\u3002\nAdmins\n:[\nadminidOrg1bytes\n],\n\n\nthe current list of revoked certificates in bytes, which, if omitted, an empty list is implied. Notice that exact structure of revocation identities depends on the MSP type. However, one could represent it in the configuration file as an array of bytes.\n\n\n\u64a4\u9500\u8bc1\u4e66\u5217\u8868\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u3002 \u64a4\u9500identity\u7684\u7ed3\u6784\u4f9d\u8d56\u4e8eMSP\u7684\u7c7b\u578b\u3002\u4f46\u662f\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\u3002\n\n\n\n\nThis structure is depicted in the protocol message of Figure 7.\n\n\n\u56fe7\u7684\u534f\u8bae\u6d88\u606f\u4e2d\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u914d\u7f6e\u7684\u7ed3\u6784\u3002\n\n\n2.5.2 MSP principals\n\n\nMSP principals constitute the building blocks of definition of access control policies within a chain or channel. In particular, they are used to describe one or more identities that share a common feature that a specific MSP manages.\n\n\nMSP\u4e3b\u9898\u7ec4\u6210\u4e86\u5b9a\u4e49chain\u6216\u8005channel\u7684\u8bbf\u95ee\u63a7\u5236\u7b56\u7565\u7684\u533a\u5757\u3002\u5b83\u4eec\u88ab\u7528\u6765\u63cf\u8ff0\u4e00\u4e2aMSP\u7ba1\u7406\u7684\u5177\u6709\u5171\u540c\u7279\u6027\u7684\u591a\u4e2aIdentity \u3002 \n\n\nIn the simplest case,  an MSPPrincipal can be the group of identities that are valid under a specific MSP\u2019s identity validation logic, or the administrator(s) of an MSP. In this case we say that the MSPPrincipal is defined using the role of the identity inside that MSP as a classification criteria.\n\n\n\u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2aMSP\u4e3b\u9898\u53ef\u4ee5\u662f\u5728MSPIdentity\u9a8c\u8bc1\u903b\u8f91\u4e0b\u5408\u6cd5\u7684Identity \u7ec4\uff08member\uff09\uff0c \u6216\u7ba1\u7406\u5458\u7ec4\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u79f0MSP\u4e3b\u9898\u7528MSP\u4e2dIdentity\u7684\u89d2\u8272\u5206\u7c7b\u5b9a\u4e49\u3002\n\n\nAlternatively MSPPrincipal, can be tuned to define a specific (serialized) identity of an MSP configuration (MSPConfig object from above). In this case we say that the MSPPrincipal is defined using an identity based classification.\n\n\n\u53ef\u9009\u7684MSP\u4e3b\u9898\u5b9a\u4e49\uff0c\u53ef\u4ee5\u662fmsp\u914d\u7f6e\u5b9a\u4e49\u7684\u4e00\u4e2aidentity\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u79f0 MSP\u4e3b\u9898\u7528\u8eab\u4efd\u5206\u7c7b\u6765\u5b9a\u4e49\u3002\n\n\nFinally, MSPPrincipal can be defined as a set of identities that are valid under a specific MSP\u2019s configuration, and belong to a certain organization unit. In this case we say that the MSPPrincipal is defined using an OrganizationUnit based classification.\n\n\n\u6700\u540e\uff0cMSP\u4e3b\u9898\u53ef\u4ee5\u7528\u4e00\u7ec4\u5728MSP\u914d\u7f6e\u4e2d\u5408\u6cd5\u7684identity\u6765\u5b9a\u4e49\uff0c\u5e76\u4e14\u96b6\u5c5e\u4e8e\u7279\u5b9a\u7ec4\u7ec7\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u79f0MSP\u4e3b\u9898\u4f7f\u7528\u7ec4\u7ec7\u5206\u7c7b\u6765\u5b9a\u4e49\u3002\n\n\nIn the future, MSPPrincipal, can be tuned to describe a set of identities that are valid under a specific MSP\u2019s configuration (MSPConfig object from above) and have a certain attribute in common. In this case we would say that the MSPPrincipal is defined using an attribute based classification.\n\n\n\u672a\u6765\uff0cMSP\u4e3b\u9898\u53ef\u4ee5\u7528\u4e00\u7ec4\u5728MSP\u914d\u7f6e\u4e2d\u5408\u6cd5\u7684identity\u6765\u5b9a\u4e49\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u7279\u5b9a\u5c5e\u6027\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u79f0 MSP\u4e3b\u9898 \u4f7f\u7528\u5c5e\u6027\u5206\u7c7b\u6765\u5b9a\u4e49\u3002\n\n\nMSPPrincipal structure is defined in Figure 9.\n\n\nMSP\u4e3b\u9898\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n\n// MSPPrincipal aims to represent an MSP-centric set of identities.  In particular,\n// this structure allows for definition of\n//  - a group of identities that are member of the same MSP\n//  - a group of identities that are member of the same organization unit\n//    in the same MSP\n//  - a group of identities that are administering a specific MSP\n//  - a specific identity\n// Expressing these groups is done given two fields of the fields below\n//  - Classification, that defines the type of classification of identities\n//    in an MSP this principal would be defined on; Classification can take\n//    three values:\n//     (i)  ByMSPRole: that represents a classification of identities within\n//          MSP based on one of the two pre-defined MSP rules, \nmember\n and \nadmin\n\n//     (ii) ByOrganizationUnit: that represents a classification of identities\n//          within MSP based on the organization unit an identity belongs to\n//     (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single\n//          identity/certificate; this would mean that the Principal bytes\n//          message\n//  -Principal that contains either a serialized MSPRole message, or a serialized \n// MSPOrganizationUnit message, or a serialized SerializedIdentityMessage depending\n// on the Classification value..\n\nmessage MSPPrincipal {\n\n   enum Classification {\n       ByMSPRole = 0;  // Represents the one of the dedicated MSP roles, the\n       // one of a member of MSP network, and the one of an\n       // administrator of an MSP network\n       ByOrganizationUnit = 1; // Denotes a finer grained (affiliation-based)\n       // groupping of entities, per MSP affiliation\n       // E.g., this can well be represented by an MSP's\n       // Organization unit\n       ByIdentity  = 2;    // Denotes a principal that consists of a single\n       // identity\n   }\n\n   // Classification describes the way that one should process\n   // Principal. An Classification value of \nByOrganizationUnit\n reflects\n   // that \nPrincipal\n contains the name of an organization this MSP\n   // handles. A Classification value \nByIdentity\n means that\n   // \nPrincipal\n contains a specific identity. Default value\n   // denotes that Principal contains one of the groups by\n   // default supported by all MSPs (\nadmin\n or \nmember\n).\n   Classification PrincipalClassification = 1;\n\n   // Principal completes the policy principal definition. For the default\n   // principal types, Principal can be either \nAdmin\n or \nMember\n.\n   // For the ByOrganizationUnit/ByIdentity values of Classification,\n   // PolicyPrincipal acquires its value from an organization unit or\n   // identity, respectively.\n   bytes Principal = 2;\n}\n\n\n// OrganizationUnit governs the organization of the Principal\n// field of a policy principal when a specific organization unity members\n// are to be defined within a policy principal.\nmessage OrganizationUnit {\n\n   // MSPIdentifier represents the identifier of the MSP this organization unit\n   // refers to\n   string MSPIdentifier = 1;\n\n   // OrganizationUnitIdentifier defines the organization unit under the\n   // MSP identified with MSPIdentifier\n   string OrganizationUnitIdentifier = 2;\n\n}\n\n// MSPRole governs the organization of the Principal\n// field of an MSPPrincipal when it aims to define one of the\n// two dedicated roles within an MSP: Admin and Members.\nmessage MSPRole {\n\n   // MSPIdentifier represents the identifier of the MSP this principal\n   // refers to\n   string MSPIdentifier = 1;\n\n   enum MSPRoleType {\n       Member = 0; // Represents an MSP Member\n       Admin  = 1; // Represents an MSP Admin\n   }\n\n   // MSPRoleType defines which of the available, pre-defined MSP-roles\n   // an identiy should posess inside the MSP with identifier MSPidentifier\n   MSPRoleType Role = 2;\n\n}\n\n\n\n\n\nFigure 9. MSPPrincipal related protocol messages.\n\n\nMSPPrincipal \u76f8\u5173\u534f\u8bae\u6d88\u606f\n\n\nMSP interface is to be extended with the following function \n\n\nSatisfiesPrincipal(id Identity, principal *MSPPrincipal) error\n\n\nThat would return true if the list of identities passed as parameters satisfy the provided MSPPrincipal. \n\n\nMSP\u7684\u63a5\u53e3\u4e2d\u589e\u52a0\u51fd\u6570\uff1a\n\n\nSatisfiesPrincipal(id Identity, principal *MSPPrincipal) error\n\n\n\u5f53\u53c2\u6570identity \u6ee1\u8db3MSPPrincipal\uff0c\u8fd4\u56detrue\n\n\n\n\n\n\nNote: This function can be extended to include signatures if the only way to ensure that an identity is valid w.r.t. A certain MSP is through signatures. An example of such case is IBM Identity Mixer. \n\n\n\u6ce8\uff1a\u6b64\u51fd\u6570\u53ef\u4ee5\u6269\u5c55\u4e3a\u652f\u6301\u7b7e\u540d\uff0c\u5982\u679c\u552f\u4e00\u786e\u4fddidentity\u662f\u5408\u6cd5\u7684\u65b9\u5f0f\u662fwrt\uff0c \u4e00\u4e2a\u7279\u5b9a\u7684\u901a\u8fc7\u7b7e\u540d\u7684MSP\u3002 \u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\u662fIBM\u7684Identity Mixer\u3002\n\n\n\n\n\n\n2.5.3 Reconfiguration of a channel MSP\n\n\nA channel\u2019s MSPs are reconfigured through configuration blocks that are submitted to the channel and committed to that channel. More information on this is to be added soon.\n\n\nChannel\u7684MSP\u53ef\u4ee5\u901a\u8fc7\u5411channnel\u63d0\u4ea4\u914d\u7f6e\u5757\u8fdb\u884c\u91cd\u65b0\u914d\u7f6e\u3002\u66f4\u591a\u4fe1\u606f\u540e\u7eed\u5c06\u4f1a\u52a0\u5165\u3002\n\n\nAs happens with the reconfiguration of parameters included in other configuration items, reconfiguration of an MSP includes the following steps: \n\n\n\u50cf\u5176\u4ed6\u914d\u7f6e\u53d8\u66f4\u4e00\u6837\uff0cMSP\u7684\u91cd\u65b0\u914d\u7f6e\u4e5f\u5305\u542b\u5982\u4e0b\u6b65\u9aa4\uff1a\n\n\n\n\nValidate the authorization of the signers of configuration items included in the configuration transaction/block to reconfigure the signed configuration items using chain\u2019s ConfigManager (+jason.anonymous@gmail.com to add more information as needed here :)). For the specific case of MSPs we discuss later how this takes place.  \n\n\n\n\n\u9a8c\u8bc1\u914d\u7f6e\u5757\uff08\u6216\u8005\u4ea4\u6613\uff09\u914d\u7f6e\u9879\u7684\u7b7e\u540d\u8005\u7684\u6743\u9650\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u540e\u9762\u4f1a\u8ba8\u8bba\u3002\n\n\n\n\nCreate a new chain object, and a fresh MSPManager using the MSPManager Setup function and the list of MSPConfig objects created after parsing the Configuration Block \n transaction. \n\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u5bf9\u8c61\uff0c\u901a\u8fc7MSPManager\u7684setup\u51fd\u6570\u548c\u914d\u7f6e\u5757\u4e2d\u5305\u542b\u7684MSPConfig\u5bf9\u8c61\uff0c\u5237\u65b0MSPManager\u3002\n\n\n\n\nDo the same for the rest of components that configuration items define, and have the new chain object point to the most recent instances of the reconfigured chain\u2019s components. \n\n\n\n\n\u5bf9\u914d\u7f6e\u5b9a\u4e49\u7684\u7ec4\u4ef6\u7684\u5176\u4ed6\u90e8\u5206\uff0c\u505a\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u8ba9\u65b0\u7684\u94fe\u5bf9\u8c61\u6307\u5411\u90a3\u4e9b\u65b0\u914d\u7f6e\u7684\u94fe\u7684\u7ec4\u4ef6\u3002\n\n\n\n\nAfter ensuring that the creation of each of the new components completes successfully, substitute chain pointers for MSPManager and other components to point to the freshly generated ones. Otherwise abandon the operation. \n\n\n\n\n\u786e\u8ba4\u6240\u6709\u65b0\u7684\u7ec4\u4ef6\u90fd\u521b\u5efa\u6210\u529f\u540e\uff0c\u66ff\u6362\u94fe\u6307\u9488\u6307\u5411\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\uff08\u4e3aMSPManager\u548c\u5176\u4ed6\u7ec4\u4ef6\u521b\u5efa\u7684\u5bf9\u8c61\uff09\u3002\u5426\u5219\u56de\u6eda\u64cd\u4f5c\u3002\n\n\n\n\nDestroy the obsolete chain and linked components.\n\n\n\n\n\u9500\u6bc1\u8fc7\u65f6\u662f\u94fe\u5bf9\u8c61\u548c\u5b83\u5173\u8054\u7684\u7ec4\u4ef6\u3002\n\n\nMore information on how a chain reconfiguration occurs is described in the last section.\n\n\n\u5173\u4e8e\u5982\u4f55\u91cd\u65b0\u914d\u7f6echain\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5c06\u5728\u4e0b\u4e00\u7ae0\u8282\u8ba8\u8bba\u3002\n\n\n3.Channel Access Control\n\n\nIn the genesis block of a channel, the following policies need to be defined:\n\n\n\u5728channel\u7684\u521b\u59cb\u5757\u4e2d\uff0c\u4e0b\u9762\u7684\u7b56\u7565\u9700\u8981\u5b9a\u4e49\uff1a\n\n\n\n\n\n\nThe readers of the chain or \u201cchannelReaders\u201d, i.e., the policy to authenticate any request associated to read access to the transactions of a chain. For example this policy could define the identity or groups of identities (MSPPrincipals) that are allowed read-access to the chain; the same policy governs access to ordering service delivery requests and event access requests for that chain. \n\n\n\n\n\n\nchain\u7684reader\uff0c\u5373\u5173\u4e8e\u8bbf\u95ee\u94fe\u4ea4\u6613\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7b56\u7565\u53ef\u4ee5\u5b9a\u4e49\u5141\u8bb8\u8bbf\u95eechain\u7684Identity\u6216\u8005Identiy\u7ec4\uff08MSPPrincipals\uff09\uff1b\u8fd9\u4e2a\u7b56\u7565\u4e5f\u4f1a\u7ba1\u7406\u5bf9orderer\u4e2d\u5173\u4e8e\u8fd9\u4e2a\u94fe\u7684\u8bbf\u95ee\u3002\n\n\n\n\n\n\nThe writers of the chain or \u201cchannelWriters\u201d, i.e., the policy to authenticate any request associated to submitting transaction to a chain. For example, this policy may include the identities or groups of identities (MSPPrincipals) that should be allowed to submit transactions to the chain. In particular this policy governs the set of signatures that need to be acquired in a transaction for the latter to be allowed to be submitted to the chain. The same policy governs permissions of clients to submit proposals to endorsers concerning that chain. \n\n\n\n\n\n\nchain\u7684writer\uff0c\u5373\u5173\u4e8e\u63d0\u4ea4\u4ea4\u6613\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7b56\u7565\u53ef\u4ee5\u5305\u542b\u5141\u8bb8\u5411chain\u63d0\u4ea4\u4ea4\u6613\u7684Identity\u6216\u8005Identity\u7ec4\uff08MSPPrincipals\uff09\u3002\u5c24\u5176\u662f\uff0c\u8fd9\u4e2a\u7b56\u7565\u7ba1\u7406\u7b7e\u540d\u7ec4\uff0c\u5411chain\u4e2d\u63d0\u4ea4\u4ea4\u6613\u65f6\u9700\u8981\u7528\u8fd9\u4e9b\u7b7e\u540d\u3002\u540c\u6837\u7684\u7b56\u7565\u7ba1\u7406\u5141\u8bb8\u54ea\u4e9b\u5ba2\u6237\u7aef\u5411\u80cc\u4e66\u8282\u70b9\u63d0\u4ea4proposals \u3002\n\n\n\n\n\n\nThe admins of the channel or \u201cchannelAdmins\u201d,  i.e., the policy to authenticate any request associated to reconfiguration of specific channel parameters. Admins may determine the identities or groups of identities (MSPPrincipals, and the way to combine them) that have admin access to the chain configuration. Such policies specify the (combination of) MSPPrincipals that should sign chain-specific reconfigurations for the reconfiguration to be applied. \n\n\n\n\n\n\nchannel\u7684\u7ba1\u7406\u5458\uff0c\u5373\u5173\u4e8e\u91cd\u65b0\u914d\u7f6echannel\u53c2\u6570\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u51b3\u5b9a\u54ea\u4e9bidentity\u5bf9chain\u7684\u914d\u7f6e\u6709\u7ba1\u7406\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u4e9b\u7b56\u7565\u5b9a\u4e49MSPPrincipals \u7528\u6765\u5bf9\u91cd\u65b0\u914d\u7f6e\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d\u3002\n\n\n\n\n\n\nThe chaincodeAdmins of the chain,  i.e., the policy to authenticate any request associated to chaincode deployment within a chain. In the default policy case, chainDeployers would determine the identities or groups of identities (MSPPrincipals, and the way to combine them) that have permission to create or upgrade chaincodes on that chain. \n\n\n\n\n\n\nchain\u7684\u7ba1\u7406\u5458\uff0c\u5373\u5bf9\u94fe\u4e2d\u90e8\u7f72\u7684\u94fe\u4ee3\u7801\u76f8\u5173\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u5bf9\u4e8e\u9ed8\u8ba4\u7b56\u7565\uff0c\u94fe\u90e8\u7f72\u8005\u51b3\u5b9a\u54ea\u4e9bidentity \u6709\u6743\u9650\u5728\u94fe\u4e2d\u521b\u5efa\u548c\u66f4\u65b0\u94fe\u4ee3\u7801\u3002\n\n\n\n\n\n\nFor the orderer system channel in particular the application needs to specify another policy called \u201cchainCreators\u201d, that would be used to evaluate chain creation requests by the orderers. Again chainCreators policy definition would be based on MSPPrincipals of MSPs that have been defined on the system channel.\n\n\n\u5bf9\u4e8eorderer\u7684\u7cfb\u7edfchannel\uff0c\u5e94\u7528\u9700\u8981\u6307\u5b9a\u53e6\u5916\u4e00\u79cd\u7b56\u7565\u201cchainCreators\u201d\uff0corderer\u7528\u5b83\u6765\u8bc4\u4f30chain\u521b\u5efa\u8bf7\u6c42\u3002chainCreator\u7b56\u7565\u8981\u57fa\u4e8e\u7cfb\u7edfchannel\u4e2d\u5b9a\u4e49\u7684MSP\u7684 MSPPrincipals\u5b9a\u4e49\u3002\n\n\nInitially within fabric, we plan to provide default policies, that are defined with the use of the policy framework in coauthdsl package. That is,\n\n\n\u5728fabric\u7684\u6700\u521d\u7248\u672c\u4e2d\uff0c \u6211\u4eec\u8ba1\u5212\u63d0\u4f9b\u9ed8\u8ba4\u7b56\u7565\uff0c \u7528coauthdsl \u5305\u7684\u7b56\u7565\u6846\u67b6\u5b9a\u4e49\uff1a\n\n\n\n\n\n\nFor read-permissions we allow that the chain content is readable within a selection of MSP networks that govern the chain. In the genesis block, this is done by:\n\n\n\n\n\n\n\u5bf9\u4e8e\u8bfb\u6743\u9650\uff0c\u6211\u4eec\u5141\u8bb8\u7ba1\u7406\u94fe\u7684msp\u4e2d\u7684\u90e8\u5206msp\u53ef\u8bfb\u94fe\u7684\u5185\u5bb9\u3002 \u5728\u521b\u59cb\u5757\u4e2d\u5b9a\u4e49\u3002\n\n\n\n\n\n\nIncluding in the genesis transaction a signed configuration item of type \u201cPolicy\u201d whose value is the actual policy definition. In our example, we would use an OR (SignaturePolicy) type of policy of two MSP principals, one defining the members of org2, and one defining the members of org3. Let this configuration item be referred using key channelReadersPolicy. Its content is schematically described  as follows:\n\n\n\n\n\n\n\u5728\u521b\u59cb\u4ea4\u6613\u4e2d\uff0c\u201cpolicy\u201d\u914d\u7f6e\u9879\u7684\u503c\u5c31\u662f\u4e00\u4e2a\u7b56\u7565\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e24\u4e2aMSP \u3002principal\u7684OR\uff08\u7b7e\u540d\u7b56\u7565\uff09\u7c7b\u578b\u4f5c\u4e3a\u7b56\u7565\uff0c\u4e00\u4e2a\u662forg2\u7684\u6210\u5458\uff0c\u4e00\u4e2a\u662forg3\u7684\u6210\u5458\u3002\n\n\n\n\n\n\n{\u201cclassification\n:\nbymsprole\n,\nprincipal\n:{\nmspid\n:\norg2\n,\nmsproletype\n: \nmember\n}}\n               OR \n   {\u201cclassification\n:\nbymsprole\n,\nprincipal\n:{\nmspid\n:\norg3\n,\nmsproletype\n: \nmember\n}}\n\n\n\n\n\n\nIncluding a (signed) configuration item of type \u201cChain\u201d, referenced by identifier \u201cchannelReaders\u201d and takes as value the policy identifier channelReaderPolicy. Table 2 shows an example of how read policy of a chain/channel is defined in a genesis block.\n\n\n\n\n\n\nIdentifier \u7684\u201cchannelReaders\n \u5f15\u7528 \u914d\u7f6e\u9879\u201dChain\u201c \u4f5c\u4e3achannel\u7684reader\u7b56\u7565\u3002\u88682\u662f\u521b\u59cb\u5757\u4e2d\u94fe/chennal\u7684\u8bfb\u7b56\u7565\u5b9a\u4e49\n\n\n\n\n\n\nFor write permissions we allow that the members of a selection of MSP networks that govern the chain are allowed to submit transactions to the chain. As in the case to channelReaders, this is reflected in the chain genesis transaction through the use of two configuration items: \n\n\n\n\n\n\n\u5bf9\u4e8e\u5199\u6743\u9650\uff0c\u6211\u4eec\u5141\u8bb8\u7ba1\u7406chain\u7684MSP\u4e2d\u7684\u90e8\u5206\u6210\u5458\u5411\u94fe\u4e2d\u63d0\u4ea4\u4ea4\u6613\u3002\u8ddfReader\u4e00\u6837\uff0c \u5b83\u4e5f\u901a\u8fc7\u5728\u521b\u59cb\u4ea4\u6613\u4e2d\u7684\u4e24\u4e2a\u914d\u7f6e\u9879 \u8fdb\u884c\u914d\u7f6e\u3002\n\n\n\n\n\n\nA configuration item of type \u201cPolicy\u201d whose value is the actual policy definition. In our example, we would define this policy as an OR (SignaturePolicy) type of policy of two MSP principals, one defining the members of org2, and one defining the members of org3. Let this configuration item be referred using key channelWritersPolicy. Its content is schematically described  as follows:\n\n\n\n\n\n\n\u5728\u521b\u59cb\u4ea4\u6613\u4e2d\uff0c\u201cpolicy\u201d\u914d\u7f6e\u9879\u7684\u503c\u5c31\u662f\u4e00\u4e2a\u7b56\u7565\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e24\u4e2aMSP \u3002principal\u7684OR\uff08\u7b7e\u540d\u7b56\u7565\uff09\u7c7b\u578b\u4f5c\u4e3a\u7b56\u7565\uff0c\u4e00\u4e2a\u662forg2\u7684\u6210\u5458\uff0c\u4e00\u4e2a\u662forg3\u7684\u6210\u5458\u3002\u8fd9\u4e9b\u914d\u7f6e\u9879\u7528\u201cchannelWritersPolicy\u201d\u4f5c\u4e3a\u952e\u6765\u5b9a\u4e49\u3002\u5185\u5bb9\u5982\u4e0b\uff1a\n\n\n\n\n\n\n{\u201cclassification\n:\nbymsprole\n,\nprincipal\n:{\nmspid\n:\norg2\n,\nmsproletype\n: \nmember\n}}\n                                  OR\n   {\u201cclassification\n:\nbymsprole\n,\nprincipal\n:{\nmspid\n:\norg3\n,\nmsproletype\n: \nmember\n}}\n\n\n\n\n\n\nIncluding a (signed) configuration item of type \u201cChain\u201d, referenced by identifier \u201cchannelWriters\u201d and takes as value the policy identifier channelWritersPolicy. Table 2 shows an example of how write policy of a chain/channel is defined in a genesis block.\n\n\n\n\n\n\nIdentifier \u7684\u201cchannelWriters\n \u5f15\u7528 \u914d\u7f6e\u9879\u201dChain\u201c \u4f5c\u4e3achannel\u7684Writer\u7b56\u7565\u3002\u88682\u662f\u521b\u59cb\u5757\u4e2d\u94fe/chennal\u7684\u5199\u7b56\u7565\u5b9a\u4e49\n\n\n\n\n\n\nAs admin policies we allow that the chain is re-configurable as long as reconfiguration requests on chain items are signed by the admins of all MSPs (via an external tool) that govern that chain. This is expressed in the genesis block in the same as the two previously described policies and using the following as content of the policy:\n\n\n\n\n\n\n\u4f5c\u4e3a\u7ba1\u7406\u7b56\u7565\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u914d\u7f6e\u8bf7\u6c42\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u79cd\u8bf7\u6c42\u5fc5\u987b\u5305\u542b\u7ba1\u7406\u6b64chain\u7684\u6240\u6709MSP\u7684\u7b7e\u540d\u3002\u8fd9\u8ddf\u524d\u4e24\u4e2a\u7b56\u7565\u4e00\u6837\u5728\u521b\u59cb\u5757\u4e2d\u63cf\u8ff0\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n   {\u201cclassification\n:\nbymsprole\n,\nprincipal\n:{\nmspid\n:\norg2\n,\nmsproletype\n: \nadmin\n}} \n                                              AND\n   {\u201cclassification\n:\nbymsprole\n,\nprincipal\n:{\nmspid\n:\norg3\n,\nmsproletype\n: \nadmin\n}}\n\n\n\n\n\nFor the purpose of this document we will refer to the related policy configuration item and chain parameter by channelAdminsPolicy, and channelAdmins respectively as reflected in Table 3.\n\n\n\u5728\u672c\u6587\u6863\u4e2d\uff0c\u76f8\u5173\u7684\u914d\u7f6e\u7b56\u7565\u548cchain\u53c2\u6570\u4f1a\u88abchannelAdminsPolicy \u548c channelAdmins\u5f15\u7528\uff0c\u53ef\u53c2\u8003\u88683.\n\n\nAs chaincodeAdmins policy of a chain we use the same methodology as the one listed before.\nDefinition of these policies is done through cauthdsl framework of fabric codebase that leverage MSPPrincipals, and satisfiesPrincipal(id, principal) function of MSP interface where principal denotes the  MSPPrincipal of MSP\u2019s network,, and id is an identity.\n\n\nchain\u7684\u94fe\u4ee3\u7801\u7ba1\u7406\u7b56\u7565\uff0c\u6211\u4eec\u4f7f\u7528\u8ddf\u4e0a\u9762\u76f8\u540c\u7684\u673a\u5236\u3002\u8fd9\u4e9b\u7b56\u7565\u4e5f\u901a\u8fc7cauthdsl\u6846\u67b6\u5b9a\u4e49\uff0c\u4f1a\u7528\u5230MSP\u63a5\u53e3\u7684MSPPrincipals \u548c satisfiesPrincipal\uff08id\uff0cprincipal\uff09\u51fd\u6570\u3002principal\u662fMSP\u7f51\u7edc\u7684MSPPrincipal\uff0c id\u662f\u4e00\u4e2aIdentity\u3002\n\n\nFor chain creation policies, that concern solely the system channel, the orderer defines chain creation policies within its orderer system chain. These policies may be arbitrary, and restrict the default policy further.  For instance, the chain creation policy might require that a minimum of 4 parties are involved in a new chain, or that one particular party be involved in all new chains etc.  The characteristics of this policy are negotiated with the orderer admins when an ordering service is configured to accept chain creation requests from a group of MSPs. The default policy in this case would require the signature of all application MSPs involved in the new chain.\n\n\n\u5bf9\u4e8echain\u521b\u5efa\u7b56\u7565\uff0c\u4e0e\u7cfb\u7edfchannel\u5f3a\u76f8\u5173\uff0corderer\u5728\u5b83\u7684\u7cfb\u7edfchain\u4e2d\u5b9a\u4e49chain\u7684\u521b\u5efa\u7b56\u7565\u3002\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u968f\u610f\u5b9a\u4e49\uff0c\u672a\u6765\u4f1a\u53d7\u9650\u4e8e\u9ed8\u8ba4\u7b56\u7565\u3002\u4f8b\u5982\uff0cchain\u521b\u5efa\u7b56\u7565\u8981\u6c42chain\u6700\u5c11\u67094\u4e2a\u53c2\u4e0e\u65b9\uff0c\u6216\u8005\u6bcf\u4e2achain\u4e2d\u90fd\u8981\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u53c2\u4e0e\u65b9\u3002\u5f53orderer\u914d\u7f6e\u4e3a\u63a5\u53d7\u6765\u81ea\u4e00\u7ec4MSP\u7684\u521b\u5efachain\u8bf7\u6c42\u65f6\uff0c\u8fd9\u4e2a\u7b56\u7565\u5c31\u662forderer\u7684\u7ba1\u7406\u5458\u534f\u5546\u7684\u7ed3\u679c\u3002\u9ed8\u8ba4\u7b56\u7565\u4e2d\u521b\u5efachain\u9700\u8981\u5176\u4e2d\u6240\u6709\u7684MSP\u7684\u7b7e\u540d\u3002\n\n\nAn example of the structure of orderer system channel genesis is depicted in Table 2.   \n\n\n\u88682\u63cf\u8ff0\u4e86\u4e00\u4e2aorderer\u7cfb\u7edfchannel\u4f8b\u5b50\u7684\u7ed3\u6784\u3002\n\n\n4. Using the default MSP: Best Practices\n\n\nIn this section we elaborate on best practices for membership service providers configuration for v1 in commonly met scenarios.\n\n\n\u672c\u8282\u8be6\u7ec6\u63cf\u8ff0\u5728\u901a\u7528\u573a\u666f\u4e0b\u4f7f\u7528V1\u7684\u9ed8\u8ba4MSP\u914d\u7f6e\u3002\n\n\n1. Mapping between organizations/corporations and membership service providers\n\n\n\u7ec4\u7ec7\u8ddfMSP\u7684\u6620\u5c04\u5173\u7cfb\n\n\nWe recommend that there is a one-to-one mapping between organizations and MSPs. If a different mapping ration is chosen the following needs to be to considered:\n\n\n\u6211\u4eec\u63a8\u8350\u7ec4\u7ec7\u548cMSP\u4e00\u4e00\u5bf9\u5e94\u3002\u5982\u679c\u9009\u62e9\u4e86\u5176\u4ed6\u6620\u5c04\uff0c\u4e0b\u9762\u8fd9\u4e9b\u9700\u8981\u8003\u8651\uff1a\n\n\n\n\n\n\nOne organization employing various MSPs. This corresponds to the case of an organization including a variety of divisions each represented by its membership service provider, either for management independence reasons, or for privacy reasons. One needs to know in this case that peers can only be owned by a single MSP, and will not recognize peers with identities from other MSPs as peers of the same organization. Implications of this is that peers may share organization-scoped data with a set of peers that are members of the same subdivision, and not with the full set of organizations. \n\n\n\n\n\n\n\u4e00\u4e2a\u7ec4\u7ec7\u5b9a\u4e49\u591a\u4e2aMSPs\u3002\u5b83\u6ee1\u8db3\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u5305\u542b\u591a\u4e2a\u90e8\u95e8\uff0c\u7531\u4e8e\u7ba1\u7406\u72ec\u7acb\u6027\u6216\u8005\u9690\u79c1\u7684\u539f\u56e0\uff0c\u6bcf\u4e2a\u90e8\u95e8\u7531\u81ea\u5df1\u7684MSP\u3002\u6211\u4eec\u9700\u8981\u6e05\u695a\uff0c\u4e00\u4e2apeer\u53ea\u80fd\u5f52\u5c5e\u4e8e\u4e00\u4e2aMSP\uff0c\u5e76\u4e14peer\u4e0d\u4f1a\u628a\u5176\u4ed6MSP\u4e0b\u7684peer\u770b\u4f5c\u540c\u4e00\u4e2a\u7ec4\u7ec7\u3002\u8fd9\u610f\u5473\u7740peer\u53ea\u4f1a\u8ddf\u672c\u90e8\u95e8\u7684peer\u5206\u4eab\u4fe1\u606f\uff0c\u800c\u4e0d\u4f1a\u8ddf\u540c\u4e00\u7ec4\u7ec7\u4e2d\u7684\u5176\u4ed6peer\u5206\u4eab\u3002\n\n\n\n\n\n\nMultiple organizations using a single  MSP. This corresponds to a case of an organization consortium whose membership architecture of individual organizations is compatible. One needs to know here that peers would propagate organization-scoped messages to the peers that have identity under the same MSP regardless of whether they belong to the same actual organization. This is a limitation of granularity of MSP definition, and/or of peer\u2019s configuration. \n\n\n\n\n\n\n\u591a\u4e2a\u7ec4\u7ec7\u4f7f\u7528\u4e00\u4e2aMSP\u3002\u5b83\u6ee1\u8db3\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u8054\u76df\uff0c\u5404\u4e2a\u7ec4\u7ec7\u7684\u6210\u5458\u76f8\u4e92\u517c\u5bb9\u3002peer\u4f1a\u8ddf\u540c\u4e00MSP\u4e0b\u7684\u5176\u4ed6peer\u5171\u4eab\u4fe1\u606f\uff0c\u800c\u4e0d\u7ba1\u4ed6\u4eec\u5b9e\u9645\u4e0a\u662f\u5426\u4e3a\u540c\u4e00\u7ec4\u7ec7\u3002\u8fd9\u662fMSP\u6216\u8005peer\u5b9a\u4e49\u7c92\u5ea6\u7684\u9650\u5236\u3002\n\n\n\n\n\n\nIn future versions of fabric this can change as we move towards (i) an identity channel that contains all membership related information of the network, (ii) peer notion of \u201ctrust-zone\u201d being configurable, a peer\u2019s administrator specifying at peer setup time whose MSP members should be treated by peers as authorized to receive \u201corganization\u201d-scoped messages.\n\n\nFabric\u672a\u6765\u7684\u7248\u672c\u4e2d\uff0c\u4f1a\u5411\u4e24\u4e2a\u65b9\u5411\u8f6c\u53d8\uff0c\uff081\uff09\u4e00\u4e2achannel\u4e2d\u5305\u542b\u7f51\u7edc\u4e2d\u6240\u6709\u6210\u5458\u7684\u76f8\u5173\u4fe1\u606f\u3002\uff082\uff09\uff0c\u589e\u52a0peer\u4fe1\u4efb\u57df\u7684\u6982\u5ff5\uff0cpeer\u7684\u7ba1\u7406\u5458\u53ef\u4ee5\u5728peer\u542f\u52a8\u7684\u65f6\u5019\u6307\u5b9a\u54ea\u4e9bMSP\u7684\u6210\u5458\u53ef\u4fe1\uff0c\u5e76\u5171\u4eab\u201c\u7ec4\u7ec7\u8303\u56f4\u201d\u7684\u6d88\u606f\u3002\n\n\n2. On organization has different divisions (say organizational units), to which it wants to grant access to different channels.\n\n\n\u7ec4\u7ec7\u6709\u4e0d\u540c\u7684\u90e8\u95e8\uff0c\u5e0c\u671b\u4e0d\u540c\u90e8\u95e8\u8bbf\u95ee\u4e0d\u540c\u7684channel\u3002\n\n\nTwo ways to deal with this:\n\n\n\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\n\n\n\n\n\n\n1 Define one MSP to accommodate membership for all organization\u2019s members. Configuration of that MSP would consist of a list of root CAs, intermediate CAs and admin CAs, and membership identities would include the organizational unit (OU) the member belongs to. Policies can then be defined to capture members of a specific OU, and these policies can be read/write policies of a channel or even chaincode administrators. Limitation of this approach, is that gossip peers would still consider peers under their local MPS as members of the same organization, and therefore share state / ledger related information with these peers even though they belong to an OU that is forbidden access to a certain channel.\n\n\n\n\n\n\n\u5b9a\u4e49\u4e00\u4e2aMSP\u7ba1\u7406\u7ec4\u7ec7\u7684\u6240\u6709\u6210\u5458\u3002MSP\u914d\u7f6e\u591a\u4e2aroot CA\uff0c \u4e2d\u95f4CA \u548c \u7ba1\u7406CA\uff0c\u6210\u5458\u7684\u8eab\u4efd\u4e2d\u5305\u542b\u6240\u5c5e\u7ec4\u7ec7\uff08OU\uff09\u3002\u5b9a\u4e49\u7b56\u7565\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u6210\u5458\u7684OU\uff0c\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u662fchannel\u7684\u8bfb\u5199\u7b56\u7565\uff0c\u4e5f\u53ef\u4ee5\u662f\u94fe\u4ee3\u7801\u7684\u7ba1\u7406\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u9650\u5236\uff0cpeer\u4f1a\u8ba4\u4e3a\u540c\u4e00MSP\u4e0b\u7684peer\u5c5e\u4e8e\u540c\u4e00\u7ec4\u7ec7\uff0c\u5e76\u4e14\u5171\u4eab\u72b6\u6001/\u8d26\u672c\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u4ed6\u4eec\u5c5e\u4e8e\u4e0d\u540c\u7684OU\uff0c\u8fd9\u4e9bOU\u7981\u6b62\u8bbf\u95ee\u7279\u5b9a\u7684channel\u3002\n\n\n\n\n\n\n2 Defining one MSP to represent each division, i.e., specify for each division a set of certificates, for root CAs, intermediate CAs, and admin Certs, such that there is no common certification path across MSPs. Here the disadvantage is the management of more than one MSPs instead of one, but this circumvents the issue present in approach (1).\n\n\n\n\n\n\n\u6bcf\u4e2a\u5206\u652f\u673a\u6784\u5b9a\u4e491\u4e2aMSP\uff0c\u6bcf\u4e2a\u5206\u652f\u673a\u6784\u90fd\u6709\u81ea\u5df1\u7684root CA\uff0c \u4e2d\u95f4CA \u548c\u7ba1\u7406CA\u3002\u8fd9\u6837MSP\u4e4b\u95f4\u6ca1\u6709\u516c\u5171\u8ba4\u8bc1\u8def\u5f84\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u7f3a\u70b9\u662f\u8981\u7ba1\u7406\u591a\u4e2aMSP\u800c\u4e0d\u662f1\u4e2a\uff0c\u4f46\u662f\u5b83\u89e3\u51b3\u4e86\u65b9\u6cd51\u4e2d\u7684\u95ee\u9898\u3002\n\n\n\n\n3 (available in the future) Define one MSP for each division by leveraging an OU extension of the MSP configuration.\n\n\n\uff08\u672a\u6765\u53ef\u7528\uff09\u5229\u7528MSP\u914d\u7f6e\u7684OU\u6269\u5c55\u5c5e\u6027\u4e3a\u6bcf\u4e00\u4e2a\u5206\u652f\u673a\u6784\u5b9a\u4e49\u4e00\u4e2aMSP\u3002\n\n\n\n\n3. Separating clients from peers of the same organization.\n\n\n\u5728\u540c\u4e00\u7ec4\u7ec7\u4e2d\u5206\u79bb\u5ba2\u6237\u7aef\u548cpeer\n\n\nIn many cases it is required that the \u201ctype\u201d of an identity is retrievable from the identity itself,e.g., it may be needed that endorsements are guaranteed to have derived by peers, and not clients or nodes acting solely as orderers. \n\n\n\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u4eceIdentity\u672c\u8eab\u83b7\u53d6Identity\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c\u80cc\u4e66\u53ea\u80fd\u7531peer\u505a\uff0c\u800c\u4e0d\u662f\u5ba2\u6237\u7aef\u6216\u8005orderer\u3002\n\n\nThere is limited support for such requirements in v1.0. That is to allow for this separation currently, we would be required to create a separate intermediate CA, one for clients and one for peers, and configure two different MSPs one for clients, and one for peers. Channels this organization should be accessing, would need to include both MSPs, while endorsement policies will leveraging only the MSP that refers to the peers. This would ultimately result into the organization being mapped to two membership service provider instances, and would have certain consequences into the way peers and clients interact:\n\n\n\u5728V1.0\u4e2d\uff0c\u5bf9\u8fd9\u4e2d\u9700\u6c42\u53ea\u6709\u5f88\u6709\u9650\u7684\u652f\u6301\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u79cd\u5206\u79bb\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u72ec\u7acb\u7684\u4e2d\u95f4CA\uff0c\u4e00\u4e2a\u7ed9\u5ba2\u6237\u7aef\u7528\uff0c\u4e00\u4e2a\u7ed9peer\u7528\u3002\u5e76\u4e14\u914d\u7f6e\u4e24\u4e2aMSP\uff0c\u4e00\u4e2a\u7ed9\u5ba2\u6237\u7aef\uff0c\u4e00\u4e2a\u7ed9peer\u3002\u7ec4\u7ec7\u9700\u8981\u8bbf\u95ee\u7684channel\uff0c\u9700\u8981\u5305\u542b\u8fd9\u4e24\u4e2aMSP\uff0c\u800c\u80cc\u4e66\u7b56\u7565\u53ea\u5229\u7528peer\u5bf9\u5e94\u7684MSP\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u7ec4\u7ec7\u6620\u5c042\u4e2aMSP\uff0c\u5e76\u4e14\u5bf9peer\u548c\u5ba2\u6237\u7aef\u7684\u901a\u4fe1\u65b9\u5f0f\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\u3002\n\n\n\n\n\n\nGossip would not be drastically impacted as all peers of the same organization would still belong to one MSP\n\n\n\n\n\n\nGossip\u5e76\u4e0d\u53d7\u663e\u8457\u5f71\u54cd\uff0c\u56e0\u4e3a\u6240\u6709peer \u4ecd\u7136\u5728\u540c\u4e00\u4e2aMSP\u3002\n\n\n\n\n\n\nPeers allow the restrict the execution of certain system chaincodes to MSP-principals, e.g., local MSP based policies. For example, peers would only execute \u201cJoinChannel\u201d request if the request is signed by the admin of their local MSP who can only be a client (end-user should be sitting at the origin of that request). We can remedy this, if we exclude administrators of peer MSP to have a dual role.\n\n\n\n\n\n\nPeer\u5141\u8bb8\u9650\u5b9a\u67d0\u4e9b\u7cfb\u7edf\u94fe\u4ee3\u7801\u7684\u6267\u884c\u53ea\u9488\u5bf9MSP-principals\u3002\u4f8b\u5982\uff0c \u57fa\u4e8e\u672c\u5730MSP\u7684\u7b56\u7565\u3002\u4e3e\u4f8b\uff0c\u5982\u679c\u8bf7\u6c42\u6709\u672c\u5730MSP\u7684\u7ba1\u7406\u5458\u7684\u7b7e\u540d\uff0c\u800c\u4ed6\u53ea\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0cpeer\u53ea\u6267\u884c\u201cjoinChannel\u201d\u8bf7\u6c42\u3002\n\n\n\n\n\n\nAt the first phase peers would authorize event registration requests based on membership of request originator within their local MSP. Clearly if the originator of the request belongs to a different MSP, e.g., a client MSP, the peer would reject the request. This is to be changed soon, as registration requests are soon to be served using the check of whether identities are part of the readers of all the channels a peer has joined.\n\n\n\n\n\n\n\u5728\u7b2c\u4e00\u9636\u6bb5\uff0cpeers\u53ea\u5141\u8bb8\u540c\u4e00\u4e2aMSP\u4e0b\u7684\u53d1\u8d77\u8005\u7684\u4e8b\u4ef6\u6ce8\u518c\u8bf7\u6c42\u3002\u663e\u7136\u5982\u679c\u8bf7\u6c42\u7684\u53d1\u8d77\u8005\u5c5e\u4e8e\u4e0d\u540c\u7684MSP\uff0c\u6bd4\u5982\uff0c\u5ba2\u6237\u7aef\u7684MSP\uff0cpeer\u5c06\u62d2\u7edd\u8fd9\u4e2a\u8bf7\u6c42\u3002\u8fd9\u4e2a\u5f88\u5feb\u4f1a\u6539\u53d8\uff0cpeer\u4f1a\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5982\u679c\u53d1\u8d77\u8005\u662fpeer\u52a0\u5165\u7684channel\u7684reader\uff0cpeer\u4e00\u6837\u4f1a\u63a5\u53d7\u8fd9\u4e2a\u8bf7\u6c42\u3002\n\n\n\n\n\n\nIn the (near) future policy language is to be extended to support definition of organizational unit based policies. E.g., it would be possible to restrict endorsement policies to owners of identities that are members of a certain organizational unit of an MSP. This, would allow for another way of separating clients a peers of a given organization, e.g., by allocating identities of each type to  different organizational unit. \n\n\n\u672a\u6765\uff0c\u5c06\u4f1a\u5bf9\u7b56\u7565\u8bed\u8a00\u8fdb\u884c\u6269\u5c55\uff0c\u6765\u652f\u6301\u57fa\u4e8e\u7ec4\u7ec7\u5355\u5143\u7684\u7b56\u7565\u5b9a\u4e49\u3002\u5982\uff0c\u53ef\u4ee5\u9650\u5b9a\u80cc\u4e66\u7b56\u7565\u4e3aMSP\u4e2d\u7684\u4e00\u4e2a\u7279\u5b9a\u7684\u7ec4\u7ec7\u5355\u5143\u5185\u7684\u6210\u5458\u3002\u8fd9\u5c06\u4e3a\u5206\u79bb\u5ba2\u6237\u7aef\u548cpeer\u63d0\u4f9b\u65b0\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5982\uff0c\u5c06\u4e0d\u540c\u7684\u8eab\u4efd\u7c7b\u578b\u5206\u914d\u7ed9\u4e0d\u540c\u7ec4\u7ec7\u5355\u5143\u3002\n\n\n5 example\n\n\n\n\n\n\nNote: This section needs to be moved to a different document and be updated with the most recent re-configuration framework.\n\u6ce8\uff1a\u8fd9\u90e8\u5206\u9700\u8981\u8fc1\u79fb\u5230\u5176\u4ed6\u6587\u6863\u4e2d\uff0c\u8ddf\u6700\u65b0\u7684\u914d\u7f6e\u6846\u67b6\u6587\u6863\u4e00\u8d77\u66f4\u65b0\u3002\n\n\n\n\n\n\nIn this section we give an end-to-end example of how peers/orderers and chains MSPs are setup and what is the configuration information each of them uses to bootstrap its operation.\n\n\n\u5728\u8fd9\u4e2a\u4e00\u8282\uff0c\u6211\u4eec\u7ed9\u4e00\u4e2ae2e\u7684\u4f8b\u5b50\uff0c\u5c55\u793apeer orderer MSP\u5982\u4f55\u542f\u52a8\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u914d\u7f6e\u4fe1\u606f\u3002\n\n\nFor the purpose of this example we assume that four organizations Org1, Org2, Org3, and Org4 have decided to deploy a Blockchain network using an ordering service that would consist of orderer nodes owned by Org1, and Org2. Notice that Org1 is only to contribute orderers in this network. Thus, for the purpose of our example:\n\n\n\u6211\u4eec\u5047\u8bbe\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u67094\u4e2a\u7ec4\u7ec7\uff0cOrg1,Org2,Org3,Org4\u3002Org1\u548cOrg2\u914d\u7f6eorderer\u670d\u52a1\u3002\u5e76\u4e14Org1\u53ea\u63d0\u4f9borderer\u670d\u52a1\u3002\n- Org1: orderers\n- Org2: clients, peers, orderers\n- Org3: clients, peers\n- Org4: clients, peers\n\n\nStep 1: The applications of each organization of the peer network (Org2, Org3, Org4) decide on the form of the Blockchain network genesis configuration from the application perspective, i.e., they decide on \n\n\n\u6b65\u9aa41\uff1apeer\u7f51\u7edc\u7684\u6bcf\u4e2a\u7ec4\u7ec7\uff08Org2\uff0cOrg3\uff0cOrg4\uff09\u7684\u5e94\u7528\u51b3\u5b9a\u533a\u5757\u94fe\u7f51\u7edc\u7684\u521d\u59cb\u914d\u7f6e\u3002\u5982\uff1a\n- the MSP that represents each organization, each MSP\u2019s configuration, and each MSP identifier throughout the chain.\n- \u6bcf\u4e2a\u7ec4\u7ec7\u7684MSP\uff0cMSP\u7684\u914d\u7f6e\uff0c \u6bcf\u4e2aMSP\u5728\u94fe\u4e2d\u7684\u8eab\u4efd\u3002\n- the list of admins of the chain on behalf of the application \n- \u94fe\u7684\u7ba1\u7406\u5458\u5217\u8868\n\n\nIn particular, the applications of the three organizations, Org2, Org3, Org4, agree on the list of configuration components for each MSP of theirs, depicted in Figure 10 (in JSON for presentation simplicity).\n\n\n\u5c24\u5176\u662f\uff0cOrg2\uff0cOrg3\uff0cOrg4\u7684\u5e94\u7528\u8981\u5bf9\u5404\u81eaMSP\u7684\u914d\u7f6e\u8fbe\u6210\u4e00\u81f4\u3002\u5982\u56fe10\u4e2d\u63cf\u8ff0\u7684\uff08\u4e3a\u4e86\u7b80\u5355\uff0c\u6211\u4eec\u7528json\u683c\u5f0f\u63cf\u8ff0\uff09\n\n\n\n     \nmsplist\n:[\n      {\n         \nType\n:0,\n         \nMSPConfig\n:{\n           \nName\n:\norg2\n,\n           \nRootCerts\n:[\norg2-cert-bytes-1\n,\norg2-cert-bytes-2\n,\norg2-cert-bytes-3\n],\n           \nAdmins\n:[\norg2-admin-cert-bytes\n]\n         }\n       },\n       {\n         \nType\n:0,\n         \nMSPConfig\n:{\n           \nName\n:\norg3\n,\n           \nRootCerts\n:[\norg3-cert-bytes-1\n,\norg3-cert-bytes-2\n,\norg3-cert-bytes-3\n],\n           \nAdmins\n:[\norg3-admin-cert-bytes\n]\n         }\n       },\n       {\n         \nType\n:0,\n         \nMSPConfig\n:{\n           \nName\n:\norg4\n,\n           \nRootCerts\n:[\norg4-cert-bytes-1\n,\norg4-cert-bytes-2\n,\norg4-cert-bytes-3\n],\n           \nAdmins\n:[\norg4-admin-cert-bytes\n]\n         }\n\n       }\n     ]\n\n\n\n\nFigure 10. Example of list of MSPs included in the Blockchain network description on application behalf in json. We emphasize that though json is not used in practice, we present this information here in json for simplicity of  presentation of the configuration content. \n\n\n\u56fe10\uff1a\u7528json\u683c\u5f0f\u63cf\u8ff0\u7684\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684msp\u5217\u8868\uff0c\u6211\u4eec\u5f3a\u8c03\u5b9e\u9645\u4e2d\u4e0d\u662f\u7528json\u683c\u5f0f\u63cf\u8ff0\u7684\uff0c\u6211\u4eec\u8fd9\u91cc\u7528json\u683c\u5f0f\u53ea\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u5448\u73b0\u5176\u5185\u5bb9\u3002\n\n\nNotice that for simplicity, the identifier of the MSP associated to organization Org1 (2, 3) has been chosen to be \u201corg1\u201d (org2, org3, respectively). This information is submitted to the orderers (agnostic to whether it is orderer administrator or kafka cluster admin or some system channel) by the application. \n\u6ce8\u610f\uff0c\u4e3a\u4e86\u7b80\u5355\uff0c\u7ec4\u7ec7\u7684\u6807\u8bc6\u7b26\u6211\u4eec\u9009\u201corg1\u201d\uff08org2\uff0corg3\uff09\uff0c\u5e94\u7528\u4f1a\u5c06\u8fd9\u4e9b\u4fe1\u606f\u63d0\u4ea4\u7ed9orderer\uff08\u662f\u5426\u662forderer\u7ba1\u7406\u5458\u6216\u8005kafka\u96c6\u7fa4\u7ba1\u7406\u5458\u6216\u8005\u7cfb\u7edfchannel\u90fd\u65e0\u5173\u7d27\u8981\uff09\u3002\n\n\nDisclaimer: We emphasize that for simplicity of presentation in the previous figure we ignore the organization of MSP configuration in configuration items inside a genesis block. It is assumed that each MSP\u2019s configuration data, is marshalled into a separate ConfigurationItem that is signed by identities such that the defined modification policy is satisfied. (Specifically for genesis blocks we can simply ignore the validation of the signatures in ConfigurationItems against the modification policies of these items). As we will see later, checking the signature against established modification policies is imperative in re-configuration blocks that have the same structure as genesis blocks.  \n\n\n\u5426\u8ba4\u58f0\u660e\uff1a\u6211\u4eec\u5f3a\u8c03\u4e3a\u4e86\u7b80\u5355\u63cf\u8ff0\uff0c\u6211\u4eec\u5728\u521b\u59cb\u5757\u4e2d\u5ffd\u7565\u4e86MSP\u914d\u7f6e\u4e2d\u7684\u7ec4\u7ec7\u4fe1\u606f\uff0c\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2aMSP\u7684\u914d\u7f6e\u6570\u636e\uff0c\u53ef\u4ee5\u6392\u5e8f\u4e3a\u72ec\u7acb\u7684\u914d\u7f6e\u9879\uff0c\u8fd9\u4e9b\u914d\u7f6e\u9879\u901a\u8fc7Identity\u7b7e\u540d\uff0c\u6765\u6ee1\u8db3\u5b9a\u4e49\u53d8\u66f4\u7b56\u7565\uff08\u5bf9\u521b\u59cb\u5757\uff0c\u6211\u4eec\u5ffd\u7565\u4e0e\u53d8\u66f4\u7b56\u7565\u4e0d\u4e00\u81f4\u7684\u914d\u7f6e\u9879\u7684\u7b7e\u540d\u9a8c\u8bc1\uff09\u3002\u540e\u9762\u4f1a\u770b\u5230\uff0c\u5728\u91cd\u914d\u7f6e\u5757\u4e2d\uff08\u4e0e\u521b\u59cb\u5757\u7ed3\u6784\u4e00\u81f4\uff09\uff0c\u5219\u5fc5\u987b\u68c0\u67e5\u4e0e\u5df2\u5efa\u7acb\u7684\u53d8\u66f4\u7b56\u7565\u4e0d\u4e00\u81f4\u7684\u7b7e\u540d\u3002\n\n\nStep 2: The ordering service administrator configures the orderers. This configuration consists of two sets of data:\n\n\n\u6b65\u9aa42\uff1aorderer\u7684\u7ba1\u7406\u5458\u914d\u7f6e\uff0c\u8fd9\u4e2a\u914d\u7f6e\u5305\u62ec\u4e24\u7ec4\u6570\u636e\uff1a\n1. Local configuration of each orderer that includes setup of the crypto service provider, key-manager, and the node\u2019s SignerMSP, and any consensus related local information (e.g., where certain files are to be stored, etc).This is depicted in Figure 11.  The configured MSP is only possible to be updated manually by that orderer\u2019s administrator, and can naturally vary from orderer to orderer. For simplicity and for V.1, to setup the local MSP, and assuming our default MSP type the administrator is requested to copy to dedicated location in orderer\u2019s file system four sets of files:\n- \u6bcf\u4e2aorderer\u7684\u672c\u5730\u914d\u7f6e\uff0c\u5305\u62ec\u52a0\u5bc6\u670d\u52a1\uff0c\u79c1\u94a5\u7ba1\u7406\uff0c\u8282\u70b9\u7684\u7b7e\u540dMSP\uff0c\u5171\u8bc6\u76f8\u5173\u7684\u4fe1\u606f\uff08\u5b58\u50a8\u7684\u6587\u4ef6\u7b49\uff09\u5728\u56fe11\u4e2d\u63cf\u8ff0\u3002MSP\u7684\u914d\u7f6e\u53ea\u80fd\u7531orderer\u7684\u7ba1\u7406\u5458\u624b\u52a8\u66f4\u65b0\uff0c\u5e76\u4e14\u5404\u4e2aorderer\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u4e3a\u4e86\u7b80\u5316\uff0c\u5728V1\u4e2d\uff0c\u542f\u52a8\u672c\u5730MSP\uff0c\u5047\u8bbe\u9ed8\u8ba4\u7684MSP\u7c7b\u578b\u3002\u7ba1\u7406\u5458\u9700\u8981\u62f7\u8d1d4\u7ec4\u6587\u4ef6\u5230orderer\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\n  - cacerts: PEM files containing the root authority certificates of the MSP\n  - cacerts: PEM\u6587\u4ef6\uff0c\u662fMSP\u7684\u6839\u8bc1\u4e66\n  - admincerts: PEM files containing the administrators\u2019 certificates of this MSP\n  - admincerts\uff1aPEM\u6587\u4ef6\uff0c MSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\u3002\n  - keystore: PEM files containing the private signing key of the orderer\n  - keystore\uff1aPEM\u6587\u4ef6\uff0corderer\u7684\u79c1\u94a5\u6587\u4ef6\u3002\n  - signcerts: PEM public cert files corresponding to the singing identity of the orderer\n  - signcerts\uff1aPEM\u6587\u4ef6\uff0c\u8ddf\u7b7e\u540d\u79c1\u94a5\u5bf9\u5e94\u7684\u7b7e\u540d\u8bc1\u4e66\u3002\nDisclaimer: Currently SignerMSP is not used for Signature verification, and hence. updating the cacerts or admincerts of this MSP is not of crucial importance. However this is to be revisited as gossip communication may require frequent updates of these \nvalues.\n\u5426\u8ba4\u58f0\u660e\uff1a\u5f53\u524d\u7b7e\u540dMSP\u4e0d\u7528\u4e8e\u7b7e\u540d\u9a8c\u8bc1\uff0c\u56e0\u6b64\uff0c\u66f4\u65b0MSP\u7684cacerts\u548cadmincerts\u5e76\u4e0d\u5341\u5206\u91cd\u8981\u3002\u7136\u800c\uff0c\u5728gossip\u901a\u4fe1\u4e2d\u7528\u5230\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u7ecf\u5e38\u66f4\u65b0\u4ed6\u4eec\u7684\u503c\u3002\n\n\n\n\n\n\nConfiguration parameters that are to be in common by all orderers participating in the system, and that is imperative that are consistently updated across all orderers of the ordering service. These parameters are organized in a structure that would constitute the system / orderer channel genesis configuration, that is depicted in Figure 12 in json format, and include the following parameters:\n\n\n\n\n\n\n\u914d\u7f6e\u7cfb\u7edf\u4e2d\u6240\u6709orderer\u7684\u516c\u5171\u53c2\u6570\uff0c\u800c\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u4e9b\u4fe1\u606f\u5728\u5404\u4e2aorderer\u95f4\u540c\u6b65\u66f4\u65b0\u3002\u8fd9\u4e9b\u53c2\u6570\u5305\u542b\u5728orderer\u7684 channel\u7684\u521d\u59cb\u914d\u7f6e\u4e2d\u3002\u56fe12\u4e2d\u6709\u63cf\u8ff0\uff0c\u5305\u542b\u5982\u4e0b\u53c2\u6570\uff1a\n\n\n\n\n\n\nThe list of MSPs that are to be used throughout the Blockchain network (followed by the identifiers chosen by their owner organization), and reside below the \nmsp-manager\n label. The MSP descriptions listed here aim to enable the orderers to validate peer/client signatures on system requests, e.g., chain creation requests. Hence MSPs in this case have more a \u201cverifier\u201d role, and will henceforth be referred to as VerifierMSP. Notice, that there is one MSP listed for each of Org2, Org3, and Org4, an one MSP for Org1 as the latter contributes orderers.  \n\n\n\n\n\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u4f7f\u7528\u7684MSP\u5217\u8868\uff08\u540e\u9762\u8ddf\u5bf9\u5e94\u7ec4\u7ec7\u7684\u6807\u793a\uff09\uff0c\u653e\u5728\u201cmsp-manager\u201d\u6807\u7b7e\u4e0b\u9762\u3002\u8fd9\u91cc\u5305\u542bMSP\u5217\u8868\u4fe1\u606f\u662f\u4e3a\u4e86\u8ba9orderer\u80fd\u9a8c\u8bc1\u6765\u81ea\u5ba2\u6237\u7aef\u548cpeer\u7684\u7cfb\u7edf\u8bf7\u6c42\u4e2d\u7684\u7b7e\u540d\uff0c\u5982\u521b\u5efa\u94fe\u8bf7\u6c42\u3002\u56e0\u6b64MSP\u5728\u8fd9\u91cc\u6709\u591a\u4e2a\u9a8c\u8bc1\u89d2\u8272\uff0c\u5e76\u4e14\u5c06\u88ab\u6210\u4e3aVertifierMSP\u3002\u6ce8\u610f\uff0cOrg2\uff0cOrg3\uff0cOrg4\u6bcf\u4e2a\u7ec4\u7ec7\u4e00\u4e2aMSP\uff0cOrg1\u4e00\u4e2aMSP\u7ed9orderder\u7528\u3002\n\n\nThe list of parameters associated to ordering client, and server. Ordering client includes parameters that anyone invoking broadcast and deliver request to the ordering service would need to know (e.g., peers) while the ordering server includes parameters that are in common across ordering nodes, and need to be consistently updated across the orderers.\n\n\norderer\u670d\u52a1\u7aef\u548cr\u5ba2\u6237\u7aef\u76f8\u5173\u7684\u53c2\u6570\uff0c\u5ba2\u6237\u7aef\u53c2\u6570\u5305\u62ec\u5411orderer broadcast\u548cdeliver\u8bf7\u6c42\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u7684\u53c2\u6570\uff0c\u670d\u52a1\u5668\u7aef\u53c2\u6570\u5305\u62ec\u5404\u4e2aorderer\u8282\u70b9\u7684\u516c\u5171\u53c2\u6570\uff0c\u8fd9\u90e8\u5206\u53c2\u6570\u8981\u518dorderer\u8282\u70b9\u95f4\u540c\u6b65\u66f4\u65b0\u3002\n\n\nThe policies for readers, writers, and chain creators of the ordering channel that is to be created.  that for now includes only the networks of orderers, i.e., members of Organization 1, and Organization 2.\n\n\nchannel\u7684\u8bfb\u3001\u5199\u548c\u521b\u5efa\u7b56\u7565\u3002\u73b0\u5728\u53ea\u6709orderer\u7f51\u7edc\u9700\u8981\u521b\u5efachannel\uff0c\u5373\uff1aOrg1\u548cOrg2. \n\n\n\n\nConfiguration of the non-local part of orderers can have the form of a genesis transaction a diagram of which is depicted in Table 2, since it is anyway the genesis block of system channel. For simplicity of presentation we make the same convention as before and ignore mapping of MSP configuration to configuration items.\n\n\norderer\u7684\u975e\u672c\u5730\u914d\u7f6e\u90e8\u5206\uff0c\u53ef\u4ee5\u4ee5\u521b\u59cb\u4ea4\u6613\u7684\u5f62\u5f0f\u8fdb\u884c\u3002\u5982\u88682\u63cf\u8ff0\uff0c\u5b83\u4f1a\u7528\u6765\u505a\u7cfb\u7edfchannel\u7684\u521b\u59cb\u5757\u3002\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0c\u6211\u4eec\u4e5f\u50cf\u4ee5\u524d\u4e5f\u4e00\u6837\u8fdb\u884c\u8f6c\u5316\u4e3ajson\u683c\u5f0f\uff0c\u5e76\u5ffd\u7565MSP\u914d\u7f6e\u8ddf\u914d\u7f6e\u9879\u7684\u6620\u5c04\u5173\u7cfb\u3002\n\n\nFigure 11. Local orderer .yaml configuration file\n\n\n\u56fe11. \u672c\u5730orderer.yaml\u914d\u7f6e\u6587\u4ef6\n\n\n\nGeneral:\n\n    # Local MSP config file\n    LocalMSP:  file location of root folder of cacerts, admincerts, signcert, and keystore.\n\n    # Orderer Type: The orderer implementation to start\n    # Available types are \nsolo\n and \nkafka\n\n    OrdererType: solo\n\n    # Ledger Type: The ledger type to provide to the orderer (if needed)\n    # Available types are \nram\n, \nfile\n. When \nkafka\n is chosen as the\n    # OrdererType, this option is ignored.\n    LedgerType: ram\n\n    # Batch Timeout: The amount of time to wait before creating a batch\n    BatchTimeout: 10s\n\n    # possibly other local orderer config\n\n\n\n\n\nFigure 12. This can be used to generate the genesis block which is needed for orderer bootstrap.\n\n\n\u56fe12\uff1a\u8fd9\u4e9b\u53ef\u4ee5\u7528\u6765\u751f\u6210orderer\u542f\u52a8\u7684\u65f6\u5019\u9700\u8981\u7684\u521b\u59cb\u5757\u3002\n\n\n\n{\n \ndescription\n:\nOrderer channel genesis (Orgs: 01, 02)\n,\n \nchain-id\n:\nOrdererChannel-01-02\n,\n \nmsp-manager\n:[\n     {\n       \nmsp-type\n:0,\n       \nmsp-config\n:{\n         \nmsp-identifier\n:\norg1\n,\n         \nrootca-identities\n:[\norg1-cert-bytes-1\n,\norg1-cert-bytes-2\n,\norg1-cert-bytes-3\n],\n         \nadmins\n:[\norg1-admin-cert-bytes\n]\n       }\n     },\n     {\n       \nmsp-type\n:0,\n       \nmsp-config\n:{\n         \nmsp-identifier\n:\norg2\n,\n         \nrootca-identities\n:[\norg2-cert-bytes-1\n,\norg2-cert-bytes-2\n,\norg2-cert-bytes-3\n],\n         \nadmins\n:[\norg2-admin-cert-bytes\n]\n       }\n     },\n     {\n       \nmsp-type\n:0,\n       \nmsp-config\n:{\n         \nmsp-identifier\n:\norg3\n,\n         \nrootca-identities\n:[\norg3-cert-bytes-1\n,\norg3-cert-bytes-2\n,\norg3-cert-bytes-3\n],\n         \nadmins\n:[\norg3-admin-cert-bytes\n]\n       }\n     },\n     {\n       \nmsp-type\n:0,\n       \nmsp-config\n:{\n         \nmsp-identifier\n:\norg4\n,\n         \nrootca-identities\n:[\norg4-cert-bytes-1\n,\norg4-cert-bytes-2\n,\norg4-cert-bytes-3\n],\n         \nadmins\n:[\norg4-admin-cert-bytes\n]\n       }\n     }\n   ]\n },\n \nreaders\n:[\n   {\nmsp-identifier\n:\norg1\n,\ngroup\n:\nmember\n},\n   {\nmsp-identifier\n:\norg2\n,\ngroup\n:\nmember\n}\n ],\n \nwriters\n:[\n   {\nmsp-identifier\n:\norg1\n,\ngroup\n:\nmember\n},\n   {\nmsp-identifier\n:\norg2\n,\ngroup\n:\nmember\n}\n ],\n \nadmins\n:[\n   {\nmsp-identifier\n:\norg1\n,\ngroup\n:\nadmin\n},\n   {\nmsp-identifier\n:\norg2\n,\ngroup\n:\nadmin\n}\n ]\n}\n\n\n\n\n\nStep 3: The orderers run and can identify now members of all participant organizations.\n\n\n\u6b65\u9aa43\uff1aorderer\u8fd0\u884c\uff0c\u5e76\u4e14\u80fd\u8bc6\u522b\u53c2\u4e0e\u7ec4\u7ec7\u7684\u6210\u5458\u3002\n\n\n\n\n\n\n\n\nType\n\n\nKey\n\n\nValue\n\n\nModification Policy\n\n\n\n\n\n\n\n\n\n\nChain\n\n\nHashingAlgorithm\n\n\nSHAKE256\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nChain\n\n\nBlockDataHashStructure\n\n\nMerkle tree width 10\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nChain\n\n\nOrdererAddresses\n\n\n[addr1, addr2, \u2026]\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nChainCreationPolicyNames\n\n\nChainCreationPolicy1, ChainCreationPolicy2\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nBatchSize\n\n\n100\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nBatchTimeout\n\n\n10s\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nIngressPolicyNames\n\n\nOrdererWriterPolicy, PeerWriterPolicy\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nEgressPolicyNames\n\n\nOrdererReaderPolicy, PeerReaderPolicy\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nConsensusType\n\n\nKafka\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nKafkaBrokersKey\n\n\n[addr1, addr2, \u2026]\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nMSP\n\n\nOrg1ID\n\n\nOrg1 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nMSP\n\n\nOrg2ID\n\n\nOrg2 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nMSP\n\n\nOrg3ID\n\n\nOrg3 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nMSP\n\n\nOrg4ID\n\n\nOrg4 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nPolicy\n\n\nOrdererReaderPolicy\n\n\nOrg1.User or Org2.User\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nOrdererWriterPolicy\n\n\nOrg1.User or Org2.User\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nOrdererAdminPolicy\n\n\nOrg1.admin AND Org2.admin\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nBlockValidationPolicy\n\n\nOrg1.Cert or Org2.Cert\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nSignedByOrdererPolicy\n\n\nOrg1.Cert or Org2.Cert\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nChainCreationPolicy1\n\n\nOrg3.Admin and (Org2.admin or Org4.admin)\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nChainCreationPolicy2\n\n\nOrg4.admin\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nNewConfigItemCreationPolicy\n\n\nOrg1.admin AND Org2.admin\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nMSPInternal\n\n\nempty\n\n\nRejectAlwaysPolicy\n\n\n\n\n\n\nPolicy\n\n\nRejectAlwaysPolicy\n\n\n1 out of 0\n\n\nRejectAlwaysPolicy\n\n\n\n\n\n\n\n\nTable 2. Example of list of configuration items in orderer channel genesis transaction. Each row in the table corresponds to a (signed) configuration item of the genesis block. \n\n\n\u88682\uff1aorderer channel\u521b\u59cb\u4ea4\u6613\u914d\u7f6e\u793a\u4f8b\u3002\u6bcf\u4e00\u884c\u5bf9\u5e94\u521b\u59cb\u5757\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u7b7e\u540d\u7684\u914d\u7f6e\u9879\u3002\n\n\nStep 4: For their initialization, peers need similar information as the orderers to setup the (local) MSP the peer belongs to, and signing identity/key information the peer would use to sign messages to the rest of Blockchain participants. Finally, the peer initialization information provides the reference to the signing identity the peer is to use when asked to create endorsements. As in the case of orderers, we instantiate SignerMSP for peers by having the administrator fill up three folders with the appropriate certificates/key-material:\n\n\n\u6b65\u9aa44\uff1a\u5728\u521d\u59cb\u5316\u65f6\uff0cpeer\u9700\u8981\u8ddforderer\u7c7b\u4f3c\u7684MSP\u4fe1\u606f\uff0c\u5bf9\u6d88\u606f\u7b7e\u540d\u7528\u5230\u7684\u8bc1\u4e66\u548c\u79c1\u94a5\u4fe1\u606f\u3002\u6700\u540e\uff0cpeer\u7684\u521d\u59cb\u5316\u4fe1\u606f\u63d0\u4f9b\u7b7e\u540d\u8eab\u4efd\uff0c\u8fd9\u4e2a\u5728\u521b\u5efa\u80cc\u4e66\u8282\u70b9\u7684\u65f6\u5019\u7528\u3002 \u548corderer\u4e00\u6837\uff0c\u6211\u4eec\u901a\u8fc74\u7c7b\u6587\u4ef6\u7ed9peer\u521d\u59cb\u5316\u4e00\u4e2aSignerMSP\u3002\n- cacerts: PEM files containing the root authority certificates of the MSP\n- cacerts\uff1aPEM\u6587\u4ef6\uff0cMSP\u7684\u6839\u8bc1\u4e66\u3002\n- admincerts: PEM files containing the administrators\u2019 certificates of this MSP\n- admincerts\uff1aPEM\u6587\u4ef6\uff0cMSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\n- keystore: PEM files containing the signing private key of the peer\n- keystore\uff1aPEM\u6587\u4ef6\uff0c\u7b7e\u540d\u7528\u7684\u79c1\u94a5\n- signcerts: PEM public cert files corresponding to the singing identity of the peer\n- signcerts\uff1aPEM\u6587\u4ef6\uff0c\u8ddf\u7b7e\u540d\u79c1\u94a5\u5bf9\u5e94\u7684\u8bc1\u4e66\u3002\n\n\nDisclaimer: Currently SignerMSP is not used for signature verification, and hence updating the cacerts or admincerts of this MSP is not of crucial importance. However this is to be revisited as GOSSIP communication may require frequent updates of these values. \n\n\n\u5426\u8ba4\u58f0\u660e\uff1a\u5f53\u524d\u7b7e\u540dMSP\u4e0d\u7528\u4e8e\u7b7e\u540d\u9a8c\u8bc1\uff0c\u56e0\u6b64\uff0c\u66f4\u65b0MSP\u7684cacerts\u548cadmincerts\u5e76\u4e0d\u5341\u5206\u91cd\u8981\u3002\u7136\u800c\uff0c\u5728gossip\u901a\u4fe1\u4e2d\u7528\u5230\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u7ecf\u5e38\u66f4\u65b0\u4ed6\u4eec\u7684\u503c\u3002\n\n\nStep 5. Now let\u2019s assume that Org2, and Org3 want to create a chain for their bilateral transactions. Applications of Org2, and Org3 agree off-band on certain configuration aspects of the chain, i.e., the configuration of the MSP contributed by each organization, the readers and the writers of the new chain, as well as the admins of the resulting chain. This information the application of Org2, and Org3 combines with the ordering information, to result to a configuration transaction that includes the information included in Table 3. Notice that Org4, does not appear anywhere in this genesis transaction.\n\n\n5\uff1a\u73b0\u5728\uff0c\u5047\u8bbeOrg2\u548cOrg3\u60f3\u4e3a\u4ed6\u4eec\u7684\u53cc\u8fb9\u4ea4\u6613\u521b\u5efa\u4e00\u4e2a\u94fe\u3002Org2\u548cOrg3\u7684\u5e94\u7528\u5728\u5bf9\u94fe\u7684\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\u8fbe\u6210\u5171\u8bc6\u3002\u5373\uff1a\u6bcf\u4e2a\u7ec4\u7ec7\u7684MSP\uff0c\u65b0\u94fe\u7684reader\u548cwriter\uff0c\u4ee5\u53ca\u65b0\u94fe\u7684\u7ba1\u7406\u5458\u3002Org2\u548cOrg3\u7684\u5e94\u7528\u628a\u8fd9\u4e9b\u4fe1\u606f\u548corderer\u7684\u4fe1\u606f\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\uff0c\u5982\u88683\u6240\u793a\u3002\u6ce8\uff0cOrg4\u6ca1\u6709\u51fa\u73b0\u5728\u8fd9\u4e2a\u521b\u59cb\u4ea4\u6613\u4e2d\u3002\n\n\nIn the example of Table 3 below, Organization 1 and 2 are the only ones contributing orderers, while Organization 2 and 3 are the ones deploying and invoking application chaincodes. \n\n\n\u5728\u88683\u7684\u4f8b\u5b50\u4e2d\uff0cOrg1\u548cOrg2\u7ec4\u6210orderer\u3002Org2\u548cOrg3\u90e8\u7f72\u548c\u8c03\u7528\u5e94\u7528\u94fe\u4ee3\u7801\u3002\n- Readers of the chain have been set to all listed MSP\u2019s groups.\n- \u6240\u6709MSP\u90fd\u662f\u94fe\u7684reader\u3002\n- Writers of the chain have been set to all application MSP\u2019s groups, i.e., Organization 2 and 3 members.\n- \u6240\u6709\u5e94\u7528MSP\u90fd\u662f\u94fe\u7684writer\uff0c\u5373 Org2\u548c3\u4e2a\u6210\u5458\n- Chaincode deployer access is given to the admins of the two application MSPs, i.e., Organization 2 and 3.\n- \u94fe\u4ee3\u7801\u7684\u90e8\u7f72\u6743\u9650\u5206\u914d\u7ed9\u4e86\u4e24\u4e2a\u5e94\u7528MSP\u7684\u7ba1\u7406\u5458\uff0c\u5373Org2\u548cOrg3\n- Finally, re-configuration of the chain requires approval from admins of the MSPs of Organization 2 and Organization 3. \n- \u6700\u540e\uff0c\u94fe\u7684\u91cd\u914d\u7f6e\u8bf7\u6c42\u9700\u8981Org2\u548cOrgs\u7684MSP\u7684\u7ba1\u7406\u540c\u610f\u624d\u80fd\u8fdb\u884c\u3002\n\n\nIn the table below, we assumed the following mapping between parts of configuration and (signed) configuration items. \n\n\n\u5728\u4e0b\u8868\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u914d\u7f6e\u90e8\u5206\u548c\u7b7e\u540d\u914d\u7f6e\u9879\u7684\u6620\u5c04\u5982\u4e0b\uff1a\n- Two configuration items per MSPConfig, of type \u201cMSP\u201d, whose Key is the organization name and whose value is a marshaled MSPConfig proto and whose modification policy is [organization name + \u201cInternal\u201d], and another configuration item of type Policy, of Key of [organization name + \u201cInternal\u201d] of Policy Type MSP, and nil value with modification policy of itself\n- \u6bcf\u4e2aMSPConfig\uff0c\u6709\u4e24\u4e2a\u914d\u7f6e\u9879\u3002\u4e00\u4e2a\u7c7b\u578b\u4e3aMSP\uff0c\u952e\u662f\u7ec4\u7ec7\u540d\uff0c\u503c\u662f\u5e8f\u5217\u5316\u8fc7\u7684MSPConfig\u539f\u578b\uff0c\u53d8\u66f4\u7b56\u7565\u662f\u7ec4\u7ec7\u540d+\u201cinternal\u201d\uff1b\u53e6\u4e00\u4e2a\u7c7b\u578b\u662fPolicy\uff0c\u952e\u662f\u7ec4\u7ec7\u540d+\u201cinternal\u201d\uff0c \u503c\u4e3a\u7a7a\uff0c\u53d8\u66f4\u7b56\u7565\u4e3a\u81ea\u5df1\u3002\n- One configuration item named \u201cChannelAdmins\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for administrative action.  For example \u201c2 out of the following three MSP principals must sign (each an admin).  The \u201cChannelAdmins\u201d, has a modification policy \u201cChannelAdmins\u201d (itself)\n\n- \u7c7b\u578b\u4e3aPlolicy\u7684\u914d\u7f6e\u9879\u201cChannelAdmins\u201d\u548c\u201cSignaturePlolicy\u201d\uff0c \u503c\u662f\u4e00\u4e2a\u7ba1\u7406\u52a8\u4f5c\u6761\u4ef6\uff0c\u6bd4\u5982\u201c3\u4e2aMSP\u4e2d\u76842\u4e2a\u7ba1\u7406\u5458\u7b7e\u540d\u201d\uff0c \u201cChannelAdmins\u201d\uff0c \u6709\u4e00\u4e2a\u53d8\u66f4\u7b56\u7565\u201cChannelAdmins\u201d\uff08\u8ddf\u81ea\u5df1\u4e00\u6837\uff09\u3002\n- One configuration item of type \u201cPolicy\u201d and Policy.Type MSP for \u201cchain-readers\u201d, and modification policy \u201cchain-admins\u201d \n- \u4e00\u4e2aPolicy\u7c7b\u578b\u7684\u914d\u7f6e\u9879\u201cchain-readers\u201d, \u53d8\u66f4\u7b56\u7565\u4e3a\u201dchain-admins\u201d\u3002\n- One configuration item named \u201cChannelReaders\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for reading the chain.  Since this applies to Deliver calls, it should be \u201c1 out of the following n MSP principals must sign (each a reader)\u201d.  The \u201cChannelReaders\u201d, has a modification policy \u201cChannelAdmins\u201d\n- \u4e00\u4e2a\u7c7b\u578bPolicy\u7684\u914d\u7f6e\u9879\u201cChannelReaders\u201d\uff0cPolicy.Type \u4e3aSignaturePolicy\uff0c\u503c\u4e3a\u201dSignatruePolicy\uff0c\u5305\u542b\u8bfb\u94fe\u7684\u6761\u4ef6\u3002\u56e0\u4e3aDeliver\u7684\u65f6\u5019\u8981\u7528\uff0c\u5b83\u5e94\u4e3a\u201c\u4e0b\u5217N\u4e2aMSP\u4e2d\u7684\u4e00\u4e2a\u7b7e\u540d\uff08\u6bcf\u4e2a\u90fd\u662f\u4e00\u4e2areader\uff09\u201d\u3002 \u201cChannelReaders\u201d\u7684\u53d8\u66f4\u7b56\u7565\u4e3a\u201cChannelAdmins\u201d\n- One configuration item named \u201cChannelWriters\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for reading the chain.  Since this applies to Broadcast calls, it should be \u201c1 out of the following n MSP principals must sign (each a writer)\u201d.  The \u201cChannelWriters\u201d, has a modification policy \u201cChannelAdmins\u201d\n- \u4e00\u4e2aPolicy\u7684\u914d\u7f6e\u9879\u201cChannelWriters\u201d\uff0cPolicy.Type\u201dSignaturePolicy\u201d\uff0c \u503c\u4e3a\u5305\u542b\u5199\u6761\u4ef6\u7684SignaturePolicy\uff0c\u5b83\u7528\u5728Broadcast\u8c03\u7528\uff0c\u5e94\u8be5\u4e3a\u201d\u4e0b\u5217N\u4e2aMSP\u4e2d\u7684\u4e00\u4e2a\u6210\u5458\u7684\u7b7e\u540d\uff08\u6bcf\u4e2a\u90fd\u662fwriter\uff09\u201c\u3002\u201dChannelWriters\u201c\u7684\u53d8\u66f4\u7b56\u7565\u4e3a\u201dChannelAdmins\u201c\u3002\n- One configuration item named \u201cChaincodeLifecycleAdmins\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for deploying a chaincode to the chain.  This might be something like \u201c3 out of the following 4 MSP principals must sign (each a developer)\u201d. The \u201cChaincodeLifecycleAdmins\u201d, has a modification policy \u201cChannelAdmins\u201d\n- \u4e00\u4e2aPolicy\u7c7b\u578b\u7684\u914d\u7f6e\u201dChaincodeLifeCycleAdmins\u201c\uff0c Poliy.Type\u4e3a\u201dSignaturePolicy\u201d\uff0c\u5b83\u7684\u503c\u4e3a\u5305\u542b\u5411\u94fe\u4e2d\u90e8\u7f72\u94fe\u4ee3\u7801\u7684\u6761\u4ef6\u3002\u53ef\u4ee5\u5982\u4e0b\u201c4\u4e2aMSP\u4e2d\u76843\u4e2a\u7684\u6210\u5458\u7b7e\u540d\u201d\u3002\u201cChaincodeLifecycleAdmins\u201c \u7684\u53d8\u66f4\u7b56\u7565\u4e3a\u201dChannelAdmins\u201c\u3002\n\n\nThe convention for items of type Orderer is to have the Key \n have a value of a marshaled \n message from the protos/common/orderer/configuration.proto.  The same is true for items of type Chain, and Peer, but corresponding to protos/common/configuration.proto and protos/peer/configuration.proto.  For type Policy, the value is always a marshaled protos/peer/configuration.proto.Policy message, and for type MSP the value is always a marshaled MSPConf from msp/protos (this should probably be moved to protos/msp.\n\n\n\u6309\u7167\u60ef\u4f8b\uff0corderer\u7684\u7c7b\u578b\u914d\u7f6e\u6709\u952e\n\uff0c\u503c\u5c31\u662f\u5e8f\u5217\u5316\u7684\n\u6d88\u606f\uff08\u5728/protos/common/orderer/configuration.proto\u4e2d\u5b9a\u4e49\uff09\u3002Chain\uff08protos/common/configuration.proto\uff09\u548cPeer\uff08protos/peer/configuration.proto\uff09\u7684\u914d\u7f6e\u4e5f\u662f\u5982\u6b64\u3002Policy\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u503c\u603b\u662f\u5e8f\u5217\u5316\u7684protos/peer/configuration.proto.Policy\u6d88\u606f\u3002 MSP\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u503c\u603b\u662f\u5e8f\u5217\u5316\u7684MSPConf\uff08msp/protos, \u53ef\u80fd\u4f1a\u79fb\u52a8\u5230protos/msp\uff09\u3002\n\n\n\n\n\n\n\n\nType\n\n\nKey\n\n\nValue\n\n\nModification Policy\n\n\n\n\n\n\n\n\n\n\nChain\n\n\nHashingAlgorithm\n\n\nSHAKE256\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nChain\n\n\nBlockDataHashStructure\n\n\nMerkle tree width 10\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nChain\n\n\nOrdererAddresses\n\n\n[addr1, addr2, \u2026]\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nBatchSize\n\n\n100\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nBatchTimeout\n\n\n10s\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nIngressPolicyNames\n\n\nOrdererWriterPolicy, PeerWriterPolicy\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nEgressPolicyNames\n\n\nOrdererReaderPolicy, PeerReaderPolicy\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nConsensusType\n\n\nKafka\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nOrderer\n\n\nKafkaBrokersKey\n\n\n[addr1, addr2, \u2026]\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nMSP\n\n\nOrg1ID\n\n\nOrg1 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nMSP\n\n\nOrg2ID\n\n\nOrg2 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nMSP\n\n\nOrg3ID\n\n\nOrg3 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nMSP\n\n\nOrg4ID\n\n\nOrg4 MSPConf\n\n\nMSPInternal\n\n\n\n\n\n\nPeer\n\n\nReaderPolicyNames\n\n\nPeerReaderPolicy\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPeer\n\n\nWriterPolicyNames\n\n\nPeerWriterPolicy\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPeer\n\n\nAdminPolicyNames\n\n\nPeerAdminPolicy\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPeer\n\n\nChaincodeLifecycleAdmins\n\n\nChaincodeLifecyclePolicy\n\n\nAdminsPolicy\n\n\n\n\n\n\nPolicy\n\n\nPeerReaderPolicy\n\n\norg1.members OR org2.members OR org3.members\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nPeerWriterPolicy\n\n\norg1.members OR org3.members OR org4.members\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nPeerAdminPolicy\n\n\norg2.admin AND org3.admin\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nChaincodeLifecyclePolicy\n\n\norg2.admin OR org3.admin\n\n\nPeerAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nOrdererReaderPolicy\n\n\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nOrdererWriterPolicy\n\n\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nOrdererAdminPolicy\n\n\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nBlockValidationPolicy\n\n\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nSignedByOrdererPolicy\n\n\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nNewConfigItemCreationPolicy\n\n\n\n\nOrdererAdminPolicy\n\n\n\n\n\n\nPolicy\n\n\nMSPInternal\n\n\nempty\n\n\nRejectAlwaysPolicy\n\n\n\n\n\n\nPolicy\n\n\nRejectAlwaysPolicy\n\n\n1 out of 0\n\n\nRejectAlwaysPolicy\n\n\n\n\n\n\n\n\nTable 3. Example of organization of chain genesis transaction in configuration items. Each row in the table corresponds to a (signed) configuration item of the genesis block. \n\n\n\u88683:\u3002\u94fe\u521b\u59cb\u4ea4\u6613\u7ec4\u7ec7\u914d\u7f6e\u7684\u4f8b\u5b50\u3002\u6bcf\u884c\u5bf9\u5e94\u521b\u59cb\u5757\u4e2d\u4e00\u4e2a\u7ecf\u7b7e\u540d\u7684\u914d\u7f6e\u9879\u3002\n\n\nStep 6. Now from the config file, Org2, and Org3 construct a configuration transaction based on the resulting config file, that would constitute the only transaction included in the new channel\u2019s genesis block. Although we are agnostic to the way the application constructs this configuration transaction, it is the application\u2019s responsibility to submit the constructed genesis block (carrying a chain identity that has not yet been used) to the ordering service via a broadcast request. \n\n\n\u6b65\u9aa46\u3002\u73b0\u5728\uff0cOrg2,Org3\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6784\u9020\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\uff0c\u8fd9\u662f\u65b0channel\u7684\u521b\u59cb\u5757\u4e2d\u7684\u552f\u4e00\u4ea4\u6613\u3002\u5e94\u7528\u662f\u5982\u4f55\u6784\u5efa\u8fd9\u4e2a\u4ea4\u6613\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u900f\u660e\u7684\uff0c\u5e94\u7528\u8d1f\u8d23\u5c06\u6b64\u521b\u59cb\u5757\u901a\u8fc7broadcast\u8bf7\u6c42\u63d0\u4ea4\u7ed9\u6392\u5e8f\u670d\u52a1\u3002\n\n\nStep 7. Now each orderer that receives this genesis block for a channel that does not exist assumes this to be a chain creation request. Assuming that the orderer approves of the chain creation request (assuming that is requested by properly authorized requestors), it embeds the (verbatim) configuration transaction as the contents of the genesis block for the new chain. If chain deployers policy exists in orderers\u2019 system channel, then the orderers would need to check that the signatures in the configuration block received match the chain deployers\u2019 policy. Finally, they create a new channel and use the constructed genesis block as the first block of the new channel. \n\n\n\u6b65\u9aa47. \u6bcf\u4e2a\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684channel\u7684\u521b\u59cb\u5757\uff0c\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u521b\u5efa\u94fe\u8bf7\u6c42\u3002\u5047\u8bbe\u6392\u5e8f\u670d\u52a1\u540c\u610f\u94fe\u521b\u5efa\u8bf7\u6c42\uff08\u5047\u8bbe\u8ba4\u8bc1\u901a\u8fc7\uff09\uff0c\u5b83\u628a\u914d\u7f6e\u4ea4\u6613\u52a0\u5165\u533a\u5757\uff0c\u4f5c\u4e3a\u65b0\u94fe\u7684\u521b\u59cb\u533a\u5757\u3002\u5982\u679c\u5728\u6392\u5e8f\u670d\u52a1\u7684\u7cfb\u7edfchannel\u4e2d\u6709\u90e8\u7f72\u90e8\u7f72\u8005\u7684\u7b56\u7565\uff0c\u6392\u5e8f\u670d\u52a1\u9700\u8981\u68c0\u67e5\u914d\u7f6e\u4ea4\u6613\u7684\u7b7e\u540d\u7b26\u5408\u90e8\u7f72\u8005\u7684\u7b56\u7565\u3002\u6700\u540e\uff0c\u5b83\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684channel\uff0c\u5e76\u4e14\u7528\u8fd9\u4e2a\u521b\u59cb\u5757\u4f5c\u4e3a\u65b0channel\u7684\u9996\u4e2a\u533a\u5757\u3002\n\n\nStep 8. Application of the two organizations calls deliver on the new channel and obtains the genesis block. It checks the validity of the configuration parameters in there to ensure that it is the same parameters Org2, and Org3, had agreed on (included in the chain creation request configuration).\n\n\n\u6b65\u9aa48\uff0c\u4e24\u4e2a\u7ec4\u7ec7\u7684\u5e94\u7528\u5728\u65b0\u7684channel\u4e0a\u8c03\u7528deliver\uff0c\u83b7\u53d6\u521b\u59cb\u5757\u3002\u7136\u540e\u9a8c\u8bc1\u914d\u7f6e\u53c2\u6570\u8ddfOrg2\u548cOrg3\u534f\u5546\u597d\u7684\u914d\u7f6e\u53c2\u6570\uff08\u5728\u914d\u7f6e\u8bf7\u6c42\u4e2d\uff09\u4e00\u6837\u3002 \n\n\nStep 9. Application of Org2 send the obtained genesis block to its peers within a JoinChannel request and asks these peers to join the channel. The peer uses the local MSP to authenticate the JoinChannel request.\n\n\n\u6b65\u9aa49. Org2\u7684\u5e94\u7528\u901a\u8fc7\u201cJoinChannel\u201d\u8bf7\u6c42\u53d1\u9001\u83b7\u53d6\u7684\u521b\u59cb\u5757\u7ed9peer\uff0c\u544a\u8bc9peer\u52a0\u5165channel\u3002peer\u5229\u7528\u672c\u5730MSP\u8ba4\u8bc1JoinChannel\u8bf7\u6c42\u3002 \n\n\nStep 10. Upon joining a channel, and processing the genesis block included in the JoinChannel request  the peers retrieve the list of anchor peers. The gossip layer of the peer notifies the gossip layer of all peers in the organizationgossip leader of the organization the peer belong to, that it has joined the channel. One of the peers in that organization that has also joined the channel, That leader peer can then connects to the ordering service on the peer\ns behalf of all peers of that organization that have joined the channel. The peer receives the channel related ledger blocks by connecting directly to the ordering service itself (leader peer) or from the leader peer. As a result, the  peer receives the new channel\u2019s transactions (normally it will be only the genesis block) and will have to check that the genesis block it received matches the one the application provided to it with the JoinChannel request. After that, it parses the genesis block and instantiates the corresponding chain instance, i.e., MSPManager, Ledger, and cache.\n\n\n\u6b65\u9aa410\u3002\u5728\u52a0\u5165channel\uff0c\u5904\u7406JoinChannel\u8bf7\u6c42\u4e2d\u7684\u521b\u59cb\u5757\u7684\u65f6\u5019\uff0cpeer\u83b7\u53d6\u951apeer\u5217\u8868\u3002peer\u7684gossip\u5c42\u901a\u77e5peer\u6240\u5c5e\u7684\u7ec4\u7ec7\u7684gossip leader peer\uff0c\u5b83\u5df2\u7ecf\u52a0\u5165\u4e86channel\u3002\u6709\u65b0\u7684peer\u52a0\u5165\uff0c\u7136\u540eleader peer\u4ee3\u8868\u7ec4\u7ec7\u7684\u6240\u6709peer\u8fde\u63a5\u6392\u5e8f\u670d\u52a1\u3002peer\uff08leader peer\uff09\u901a\u8fc7\u76f4\u63a5\u8fde\u63a5\u6392\u5e8f\u670d\u52a1\u83b7\u53d6\u8d26\u672c\u533a\u5757\u6216\u8005\u4eceleader peer\u83b7\u53d6\u3002\u7ed3\u679c\uff0cpeer\u83b7\u7684\u65b0channel\u7684\u4ea4\u6613\uff08\u6b63\u5e38\u53ea\u6709\u521b\u59cb\u5757\uff09\uff0c\u5e76\u4e14\u5fc5\u987b\u9a8c\u8bc1\u83b7\u53d6\u7684\u521b\u59cb\u5757\u4e0e\u5e94\u7528\u5728JoinChannel\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u7ed9\u5b83\u7684\u662f\u5426\u4e00\u81f4\u3002\u4e4b\u540e\uff0c\u5b83\u89e3\u6790\u521b\u59cb\u5757\u5e76\u521d\u59cb\u5316\u76f8\u5e94\u7684\u94fe\u5b9e\u4f8b\uff0c\u5373\uff0cMSPManager\uff0c \u8d26\u672c\u548c\u7f13\u5b58\u3002\n\n\nStep 11. After Initializing the channel\u2019s MSP, the peers that joined the channel disseminate via the gossip layer the channel\u2019s MSP to all peers of their organization, in order to ensure that peers that belong to different organizations but their organizations share a channel, can communicate with each other. \n\u6b65\u9aa411. \u521d\u59cb\u5316channel\u7684MSP\u4e4b\u540e\uff0cpeer\u901a\u8fc7gossip\u5c42\u4f20\u64adchannel\u7684MSP\u4fe1\u606f\u7ed9\u7ec4\u7ec7\u4e2d\u7684\u6240\u6709peer\uff0c\u4ece\u800c\u4fdd\u8bc1\u5728\u540c\u4e00channel\u4e2d\u7684\u4e0d\u540c\u7ec4\u7ec7\u4e2d\u7684peer\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002\n\n\n6. Orderer Chain Creation Implementation Details\n\n\n\u6392\u5e8f\u670d\u52a1\u521b\u5efa\u94fe\u7684\u5b9e\u73b0\u7ec6\u8282\n\n\n6.1 Orderer System Chain\n\n\n\u6392\u5e8f\u670d\u52a1\u7cfb\u7edf\u94fe\n\n\nThe orderer network is bootstrapped with a genesis block which contains the orderer system chain id and the initial set of orderer network governance policies, including, the orderer MSPs, the orderer consensus protocol configuration, and the chain creation policies.   Although application network MSPs may also be defined here (to be referenced in the chain creation policies), they are not strictly required at bootstrap.\n\n\n\u6392\u5e8f\u670d\u52a1\u542f\u52a8\u7684\u65f6\u5019\u52a0\u8f7d\u521b\u59cb\u5757\uff0c\u6b64\u5757\u4e2d\u5305\u542b\u6392\u5e8f\u670d\u52a1\u7684\u7cfb\u7edf\u94feID\u548c\u6392\u5e8f\u7f51\u7edc\u7684\u521d\u59cb\u7ba1\u7406\u7b56\u7565\uff0c\u5305\u62ec\u6392\u5e8fMSP\uff0c\u6392\u5e8f\u5171\u8bc6\u534f\u8bae\u914d\u7f6e\uff0c\u94fe\u521b\u5efa\u7b56\u7565\u3002\u867d\u7136\u5e94\u7528\u7f51\u7edc\u7684MSP\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b9a\u4e49\uff08\u5728\u94fe\u521b\u5efa\u7b56\u7565\u4e2d\u5f15\u7528\uff09\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u5728\u542f\u52a8\u7684\u65f6\u5019\u5f3a\u5236\u8981\u6c42\u7684\u3002\n\n\nOnly the ordering organizations have permission to read or write on this chain, so from a peer consumer perspective, the existence of this chain is irrelevant.\n\n\n\u53ea\u6709\u6392\u5e8f\u7ec4\u7ec7\u6709\u6743\u9650\u8bfb\u5199\u7cfb\u7edf\u94fe\uff0c\u56e0\u6b64\u4ecepeer\u7684\u89d2\u5ea6\uff0c\u8fd9\u4e2a\u94fe\u662f\u6beb\u4e0d\u76f8\u5e72\u7684\u3002\n\n\nThe chain creators are enumerated in a configuration item of type Orderer, key ChainCreators, and value common.ChainCreators.  The common.ChainCreators is a repeated list of strings, each corresponding to a defined configuration item of type Policy.  Note that this is a repeated list, rather than a single policy, to accommodate the possibility of multi-tenancy.  Different consortiums may desire different chain creation policies, and although it might be possible to construct one large policy with many \u2018ORs\u2019 to accommodate this, it is more natural to specify and manage the policies on a per consortium basis. \n\n\nOrderer\u7c7b\u578b\u7684\u914d\u7f6e\u4e2d\u679a\u4e3e\u4e86\u94fe\u7684\u521b\u5efa\u8005\uff0c\u952e\u4e3a\u201d ChainCreators\u201c\uff0c\u503c\u4e3a\u901a\u7528\u7684ChainCreator\u3002\u901a\u7528\u7684ChainCreator\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u4e00\u4e2aPolicy\u7c7b\u578b\u7684\u914d\u7f6e\u9879\u3002\u6ce8\u610f\uff0c\u8fd9\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e0d\u662f\u53ea\u6709\u4e00\u4e2a\u7b56\u7565\uff0c\u8fd9\u6837\u53ef\u4ee5\u6ee1\u8db3\u591a\u79df\u6237\u7684\u573a\u666f\u3002 \u4e0d\u540c\u7684\u8054\u76df\u53ef\u80fd\u8981\u6c42\u4e0d\u540c\u7684\u94fe\u521b\u5efa\u7b56\u7565\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u201dOR\u201c\u5b9a\u4e49\u4e00\u4e2a\u5f88\u5927\u7684\u7b56\u7565\u6765\u6ee1\u8db3\u8fd9\u79cd\u9700\u6c42\uff0c\u4f46\u662f\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u662f\u6bcf\u4e2a\u8054\u76df\u6307\u5b9a\u548c\u7ba1\u7406\u81ea\u5df1\u7684\u7b56\u7565\u3002\n\n\nAn example of ordering channel genesis organization in configuration items is depicted in Table 2.\n\n\n\u88682,\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u7684channel\u521d\u59cb\u7ec4\u7ec7\u7684\u914d\u7f6e\u793a\u4f8b\u3002\n\n\n6.2 Chain Creation Request (Configuration Transaction)\n\n\n\u521b\u5efa\u94fe\u8bf7\u6c42\uff08\u914d\u7f6e\u4ea4\u6613\uff09\n\n\nWhen a consortium wishes to use an ordering service, the ordering service creates a chain creation policy for that consortium, typically requiring the signatures of any two participants in the consortium, but as it uses the underlying policy framework, the signature requirements may be arbitrarily complex (for instance, requiring one authoritative member, and arbitrary two others).  This chain creation policy is simply a named string, and is added internally to the chain creators of the ordering system chain.  The consortium will also be told by the ordering service admins the set of configuration items which must be present in any chain creation request (such as the ordering system MSP definitions and block validation policies).\n\n\n\u5f53\u4e00\u4e2a\u8054\u76df\u5e0c\u671b\u4f7f\u7528\u6392\u5e8f\u670d\u52a1\u65f6\uff0c\u6392\u5e8f\u670d\u52a1\u4e3a\u8054\u76df\u521b\u5efa\u4e00\u4e2a\u94fe\u521b\u5efa\u7b56\u7565\uff0c\u5178\u578b\u7684\u60c5\u51b5\u662f\u9700\u8981\u8054\u76df\u4e2d\u4efb\u610f2\u4e2a\u53c2\u4e0e\u8005\u7684\u7b7e\u540d\uff0c\u4f46\u662f\u7531\u4e8e\u4f7f\u7528\u4e86\u5e95\u5c42\u7684\u7b56\u7565\u6846\u67b6\uff0c\u7b7e\u540d\u6761\u4ef6\u53ef\u4ee5\u5236\u5b9a\u5f97\u5f88\u590d\u6742\uff08\u4f8b\u5982\uff0c\u8981\u6c421\u4e2a\u6743\u5a01\u6210\u5458\uff0c\u548c\u4efb\u610f2\u4e2a\u5176\u4ed6\u6210\u5458\uff09\u3002\u94fe\u521b\u5efa\u7b56\u7565\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u540d\u5b57\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u4f1a\u88ab\u6dfb\u52a0\u5230\u6392\u5e8f\u670d\u52a1\u7684\u7cfb\u7edf\u94fe\u7684\u521b\u5efa\u8005\u4e2d\u3002\u6392\u5e8f\u670d\u52a1\u7684\u7ba1\u7406\u5458\u4e5f\u4f1a\u544a\u8bc9\u8054\u76df\u94fe\u521b\u5efa\u8bf7\u6c42\u4e2d\u9700\u8981\u5305\u542b\u54ea\u4e9b\u914d\u7f6e\u9879\uff08\u6bd4\u5982\u914d\u9700\u670d\u52a1\u7cfb\u7edfMSP\u5b9a\u4e49\u548c\u5757\u9a8c\u8bc1\u7b56\u7565\uff09\n\n\nWhen members of the consortium wish to create a new chain, they simply create the set of configuration items which defines their new chain, concatenate the marshaled bytes, and compute the hash of this data.  They then create a special configuration item of type Orderer, key CreationPolicy, and type orderer.CreationPolicy, with the digest field set to the hash of the chain configuration, and the policy set to the named chain creators policy provided by the ordering service.  This ConfigurationItem is then inserted into a SignedConfigurationItem and is appropriately signed as required by the chain creation policy.   This is all wrapped into a ConfigurationEnvelope and packaged into a signed Envelope and submitted for ordering.\n\n\n\u5f53\u8054\u76df\u6210\u5458\u8981\u521b\u5efa\u65b0\u94fe\u65f6\uff0c\u5b83\u4eec\u7b80\u5355\u5730\u521b\u5efa\u4e00\u7ec4\u914d\u7f6e\u9879\uff0c\u5b9a\u4e49\u5b83\u4eec\u7684\u65b0\u94fe\uff0c\u5bf9\u914d\u7f6e\u9879\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5e76\u8ba1\u7b97\u54c8\u5e0c\u503c\u3002 \u7136\u540e\u521b\u5efa\u4e00\u4e2aOrderer\u7c7b\u578b\u7684\u914d\u7f6e\u9879\uff0c\u952e\u4e3aCreationPolicy\uff0c \u7c7b\u578borderer.CreationPolicy, \u6458\u8981\u5b57\u6bb5\u8bbe\u4e3a\u914d\u7f6e\u7684\u54c8\u5e0c\u503c\uff0c\u7b56\u7565\u8bbe\u7f6e\u4e3a\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684ChainCreators \u7b56\u7565\u3002\u5c06\u8fd9\u4e2a\u914d\u7f6e\u9879\u63d2\u5165SignedConfigurationItem\uff0c\u5e76\u4e14\u6839\u636e\u94fe\u521b\u5efa\u7b56\u7565\u8fdb\u884c\u5408\u7406\u7684\u7b7e\u540d\u3002\u6240\u6709\u8fd9\u4e9b\u5c01\u88c5\u8fdbConfigurationEnvelope\u5e76\u4e14\u6253\u5305\u8fdb\u4e00\u4e2a\u7b7e\u540d\u7684Envelope\uff0c\u63d0\u4ea4\u7ed9\u6392\u5e8f\u670d\u52a1\u3002\n\n\nNote then, that the signed Envelope message is exactly the contents of the new genesis block.  All of the requesting parties have their signature encoded into this genesis block, and so the only validation required by the application is to ensure that the signature on the CreationPolicy configuration item is valid, and that the digest encoded corresponds to the remaining configuration.\n\n\n\u6ce8\u610f\uff0c\u7b7e\u540d\u7684Envelope\u6d88\u606f\u5c31\u662f\u521b\u59cb\u5757\u7684\u5185\u5bb9\u3002 \u8bf7\u6c42\u7684\u6240\u6709\u90e8\u5206\u90fd\u6709\u7b7e\u540d\u4fe1\u606f\u7f16\u7801\u8fdb\u521b\u59cb\u5757\uff0c\u56e0\u6b64\u5e94\u7528\u53ea\u9700\u8981\u9a8c\u8bc1CreationPolicy\u914d\u7f6e\u9879\u7684\u7b7e\u540d\u662f\u5408\u6cd5\u7684\uff0c\u5e76\u4e14\u6458\u8981\u548c\u5269\u4f59\u7684\u90e8\u5206\u76f8\u7b26\u5408\u5373\u53ef\u3002\n\n\nAn example of the structure of a chain genesis transaction appears in Table 3.\n\n\n\u88683\u662f\u94fe\u521b\u59cb\u4ea4\u6613\u7684\u4f8b\u5b50\n\n\nWhen the ordering service receives a chain configuration transaction, it first checks to see if the chain ID already exists.  If it does, then it is treated as a reconfiguration transaction and accepted/rejected accordingly.  In the event that the chain does not exist, the orderer then validates that it is a well formed and currently valid chain creation request, it then wraps this request inside of an Envelope of type ORDERER_TRANSACTION bound for the ordering system chain, and submits it for consensus.  Eventually, once the transaction has been ordered, it is unwrapped, and inspected a second time for validity now that ordering has occurred.  Only in cases where the ordering system chain configuration changed or a chain creation request for the identical chain ID was submitted concurrently can this validation fail, in which case the request is logged and discarded.\n\n\n\u5f53\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4e00\u4e2a\u94fe\u914d\u7f6e\u4ea4\u6613\uff0c\u5b83\u9996\u5148\u68c0\u67e5\u94feID\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u3002\u5982\u679c\u5df2\u7ecf\u5b58\u5728\uff0c\u5b83\u4f1a\u628a\u4ea4\u6613\u4f5c\u4e3a\u4e00\u4e2a\u91cd\u914d\u7f6e\u4ea4\u6613\uff0c\u5e76\u76f8\u5e94\u7684\u505a\u63a5\u6536\u6216\u8005\u62d2\u7edd\u5904\u7406\u3002\u5982\u679c\u94feID\u4e0d\u5b58\u5728\uff0c\u6392\u5e8f\u670d\u52a1\u68c0\u67e5\u5b83\u7684\u683c\u5f0f\uff0c\u9a8c\u8bc1\u4e3a\u6709\u6548\u8bf7\u6c42\uff0c\u7136\u540e\u5c01\u88c5\u8fd9\u4e2a\u8bf7\u6c42\u5230\u6392\u5e8f\u670d\u52a1\u7cfb\u7edf\u94fe\u7ed1\u5b9a\u7684ORDERER_TRANSACTION \u7c7b\u578b\u7684Envelope\uff0c\u63d0\u4ea4\u7ed9\u5171\u8bc6\u3002\u6700\u7ec8\uff0c\u4e00\u65e6\u4ea4\u6613\u88ab\u6392\u5e8f\uff0c\u5b83\u4f1a\u88ab\u518d\u89e3\u5c01\uff0c\u518d\u6b21\u9a8c\u8bc1\u3002\u53ea\u6709\u6392\u5e8f\u670d\u52a1\u7cfb\u7edf\u94fe\u914d\u7f6e\u53d1\u751f\u53d8\u66f4\u6216\u8005\u540c\u4e00\u94feID\u7684\u94fe\u521b\u5efa\u8bf7\u6c42\u540c\u65f6\u63d0\u4ea4\u7684\u60c5\u51b5\u4e0b\uff0c\u9a8c\u8bc1\u624d\u4f1a\u5931\u8d25\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6c42\u4f1a\u88ab\u8bb0\u5165\u65e5\u5fd7\u5e76\u4e22\u5f03\u3002\n\n\nFinally, after consensus is achieved and the still valid configuration transaction is processed, new ledger resources are allocated and the configuration transaction is embedded into the genesis block for the new chain.  The created can poll for this creation via a Deliver request.\n\n\n\u6700\u540e\uff0c \u5171\u8bc6\u8fbe\u6210\uff0c\u914d\u7f6e\u8bf7\u6c42\u88ab\u5904\u7406\u540e\uff0c\u65b0\u7684\u8d26\u672c\u8d44\u6e90\u4f1a\u88ab\u5206\u914d\uff0c\u5e76\u4e14\u914d\u7f6e\u4ea4\u6613\u4f1a\u88ab\u5d4c\u5165\u5230 \u65b0\u94fe\u7684\u521b\u59cb\u5757\u3002\u521b\u5efa\u8005\u53ef\u4ee5\u901a\u8fc7Deliver\u8bf7\u6c42\u83b7\u53d6\u521b\u59cb\u5757\u3002", 
            "title": "MSP&ACL"
        }, 
        {
            "location": "/msp_acl_zh/#membership-service-providers-access-control-in-hyperledger-fabric", 
            "text": "Authors : Elli Androulaki, Angelo De Caro, Binh Nguyen, Alessandro Sorniotti, Murali Srinivasan, Jason Yellick  \u7ffb\u8bd1\uff1a\u6881\u6c38\u752b", 
            "title": "Membership Service Providers &amp; Access Control in Hyperledger Fabric"
        }, 
        {
            "location": "/msp_acl_zh/#1-terminology", 
            "text": "A  Blockchain network  consists of the following entities:   \u533a\u5757\u94fe\u7f51\u7edc\u5305\u542b\u5982\u4e0b\u7ec4\u6210\u90e8\u5206\uff1a\n- Application(s) network (can include peers and clients or only clients)\n- \u5e94\u7528\u7a0b\u5e8f\u7f51\u7edc\uff08\u53ef\u4ee5\u5305\u542bpeer\u548cclient\uff0c\u4e5f\u53ef\u4ee5\u53ea\u5305\u542bclient\uff09\n- Network of peers (if not part of the application network)\n- peer\u7f51\u7edc\uff08\u9664\u4e86\u5e94\u7528\u7f51\u7edc\u4e2d\u7684peer\u7ec4\u6210\u7684\u7f51\u7edc\uff09\n- Ordering service (can be decentralized or centralized)\n- \u6392\u5e8f\u670d\u52a1\uff08\u53ef\u4ee5\u662f\u4e2d\u5fc3\u5316\u7684\uff0c\u4e5f\u53ef\u4ee5\u5206\u5e03\u5f0f\uff09\n- Set of protocols to facilitate the communication between the clients, peers and the ordering service, enabling the application to create one or more chains throughout the operation of the system and submit transactions to it, as well as manage the access to these chains.\n- \u4e00\u7ec4\u901a\u8baf\u534f\u8bae\uff0c\u8fd9\u4e9b\u534f\u8bae\u7528\u4e8e\uff1aclient\uff0cpeer\uff0corderer\u4e4b\u95f4\u7684\u901a\u4fe1\uff1b\u5e94\u7528\u901a\u8fc7\u7cfb\u7edf\u64cd\u4f5c\u521b\u5efa\u4e00\u4e2a\u6216\u8005\u591a\u4e2achain\uff0c\u5e76\u63d0\u4ea4\u4ea4\u6613\uff1b\u7ba1\u7406\u5bf9chains\u7684\u8bbf\u95ee\u3002  For some of these terms we refer the reader to Hyperledger Fabric architecture.  Ordering service  is the component of a Blockchain network that offers atomic broadcast services. It can create one or more \u201catomic broadcast channels\u201d upon authenticated request from appropriately authorized entities. The internal structure of the ordering service may differ from one implementation to the other, as it can be a service offered by one entity (centralized version) or more entities, e.g., running BFT or CFT protocols (decentralized version). In any case, ordering service should come with its client that should expose the following functionalities to ordering service users, i.e., entities that leverage atomic broadcast functionalities of the ordering service:  \u6392\u5e8f\u670d\u52a1  \u662f\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u63d0\u4f9b\u539f\u5b50\u5e7f\u64ad\u670d\u52a1\u7684\u7ec4\u4ef6\u3002 \u5b83\u80fd\u591f\u901a\u8fc7\u4e00\u4e9b\u7ecf\u8fc7\u8ba4\u8bc1\u7684\u5b9e\u4f53\u521b\u5efa\u591a\u4e2a\u201c\u539f\u5b50\u5e7f\u64ad\u901a\u9053\u201d \u3002 \u6839\u636e\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6392\u5e8f\u670d\u52a1\u5185\u90e8\u7ed3\u6784\u53ef\u80fd\u4e0d\u540c\uff0c \u5b83\u53ef\u4ee5\u662f\u4e2d\u5fc3\u5316\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5206\u5e03\u5f0f\u7684\uff08\u6bd4\u5982\u8fd0\u884cBFT\u6216\u8005CFT\u534f\u8bae\u7684\u591a\u4e2a\u5b9e\u4f53\uff09\u3002 \u4e0d\u7ba1\u90a3\u79cd\u65b9\u5f0f\uff0c \u6392\u5e8f\u670d\u52a1\u548c\u5176\u5ba2\u6237\u7aef\u8981\u4e3a\u7528\u6237\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff0c   Create and submit channel creation requests  \u521b\u5efa\u548c\u63d0\u4ea4\u521b\u5efachannel\u7684\u8bf7\u6c42  Reconfigure channel permissions, e.g., update the channel access policies  \u91cd\u65b0\u914d\u7f6echannel\u6743\u9650\uff0c\u5982\uff1a\u66f4\u65b0channel\u51c6\u5165\u7b56\u7565  Reconfigure permissions of members concerning the ordering service functionalities (e.g., channel creation)  \u4e3a\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u7684\u6210\u5458\u91cd\u65b0\u914d\u7f6e\u6743\u9650\uff08\u5982\u521b\u5efachannel\uff09   The ordering client is also equipped with reconfiguration mechanisms that are triggered by properly authenticated transactions advertised within application or system channel. E.g., if the ordering service is decentralized, the ordering service client would need to know   understand the policies associated to updates of that ordering service\u2019s membership mechanism, and other parameters, e.g., batch size, etc.  \u6392\u5e8f\u5ba2\u6237\u7aef\u4e5f\u8981\u5177\u5907\u91cd\u65b0\u914d\u7f6e\u7684\u673a\u5236\uff0c\u8fd9\u4e9b\u673a\u5236\u53ef\u4ee5\u901a\u8fc7\u5728\u5e94\u7528\u6216\u8005\u7cfb\u7edfchannel\u4e2d\u5e7f\u64ad\u4ea4\u6613\u6765\u89e6\u53d1\u3002 \u5982\uff0c\u5982\u679c\u6392\u5e8f\u670d\u52a1\u662f\u5206\u5e03\u5f0f\u7684\uff0c \u5ba2\u6237\u7aef\u5e94\u8be5\u77e5\u9053\u6392\u5e8f\u670d\u52a1\u7684\u6210\u5458\u7b56\u7565\u66f4\u65b0\u673a\u5236\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u53c2\u6570\uff0c\u5982batch size\u7b49\u3002  Channel  is an atomic broadcast channel managed by the ordering service. One or more channels may be created within the ordering service after request from the application network (see below for application network definition).  __channel__\u662f\u6392\u5e8f\u670d\u52a1\u7ba1\u7406\u7684\u4e00\u4e2a\u539f\u5b50\u5e7f\u64ad\u901a\u9053\u3002 \u5e94\u7528\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u8bf7\u6c42\u7684\u65b9\u5f0f\uff0c\u5728\u6392\u5e8f\u670d\u52a1\u4e2d\u521b\u5efa\u591a\u4e2achannel\u3002  Chain  is bound to a channel and is the data structure that maintains the history and state of transactions advertised within a channel. In particular, a chain consist of   chain \u548cchannel\u7ed1\u5b9a\uff0c \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7528\u6765\u7ef4\u62a4channel\u5185\u5e7f\u64ad\u7684\u4ea4\u6613\u7684\u5386\u53f2\u548c\u72b6\u6001\u3002chain\u7531\u4e00\u4e0b\u7ec4\u6210\u90e8\u5206\uff1a   The total order of transactions as provided by the channel orderers  channel \u7684orderer\u63d0\u4f9b\u7684\u5168\u90e8\u4ea4\u6613\u5e8f\u5217  The state associated to chaincodes defined within the channel (i.e., the set of transactions of the channel that are valid)  channel\u4e2d\u8fde\u4ee3\u7801\u7684\u72b6\u6001\uff08channel\u4e2d\u6210\u529f\u7684\u4ea4\u6613\uff09  Membership and access control information for this chain\u2019s operations (read-access to transactions, write-access to the state, etc).  chain\u7684\u6210\u5458\u548c\u51c6\u5165\u63a7\u5236\u4fe1\u606f\uff08\u8bfb\u53d6\u4ea4\u6613\uff0c\u5199\u72b6\u6001\u7b49\uff09    Membership service provider (MSP) : A set of cryptographic mechanisms and protocols for issuing and validating certificates and identities in the Blockchain network. Identities issued in the scope of a membership service provider can be evaluated within that membership service provider\u2019s rules.   MSP  \uff1a \u4e00\u7ec4\u52a0\u5bc6\u673a\u5236\u548c\u534f\u8bae\uff0c\u7528\u6765\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u53d1\u653e\u9a8c\u8bc1\u8bc1\u4e66\u548cidentities \u3002msp\u4e2d\u53d1\u653e\u7684identities \u53ef\u4ee5\u5728msp\u4e2d\u9a8c\u8bc1\u3002  Clients  are defined by their membership service provider type and respective (public) configuration. The latter for the default membership service provider includes a list of root CAs and intermediate CAs, and a list of administrators.  Clients  \u901a\u8fc7\u5b83\u7684msp type\u6765\u5b9a\u4e49\uff0c\u9ed8\u8ba4\u7684msp\u5305\u542b\u6839ca\uff0c\u4e2d\u95f4ca\u548c\u7ba1\u7406\u5458\u3002  Network of peers  are defined either the same way as clients. A peer network, like  the client network, comes along with a description of the membership service provider and its configuration.   peer\u7f51\u7edc  \u7528\u548cclient\u7f51\u7edc\u540c\u6837\u7684\u65b9\u5f0f\u5b9a\u4e49\u3002peer\u7f51\u7edc\u4e5f\u662f\u6709msp\u63cf\u8ff0\u548c\u81ea\u5df1\u7684\u914d\u7f6e\u3002  Application network  is a broader term to cover entities that could be part of the application infrastructure. This could include a set of clients, and potentially also sets of peers. To understand this better, let\u2019s take the example of an auctioning service that is implemented as a chaincode that runs on peers A, and B. Now, let\u2019s assume that for the purpose of this use-case, the application service has implemented client-application software that runs on the end-user machine, and application server software that runs on the application server. Both cases leverage the client-sdk and are perceived by fabric network as clients. In this scenario the application owns the application-server side, as well as peers A, and B, that would install and instantiate/simulate the chaincodes controlled and submitted by that application.  \u5e94\u7528\u7f51\u7edc  \u662f\u4e00\u4e2a\u5e7f\u4e49\u7684\u5b9a\u4e49\uff0c\u6307\u90a3\u4e9b\u5e94\u7528\u67b6\u6784\u4e2d\u7684\u5b9e\u4f53\u3002\u5305\u62ec\u5ba2\u6237\u7aef\u548c\u4e00\u4e9bpeer\u3002\u4e3a\u4e86\u66f4\u597d\u7406\u89e3\uff0c \u6211\u4eec\u4e3e\u4e00\u4e2a\u62cd\u5356\u670d\u52a1\u7684\u4f8b\u5b50\uff0cchaincode\u5728peer A\u548cB\u4e0a\u8fd0\u884c\u3002\u73b0\u5728\uff0c\u5047\u8bbe\u5e94\u7528\u8fd0\u884c\u5728\u7ec8\u7aef\u7528\u6237\u7684\u8bbe\u5907\u4e0a\uff0c \u5e94\u7528\u670d\u52a1\u7aef\u8fd0\u884c\u5728\u5e94\u7528\u670d\u52a1\u5668\u4e0a\u3002\u4e24\u8005\u90fd\u662f\u7528client-sdk\uff0c\u5e76\u4e14\u88abfabric\u7f51\u7edc\u89c6\u4e3a\u5ba2\u6237\u7aef\u3002\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u5e94\u7528\u5305\u62ec\u5e94\u7528\u670d\u52a1\u7aef\uff0cpeer A \u548cpeer B\u3002  Interaction between the ordering service, and application entities (clients, and peers) : This requires that the ordering service nodes have installed some piece of software to be able to minimally process messages coming from the application network. This includes membership-related functionalities, i.e., check whether a certain entity is authorized to do certain things or not, and membership-update functionalities. We will call this appshim. At the same time, as mentioned before, application network should run the ordering service client that is able to process ordering service specific messages that are advertised through a channel. We will call this osshim.  \u6392\u5e8f\u670d\u52a1\u548c\u5e94\u7528\u5b9e\u4f53\u95f4\u7684\u4ea4\u4e92 \uff1a \u8fd9\u9700\u8981\u6392\u5e8f\u670d\u52a1\u5b89\u88c5\u4e00\u4e9b\u8f6f\u4ef6\u6765\u5904\u7406\u6765\u81ea\u5e94\u7528\u7f51\u7edc\u7684\u6d88\u606f\u3002\u5305\u62ec\u6210\u5458\u76f8\u5173\u7684\u529f\u80fd\uff08\u5982\uff1a\u68c0\u67e5\u4e00\u4e2a\u5b9e\u4f53\u662f\u5426\u6709\u6743\u9650\u505a\u67d0\u4e9b\u4e8b\u60c5\uff09\u548c \u6210\u5458\u66f4\u65b0\u529f\u80fd\u3002\u6211\u4eec\u79f0\u4e4b\u4e3aappshim\u3002 \u540c\u6837\uff0c\u5e94\u7528\u7f51\u7edc\u9700\u8981\u8fd0\u884c\u6392\u5e8f\u670d\u52a1\u5ba2\u6237\u7aef\uff0c \u5904\u7406\u6392\u5e8f\u670d\u52a1\u5728channel\u4e2d\u5e7f\u64ad\u7684\u6d88\u606f\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3aosshim\u3002  Application chaincodes : Applications can deploy and invoke application chaincodes. At deploy time the owner of a chaincode (application) should specify policies that will govern the impact of invocations of that chaincode in that chaincode\u2019s state. These policies are known as endorsement policies. These policies usually contain:  \u5e94\u7528\u94fe\u4ee3\u7801 \uff1a \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u90e8\u7f72\u548c\u8c03\u7528\u5e94\u7528\u94fe\u4ee3\u7801\uff0c\u5728\u90e8\u7f72\u7684\u65f6\u5019\uff0c\u5e94\u7528\u8981\u6307\u5b9a\u94fe\u4ee3\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u7ba1\u7406\u94fe\u4ee3\u7801\u7684\u8c03\u7528\u65b9\u5f0f\u3002\u80cc\u4e66\u7b56\u7565\u901a\u5e38\u5305\u542b\uff1a   an endorsement specific part, i.e., defining how an endorser should \u201cendorse\u201d such invocations (e.g., add signatures, included in the endorsing peer code in the form of ESCC), and   \u80cc\u4e66\u65b9\u5f0f\uff0c\u5b9a\u4e49\u80cc\u4e66\u8005\u5982\u4f55\u80cc\u4e66\u4e00\u4e2a\u8c03\u7528\uff08\u5982\u589e\u52a0\u81ea\u5df1\u7684\u7b7e\u540d\uff0c\u4ee5ESCC\u7684\u5f62\u5f0f\u5305\u5728\u542b\u80cc\u4e66\u8282\u70b9\u7684\u4ee3\u7801\u4e2d\uff09  a validation part, that is used by the committing peers to  assess if the endorsement policy is satisfied for a certain chaincode invocation transaction (included in the committing peer code in the form of the validation system chaincode (VSCC)).   \u9a8c\u8bc1\u65b9\u5f0f\uff0c\u8fd9\u90e8\u5206\u5c06\u5728peer\u63d0\u4ea4\u7684\u65f6\u5019\u7528\u6765\u9a8c\u8bc1\u5bf9\u94fe\u4ee3\u7801\u7684\u8c03\u7528\u662f\u5426\u6ee1\u8db3\u80cc\u4e66\u7b56\u7565\uff08\u4ee5VSCC\u7684\u5f62\u5f0f\u5305\u542b\u5728\u63d0\u4ea4peer\u7684\u4ee3\u7801\u4e2d\uff09\u3002   Thus, at deploy time, the deployer needs to specify the id of a pair of ESCC, VSCC this chaincode should adhere to. Fabric equips the peers with default ESCC and VSCC implementations that  cover certain types of policies. Blockchain network provider may develop additional ESCC and VSCC to support specific endorsements that are not covered by the default. What is important is that VSCC given a transaction concludes to a decision in a deterministic manner.   \u56e0\u6b64\uff0c\u90e8\u7f72\u7684\u65f6\u5019\uff0c\u90e8\u7f72\u8005\u9700\u8981\u6307\u5b9a\u4e00\u5bf9ESCC\u548cVSCC\u7684ID\uff0c Fabric\u5df2\u7ecf\u5b9e\u73b0\u4e86\u9ed8\u8ba4\u7684ESCC\u548cVSCC\uff0c\u5305\u62ec\u4e86\u4e00\u4e9b\u6307\u5b9a\u7684\u7b56\u7565\u3002\u533a\u5757\u94fe\u7f51\u7edc\u63d0\u4f9b\u8005\u53ef\u4ee5\u5f00\u53d1\u989d\u5916\u7684ESCC\u548cVSCC\u6765\u652f\u6301\u5176\u4ed6\u7684\u80cc\u4e66\u3002\u91cd\u8981\u7684\u662fVSCC\u80fd\u7ed9\u660e\u786e\u7684\u51b3\u5b9a\u4ea4\u6613\u662f\u5426\u6709\u6548\u3002  Organizations : Logical entities or corporations that constitute the stakeholders of a Blockchain network installation. Members of such organization could be authorized by that organization\u2019s membership service providers to submit transactions to certain chains.  \u7ec4\u7ec7 \uff1a \u7ec4\u6210\u533a\u5757\u94fe\u7f51\u7edc\u7684\u903b\u8f91\u5b9e\u4f53\u6216\u8005\u516c\u53f8\u3002\u7ec4\u7ec7\u7684\u6210\u5458\u7ecf\u8fc7\u7ec4\u7ec7\u7684msp\u8ba4\u8bc1\u540e\u624d\u80fd\u63d0\u4ea4\u4ea4\u6613\u5230\u6307\u5b9a\u7684chain\u3002  Members : Represent the end-users of the Blockchain network. Each organization may have one or more members and acts as the root of trust (MSP) for its members. For the default MSP used by fabric applications, each member has one long-term identity and can use its long-term identity to generate one or more ephemeral identities.  \u6210\u5458 \uff1a\u533a\u5757\u94fe\u7f51\u7edc\u7684\u7ec8\u7aef\u7528\u6237\u3002\u6bcf\u4e2a\u7ec4\u7ec7\u4e2d\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458\uff0c\u4f5c\u4e3a\u53ef\u4fe1\u7684msp\u6765\u9a8c\u8bc1\u5176\u4ed6\u6210\u5458\u3002 \u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u9ed8\u8ba4MSP\uff0c\u6bcf\u4e2a\u6210\u5458\u90fd\u6709\u4e00\u4e2a\u957f\u671fidentity \uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u5176\u957f\u671fidentity \u6765\u751f\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u77ed\u6682identity \u3002  Mapping between an organization and an MSP : This mapping is not enforced by the fabric configuration. It is up to the consortium of entities building their Blockchain network to decide how to leverage the modular nature of membership service providers, and the ability for many of them to co-exist in the network.   \u7ec4\u7ec7\u548cmsp\u7684\u6620\u5c04 \uff1a\u8fd9\u79cd\u6620\u5c04\u4e0d\u662f\u901a\u8fc7fabric\u914d\u7f6e\u5f3a\u5236\u6267\u884c\u7684\u3002\u8fd9\u53d6\u51b3\u4e8e\u533a\u5757\u94fe\u7684\u53c2\u4e0e\u8005\u5982\u4f55\u5229\u7528msp\u7684\u6a21\u5757\u5316\u7279\u6027\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5728\u7f51\u7edc\u4e2d\u5171\u5b58\u7684\u80fd\u529b\u3002  The simplest case would be that there is one to one mapping between an organization and a membership service provider. In this case, root certificates of the organization MSP could carry that organization\u2019s name, that can be used as the MSP\u2019s identifier within a chain. If an organization has more than one subdivisions, e.g., the ones that appear in the OU field of an X.509 based identity, then the identities of these divisions should be considered using the identity of the MSP/Organization as namespace for it.  \u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u548c\u4e00\u4e2amsp\u6620\u5c04\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ec4\u7ec7msp\u7684\u6839\u8bc1\u4e66\u4e2d\u53ef\u4ee5\u5305\u542b\u7ec4\u7ec7\u7684\u540d\u79f0\uff0c\u540d\u79f0\u5728\u53ef\u4ee5\u7528\u6765\u505amsp\u5728chain\u4e2d\u7684identifier \u3002\u5982\u679c\u4e00\u4e2a\u7ec4\u7ec7\u6709\u591a\u4e2a\u5206\u652f\u3002\u4f8b\u5982\uff0c\u5206\u652f\u540d\u5b57\u4f5c\u4e3ax.509\u8eab\u4efd\u8bc1\u4e66\u4e2d\u7684ou\u5b57\u6bb5\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5206\u652f\u7684identity\u5e94\u8be5\u5e94\u8be5\u8003\u8651\u7528msp/organization\u7684\u5f62\u5f0f\u8868\u793a\u3002   In the last section we elaborate on best practices associated to membership service providers and their mapping to organizations.", 
            "title": "1. Terminology"
        }, 
        {
            "location": "/msp_acl_zh/#2-membership-service-providers-msps-in-a-blockchain-network", 
            "text": "", 
            "title": "2. Membership Service Providers (MSPs) in a Blockchain network"
        }, 
        {
            "location": "/msp_acl_zh/#21-definition-of-a-membership-service-provider", 
            "text": "MSP\u5b9a\u4e49   A Blockchain network may be governed by one or more MSPs. An MSP can be logically defined by the following components:   \u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u53ef\u4ee5\u7531\u591a\u4e2aMSP\u7ba1\u7406\uff0c\u4e00\u4e2aMSP\u5305\u542b\u5982\u4e0b\u7ec4\u4ef6\uff1a   An identity format, also known as certificate, and optionally the algorithm to generate one identity   identity\u683c\u5f0f\uff0c\u5373\u8bc1\u4e66\u683c\u5f0f\uff0c\u4ee5\u53ca\u53ef\u9009\u7684\u751f\u6210\u751fidentity\u7684\u7b97\u6cd5   A signing algorithm that utilizes the secret associated to an identity, and a message to produce a byte array that is also bound to the identity   \u4e0eidentity\u5bf9\u5e94\u7684\u7b7e\u540d\u7684\u7b97\u6cd5\uff0c\u5c06identity\u5e8f\u5217\u5316\u7684\u65b9\u6cd5\u3002   A signature verification algorithm that takes as input an identity, a message, and a signature (byte array), and outputs \u201caccept\u201d if the signature bytes correspond to a valid signature of the input message assuming the information in the input identity; otherwise, the algorithm outputs \u201creject\u201d   \u7b7e\u540d\u9a8c\u8bc1\u7b97\u6cd5\uff0c\u7b97\u6cd5\u8f93\u5165identity\uff0c\u6d88\u606f\uff0c\u7b7e\u540d\uff0c\u5224\u65ad\u7b7e\u540d\u548cidentity\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5c31\u8f93\u51fa\u201c\u63a5\u53d7\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201c\u62d2\u7edd\u201d\u3002   The set of rules that need to be satisfied by an identity for the identity to be considered valid for this MSP   \u4e00\u7ec4\u5224\u65adidentity\u662f\u5426\u7b26\u5408MSP\u8981\u6c42\u7684\u9a8c\u8bc1\u89c4\u5219\u3002  A set of administration identities, that are authorized to change configuration parameters that are MSP-specific  \u4e00\u7ec4\u7ba1\u7406\u8005identity\uff0c\u7ba1\u7406\u8005\u53ef\u4ee5\u4fee\u6539MSP\u7684\u914d\u7f6e\u4fe1\u606f\u3002  From an implementation perspective, many MSPs are similar in items (1) and (2), and (3) but  differ in (4) and (5). For the purpose of this document we will overload the MSP notation to refer to a unique tuple of algorithms:   \u5bf9\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u5927\u90e8\u5206MSP\u4e2d\uff0c\u4e0a\u8ff01,2,3\u6761\u90fd\u662f\u76f8\u4f3c\u7684\u3002\u4f46\u662f\u57284,5\u4e24\u6761\u4e0a\u6709\u5dee\u5f02\u3002\u672c\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u7528\u4e0b\u9762\u7684\u683c\u5f0f\u5206\u522b\u8868\u793a\u4e0a\u8ff05\u6761\u3002  MSP.id, MSP.sign, MSP.verify, MSP.validateid, MSP.admin", 
            "title": "2.1 Definition of a Membership Service Provider"
        }, 
        {
            "location": "/msp_acl_zh/#22-examples", 
            "text": "Examples of MSPs used by Peers. Here we describe how the above MSP features are instantiated in the case of two popular MSP scenarios on the peer side. Notice that peers in the network are agnostic to the identity issuing process, as their role is restricted to the endorsement of client proposals, client identity validation and client identity signature validation.   Peer\u4e2d\u4f7f\u7528\u7684MSP\u7684\u4f8b\u5b50\u3002 \u6211\u4eec\u63cf\u8ff0peer\u7aef\u4e24\u79cd\u573a\u666f\u4e0b\u5982\u4f55\u5b9e\u73b0\u4e0a\u9762\u7684\u7279\u6027\u3002\u6ce8\u610f\uff0cpeer\u5e76\u4e0d\u611f\u77e5identity\u7684\u4ea7\u751f\u673a\u5236\u662f\uff08\u5c31\u662f\u8bc1\u4e66\u53d1\u884c\uff09\u3002identity\u7684\u529f\u80fd\u5206\u5e03\u5728\u5ba2\u6237\u7aef\u63d0\u6848\u80cc\u4e66\uff0c \u5ba2\u6237\u7aefidentity\u9a8c\u8bc1\uff0c\u5ba2\u6237\u7aef\u7b7e\u540d\u9a8c\u8bc1\u3002  Example 1: Classic MSP . Identities (i.e., MSP.id) in this case have the form of standard X.509 certificates, that are signed by exactly one root CA. The certificate of the root CA, that can also be a commercial CA, is part of this MSP description. Signing and signature verification algorithms (i.e., MSP.sign and MSP.verify) are ECDSA-based or RSA-based depending on the key-material in the certificate.    \u573a\u666f1\uff1a \u57fa\u672cMSP \u3002 \u8fd9\u79cd\u573a\u666f\u4e0b\uff0cidentity\uff08\u5373MSP.id\uff09\u662f\u7ecf\u8fc7\u6839CA\u7b7e\u540d\u7684x.509\u683c\u5f0f\u7684\u8bc1\u4e66\u3002\u6839CA\uff08\u53ef\u4ee5\u662f\u5546\u4e1a\u7684CA\uff09 \u4e5f\u662fMSP\u7684\u4e00\u90e8\u5206\u3002\u7b7e\u540d\u7b97\u6cd5\uff08MSP.sign\uff09\u548c\u7b7e\u540d\u9a8c\u8bc1\u7b97\u6cd5(MSP.verify) \u53ef\u4ee5\u662fECDSA\uff0c\u4e5f\u53ef\u4ee5\u662fRSA\uff0c\u5177\u4f53\u4f9d\u8d56\u4e8e\u8bc1\u4e66\u4e2d\u7684\u8bf4\u660e\u3002   Validation of an identity (i.e,. MSP.validateid) in this case involves:   \u8fd9\u79cd\u573a\u666f\u4e0b\uff0cidentity\u9a8c\u8bc1\uff08MSP.validateid\uff09\u5305\u62ec    Verifying the correctness of the signature (chain) included in the identity (X.509 certificate) assuming the trusted root CA,     \u9a8c\u8bc1\u8bc1\u4e66\u4e2d\u7684\u7b7e\u540d\u94fe\uff0c\u5047\u8bbe\u76f8\u4fe1\u6839CA\u3002    Confirming that the identity is not within the list of identities that have been revoked;     \u786e\u8ba4\uff0cidentity\u4e0d\u5728revodedidentity\u5217\u8868\u4e2d\u3002    depending on the MSP implementation this can be done either by means of \u201cMSP identity revocation list\u201d (IdRL), or of \u201cMSP identity white-list\u201d (IdWL), that are updated regularly. In the Blockchain setting the IdRL/IdWL is passed as parameter at MSP setup time, and is updated through (properly authenticated) reconfiguration messages advertized through the Blockchain.    \u4e0a\u9762\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u4e3a\u9ed1\u540d\u5355\uff08idRL\uff09\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u4e3a\u767d\u540d\u5355\uff08idWL\uff09\uff0c\u5e76\u4e14\u5b9a\u671f\u66f4\u65b0\u3002\u5728MSP\u542f\u52a8\u7684\u65f6\u5019\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6eIdRL/IdWL\uff0c \u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u5e7f\u64ad\u91cd\u914d\u7f6e\u6d88\u606f\u66f4\u65b0\u8fd9\u4e9b\u4fe1\u606f\u3002    Admin of such an MSP (i.e., MSP.admin) can be the X.509 certificate of the administrator of that MSP, i.e., the entity that can update the root CA certificate this MSP is governed by. By default, IdRLs or IdWLs are only updatable by the root CA itself, or the administrator.   MSP\u7684\u7ba1\u7406\u5458\uff08\u5373MSP.admin\uff09\u53ef\u4ee5\u662fMSP\u7ba1\u7406\u5458\u7684X.509\u6570\u5b57\u8bc1\u4e66\uff0c \u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u65b0MSP\u7684\u6839CA\u8bc1\u4e66\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6839CA\u81ea\u5df1\u548c\u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u65b0IdRL\u548cIdWL\u3002  Example 2: MSP allowing for cross-signed certificates . As in the previous example, identities in this case also have the form of an X.509 certificates. However, in this case, the MSP client leverages standard X.509 certificate structure to accommodate within a single certificate signatures of one or more root CAs. In this case, the MSP is parameterized with a list of trusted CAs (by means of standard X.509 certificates) and the threshold number of these whose signature should appear in a valid identity. As before, validation of certificates, apart from the signature validation relates to IdRLs/IdWLs, which can be advertised by either the administrator, or the identity issuer CA.    \u573a\u666f2\uff1aMSP\u5141\u8bb8\u4ea4\u53c9\u7b7e\u540d\u8bc1\u4e66 \u3002 \u548c\u4e0a\u4e00\u79cd\u573a\u666f\u4e00\u6837\uff0cidentity\u5728\u8fd9\u79cd\u573a\u666f\u5199\u4e5f\u662fX.509\u8bc1\u4e66\u3002 \u4f46\u662fMSP\u5ba2\u6237\u7aef\u5728\u5728\u4e00\u4e2aX.509\u8bc1\u4e66\u4e2d\u52a0\u5165\u591a\u4e2a\u6839CA\u7b7e\u540d\u3002\u901a\u8fc7\u53c2\u6570\u914d\u7f6eMSP\u4fe1\u4efb\u7684MSP\u5217\u8868\uff08\u901a\u8fc7X.509\u8bc1\u4e66\u6307\u5b9a\uff09\u548c\u4e00\u4e2a\u6709\u6548\u8bc1\u4e66\u4e2d\u9700\u8981\u6709\u7684\u6839CA\u7b7e\u540d\u6570\u9600\u503c\u3002\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u8bc1\u4e66\u9a8c\u8bc1\u548c\u7b7e\u540d\u9a8c\u8bc1\u5206\u79bb\uff0c \u8bc1\u4e66\u9a8c\u8bc1\u4f9d\u8d56\u4e8eIdRL/IdWL, \u800cIdRL/IdWL\u53ea\u80fd\u7531\u6839CA\u81ea\u5df1\u6216\u8005\u7ba1\u7406\u624d\u80fd\u66f4\u65b0\u3002   Signing, and signature verification algorithm is an ECDSA based one or RSA based one depending on the key-material inside the certificate.    \u7b7e\u540d\u7b97\u6cd5\uff0c\u548c\u7b7e\u540d\u9a8c\u8bc1\u7b97\u6cd5\u53ef\u4ee5\u662fECDSA \uff0c\u4e5f\u53ef\u4ee5\u662fRSA\uff0c\u5728\u8bc1\u4e66\u4e2d\u6307\u5b9a\u3002", 
            "title": "2.2 Examples"
        }, 
        {
            "location": "/msp_acl_zh/#23-generic-interfaces-for-a-fabric-platform-msp", 
            "text": "Reflecting the definition of an MSP from Section 2.1, we define generic interfaces for a membership service provider. These interfaces are shown in Figure1, and are strongly coupled with the notion of identity. Identity, that reflects the notion of publicly verifiable certificate is also defined in a generic way, through the interfaces described in Figure 2. Finally, Figure 3 depicts a SigningIdentity interface, i.e., an Identity with signing capabilities.  \u4e3a\u4e86\u4f53\u73b02.1\u4e2dMSP\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5b9a\u4e49MSP\u7684\u901a\u7528\u63a5\u53e3\uff0c\u5982\u4e0b\u56fe1\u6240\u793a\u3002\u8fd9\u4e9b\u63a5\u53e3\u548cidentity\u7684\u6982\u5ff5\u662f\u5f3a\u76f8\u5173\u7684\u3002identity\u4f53\u73b0\u8bc1\u4e66\u7684\u6982\u5ff5\uff0cidentity\u4e5f\u662f\u4ee5\u4e00\u79cd\u901a\u7528\u63a5\u53e3\u7684\u5f62\u5f0f\u5b9a\u4e49\uff0c\u5982\u56fe2\u6240\u793a\u3002\u6700\u540e\u5728\u56fe3\u4e2d\u63cf\u8ff0SigningIdentity \u63a5\u53e3\uff0c \u5373\u5177\u5907\u7b7e\u540d\u529f\u80fd\u7684Identity\u3002  // MSP is the minimal Membership Service Provider Interface to reflect Membership\n// Service Provider needs to be used on the peer and ordering node side. Notice that\n// on these nodes, MSP is needed for verifying purposes.\ntype MSP interface {\n\n      // Setup the MSP instance according to configuration information defined through\n      // an MSPConfig data structure. This struct is generic enough so as to capture\n      // any MSP configuration\n      Setup(config *MSPConfig) error\n\n     // Returns the type this MSP leverages. The default MSP type is \u201cFabric\u201d that implements\n     // a standard X.509 certificate based signature generation and verification. Notice that such \n     // a provider type can also parse and evaluate transaction certificate signatures \n      GetType() ProviderType\n\n      // GetIdentifier returns the identifier of this MSP; this is an identifier assigned to\n      // the MSP via configuration (Setup).\n      GetIdentifier() (string, error)\n\n       // GetSigningIdentity returns a signing identity that this MSP already manages,\n       // and that corresponds to the input identifier; IdentityIdentifier consists of two strings,\n       // the first is the provider identifier, and the second includes the identity\u2019s identifier\n       // within the provider.\n      GetSigningIdentity(identifier *IdentityIdentifier) (SigningIdentity, error)\n\n      // GetDefaultSigningIdentity returns the default signing identity of this MSP; this is \n      // helpful in cases where there is a main signing identity that is used throughout a\n      // node\u2019s operation\n      GetDefaultSigningIdentity() (SigningIdentity, error)\n\n      // DeserializeIdentity deserializes an identity, according to this MSP\u2019s deserialization\n      // rules and instantiates an Identity object that this MSP can \u201cunderstand\u201d\n      DeserializeIdentity(serializedIdentity []byte) (Identity, error)\n\n      // Validate checks whether the supplied identity is valid under this MSP\u2019s validation rules\n      Validate(id Identity) error\n\n     // SatisfiesPrincipal checks whether the identity matches\n     // the description supplied in MSPPrincipal. The check may\n     // involve a byte-by-byte comparison (if the principal is\n     // a serialized identity) or may require MSP validation). MSPPrincipal \n    // functionality will be discussed in Section 2.5.2.\n     SatisfiesPrincipal(id Identity, principal *common.MSPPrincipal) error\n}  Figure1. Description of the generic platform MSP interface.  // Identity interface defining operations associated to a  certificate .  That is, the public part of the \n// identity could be thought to be a certificate, and offers solely signature verification capabilities.\n// This is to be used at the peer side when verifying certificates that transactions are signed\n// with, and verifying signatures that correspond to these certificates.\ntype Identity interface {\n\n      // GetIdentifier returns the identifier of that identity\n      GetIdentifier() *IdentityIdentifier\n\n      // GetMSPIdentifier returns the MSP Id for this instance\n      GetMSPIdentifier() string\n\n      // Validate uses the rules that govern this identity to validate it.\n      // E.g., if it is a fabric TCert implemented as identity, validate\n      // will check the TCert signature against the assumed root certificate\n      // authority.\n      Validate() error\n\n      // GetOrganizationalUnits returns zero or more organization units or\n      // divisions this identity is related to as long as this is public\n      // information. Certain MSP implementations may use attributes\n      // that are publicly associated to this identity, or the identifier of\n      // the root certificate authority that has provided signatures on this\n      // certificate.\n      // Examples:\n      //  - if the identity is an x.509 certificate, this function returns one\n      //    or more string which is encoded in the Subject's Distinguished Name\n      //    of the type OU\n      GetOrganizationalUnits() []string\n\n      // Verify a signature over some message using this identity as reference\n      Verify(msg []byte, sig []byte) error\n\n      // Serialize converts an identity to bytes\n      Serialize() ([]byte, error)\n\n      // SatisfiesPrincipal checks whether this instance matches\n      // the description supplied in MSPPrincipal. The check may\n      // involve a byte-by-byte comparison (if the principal is\n      // a serialized identity) or may require MSP validation\n      SatisfiesPrincipal(principal *common.MSPPrincipal) error\n}    Figure 2  Description of a generic Identity interface devised for Fabric platform needs.  Identities equipped with the secret signing information that correspond to their public key, are called in our infrastructure  SigningIdentities . In the case of an X.509 based MSP, Identity would be instantiated as an X.509 certificate.  SigningIdentity  in this case, would also carry a reference to the signing key of the certificate\u2019s public key. SigningIdentity interface is described in Figure 3.  \u5305\u542b\u548c\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5\u4fe1\u606f\u7684identity \u79f0\u4e3a SigningIdentity\u3002 Identity\u5c31\u662f\u4e00\u4e2aX.509\u8bc1\u4e66\u3002 SigningIdentity \u8981\u4fdd\u5b58\u8bc1\u4e66\u516c\u94a5\u7684\u7b7e\u540d\u79c1\u94a5\uff08\u8ddf\u7b2c\u4e00\u53e5\u540c\u4e00\u4e2a\u610f\u601d\uff1f\uff09\u3002 SigningIdentity\u63a5\u53e3\u5b9a\u4e49\u5982\u56fe3  // SigningIdentity is an extension of Identity to cover signing capabilities. E.g., signing identity\n// should be requested in the case of a peer who wishes to sign proposal responses. A form\n// of signing identity is also used at the client side who would sign proposals and transactions.\ntype SigningIdentity interface {\n\n      // Extends Identity\n      Identity\n\n      // Sign the input message using the singing identity\u2019s signing key\n      Sign(msg []byte) ([]byte, error)\n\n      // Removed SignOpts, GetAttributeProof for the same reasons as for VerifyOpts and VerifyAttributes\n\n      // GetPublicVersion returns the public parts of this identity. In a signing identity corresponding \n      // to X.509 certificates, GetPublicVersion would output the Identity object representing the \n      // actual X.509 certificate\n      GetPublicVersion() Identity\n\n }  Figure 3. Description of a generic interface for a signing identity.", 
            "title": "2.3 Generic interfaces for a fabric platform MSP"
        }, 
        {
            "location": "/msp_acl_zh/#24-coupling-node-signing-abilities-with-a-local-msp", 
            "text": "Orderers, and peers need to be equipped with signing abilities. To do so, the administrator of a node needs to specify at node setup time the configuration of the MSP that would carry the signing identity of the peer or orderer. As the MSP instance included here is created solely to instantiate the node\u2019s signing identity, we refer to this MSP by  SignerMSP . The latter is only possible to be updated manually by that node\u2019s administrator, and can naturally vary from node to node. For simplicity and for V.1, to setup SignerMSP, and assuming the default MSP type for fabric, the administrator is requested to copy to dedicated location in the node\u2019s file system four sets of files:  orderer\u548cpeer\u9700\u8981\u5177\u5907\u7b7e\u540d\u7684\u80fd\u529b\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u8282\u70b9\u7684\u7ba1\u7406\u5458\u5728\u8282\u70b9\u542f\u52a8\u7684\u65f6\u5019\u6307\u5b9a\u7b7e\u540dIdentity\u7684\u4fe1\u606f\u3002\u8fd9\u91cc\u7684MSP\u5b9e\u73b0\u4e86\u7b7e\u540dIdentity\uff0c \u6211\u4eec\u79f0\u4e4b\u4e3aSignerMSP\u3002\u521b\u5efa\u540e\uff0c\u53ea\u6709\u8282\u70b9\u7684\u7ba1\u7406\u5458\u53ef\u4ee5\u66f4\u65b0\uff0c\u5404\u4e2a\u8282\u70b9\u53ef\u4ee5\u4e0d\u540c\u3002 \u7b80\u5355\u63cf\u8ff0\uff0c\u5728V1.0\u4e2d\uff0c\u5047\u8bbe\u5173\u952e\u4e00\u4e2a\u7c7b\u578b\u4e3aFabric\u7684MSP\uff0c \u7ba1\u7406\u5458\u9700\u8981\u5728\u8282\u70b9\u7684\u6307\u5b9a\u76ee\u5f55\u62f7\u8d1d\u4e0b\u9762\u56db\u7c7b\u6587\u4ef6\u3002   cacerts: PEM files containing the root authority certificates of the MSP  cacerts: PEM\u683c\u5f0f\u7684MSP\u7684\u6839CA\u8bc1\u4e66  admincerts: PEM files containing the administrators\u2019 certificates of this MSP  admincerts\uff1a MSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66  keystore: PEM files containing the signing private key of the node  keystore: \u8282\u70b9\u7684\u7b7e\u540d\u79c1\u94a5  signcerts: PEM encoded certificate files corresponding to the identity of the node  signcerts:\u8282\u70b9Identity\u7684\u8bc1\u4e66\uff08\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u8282\u70b9\u7684\u8bc1\u4e66\uff09   In particular, the node admin is required to modify the setup .yaml file with the information depicted in the figure below. First of all, the BC crypto service provider of the node is configured, where it needs to be determined whether a software (SW) or HSM based CSP is used to store the key-material of the node.  In the example below a SW provider is configured with the location of where the key material of the peer is to reside. In addition, for the default MSP case, the node is to retrieve from its .yaml file the location of the msp-related files (cacerts, admincerts, intermediatecas, and crls) are stored (parameter mspConfigPath), and identifier of the node\u2019s MSP (localMspId).  \u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8282\u70b9\u7684\u7ba1\u7406\u5458\u8981\u4fee\u6539\u542f\u52a8\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u9996\u5148\uff0c\u914d\u7f6eBC\u52a0\u5bc6\u670d\u52a1\uff0c \u8981\u9009\u62e9\u5b58\u50a8\u79c1\u94a5\u4fe1\u606f\u65f6\u7528\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0cSW\u6216\u8005HSM\u3002\u53e6\u5916\uff0c\u5982\u679c\u7528\u9ed8\u8ba4MSP\uff0c\u8282\u70b9\u4f1a\u4ece\u914d\u7f6e\u7684\u76ee\u5f55\u4e0b\u83b7\u53d6\u76f8\u5173\u7684\u8bc1\u4e66\u4fe1\u606f\uff0c\u4ee5\u53ca\u8282\u70b9\u7684Msp\u6807\u8bc6\uff08localMSpId\uff09  # BCCSP (Blockchain crypto provider): Select which crypto implementation or\n# library to use\nBCCSP:\n   Default: SW\n   SW:\n       # TODO: The default Hash and Security level needs refactoring to be\n       # fully configurable. Changing these defaults requires coordination\n       # SHA2 is hardcoded in several places, not only BCCSP\n       Hash: SHA2\n       Security: 256\n       # Location of Key Store, can be subdirectory of SbftLocal.DataDir\n       FileKeyStore:\n           # If  , defaults to 'mspConfigPath'/keystore\n           KeyStore:\n\n# Path on the file system where peer will find MSP local configurations\nmspConfigPath: msp/sampleconfig\n\n# Identifier of the local MSP\n# ----!!!!IMPORTANT!!!-!!!IMPORTANT!!!-!!!IMPORTANT!!!!----\n# Deployers need to change the value of the localMspId string.\n# In particular, the name of the local MSP ID of a peer needs\n# to match the name of one of the MSPs in each of the channel\n# that this peer is a member of. Otherwise this peer's messages\n# will not be identified as valid by other nodes.\nlocalMspId: DEFAULT", 
            "title": "2.4 Coupling node signing abilities with a (local) MSP"
        }, 
        {
            "location": "/msp_acl_zh/#25-coupling-chain-participation-with-msps", 
            "text": "The genesis block of a chain must contain the specification (description) of the MSPs that govern the chain participants\u2019 identities. If an MSP covers multiple chains, it is important that we keep the state of that MSP on each chain. This is to avoid reconfiguration inconsistency attacks that can be caused by reconfiguration transactions of the organization\u2019s MSP arriving in each chain in a different order.   \u533a\u5757\u94fe\u7684\u521b\u59cb\u5757\u4e2d\u5fc5\u987b\u5305\u542b\u7ba1\u7406\u53c2\u4e0e\u8005\u8eab\u4efd\u7684MSP\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2aMSP\u6d89\u53ca\u591a\u4e2a\u94fe\uff0c \u5c31\u9700\u8981\u5728\u6bcf\u4e2a\u94fe\u4e2d\u4fdd\u5b58MSP\u7684\u72b6\u6001\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u91cd\u65b0\u914d\u7f6e\u653b\u51fb\uff08\u8ba9\u914d\u7f6e\u53d8\u66f4\u4ea4\u6613\u5728\u4e0d\u540c\u7684\u94fe\u4e2d\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u5230\u8fbe\u8282\u70b9\uff09\u3002  MSPs defined in the context of a chain or channel would enable the orderers and peers to authenticate chain transaction signers, endorsers, and/or creators of requests for chain/channel creation/termination,  channel broadcast   delivery and others.   \u5728chain\u6216\u8005channel\u73af\u5883\u4e2d\u5b9a\u4e49\u7684MSP\uff0c\u80fd\u591f\u4f7forderer\u548cpeer\u6821\u9a8c\u94fe\u4ea4\u6613\u7b7e\u540d\u8005\uff0c\u80cc\u4e66\u8005\u548c\u91cd\u914d\u7f6e\u8bf7\u6c42\u7684\u521b\u5efa\u8005\uff0cchannel\u5e7f\u64ad\u548c\u63a8\u9001\uff0c\u4ee5\u53ca\u5176\u4ed6\u3002  In particular, MSPs specified in the orderer system channel would allow the specification of the policies governing channel readers (to authenticate   validate channel delivery requests), writers (to authenticate   validate channel broadcast requests), chainCreators (to evaluate chain creation requests), and admins (to authenticate   validate channel reconfiguration requests). MSPs specified in an application chain or channel allow the specification of policies that govern chain readers, writers, admins, and chaincodeAdmins (to authenticate and validate chaincode instantiation requests). Evidently, MSPs within a chain have a  verifier role , that comes in contrast to the  signer role  that local MSP(s) mean to offer. More specifically, peers and orderers are required to setup MSPs in the context of a channel (for orderer system channel) or chain to be able to authenticate transactions and configuration-related requests, and carry  no signature generation responsibility/ability .  \u5c24\u5176\u662f\uff0corderer\u7cfb\u7edfchannel\u4e2d\u6307\u5b9a\u7684msp\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5bf9channel\u7684\u8bbf\u95ee\u7b56\u7565\uff0c\u7ba1\u7406\u76f8\u5173\u6210\u5458\uff0c\u5305\u62ec\uff1areader\uff08\u5411channel\u53d1\u83b7\u53d6\u8bf7\u6c42\uff09\uff0cwriter\uff08\u5411channel\u53d1\u9001\u5e7f\u64ad\u8bf7\u6c42\uff09\uff0cchainCreator\uff08\u53d1\u9001\u521b\u5efa\u94fe\u4ee3\u7801\u8bf7\u6c42\uff09\uff0cadmin\uff08\u53ef\u4ee5\u53d1\u9001\u91cd\u65b0\u914d\u7f6echannel\u8bf7\u6c42\uff09\u3002\u5e94\u7528\u94fe\u6216\u8005channel\u4e2d\u6307\u5b9a\u7684msp\uff0c\u53ef\u4ee5\u5b9a\u4e49\u8bbf\u95ee\u7b56\u7565\uff0c\u7ba1\u7406\u76f8\u5173\u6210\u5458\uff1areader\uff0c writer\uff0cadmins\uff0c chaincodeAdmin(\u53ef\u4ee5\u53d1\u9001\u94fe\u4ee3\u7801\u5b9e\u4f8b\u5316\u8bf7\u6c42)\u3002 \u663e\u7136\uff0c\u94fe\u5185\u7684msp\u5177\u6709\u7b7e\u540d\u9a8c\u8bc1\u89d2\u8272\uff0c\u4e0e\u672c\u5730msp\u63d0\u4f9b\u7684\u7b7e\u540d\u89d2\u8272\u76f8\u53cd\u3002\u66f4\u8be6\u7ec6\u7684\u8bf4\uff0cpeer\u548corderer\u9700\u8981\u5728channel\uff08orderer \u7cfb\u7edfchannel\uff09\u548cchain\u4e0a\u4e0b\u6587\u4e2d \u542f\u52a8msp\uff0c\u6765\u8ba4\u8bc1\u4ea4\u6613\u6216\u8005\u914d\u7f6e\u76f8\u5173\u7684\u8bf7\u6c42\uff0c\u5177\u5907\u751f\u6210\u7b7e\u540d\u7684\u80fd\u529b\u3002  Clearly, peers and orderers need to be able to verify signatures that correspond to identities issued by multiple MSPs. To facilitate this, Hyperledger fabric introduces the concept of an MSP manager. In particular, an MSPManager interface is the fabric component that would instantiate one or more MSPs at chain setup time (which is also relevant for the orderer channel setup that takes place at orderer bootstrap), and use these to validate transaction signatures transparently to the rest of the code. MSPManager interface brings in two important advantages to the fabric.   \u663e\u7136\uff0cpeer\u548corderer \u8981\u80fd\u591f\u9a8c\u8bc1\u591a\u4e2amsp\u53d1\u884c\u7684\u8eab\u4efd\uff08Identity\uff09\u7684\u7b7e\u540d\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e00\u70b9\uff0cHyperledger Fabric \u5f15\u5165\u4e86msp\u7ba1\u7406\u5668\u7684\u6982\u5ff5\u3002MSPManager \u63a5\u53e3\u4f5c\u4e3aFabric\u7ec4\u4ef6\uff0c\u5728\u5efa\u7acbchain\u7684\u65f6\u5019\uff08\u5982\u679c\u662forderer\u5c31\u662f\u5728\u521b\u5efachannel\u7684\u65f6\u5019\uff09\u5b9e\u4f8b\u5316\u591a\u4e2aMSP\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u6765\u9a8c\u8bc1\u4ea4\u6613\u7b7e\u540d\u3002MSPManager\u7ed9Fabric\u5e26\u6765\u4e24\u4e2a\u597d\u5904\u3002   Pluggability of MSPs  MSP\u53ef\u63d2\u62d4\u5316\u3002  Support for multiple MSP providers simultaneously  \u53ef\u540c\u65f6\u63d0\u4f9b\u591a\u4e2aMSP\u3002  Hiding the complexity of internal policies of a single MSP and its architecture from the rest of the MSPs in the Blockchain network.  \u5bf9\u533a\u5757\u94fe\u7f51\u7edc\u9690\u85cfMSP\u5185\u90e8\u7b56\u7565\u7684\u590d\u6742\u6027\u4ee5\u53ca\u5176\u67b6\u6784\u3002   MSPManager uses the information from the configuration block of the chain (i.e., the Genesis block) to instantiate the MSPs, as shown in Figure 4.  MSPManager \u4f7f\u7528chain\u7684\u914d\u7f6e\u5757\u4fe1\u606f\uff08\u5373\u521b\u59cb\u5757\uff09\u5b9e\u4f8b\u5316MSP\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002   Figure 4. Setup flow from chain configuration components, to MSPManager setup, and individual MSP setup.  \u4ece\u94fe\u914d\u7f6e\u7ec4\u4ef6\u5230MSPManager\u548c\u4e2a\u4f53MSP\u542f\u52a8\u6d41\u7a0b\u3002  The MSPManager exposes an interface to the rest of the fabric-code that is simple for components to integrate. This interface is in Figure 5.  MSPManager \u66b4\u6f0f\u7b80\u5355\u63a5\u53e3\u7ed9\u533a\u5757\u94fe\u7684\u5176\u4ed6\u7ec4\u4ef6\uff0c\u65b9\u4fbf\u5176\u4ed6\u7ec4\u4ef6 \u96c6\u6210\u3002\u63a5\u53e3\u5982\u4e0b\uff1a  // MSPManager is an interface defining a manager of one or more MSPs. This essentially acts\n// as a mediator to MSP calls and routes MSP related calls to the appropriate MSP. This object\n// is immutable, it is initialized once and never changed.\ntype MSPManager interface {\n\n    // DeserializeIdentity deserializes an identity.\n    // Deserialization will fail if the identity is associated to\n    // an msp that is different from this one that is performing\n    // the deserialization.\n    DeserializeIdentity(serializedIdentity []byte) (Identity, error)\n\n\n    // Setup the MSP manager instance according to configuration information\n    Setup(msps []MSP) error\n\n    // GetMSPs Provides a list of Membership Service providers\n     GetMSPs() (map[string]MSP, error)\n}    Figure 5. In this Figure we can see the definition of MSPManager interface. Notice, that in the code, \u201cDeserializeIdentity\u201d function is part of a \u201cIdentityDeserializer\u201d interface, that MSPManager extends. However, for simplicity of description we list directly the function inside MSPManager interface.   \u5728\u8fd9\u5e45\u56fe\uff0c\u6211\u4eec\u80fd\u770b\u5230MSPManager\u63a5\u53e3\u5b9a\u4e49\u3002\u6ce8\u610f\uff0c\u5728\u4ee3\u7801\u4e2d\u201cDeserializeIdentity\u201d\u51fd\u6570\u662fMSPManager \u6269\u5c55\u7684IdentifyDeserializer\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u3002\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0c\u5728MSPManager\u63a5\u53e3\u4e2d\u76f4\u63a5\u5217\u51fa\u4e86\u6b64\u51fd\u6570\u3002", 
            "title": "2.5 Coupling chain participation with MSPs"
        }, 
        {
            "location": "/msp_acl_zh/#251-setup-of-chain-msps", 
            "text": "An MSPManager instance is created for every new chain that is created through the \u201cSetup\u201d method, that takes as input a list of MSP configuration objects, i.e., \u201cmsp.MSPConfig\u201d. The proto message governing the structure of msp.MSPConfig is depicted in Figure 6.  \u5728\u521b\u5efachain\u7684\u65f6\u5019\uff0c\u901a\u8fc7SetUp\u63a5\u53e3\u521b\u5efa\u4e00\u4e2aMSPManager\u5b9e\u4f8b\u3002\u6b64\u63a5\u53e3\u7684\u8f93\u5165\u662fmsp\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5373msp.MSPConfig. \u5c01\u88c5\u6b64\u7ed3\u6784\u7684\u6d88\u606f\u7ed3\u6784\u5982\u4e0b\uff1a  // MSPConfig collects all the configuration information for\n// an MSP. The Config field should be unmarshalled in a way\n// that depends on the Type\nmessage MSPConfig {\n   // Type holds the type of the MSP; the default one would\n   // be of type FABRIC implementing an X.509 based provider\n   int32 Type = 1;\n\n   // Config is MSP dependent configuration info\n   bytes Config = 2;\n}  Figure 6. Protocol message for generic configuration of an MSP.  Marshalling of field \u201cConfig\u201d (and hence the way to be unmarshalled) is defined by the value of field \u201cType\u201d. For the default case where the default MSP type (Farbric) is used and being configured, \u201cConfig\u201d has the content shown in Figure 7.  \u901a\u8fc7Type\u6307\u5b9aConfig\u7684\u7f16\u7801\u65b9\u5f0f\u548c\u89e3\u7801\u65b9\u5f0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cMSP\u7c7b\u578b\u662fFabirc\uff0c Config\u7684\u5185\u5982\u5982\u4e0b\uff1a  // FabricMSPConfig collects all the configuration information for a Fabric MSP. \n// Here we assume a default certificate validation policy, where any certificate\n// signed by any of the listed rootCA certs would be considered as valid\n// under this MSP. This MSP may or may not come with a signing identity. If\n// it does, it can also issue signing identities. If it does not, it can only\n// be used to validate and verify certificates.\nmessage FabricMSPConfig {\n   // Name holds the identifier of the MSP; MSP identifier is chosen by the\n   // application that governs this MSP. For example, and assuming the default\n   // implementation of MSP, that is X.509-based and considers a single Issuer,\n   // this can refer to the Subject OU field or the Issuer OU field.\n   string Name = 1;\n\n   // List of root certificates associated\n   repeated bytes RootCerts = 2;\n\n   // Identity denoting the administrator of this MSP\n   repeated bytes Admins = 3;\n\n   // Identity revocation list\n   repeated bytes RevocationList = 4;\n\n   // SigningIdentity holds information on the signing identity\n   // this peer is to use, and which is to be imported by the\n   // MSP defined before\n   SigningIdentityInfo SigningIdentity = 5;\n}  Figure 7. Protocol message for configuration of the default MSP.  The configuration transaction that constitutes the genesis transaction of the chain, contains a list of one or more MSPs that would govern the chain. An example of the content related to MSPManager setup content with three MSPs of type \u201cFabric\u201d is depicted in Figure 8.  \u94fe\u7684\u521b\u59cb\u4ea4\u6613\u4ea7\u751f\u7684\u914d\u7f6e\u4ea4\u6613\uff0c\u5305\u542b\u7ba1\u7406\u94fe\u7684MSP\u5217\u8868\u3002\u4e0b\u56fe\u63cf\u8ff0\u4e86\u4e00\u4e2aMSPManager\u542f\u52a8\u4e09\u4e2aFabric\u7c7b\u578bMSP\u7684\u4f8b\u5b50\u3002  {\n  MSPManager :\n  [\n     {\n        Type :0,\n        Config :{\n            Name : org1 ,\n            RootCerts :[ org1-identity1bytes , org1-identity2bytes , org1-identity3bytes ],\n            Admins :[ adminidOrg1bytes ]\n         }\n     },\n     {\n        Type :0,\n        Config :{\n            Name : org2 ,\n            RootCerts :[ org2-identity1bytes , org2-identity2bytes , org2-identity3bytes ],\n            Admins :[ adminidOrg2bytes ]\n         }\n     },\n     {\n        Type :0,\n        Config :{\n            Name : org3 ,\n            RootCerts :[ org3-identity1bytes , org3-identity2bytes , org3-identity3bytes ],\n            Admins :[ adminidOrg3bytes ]\n         }\n     }\n   ]\n }  Figure 8. Example of configuration content included in a chain genesis block. We emphasize that in this Figure, we use json format for simplicity of presentation.  \u521b\u59cb\u5757\u5185\u5bb9\u7684\u4f8b\u5b50\uff0c\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u6b64\u56fe\u4e2d\uff0c\u6211\u4eec\u7528json\u683c\u5f0f\u63cf\u8ff0\u5185\u5bb9\u3002  Configuration information of a (simple) MSP: To setup an MSP one would need the type of MSP be supported by that node\u2019s executable, i.e., the MSP type to be among the ones already defined and implemented in the node\u2019s peer or orderer executable. Each MSP is required to implement the interface presented in Figure1 and can be configured with instructions provided at chain genesis time. The information included in the genesis block of a chain for each MSP, is MSP-type-dependent. For the the default fabric MSP type, MSP configuration includes the following parts:  \u4e00\u4e2a\u7b80\u5355MSP\u7684\u914d\u7f6e\u4fe1\u606f\uff1a\u4e3a\u4e86\u5efa\u7acbMSP\uff0c\u9700\u8981\u77e5\u9053\u8282\u70b9\u652f\u6301\u7684MSP\u7c7b\u578b\uff0c\u5373peer\u6216\u8005 orderer\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u7684MSP\u3002 \u6bcf\u4e2aMSP\u9700\u8981\u5b9e\u73b0\u56fe1\u4e2d\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u7528\u5728\u94fe\u521b\u5efa\u7684\u65f6\u5019\u63d0\u4f9b\u7684\u4fe1\u606f\u8fdb\u884c\u914d\u7f6e\u3002\u8fd9\u4e9b\u4fe1\u606f\uff08\u5305\u62ec\u94fe\u7684\u521b\u59cb\u5757\u4e2d\u6bcf\u4e2aMSP\u7684\u4fe1\u606f\uff09\u4f9d\u8d56\u4e8eMSP\u7684\u7c7b\u578b\u3002\u9ed8\u8ba4\u7684MSP\u7c7b\u578b\u4e3aFabric\uff0c\u5176\u914d\u7f6e\u5305\u62ec\u5982\u4e0b\u4fe1\u606f\u3002   A name to identify the MSP within the chain/Blockchain network; In the above example we use  \u201corg1\u201d, \u201corg2\u201d, and \u201corg3\u201d as MSPIDs of the MSPS that govern the chain.  This is because we follow the convention of Section 1. Terminology, where each MSP represents an organization.   \u6807\u8bc6MSP\u5728\u94fe\u6216\u8005\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684\u8eab\u4efd\u7684\u540d\u5b57\uff1b \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u6211\u4eec\u7528 org1\uff0c org2 \u548corg3 \u4f5c\u4e3aMSPID\u6765\u7ba1\u7406chain\u3002  The type of MSP this provider uses; the provider mentioned in the example below is of type \u201cFabric\u201d, which aims to be the (default) MSP implementation in fabric. Alternative implementations may require cross-signed certificates from two or more root CAs etc, and would have a different type reference.  MSP\u7c7b\u578b\uff1b\u4e0b\u9762\u4f8b\u5b50\u4e2d\u63d0\u7684\u7c7b\u578b\u4e3aFabric\uff0c\u8fd9\u662fFabric\u4e2d\u9ed8\u8ba4\u5b9e\u73b0\u7684MSP\u3002 \u5176\u4ed6\u7684\u5b9e\u73b0\u53ef\u80fd\u9700\u8981\u6765\u81ea\u591a\u4e2aRootCa\u7684\u4ea4\u53c9\u7b7e\u540d\u8bc1\u4e66\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b\u3002  A set of parameter values that include  \u4e00\u7ec4\u5305\u542b\u5982\u4e0b\u503c\u7684\u53c2\u6570\u4fe1\u606f\uff1a  a set of identities/certificates to constitute the root of trust, or CA server(s), e.g.,     RootCerts :[ org1-identity1bytes , org1-identity2bytes , org1-identity3bytes ],  Notice that all these identities in the default case have the form of plain X.509 certificates in PEM format.\n  - \u4e00\u7ec4\u6784\u6210\u4fe1\u4efbrootCA\u7684\u8bc1\u4e66\uff0c\u6bd4\u5982\uff1a RootCerts :[ org1-identity1bytes , org1-identity2bytes , org1-identity3bytes ]\u3002 \u8fd9\u4e9bIdentity\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662fX.509\u7684PEM\u683c\u5f0f\u7684\u8bc1\u4e66\u3002\n  - the admin authorized to perform updates to this MSP parameters/configuration (consisting primarily on the root of trust/ root CA certificates, and CRLs); for simplicity we show a single certificate/identity as admin:      Admins :[ adminidOrg1bytes ],   \u7ba1\u7406\u5458\uff0c\u53ef\u4ee5\u66f4\u65b0MSP\u53c2\u6570\u548c\u914d\u7f6e\u4fe1\u606f\uff1b\u7b80\u5355\u8d77\u89c1\uff0c\u4e00\u822c\u63d0\u4f9b\u4e00\u4e2a\u8bc1\u4e66\u6216\u8005Identity\u4f5c\u4e3a\u7ba1\u7406\u5458\u3002 Admins :[ adminidOrg1bytes ],  the current list of revoked certificates in bytes, which, if omitted, an empty list is implied. Notice that exact structure of revocation identities depends on the MSP type. However, one could represent it in the configuration file as an array of bytes.  \u64a4\u9500\u8bc1\u4e66\u5217\u8868\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u3002 \u64a4\u9500identity\u7684\u7ed3\u6784\u4f9d\u8d56\u4e8eMSP\u7684\u7c7b\u578b\u3002\u4f46\u662f\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\u3002   This structure is depicted in the protocol message of Figure 7.  \u56fe7\u7684\u534f\u8bae\u6d88\u606f\u4e2d\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u914d\u7f6e\u7684\u7ed3\u6784\u3002", 
            "title": "2.5.1 Setup of chain MSPs"
        }, 
        {
            "location": "/msp_acl_zh/#252-msp-principals", 
            "text": "MSP principals constitute the building blocks of definition of access control policies within a chain or channel. In particular, they are used to describe one or more identities that share a common feature that a specific MSP manages.  MSP\u4e3b\u9898\u7ec4\u6210\u4e86\u5b9a\u4e49chain\u6216\u8005channel\u7684\u8bbf\u95ee\u63a7\u5236\u7b56\u7565\u7684\u533a\u5757\u3002\u5b83\u4eec\u88ab\u7528\u6765\u63cf\u8ff0\u4e00\u4e2aMSP\u7ba1\u7406\u7684\u5177\u6709\u5171\u540c\u7279\u6027\u7684\u591a\u4e2aIdentity \u3002   In the simplest case,  an MSPPrincipal can be the group of identities that are valid under a specific MSP\u2019s identity validation logic, or the administrator(s) of an MSP. In this case we say that the MSPPrincipal is defined using the role of the identity inside that MSP as a classification criteria.  \u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2aMSP\u4e3b\u9898\u53ef\u4ee5\u662f\u5728MSPIdentity\u9a8c\u8bc1\u903b\u8f91\u4e0b\u5408\u6cd5\u7684Identity \u7ec4\uff08member\uff09\uff0c \u6216\u7ba1\u7406\u5458\u7ec4\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u79f0MSP\u4e3b\u9898\u7528MSP\u4e2dIdentity\u7684\u89d2\u8272\u5206\u7c7b\u5b9a\u4e49\u3002  Alternatively MSPPrincipal, can be tuned to define a specific (serialized) identity of an MSP configuration (MSPConfig object from above). In this case we say that the MSPPrincipal is defined using an identity based classification.  \u53ef\u9009\u7684MSP\u4e3b\u9898\u5b9a\u4e49\uff0c\u53ef\u4ee5\u662fmsp\u914d\u7f6e\u5b9a\u4e49\u7684\u4e00\u4e2aidentity\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u79f0 MSP\u4e3b\u9898\u7528\u8eab\u4efd\u5206\u7c7b\u6765\u5b9a\u4e49\u3002  Finally, MSPPrincipal can be defined as a set of identities that are valid under a specific MSP\u2019s configuration, and belong to a certain organization unit. In this case we say that the MSPPrincipal is defined using an OrganizationUnit based classification.  \u6700\u540e\uff0cMSP\u4e3b\u9898\u53ef\u4ee5\u7528\u4e00\u7ec4\u5728MSP\u914d\u7f6e\u4e2d\u5408\u6cd5\u7684identity\u6765\u5b9a\u4e49\uff0c\u5e76\u4e14\u96b6\u5c5e\u4e8e\u7279\u5b9a\u7ec4\u7ec7\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u79f0MSP\u4e3b\u9898\u4f7f\u7528\u7ec4\u7ec7\u5206\u7c7b\u6765\u5b9a\u4e49\u3002  In the future, MSPPrincipal, can be tuned to describe a set of identities that are valid under a specific MSP\u2019s configuration (MSPConfig object from above) and have a certain attribute in common. In this case we would say that the MSPPrincipal is defined using an attribute based classification.  \u672a\u6765\uff0cMSP\u4e3b\u9898\u53ef\u4ee5\u7528\u4e00\u7ec4\u5728MSP\u914d\u7f6e\u4e2d\u5408\u6cd5\u7684identity\u6765\u5b9a\u4e49\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u7279\u5b9a\u5c5e\u6027\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u79f0 MSP\u4e3b\u9898 \u4f7f\u7528\u5c5e\u6027\u5206\u7c7b\u6765\u5b9a\u4e49\u3002  MSPPrincipal structure is defined in Figure 9.  MSP\u4e3b\u9898\u7ed3\u6784\u5982\u4e0b\uff1a  \n// MSPPrincipal aims to represent an MSP-centric set of identities.  In particular,\n// this structure allows for definition of\n//  - a group of identities that are member of the same MSP\n//  - a group of identities that are member of the same organization unit\n//    in the same MSP\n//  - a group of identities that are administering a specific MSP\n//  - a specific identity\n// Expressing these groups is done given two fields of the fields below\n//  - Classification, that defines the type of classification of identities\n//    in an MSP this principal would be defined on; Classification can take\n//    three values:\n//     (i)  ByMSPRole: that represents a classification of identities within\n//          MSP based on one of the two pre-defined MSP rules,  member  and  admin \n//     (ii) ByOrganizationUnit: that represents a classification of identities\n//          within MSP based on the organization unit an identity belongs to\n//     (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single\n//          identity/certificate; this would mean that the Principal bytes\n//          message\n//  -Principal that contains either a serialized MSPRole message, or a serialized \n// MSPOrganizationUnit message, or a serialized SerializedIdentityMessage depending\n// on the Classification value..\n\nmessage MSPPrincipal {\n\n   enum Classification {\n       ByMSPRole = 0;  // Represents the one of the dedicated MSP roles, the\n       // one of a member of MSP network, and the one of an\n       // administrator of an MSP network\n       ByOrganizationUnit = 1; // Denotes a finer grained (affiliation-based)\n       // groupping of entities, per MSP affiliation\n       // E.g., this can well be represented by an MSP's\n       // Organization unit\n       ByIdentity  = 2;    // Denotes a principal that consists of a single\n       // identity\n   }\n\n   // Classification describes the way that one should process\n   // Principal. An Classification value of  ByOrganizationUnit  reflects\n   // that  Principal  contains the name of an organization this MSP\n   // handles. A Classification value  ByIdentity  means that\n   //  Principal  contains a specific identity. Default value\n   // denotes that Principal contains one of the groups by\n   // default supported by all MSPs ( admin  or  member ).\n   Classification PrincipalClassification = 1;\n\n   // Principal completes the policy principal definition. For the default\n   // principal types, Principal can be either  Admin  or  Member .\n   // For the ByOrganizationUnit/ByIdentity values of Classification,\n   // PolicyPrincipal acquires its value from an organization unit or\n   // identity, respectively.\n   bytes Principal = 2;\n}\n\n\n// OrganizationUnit governs the organization of the Principal\n// field of a policy principal when a specific organization unity members\n// are to be defined within a policy principal.\nmessage OrganizationUnit {\n\n   // MSPIdentifier represents the identifier of the MSP this organization unit\n   // refers to\n   string MSPIdentifier = 1;\n\n   // OrganizationUnitIdentifier defines the organization unit under the\n   // MSP identified with MSPIdentifier\n   string OrganizationUnitIdentifier = 2;\n\n}\n\n// MSPRole governs the organization of the Principal\n// field of an MSPPrincipal when it aims to define one of the\n// two dedicated roles within an MSP: Admin and Members.\nmessage MSPRole {\n\n   // MSPIdentifier represents the identifier of the MSP this principal\n   // refers to\n   string MSPIdentifier = 1;\n\n   enum MSPRoleType {\n       Member = 0; // Represents an MSP Member\n       Admin  = 1; // Represents an MSP Admin\n   }\n\n   // MSPRoleType defines which of the available, pre-defined MSP-roles\n   // an identiy should posess inside the MSP with identifier MSPidentifier\n   MSPRoleType Role = 2;\n\n}  Figure 9. MSPPrincipal related protocol messages.  MSPPrincipal \u76f8\u5173\u534f\u8bae\u6d88\u606f  MSP interface is to be extended with the following function   SatisfiesPrincipal(id Identity, principal *MSPPrincipal) error  That would return true if the list of identities passed as parameters satisfy the provided MSPPrincipal.   MSP\u7684\u63a5\u53e3\u4e2d\u589e\u52a0\u51fd\u6570\uff1a  SatisfiesPrincipal(id Identity, principal *MSPPrincipal) error  \u5f53\u53c2\u6570identity \u6ee1\u8db3MSPPrincipal\uff0c\u8fd4\u56detrue    Note: This function can be extended to include signatures if the only way to ensure that an identity is valid w.r.t. A certain MSP is through signatures. An example of such case is IBM Identity Mixer.   \u6ce8\uff1a\u6b64\u51fd\u6570\u53ef\u4ee5\u6269\u5c55\u4e3a\u652f\u6301\u7b7e\u540d\uff0c\u5982\u679c\u552f\u4e00\u786e\u4fddidentity\u662f\u5408\u6cd5\u7684\u65b9\u5f0f\u662fwrt\uff0c \u4e00\u4e2a\u7279\u5b9a\u7684\u901a\u8fc7\u7b7e\u540d\u7684MSP\u3002 \u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\u662fIBM\u7684Identity Mixer\u3002", 
            "title": "2.5.2 MSP principals"
        }, 
        {
            "location": "/msp_acl_zh/#253-reconfiguration-of-a-channel-msp", 
            "text": "A channel\u2019s MSPs are reconfigured through configuration blocks that are submitted to the channel and committed to that channel. More information on this is to be added soon.  Channel\u7684MSP\u53ef\u4ee5\u901a\u8fc7\u5411channnel\u63d0\u4ea4\u914d\u7f6e\u5757\u8fdb\u884c\u91cd\u65b0\u914d\u7f6e\u3002\u66f4\u591a\u4fe1\u606f\u540e\u7eed\u5c06\u4f1a\u52a0\u5165\u3002  As happens with the reconfiguration of parameters included in other configuration items, reconfiguration of an MSP includes the following steps:   \u50cf\u5176\u4ed6\u914d\u7f6e\u53d8\u66f4\u4e00\u6837\uff0cMSP\u7684\u91cd\u65b0\u914d\u7f6e\u4e5f\u5305\u542b\u5982\u4e0b\u6b65\u9aa4\uff1a   Validate the authorization of the signers of configuration items included in the configuration transaction/block to reconfigure the signed configuration items using chain\u2019s ConfigManager (+jason.anonymous@gmail.com to add more information as needed here :)). For the specific case of MSPs we discuss later how this takes place.     \u9a8c\u8bc1\u914d\u7f6e\u5757\uff08\u6216\u8005\u4ea4\u6613\uff09\u914d\u7f6e\u9879\u7684\u7b7e\u540d\u8005\u7684\u6743\u9650\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u540e\u9762\u4f1a\u8ba8\u8bba\u3002   Create a new chain object, and a fresh MSPManager using the MSPManager Setup function and the list of MSPConfig objects created after parsing the Configuration Block   transaction.    \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u5bf9\u8c61\uff0c\u901a\u8fc7MSPManager\u7684setup\u51fd\u6570\u548c\u914d\u7f6e\u5757\u4e2d\u5305\u542b\u7684MSPConfig\u5bf9\u8c61\uff0c\u5237\u65b0MSPManager\u3002   Do the same for the rest of components that configuration items define, and have the new chain object point to the most recent instances of the reconfigured chain\u2019s components.    \u5bf9\u914d\u7f6e\u5b9a\u4e49\u7684\u7ec4\u4ef6\u7684\u5176\u4ed6\u90e8\u5206\uff0c\u505a\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u8ba9\u65b0\u7684\u94fe\u5bf9\u8c61\u6307\u5411\u90a3\u4e9b\u65b0\u914d\u7f6e\u7684\u94fe\u7684\u7ec4\u4ef6\u3002   After ensuring that the creation of each of the new components completes successfully, substitute chain pointers for MSPManager and other components to point to the freshly generated ones. Otherwise abandon the operation.    \u786e\u8ba4\u6240\u6709\u65b0\u7684\u7ec4\u4ef6\u90fd\u521b\u5efa\u6210\u529f\u540e\uff0c\u66ff\u6362\u94fe\u6307\u9488\u6307\u5411\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\uff08\u4e3aMSPManager\u548c\u5176\u4ed6\u7ec4\u4ef6\u521b\u5efa\u7684\u5bf9\u8c61\uff09\u3002\u5426\u5219\u56de\u6eda\u64cd\u4f5c\u3002   Destroy the obsolete chain and linked components.   \u9500\u6bc1\u8fc7\u65f6\u662f\u94fe\u5bf9\u8c61\u548c\u5b83\u5173\u8054\u7684\u7ec4\u4ef6\u3002  More information on how a chain reconfiguration occurs is described in the last section.  \u5173\u4e8e\u5982\u4f55\u91cd\u65b0\u914d\u7f6echain\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5c06\u5728\u4e0b\u4e00\u7ae0\u8282\u8ba8\u8bba\u3002", 
            "title": "2.5.3 Reconfiguration of a channel MSP"
        }, 
        {
            "location": "/msp_acl_zh/#3channel-access-control", 
            "text": "In the genesis block of a channel, the following policies need to be defined:  \u5728channel\u7684\u521b\u59cb\u5757\u4e2d\uff0c\u4e0b\u9762\u7684\u7b56\u7565\u9700\u8981\u5b9a\u4e49\uff1a    The readers of the chain or \u201cchannelReaders\u201d, i.e., the policy to authenticate any request associated to read access to the transactions of a chain. For example this policy could define the identity or groups of identities (MSPPrincipals) that are allowed read-access to the chain; the same policy governs access to ordering service delivery requests and event access requests for that chain.     chain\u7684reader\uff0c\u5373\u5173\u4e8e\u8bbf\u95ee\u94fe\u4ea4\u6613\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7b56\u7565\u53ef\u4ee5\u5b9a\u4e49\u5141\u8bb8\u8bbf\u95eechain\u7684Identity\u6216\u8005Identiy\u7ec4\uff08MSPPrincipals\uff09\uff1b\u8fd9\u4e2a\u7b56\u7565\u4e5f\u4f1a\u7ba1\u7406\u5bf9orderer\u4e2d\u5173\u4e8e\u8fd9\u4e2a\u94fe\u7684\u8bbf\u95ee\u3002    The writers of the chain or \u201cchannelWriters\u201d, i.e., the policy to authenticate any request associated to submitting transaction to a chain. For example, this policy may include the identities or groups of identities (MSPPrincipals) that should be allowed to submit transactions to the chain. In particular this policy governs the set of signatures that need to be acquired in a transaction for the latter to be allowed to be submitted to the chain. The same policy governs permissions of clients to submit proposals to endorsers concerning that chain.     chain\u7684writer\uff0c\u5373\u5173\u4e8e\u63d0\u4ea4\u4ea4\u6613\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7b56\u7565\u53ef\u4ee5\u5305\u542b\u5141\u8bb8\u5411chain\u63d0\u4ea4\u4ea4\u6613\u7684Identity\u6216\u8005Identity\u7ec4\uff08MSPPrincipals\uff09\u3002\u5c24\u5176\u662f\uff0c\u8fd9\u4e2a\u7b56\u7565\u7ba1\u7406\u7b7e\u540d\u7ec4\uff0c\u5411chain\u4e2d\u63d0\u4ea4\u4ea4\u6613\u65f6\u9700\u8981\u7528\u8fd9\u4e9b\u7b7e\u540d\u3002\u540c\u6837\u7684\u7b56\u7565\u7ba1\u7406\u5141\u8bb8\u54ea\u4e9b\u5ba2\u6237\u7aef\u5411\u80cc\u4e66\u8282\u70b9\u63d0\u4ea4proposals \u3002    The admins of the channel or \u201cchannelAdmins\u201d,  i.e., the policy to authenticate any request associated to reconfiguration of specific channel parameters. Admins may determine the identities or groups of identities (MSPPrincipals, and the way to combine them) that have admin access to the chain configuration. Such policies specify the (combination of) MSPPrincipals that should sign chain-specific reconfigurations for the reconfiguration to be applied.     channel\u7684\u7ba1\u7406\u5458\uff0c\u5373\u5173\u4e8e\u91cd\u65b0\u914d\u7f6echannel\u53c2\u6570\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u7ba1\u7406\u5458\u53ef\u4ee5\u51b3\u5b9a\u54ea\u4e9bidentity\u5bf9chain\u7684\u914d\u7f6e\u6709\u7ba1\u7406\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u4e9b\u7b56\u7565\u5b9a\u4e49MSPPrincipals \u7528\u6765\u5bf9\u91cd\u65b0\u914d\u7f6e\u8bf7\u6c42\u8fdb\u884c\u7b7e\u540d\u3002    The chaincodeAdmins of the chain,  i.e., the policy to authenticate any request associated to chaincode deployment within a chain. In the default policy case, chainDeployers would determine the identities or groups of identities (MSPPrincipals, and the way to combine them) that have permission to create or upgrade chaincodes on that chain.     chain\u7684\u7ba1\u7406\u5458\uff0c\u5373\u5bf9\u94fe\u4e2d\u90e8\u7f72\u7684\u94fe\u4ee3\u7801\u76f8\u5173\u7684\u8bf7\u6c42\u7684\u9a8c\u8bc1\u7b56\u7565\u3002\u5bf9\u4e8e\u9ed8\u8ba4\u7b56\u7565\uff0c\u94fe\u90e8\u7f72\u8005\u51b3\u5b9a\u54ea\u4e9bidentity \u6709\u6743\u9650\u5728\u94fe\u4e2d\u521b\u5efa\u548c\u66f4\u65b0\u94fe\u4ee3\u7801\u3002    For the orderer system channel in particular the application needs to specify another policy called \u201cchainCreators\u201d, that would be used to evaluate chain creation requests by the orderers. Again chainCreators policy definition would be based on MSPPrincipals of MSPs that have been defined on the system channel.  \u5bf9\u4e8eorderer\u7684\u7cfb\u7edfchannel\uff0c\u5e94\u7528\u9700\u8981\u6307\u5b9a\u53e6\u5916\u4e00\u79cd\u7b56\u7565\u201cchainCreators\u201d\uff0corderer\u7528\u5b83\u6765\u8bc4\u4f30chain\u521b\u5efa\u8bf7\u6c42\u3002chainCreator\u7b56\u7565\u8981\u57fa\u4e8e\u7cfb\u7edfchannel\u4e2d\u5b9a\u4e49\u7684MSP\u7684 MSPPrincipals\u5b9a\u4e49\u3002  Initially within fabric, we plan to provide default policies, that are defined with the use of the policy framework in coauthdsl package. That is,  \u5728fabric\u7684\u6700\u521d\u7248\u672c\u4e2d\uff0c \u6211\u4eec\u8ba1\u5212\u63d0\u4f9b\u9ed8\u8ba4\u7b56\u7565\uff0c \u7528coauthdsl \u5305\u7684\u7b56\u7565\u6846\u67b6\u5b9a\u4e49\uff1a    For read-permissions we allow that the chain content is readable within a selection of MSP networks that govern the chain. In the genesis block, this is done by:    \u5bf9\u4e8e\u8bfb\u6743\u9650\uff0c\u6211\u4eec\u5141\u8bb8\u7ba1\u7406\u94fe\u7684msp\u4e2d\u7684\u90e8\u5206msp\u53ef\u8bfb\u94fe\u7684\u5185\u5bb9\u3002 \u5728\u521b\u59cb\u5757\u4e2d\u5b9a\u4e49\u3002    Including in the genesis transaction a signed configuration item of type \u201cPolicy\u201d whose value is the actual policy definition. In our example, we would use an OR (SignaturePolicy) type of policy of two MSP principals, one defining the members of org2, and one defining the members of org3. Let this configuration item be referred using key channelReadersPolicy. Its content is schematically described  as follows:    \u5728\u521b\u59cb\u4ea4\u6613\u4e2d\uff0c\u201cpolicy\u201d\u914d\u7f6e\u9879\u7684\u503c\u5c31\u662f\u4e00\u4e2a\u7b56\u7565\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e24\u4e2aMSP \u3002principal\u7684OR\uff08\u7b7e\u540d\u7b56\u7565\uff09\u7c7b\u578b\u4f5c\u4e3a\u7b56\u7565\uff0c\u4e00\u4e2a\u662forg2\u7684\u6210\u5458\uff0c\u4e00\u4e2a\u662forg3\u7684\u6210\u5458\u3002    {\u201cclassification : bymsprole , principal :{ mspid : org2 , msproletype :  member }}\n               OR \n   {\u201cclassification : bymsprole , principal :{ mspid : org3 , msproletype :  member }}    Including a (signed) configuration item of type \u201cChain\u201d, referenced by identifier \u201cchannelReaders\u201d and takes as value the policy identifier channelReaderPolicy. Table 2 shows an example of how read policy of a chain/channel is defined in a genesis block.    Identifier \u7684\u201cchannelReaders  \u5f15\u7528 \u914d\u7f6e\u9879\u201dChain\u201c \u4f5c\u4e3achannel\u7684reader\u7b56\u7565\u3002\u88682\u662f\u521b\u59cb\u5757\u4e2d\u94fe/chennal\u7684\u8bfb\u7b56\u7565\u5b9a\u4e49    For write permissions we allow that the members of a selection of MSP networks that govern the chain are allowed to submit transactions to the chain. As in the case to channelReaders, this is reflected in the chain genesis transaction through the use of two configuration items:     \u5bf9\u4e8e\u5199\u6743\u9650\uff0c\u6211\u4eec\u5141\u8bb8\u7ba1\u7406chain\u7684MSP\u4e2d\u7684\u90e8\u5206\u6210\u5458\u5411\u94fe\u4e2d\u63d0\u4ea4\u4ea4\u6613\u3002\u8ddfReader\u4e00\u6837\uff0c \u5b83\u4e5f\u901a\u8fc7\u5728\u521b\u59cb\u4ea4\u6613\u4e2d\u7684\u4e24\u4e2a\u914d\u7f6e\u9879 \u8fdb\u884c\u914d\u7f6e\u3002    A configuration item of type \u201cPolicy\u201d whose value is the actual policy definition. In our example, we would define this policy as an OR (SignaturePolicy) type of policy of two MSP principals, one defining the members of org2, and one defining the members of org3. Let this configuration item be referred using key channelWritersPolicy. Its content is schematically described  as follows:    \u5728\u521b\u59cb\u4ea4\u6613\u4e2d\uff0c\u201cpolicy\u201d\u914d\u7f6e\u9879\u7684\u503c\u5c31\u662f\u4e00\u4e2a\u7b56\u7565\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e24\u4e2aMSP \u3002principal\u7684OR\uff08\u7b7e\u540d\u7b56\u7565\uff09\u7c7b\u578b\u4f5c\u4e3a\u7b56\u7565\uff0c\u4e00\u4e2a\u662forg2\u7684\u6210\u5458\uff0c\u4e00\u4e2a\u662forg3\u7684\u6210\u5458\u3002\u8fd9\u4e9b\u914d\u7f6e\u9879\u7528\u201cchannelWritersPolicy\u201d\u4f5c\u4e3a\u952e\u6765\u5b9a\u4e49\u3002\u5185\u5bb9\u5982\u4e0b\uff1a    {\u201cclassification : bymsprole , principal :{ mspid : org2 , msproletype :  member }}\n                                  OR\n   {\u201cclassification : bymsprole , principal :{ mspid : org3 , msproletype :  member }}    Including a (signed) configuration item of type \u201cChain\u201d, referenced by identifier \u201cchannelWriters\u201d and takes as value the policy identifier channelWritersPolicy. Table 2 shows an example of how write policy of a chain/channel is defined in a genesis block.    Identifier \u7684\u201cchannelWriters  \u5f15\u7528 \u914d\u7f6e\u9879\u201dChain\u201c \u4f5c\u4e3achannel\u7684Writer\u7b56\u7565\u3002\u88682\u662f\u521b\u59cb\u5757\u4e2d\u94fe/chennal\u7684\u5199\u7b56\u7565\u5b9a\u4e49    As admin policies we allow that the chain is re-configurable as long as reconfiguration requests on chain items are signed by the admins of all MSPs (via an external tool) that govern that chain. This is expressed in the genesis block in the same as the two previously described policies and using the following as content of the policy:    \u4f5c\u4e3a\u7ba1\u7406\u7b56\u7565\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u914d\u7f6e\u8bf7\u6c42\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u79cd\u8bf7\u6c42\u5fc5\u987b\u5305\u542b\u7ba1\u7406\u6b64chain\u7684\u6240\u6709MSP\u7684\u7b7e\u540d\u3002\u8fd9\u8ddf\u524d\u4e24\u4e2a\u7b56\u7565\u4e00\u6837\u5728\u521b\u59cb\u5757\u4e2d\u63cf\u8ff0\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a    \n   {\u201cclassification : bymsprole , principal :{ mspid : org2 , msproletype :  admin }} \n                                              AND\n   {\u201cclassification : bymsprole , principal :{ mspid : org3 , msproletype :  admin }}  For the purpose of this document we will refer to the related policy configuration item and chain parameter by channelAdminsPolicy, and channelAdmins respectively as reflected in Table 3.  \u5728\u672c\u6587\u6863\u4e2d\uff0c\u76f8\u5173\u7684\u914d\u7f6e\u7b56\u7565\u548cchain\u53c2\u6570\u4f1a\u88abchannelAdminsPolicy \u548c channelAdmins\u5f15\u7528\uff0c\u53ef\u53c2\u8003\u88683.  As chaincodeAdmins policy of a chain we use the same methodology as the one listed before.\nDefinition of these policies is done through cauthdsl framework of fabric codebase that leverage MSPPrincipals, and satisfiesPrincipal(id, principal) function of MSP interface where principal denotes the  MSPPrincipal of MSP\u2019s network,, and id is an identity.  chain\u7684\u94fe\u4ee3\u7801\u7ba1\u7406\u7b56\u7565\uff0c\u6211\u4eec\u4f7f\u7528\u8ddf\u4e0a\u9762\u76f8\u540c\u7684\u673a\u5236\u3002\u8fd9\u4e9b\u7b56\u7565\u4e5f\u901a\u8fc7cauthdsl\u6846\u67b6\u5b9a\u4e49\uff0c\u4f1a\u7528\u5230MSP\u63a5\u53e3\u7684MSPPrincipals \u548c satisfiesPrincipal\uff08id\uff0cprincipal\uff09\u51fd\u6570\u3002principal\u662fMSP\u7f51\u7edc\u7684MSPPrincipal\uff0c id\u662f\u4e00\u4e2aIdentity\u3002  For chain creation policies, that concern solely the system channel, the orderer defines chain creation policies within its orderer system chain. These policies may be arbitrary, and restrict the default policy further.  For instance, the chain creation policy might require that a minimum of 4 parties are involved in a new chain, or that one particular party be involved in all new chains etc.  The characteristics of this policy are negotiated with the orderer admins when an ordering service is configured to accept chain creation requests from a group of MSPs. The default policy in this case would require the signature of all application MSPs involved in the new chain.  \u5bf9\u4e8echain\u521b\u5efa\u7b56\u7565\uff0c\u4e0e\u7cfb\u7edfchannel\u5f3a\u76f8\u5173\uff0corderer\u5728\u5b83\u7684\u7cfb\u7edfchain\u4e2d\u5b9a\u4e49chain\u7684\u521b\u5efa\u7b56\u7565\u3002\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u968f\u610f\u5b9a\u4e49\uff0c\u672a\u6765\u4f1a\u53d7\u9650\u4e8e\u9ed8\u8ba4\u7b56\u7565\u3002\u4f8b\u5982\uff0cchain\u521b\u5efa\u7b56\u7565\u8981\u6c42chain\u6700\u5c11\u67094\u4e2a\u53c2\u4e0e\u65b9\uff0c\u6216\u8005\u6bcf\u4e2achain\u4e2d\u90fd\u8981\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u53c2\u4e0e\u65b9\u3002\u5f53orderer\u914d\u7f6e\u4e3a\u63a5\u53d7\u6765\u81ea\u4e00\u7ec4MSP\u7684\u521b\u5efachain\u8bf7\u6c42\u65f6\uff0c\u8fd9\u4e2a\u7b56\u7565\u5c31\u662forderer\u7684\u7ba1\u7406\u5458\u534f\u5546\u7684\u7ed3\u679c\u3002\u9ed8\u8ba4\u7b56\u7565\u4e2d\u521b\u5efachain\u9700\u8981\u5176\u4e2d\u6240\u6709\u7684MSP\u7684\u7b7e\u540d\u3002  An example of the structure of orderer system channel genesis is depicted in Table 2.     \u88682\u63cf\u8ff0\u4e86\u4e00\u4e2aorderer\u7cfb\u7edfchannel\u4f8b\u5b50\u7684\u7ed3\u6784\u3002", 
            "title": "3.Channel Access Control"
        }, 
        {
            "location": "/msp_acl_zh/#4-using-the-default-msp-best-practices", 
            "text": "In this section we elaborate on best practices for membership service providers configuration for v1 in commonly met scenarios.  \u672c\u8282\u8be6\u7ec6\u63cf\u8ff0\u5728\u901a\u7528\u573a\u666f\u4e0b\u4f7f\u7528V1\u7684\u9ed8\u8ba4MSP\u914d\u7f6e\u3002", 
            "title": "4. Using the default MSP: Best Practices"
        }, 
        {
            "location": "/msp_acl_zh/#1-mapping-between-organizationscorporations-and-membership-service-providers", 
            "text": "\u7ec4\u7ec7\u8ddfMSP\u7684\u6620\u5c04\u5173\u7cfb  We recommend that there is a one-to-one mapping between organizations and MSPs. If a different mapping ration is chosen the following needs to be to considered:  \u6211\u4eec\u63a8\u8350\u7ec4\u7ec7\u548cMSP\u4e00\u4e00\u5bf9\u5e94\u3002\u5982\u679c\u9009\u62e9\u4e86\u5176\u4ed6\u6620\u5c04\uff0c\u4e0b\u9762\u8fd9\u4e9b\u9700\u8981\u8003\u8651\uff1a    One organization employing various MSPs. This corresponds to the case of an organization including a variety of divisions each represented by its membership service provider, either for management independence reasons, or for privacy reasons. One needs to know in this case that peers can only be owned by a single MSP, and will not recognize peers with identities from other MSPs as peers of the same organization. Implications of this is that peers may share organization-scoped data with a set of peers that are members of the same subdivision, and not with the full set of organizations.     \u4e00\u4e2a\u7ec4\u7ec7\u5b9a\u4e49\u591a\u4e2aMSPs\u3002\u5b83\u6ee1\u8db3\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u5305\u542b\u591a\u4e2a\u90e8\u95e8\uff0c\u7531\u4e8e\u7ba1\u7406\u72ec\u7acb\u6027\u6216\u8005\u9690\u79c1\u7684\u539f\u56e0\uff0c\u6bcf\u4e2a\u90e8\u95e8\u7531\u81ea\u5df1\u7684MSP\u3002\u6211\u4eec\u9700\u8981\u6e05\u695a\uff0c\u4e00\u4e2apeer\u53ea\u80fd\u5f52\u5c5e\u4e8e\u4e00\u4e2aMSP\uff0c\u5e76\u4e14peer\u4e0d\u4f1a\u628a\u5176\u4ed6MSP\u4e0b\u7684peer\u770b\u4f5c\u540c\u4e00\u4e2a\u7ec4\u7ec7\u3002\u8fd9\u610f\u5473\u7740peer\u53ea\u4f1a\u8ddf\u672c\u90e8\u95e8\u7684peer\u5206\u4eab\u4fe1\u606f\uff0c\u800c\u4e0d\u4f1a\u8ddf\u540c\u4e00\u7ec4\u7ec7\u4e2d\u7684\u5176\u4ed6peer\u5206\u4eab\u3002    Multiple organizations using a single  MSP. This corresponds to a case of an organization consortium whose membership architecture of individual organizations is compatible. One needs to know here that peers would propagate organization-scoped messages to the peers that have identity under the same MSP regardless of whether they belong to the same actual organization. This is a limitation of granularity of MSP definition, and/or of peer\u2019s configuration.     \u591a\u4e2a\u7ec4\u7ec7\u4f7f\u7528\u4e00\u4e2aMSP\u3002\u5b83\u6ee1\u8db3\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u8054\u76df\uff0c\u5404\u4e2a\u7ec4\u7ec7\u7684\u6210\u5458\u76f8\u4e92\u517c\u5bb9\u3002peer\u4f1a\u8ddf\u540c\u4e00MSP\u4e0b\u7684\u5176\u4ed6peer\u5171\u4eab\u4fe1\u606f\uff0c\u800c\u4e0d\u7ba1\u4ed6\u4eec\u5b9e\u9645\u4e0a\u662f\u5426\u4e3a\u540c\u4e00\u7ec4\u7ec7\u3002\u8fd9\u662fMSP\u6216\u8005peer\u5b9a\u4e49\u7c92\u5ea6\u7684\u9650\u5236\u3002    In future versions of fabric this can change as we move towards (i) an identity channel that contains all membership related information of the network, (ii) peer notion of \u201ctrust-zone\u201d being configurable, a peer\u2019s administrator specifying at peer setup time whose MSP members should be treated by peers as authorized to receive \u201corganization\u201d-scoped messages.  Fabric\u672a\u6765\u7684\u7248\u672c\u4e2d\uff0c\u4f1a\u5411\u4e24\u4e2a\u65b9\u5411\u8f6c\u53d8\uff0c\uff081\uff09\u4e00\u4e2achannel\u4e2d\u5305\u542b\u7f51\u7edc\u4e2d\u6240\u6709\u6210\u5458\u7684\u76f8\u5173\u4fe1\u606f\u3002\uff082\uff09\uff0c\u589e\u52a0peer\u4fe1\u4efb\u57df\u7684\u6982\u5ff5\uff0cpeer\u7684\u7ba1\u7406\u5458\u53ef\u4ee5\u5728peer\u542f\u52a8\u7684\u65f6\u5019\u6307\u5b9a\u54ea\u4e9bMSP\u7684\u6210\u5458\u53ef\u4fe1\uff0c\u5e76\u5171\u4eab\u201c\u7ec4\u7ec7\u8303\u56f4\u201d\u7684\u6d88\u606f\u3002", 
            "title": "1. Mapping between organizations/corporations and membership service providers"
        }, 
        {
            "location": "/msp_acl_zh/#2-on-organization-has-different-divisions-say-organizational-units-to-which-it-wants-to-grant-access-to-different-channels", 
            "text": "\u7ec4\u7ec7\u6709\u4e0d\u540c\u7684\u90e8\u95e8\uff0c\u5e0c\u671b\u4e0d\u540c\u90e8\u95e8\u8bbf\u95ee\u4e0d\u540c\u7684channel\u3002  Two ways to deal with this:  \u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a    1 Define one MSP to accommodate membership for all organization\u2019s members. Configuration of that MSP would consist of a list of root CAs, intermediate CAs and admin CAs, and membership identities would include the organizational unit (OU) the member belongs to. Policies can then be defined to capture members of a specific OU, and these policies can be read/write policies of a channel or even chaincode administrators. Limitation of this approach, is that gossip peers would still consider peers under their local MPS as members of the same organization, and therefore share state / ledger related information with these peers even though they belong to an OU that is forbidden access to a certain channel.    \u5b9a\u4e49\u4e00\u4e2aMSP\u7ba1\u7406\u7ec4\u7ec7\u7684\u6240\u6709\u6210\u5458\u3002MSP\u914d\u7f6e\u591a\u4e2aroot CA\uff0c \u4e2d\u95f4CA \u548c \u7ba1\u7406CA\uff0c\u6210\u5458\u7684\u8eab\u4efd\u4e2d\u5305\u542b\u6240\u5c5e\u7ec4\u7ec7\uff08OU\uff09\u3002\u5b9a\u4e49\u7b56\u7565\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u6210\u5458\u7684OU\uff0c\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u662fchannel\u7684\u8bfb\u5199\u7b56\u7565\uff0c\u4e5f\u53ef\u4ee5\u662f\u94fe\u4ee3\u7801\u7684\u7ba1\u7406\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u9650\u5236\uff0cpeer\u4f1a\u8ba4\u4e3a\u540c\u4e00MSP\u4e0b\u7684peer\u5c5e\u4e8e\u540c\u4e00\u7ec4\u7ec7\uff0c\u5e76\u4e14\u5171\u4eab\u72b6\u6001/\u8d26\u672c\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u4ed6\u4eec\u5c5e\u4e8e\u4e0d\u540c\u7684OU\uff0c\u8fd9\u4e9bOU\u7981\u6b62\u8bbf\u95ee\u7279\u5b9a\u7684channel\u3002    2 Defining one MSP to represent each division, i.e., specify for each division a set of certificates, for root CAs, intermediate CAs, and admin Certs, such that there is no common certification path across MSPs. Here the disadvantage is the management of more than one MSPs instead of one, but this circumvents the issue present in approach (1).    \u6bcf\u4e2a\u5206\u652f\u673a\u6784\u5b9a\u4e491\u4e2aMSP\uff0c\u6bcf\u4e2a\u5206\u652f\u673a\u6784\u90fd\u6709\u81ea\u5df1\u7684root CA\uff0c \u4e2d\u95f4CA \u548c\u7ba1\u7406CA\u3002\u8fd9\u6837MSP\u4e4b\u95f4\u6ca1\u6709\u516c\u5171\u8ba4\u8bc1\u8def\u5f84\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u7f3a\u70b9\u662f\u8981\u7ba1\u7406\u591a\u4e2aMSP\u800c\u4e0d\u662f1\u4e2a\uff0c\u4f46\u662f\u5b83\u89e3\u51b3\u4e86\u65b9\u6cd51\u4e2d\u7684\u95ee\u9898\u3002   3 (available in the future) Define one MSP for each division by leveraging an OU extension of the MSP configuration.  \uff08\u672a\u6765\u53ef\u7528\uff09\u5229\u7528MSP\u914d\u7f6e\u7684OU\u6269\u5c55\u5c5e\u6027\u4e3a\u6bcf\u4e00\u4e2a\u5206\u652f\u673a\u6784\u5b9a\u4e49\u4e00\u4e2aMSP\u3002", 
            "title": "2. On organization has different divisions (say organizational units), to which it wants to grant access to different channels."
        }, 
        {
            "location": "/msp_acl_zh/#3-separating-clients-from-peers-of-the-same-organization", 
            "text": "\u5728\u540c\u4e00\u7ec4\u7ec7\u4e2d\u5206\u79bb\u5ba2\u6237\u7aef\u548cpeer  In many cases it is required that the \u201ctype\u201d of an identity is retrievable from the identity itself,e.g., it may be needed that endorsements are guaranteed to have derived by peers, and not clients or nodes acting solely as orderers.   \u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u4eceIdentity\u672c\u8eab\u83b7\u53d6Identity\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c\u80cc\u4e66\u53ea\u80fd\u7531peer\u505a\uff0c\u800c\u4e0d\u662f\u5ba2\u6237\u7aef\u6216\u8005orderer\u3002  There is limited support for such requirements in v1.0. That is to allow for this separation currently, we would be required to create a separate intermediate CA, one for clients and one for peers, and configure two different MSPs one for clients, and one for peers. Channels this organization should be accessing, would need to include both MSPs, while endorsement policies will leveraging only the MSP that refers to the peers. This would ultimately result into the organization being mapped to two membership service provider instances, and would have certain consequences into the way peers and clients interact:  \u5728V1.0\u4e2d\uff0c\u5bf9\u8fd9\u4e2d\u9700\u6c42\u53ea\u6709\u5f88\u6709\u9650\u7684\u652f\u6301\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u79cd\u5206\u79bb\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u72ec\u7acb\u7684\u4e2d\u95f4CA\uff0c\u4e00\u4e2a\u7ed9\u5ba2\u6237\u7aef\u7528\uff0c\u4e00\u4e2a\u7ed9peer\u7528\u3002\u5e76\u4e14\u914d\u7f6e\u4e24\u4e2aMSP\uff0c\u4e00\u4e2a\u7ed9\u5ba2\u6237\u7aef\uff0c\u4e00\u4e2a\u7ed9peer\u3002\u7ec4\u7ec7\u9700\u8981\u8bbf\u95ee\u7684channel\uff0c\u9700\u8981\u5305\u542b\u8fd9\u4e24\u4e2aMSP\uff0c\u800c\u80cc\u4e66\u7b56\u7565\u53ea\u5229\u7528peer\u5bf9\u5e94\u7684MSP\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u7ec4\u7ec7\u6620\u5c042\u4e2aMSP\uff0c\u5e76\u4e14\u5bf9peer\u548c\u5ba2\u6237\u7aef\u7684\u901a\u4fe1\u65b9\u5f0f\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\u3002    Gossip would not be drastically impacted as all peers of the same organization would still belong to one MSP    Gossip\u5e76\u4e0d\u53d7\u663e\u8457\u5f71\u54cd\uff0c\u56e0\u4e3a\u6240\u6709peer \u4ecd\u7136\u5728\u540c\u4e00\u4e2aMSP\u3002    Peers allow the restrict the execution of certain system chaincodes to MSP-principals, e.g., local MSP based policies. For example, peers would only execute \u201cJoinChannel\u201d request if the request is signed by the admin of their local MSP who can only be a client (end-user should be sitting at the origin of that request). We can remedy this, if we exclude administrators of peer MSP to have a dual role.    Peer\u5141\u8bb8\u9650\u5b9a\u67d0\u4e9b\u7cfb\u7edf\u94fe\u4ee3\u7801\u7684\u6267\u884c\u53ea\u9488\u5bf9MSP-principals\u3002\u4f8b\u5982\uff0c \u57fa\u4e8e\u672c\u5730MSP\u7684\u7b56\u7565\u3002\u4e3e\u4f8b\uff0c\u5982\u679c\u8bf7\u6c42\u6709\u672c\u5730MSP\u7684\u7ba1\u7406\u5458\u7684\u7b7e\u540d\uff0c\u800c\u4ed6\u53ea\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0cpeer\u53ea\u6267\u884c\u201cjoinChannel\u201d\u8bf7\u6c42\u3002    At the first phase peers would authorize event registration requests based on membership of request originator within their local MSP. Clearly if the originator of the request belongs to a different MSP, e.g., a client MSP, the peer would reject the request. This is to be changed soon, as registration requests are soon to be served using the check of whether identities are part of the readers of all the channels a peer has joined.    \u5728\u7b2c\u4e00\u9636\u6bb5\uff0cpeers\u53ea\u5141\u8bb8\u540c\u4e00\u4e2aMSP\u4e0b\u7684\u53d1\u8d77\u8005\u7684\u4e8b\u4ef6\u6ce8\u518c\u8bf7\u6c42\u3002\u663e\u7136\u5982\u679c\u8bf7\u6c42\u7684\u53d1\u8d77\u8005\u5c5e\u4e8e\u4e0d\u540c\u7684MSP\uff0c\u6bd4\u5982\uff0c\u5ba2\u6237\u7aef\u7684MSP\uff0cpeer\u5c06\u62d2\u7edd\u8fd9\u4e2a\u8bf7\u6c42\u3002\u8fd9\u4e2a\u5f88\u5feb\u4f1a\u6539\u53d8\uff0cpeer\u4f1a\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5982\u679c\u53d1\u8d77\u8005\u662fpeer\u52a0\u5165\u7684channel\u7684reader\uff0cpeer\u4e00\u6837\u4f1a\u63a5\u53d7\u8fd9\u4e2a\u8bf7\u6c42\u3002    In the (near) future policy language is to be extended to support definition of organizational unit based policies. E.g., it would be possible to restrict endorsement policies to owners of identities that are members of a certain organizational unit of an MSP. This, would allow for another way of separating clients a peers of a given organization, e.g., by allocating identities of each type to  different organizational unit.   \u672a\u6765\uff0c\u5c06\u4f1a\u5bf9\u7b56\u7565\u8bed\u8a00\u8fdb\u884c\u6269\u5c55\uff0c\u6765\u652f\u6301\u57fa\u4e8e\u7ec4\u7ec7\u5355\u5143\u7684\u7b56\u7565\u5b9a\u4e49\u3002\u5982\uff0c\u53ef\u4ee5\u9650\u5b9a\u80cc\u4e66\u7b56\u7565\u4e3aMSP\u4e2d\u7684\u4e00\u4e2a\u7279\u5b9a\u7684\u7ec4\u7ec7\u5355\u5143\u5185\u7684\u6210\u5458\u3002\u8fd9\u5c06\u4e3a\u5206\u79bb\u5ba2\u6237\u7aef\u548cpeer\u63d0\u4f9b\u65b0\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5982\uff0c\u5c06\u4e0d\u540c\u7684\u8eab\u4efd\u7c7b\u578b\u5206\u914d\u7ed9\u4e0d\u540c\u7ec4\u7ec7\u5355\u5143\u3002", 
            "title": "3. Separating clients from peers of the same organization."
        }, 
        {
            "location": "/msp_acl_zh/#5-example", 
            "text": "Note: This section needs to be moved to a different document and be updated with the most recent re-configuration framework.\n\u6ce8\uff1a\u8fd9\u90e8\u5206\u9700\u8981\u8fc1\u79fb\u5230\u5176\u4ed6\u6587\u6863\u4e2d\uff0c\u8ddf\u6700\u65b0\u7684\u914d\u7f6e\u6846\u67b6\u6587\u6863\u4e00\u8d77\u66f4\u65b0\u3002    In this section we give an end-to-end example of how peers/orderers and chains MSPs are setup and what is the configuration information each of them uses to bootstrap its operation.  \u5728\u8fd9\u4e2a\u4e00\u8282\uff0c\u6211\u4eec\u7ed9\u4e00\u4e2ae2e\u7684\u4f8b\u5b50\uff0c\u5c55\u793apeer orderer MSP\u5982\u4f55\u542f\u52a8\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u914d\u7f6e\u4fe1\u606f\u3002  For the purpose of this example we assume that four organizations Org1, Org2, Org3, and Org4 have decided to deploy a Blockchain network using an ordering service that would consist of orderer nodes owned by Org1, and Org2. Notice that Org1 is only to contribute orderers in this network. Thus, for the purpose of our example:  \u6211\u4eec\u5047\u8bbe\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u67094\u4e2a\u7ec4\u7ec7\uff0cOrg1,Org2,Org3,Org4\u3002Org1\u548cOrg2\u914d\u7f6eorderer\u670d\u52a1\u3002\u5e76\u4e14Org1\u53ea\u63d0\u4f9borderer\u670d\u52a1\u3002\n- Org1: orderers\n- Org2: clients, peers, orderers\n- Org3: clients, peers\n- Org4: clients, peers  Step 1: The applications of each organization of the peer network (Org2, Org3, Org4) decide on the form of the Blockchain network genesis configuration from the application perspective, i.e., they decide on   \u6b65\u9aa41\uff1apeer\u7f51\u7edc\u7684\u6bcf\u4e2a\u7ec4\u7ec7\uff08Org2\uff0cOrg3\uff0cOrg4\uff09\u7684\u5e94\u7528\u51b3\u5b9a\u533a\u5757\u94fe\u7f51\u7edc\u7684\u521d\u59cb\u914d\u7f6e\u3002\u5982\uff1a\n- the MSP that represents each organization, each MSP\u2019s configuration, and each MSP identifier throughout the chain.\n- \u6bcf\u4e2a\u7ec4\u7ec7\u7684MSP\uff0cMSP\u7684\u914d\u7f6e\uff0c \u6bcf\u4e2aMSP\u5728\u94fe\u4e2d\u7684\u8eab\u4efd\u3002\n- the list of admins of the chain on behalf of the application \n- \u94fe\u7684\u7ba1\u7406\u5458\u5217\u8868  In particular, the applications of the three organizations, Org2, Org3, Org4, agree on the list of configuration components for each MSP of theirs, depicted in Figure 10 (in JSON for presentation simplicity).  \u5c24\u5176\u662f\uff0cOrg2\uff0cOrg3\uff0cOrg4\u7684\u5e94\u7528\u8981\u5bf9\u5404\u81eaMSP\u7684\u914d\u7f6e\u8fbe\u6210\u4e00\u81f4\u3002\u5982\u56fe10\u4e2d\u63cf\u8ff0\u7684\uff08\u4e3a\u4e86\u7b80\u5355\uff0c\u6211\u4eec\u7528json\u683c\u5f0f\u63cf\u8ff0\uff09  \n      msplist :[\n      {\n          Type :0,\n          MSPConfig :{\n            Name : org2 ,\n            RootCerts :[ org2-cert-bytes-1 , org2-cert-bytes-2 , org2-cert-bytes-3 ],\n            Admins :[ org2-admin-cert-bytes ]\n         }\n       },\n       {\n          Type :0,\n          MSPConfig :{\n            Name : org3 ,\n            RootCerts :[ org3-cert-bytes-1 , org3-cert-bytes-2 , org3-cert-bytes-3 ],\n            Admins :[ org3-admin-cert-bytes ]\n         }\n       },\n       {\n          Type :0,\n          MSPConfig :{\n            Name : org4 ,\n            RootCerts :[ org4-cert-bytes-1 , org4-cert-bytes-2 , org4-cert-bytes-3 ],\n            Admins :[ org4-admin-cert-bytes ]\n         }\n\n       }\n     ]  Figure 10. Example of list of MSPs included in the Blockchain network description on application behalf in json. We emphasize that though json is not used in practice, we present this information here in json for simplicity of  presentation of the configuration content.   \u56fe10\uff1a\u7528json\u683c\u5f0f\u63cf\u8ff0\u7684\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u7684msp\u5217\u8868\uff0c\u6211\u4eec\u5f3a\u8c03\u5b9e\u9645\u4e2d\u4e0d\u662f\u7528json\u683c\u5f0f\u63cf\u8ff0\u7684\uff0c\u6211\u4eec\u8fd9\u91cc\u7528json\u683c\u5f0f\u53ea\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u5448\u73b0\u5176\u5185\u5bb9\u3002  Notice that for simplicity, the identifier of the MSP associated to organization Org1 (2, 3) has been chosen to be \u201corg1\u201d (org2, org3, respectively). This information is submitted to the orderers (agnostic to whether it is orderer administrator or kafka cluster admin or some system channel) by the application. \n\u6ce8\u610f\uff0c\u4e3a\u4e86\u7b80\u5355\uff0c\u7ec4\u7ec7\u7684\u6807\u8bc6\u7b26\u6211\u4eec\u9009\u201corg1\u201d\uff08org2\uff0corg3\uff09\uff0c\u5e94\u7528\u4f1a\u5c06\u8fd9\u4e9b\u4fe1\u606f\u63d0\u4ea4\u7ed9orderer\uff08\u662f\u5426\u662forderer\u7ba1\u7406\u5458\u6216\u8005kafka\u96c6\u7fa4\u7ba1\u7406\u5458\u6216\u8005\u7cfb\u7edfchannel\u90fd\u65e0\u5173\u7d27\u8981\uff09\u3002  Disclaimer: We emphasize that for simplicity of presentation in the previous figure we ignore the organization of MSP configuration in configuration items inside a genesis block. It is assumed that each MSP\u2019s configuration data, is marshalled into a separate ConfigurationItem that is signed by identities such that the defined modification policy is satisfied. (Specifically for genesis blocks we can simply ignore the validation of the signatures in ConfigurationItems against the modification policies of these items). As we will see later, checking the signature against established modification policies is imperative in re-configuration blocks that have the same structure as genesis blocks.    \u5426\u8ba4\u58f0\u660e\uff1a\u6211\u4eec\u5f3a\u8c03\u4e3a\u4e86\u7b80\u5355\u63cf\u8ff0\uff0c\u6211\u4eec\u5728\u521b\u59cb\u5757\u4e2d\u5ffd\u7565\u4e86MSP\u914d\u7f6e\u4e2d\u7684\u7ec4\u7ec7\u4fe1\u606f\uff0c\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2aMSP\u7684\u914d\u7f6e\u6570\u636e\uff0c\u53ef\u4ee5\u6392\u5e8f\u4e3a\u72ec\u7acb\u7684\u914d\u7f6e\u9879\uff0c\u8fd9\u4e9b\u914d\u7f6e\u9879\u901a\u8fc7Identity\u7b7e\u540d\uff0c\u6765\u6ee1\u8db3\u5b9a\u4e49\u53d8\u66f4\u7b56\u7565\uff08\u5bf9\u521b\u59cb\u5757\uff0c\u6211\u4eec\u5ffd\u7565\u4e0e\u53d8\u66f4\u7b56\u7565\u4e0d\u4e00\u81f4\u7684\u914d\u7f6e\u9879\u7684\u7b7e\u540d\u9a8c\u8bc1\uff09\u3002\u540e\u9762\u4f1a\u770b\u5230\uff0c\u5728\u91cd\u914d\u7f6e\u5757\u4e2d\uff08\u4e0e\u521b\u59cb\u5757\u7ed3\u6784\u4e00\u81f4\uff09\uff0c\u5219\u5fc5\u987b\u68c0\u67e5\u4e0e\u5df2\u5efa\u7acb\u7684\u53d8\u66f4\u7b56\u7565\u4e0d\u4e00\u81f4\u7684\u7b7e\u540d\u3002  Step 2: The ordering service administrator configures the orderers. This configuration consists of two sets of data:  \u6b65\u9aa42\uff1aorderer\u7684\u7ba1\u7406\u5458\u914d\u7f6e\uff0c\u8fd9\u4e2a\u914d\u7f6e\u5305\u62ec\u4e24\u7ec4\u6570\u636e\uff1a\n1. Local configuration of each orderer that includes setup of the crypto service provider, key-manager, and the node\u2019s SignerMSP, and any consensus related local information (e.g., where certain files are to be stored, etc).This is depicted in Figure 11.  The configured MSP is only possible to be updated manually by that orderer\u2019s administrator, and can naturally vary from orderer to orderer. For simplicity and for V.1, to setup the local MSP, and assuming our default MSP type the administrator is requested to copy to dedicated location in orderer\u2019s file system four sets of files:\n- \u6bcf\u4e2aorderer\u7684\u672c\u5730\u914d\u7f6e\uff0c\u5305\u62ec\u52a0\u5bc6\u670d\u52a1\uff0c\u79c1\u94a5\u7ba1\u7406\uff0c\u8282\u70b9\u7684\u7b7e\u540dMSP\uff0c\u5171\u8bc6\u76f8\u5173\u7684\u4fe1\u606f\uff08\u5b58\u50a8\u7684\u6587\u4ef6\u7b49\uff09\u5728\u56fe11\u4e2d\u63cf\u8ff0\u3002MSP\u7684\u914d\u7f6e\u53ea\u80fd\u7531orderer\u7684\u7ba1\u7406\u5458\u624b\u52a8\u66f4\u65b0\uff0c\u5e76\u4e14\u5404\u4e2aorderer\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u4e3a\u4e86\u7b80\u5316\uff0c\u5728V1\u4e2d\uff0c\u542f\u52a8\u672c\u5730MSP\uff0c\u5047\u8bbe\u9ed8\u8ba4\u7684MSP\u7c7b\u578b\u3002\u7ba1\u7406\u5458\u9700\u8981\u62f7\u8d1d4\u7ec4\u6587\u4ef6\u5230orderer\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\n  - cacerts: PEM files containing the root authority certificates of the MSP\n  - cacerts: PEM\u6587\u4ef6\uff0c\u662fMSP\u7684\u6839\u8bc1\u4e66\n  - admincerts: PEM files containing the administrators\u2019 certificates of this MSP\n  - admincerts\uff1aPEM\u6587\u4ef6\uff0c MSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\u3002\n  - keystore: PEM files containing the private signing key of the orderer\n  - keystore\uff1aPEM\u6587\u4ef6\uff0corderer\u7684\u79c1\u94a5\u6587\u4ef6\u3002\n  - signcerts: PEM public cert files corresponding to the singing identity of the orderer\n  - signcerts\uff1aPEM\u6587\u4ef6\uff0c\u8ddf\u7b7e\u540d\u79c1\u94a5\u5bf9\u5e94\u7684\u7b7e\u540d\u8bc1\u4e66\u3002\nDisclaimer: Currently SignerMSP is not used for Signature verification, and hence. updating the cacerts or admincerts of this MSP is not of crucial importance. However this is to be revisited as gossip communication may require frequent updates of these \nvalues.\n\u5426\u8ba4\u58f0\u660e\uff1a\u5f53\u524d\u7b7e\u540dMSP\u4e0d\u7528\u4e8e\u7b7e\u540d\u9a8c\u8bc1\uff0c\u56e0\u6b64\uff0c\u66f4\u65b0MSP\u7684cacerts\u548cadmincerts\u5e76\u4e0d\u5341\u5206\u91cd\u8981\u3002\u7136\u800c\uff0c\u5728gossip\u901a\u4fe1\u4e2d\u7528\u5230\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u7ecf\u5e38\u66f4\u65b0\u4ed6\u4eec\u7684\u503c\u3002    Configuration parameters that are to be in common by all orderers participating in the system, and that is imperative that are consistently updated across all orderers of the ordering service. These parameters are organized in a structure that would constitute the system / orderer channel genesis configuration, that is depicted in Figure 12 in json format, and include the following parameters:    \u914d\u7f6e\u7cfb\u7edf\u4e2d\u6240\u6709orderer\u7684\u516c\u5171\u53c2\u6570\uff0c\u800c\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u4e9b\u4fe1\u606f\u5728\u5404\u4e2aorderer\u95f4\u540c\u6b65\u66f4\u65b0\u3002\u8fd9\u4e9b\u53c2\u6570\u5305\u542b\u5728orderer\u7684 channel\u7684\u521d\u59cb\u914d\u7f6e\u4e2d\u3002\u56fe12\u4e2d\u6709\u63cf\u8ff0\uff0c\u5305\u542b\u5982\u4e0b\u53c2\u6570\uff1a    The list of MSPs that are to be used throughout the Blockchain network (followed by the identifiers chosen by their owner organization), and reside below the  msp-manager  label. The MSP descriptions listed here aim to enable the orderers to validate peer/client signatures on system requests, e.g., chain creation requests. Hence MSPs in this case have more a \u201cverifier\u201d role, and will henceforth be referred to as VerifierMSP. Notice, that there is one MSP listed for each of Org2, Org3, and Org4, an one MSP for Org1 as the latter contributes orderers.     \u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u4f7f\u7528\u7684MSP\u5217\u8868\uff08\u540e\u9762\u8ddf\u5bf9\u5e94\u7ec4\u7ec7\u7684\u6807\u793a\uff09\uff0c\u653e\u5728\u201cmsp-manager\u201d\u6807\u7b7e\u4e0b\u9762\u3002\u8fd9\u91cc\u5305\u542bMSP\u5217\u8868\u4fe1\u606f\u662f\u4e3a\u4e86\u8ba9orderer\u80fd\u9a8c\u8bc1\u6765\u81ea\u5ba2\u6237\u7aef\u548cpeer\u7684\u7cfb\u7edf\u8bf7\u6c42\u4e2d\u7684\u7b7e\u540d\uff0c\u5982\u521b\u5efa\u94fe\u8bf7\u6c42\u3002\u56e0\u6b64MSP\u5728\u8fd9\u91cc\u6709\u591a\u4e2a\u9a8c\u8bc1\u89d2\u8272\uff0c\u5e76\u4e14\u5c06\u88ab\u6210\u4e3aVertifierMSP\u3002\u6ce8\u610f\uff0cOrg2\uff0cOrg3\uff0cOrg4\u6bcf\u4e2a\u7ec4\u7ec7\u4e00\u4e2aMSP\uff0cOrg1\u4e00\u4e2aMSP\u7ed9orderder\u7528\u3002  The list of parameters associated to ordering client, and server. Ordering client includes parameters that anyone invoking broadcast and deliver request to the ordering service would need to know (e.g., peers) while the ordering server includes parameters that are in common across ordering nodes, and need to be consistently updated across the orderers.  orderer\u670d\u52a1\u7aef\u548cr\u5ba2\u6237\u7aef\u76f8\u5173\u7684\u53c2\u6570\uff0c\u5ba2\u6237\u7aef\u53c2\u6570\u5305\u62ec\u5411orderer broadcast\u548cdeliver\u8bf7\u6c42\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u7684\u53c2\u6570\uff0c\u670d\u52a1\u5668\u7aef\u53c2\u6570\u5305\u62ec\u5404\u4e2aorderer\u8282\u70b9\u7684\u516c\u5171\u53c2\u6570\uff0c\u8fd9\u90e8\u5206\u53c2\u6570\u8981\u518dorderer\u8282\u70b9\u95f4\u540c\u6b65\u66f4\u65b0\u3002  The policies for readers, writers, and chain creators of the ordering channel that is to be created.  that for now includes only the networks of orderers, i.e., members of Organization 1, and Organization 2.  channel\u7684\u8bfb\u3001\u5199\u548c\u521b\u5efa\u7b56\u7565\u3002\u73b0\u5728\u53ea\u6709orderer\u7f51\u7edc\u9700\u8981\u521b\u5efachannel\uff0c\u5373\uff1aOrg1\u548cOrg2.    Configuration of the non-local part of orderers can have the form of a genesis transaction a diagram of which is depicted in Table 2, since it is anyway the genesis block of system channel. For simplicity of presentation we make the same convention as before and ignore mapping of MSP configuration to configuration items.  orderer\u7684\u975e\u672c\u5730\u914d\u7f6e\u90e8\u5206\uff0c\u53ef\u4ee5\u4ee5\u521b\u59cb\u4ea4\u6613\u7684\u5f62\u5f0f\u8fdb\u884c\u3002\u5982\u88682\u63cf\u8ff0\uff0c\u5b83\u4f1a\u7528\u6765\u505a\u7cfb\u7edfchannel\u7684\u521b\u59cb\u5757\u3002\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0c\u6211\u4eec\u4e5f\u50cf\u4ee5\u524d\u4e5f\u4e00\u6837\u8fdb\u884c\u8f6c\u5316\u4e3ajson\u683c\u5f0f\uff0c\u5e76\u5ffd\u7565MSP\u914d\u7f6e\u8ddf\u914d\u7f6e\u9879\u7684\u6620\u5c04\u5173\u7cfb\u3002  Figure 11. Local orderer .yaml configuration file  \u56fe11. \u672c\u5730orderer.yaml\u914d\u7f6e\u6587\u4ef6  \nGeneral:\n\n    # Local MSP config file\n    LocalMSP:  file location of root folder of cacerts, admincerts, signcert, and keystore.\n\n    # Orderer Type: The orderer implementation to start\n    # Available types are  solo  and  kafka \n    OrdererType: solo\n\n    # Ledger Type: The ledger type to provide to the orderer (if needed)\n    # Available types are  ram ,  file . When  kafka  is chosen as the\n    # OrdererType, this option is ignored.\n    LedgerType: ram\n\n    # Batch Timeout: The amount of time to wait before creating a batch\n    BatchTimeout: 10s\n\n    # possibly other local orderer config  Figure 12. This can be used to generate the genesis block which is needed for orderer bootstrap.  \u56fe12\uff1a\u8fd9\u4e9b\u53ef\u4ee5\u7528\u6765\u751f\u6210orderer\u542f\u52a8\u7684\u65f6\u5019\u9700\u8981\u7684\u521b\u59cb\u5757\u3002  \n{\n  description : Orderer channel genesis (Orgs: 01, 02) ,\n  chain-id : OrdererChannel-01-02 ,\n  msp-manager :[\n     {\n        msp-type :0,\n        msp-config :{\n          msp-identifier : org1 ,\n          rootca-identities :[ org1-cert-bytes-1 , org1-cert-bytes-2 , org1-cert-bytes-3 ],\n          admins :[ org1-admin-cert-bytes ]\n       }\n     },\n     {\n        msp-type :0,\n        msp-config :{\n          msp-identifier : org2 ,\n          rootca-identities :[ org2-cert-bytes-1 , org2-cert-bytes-2 , org2-cert-bytes-3 ],\n          admins :[ org2-admin-cert-bytes ]\n       }\n     },\n     {\n        msp-type :0,\n        msp-config :{\n          msp-identifier : org3 ,\n          rootca-identities :[ org3-cert-bytes-1 , org3-cert-bytes-2 , org3-cert-bytes-3 ],\n          admins :[ org3-admin-cert-bytes ]\n       }\n     },\n     {\n        msp-type :0,\n        msp-config :{\n          msp-identifier : org4 ,\n          rootca-identities :[ org4-cert-bytes-1 , org4-cert-bytes-2 , org4-cert-bytes-3 ],\n          admins :[ org4-admin-cert-bytes ]\n       }\n     }\n   ]\n },\n  readers :[\n   { msp-identifier : org1 , group : member },\n   { msp-identifier : org2 , group : member }\n ],\n  writers :[\n   { msp-identifier : org1 , group : member },\n   { msp-identifier : org2 , group : member }\n ],\n  admins :[\n   { msp-identifier : org1 , group : admin },\n   { msp-identifier : org2 , group : admin }\n ]\n}  Step 3: The orderers run and can identify now members of all participant organizations.  \u6b65\u9aa43\uff1aorderer\u8fd0\u884c\uff0c\u5e76\u4e14\u80fd\u8bc6\u522b\u53c2\u4e0e\u7ec4\u7ec7\u7684\u6210\u5458\u3002     Type  Key  Value  Modification Policy      Chain  HashingAlgorithm  SHAKE256  OrdererAdminPolicy    Chain  BlockDataHashStructure  Merkle tree width 10  OrdererAdminPolicy    Chain  OrdererAddresses  [addr1, addr2, \u2026]  OrdererAdminPolicy    Orderer  ChainCreationPolicyNames  ChainCreationPolicy1, ChainCreationPolicy2  OrdererAdminPolicy    Orderer  BatchSize  100  OrdererAdminPolicy    Orderer  BatchTimeout  10s  OrdererAdminPolicy    Orderer  IngressPolicyNames  OrdererWriterPolicy, PeerWriterPolicy  OrdererAdminPolicy    Orderer  EgressPolicyNames  OrdererReaderPolicy, PeerReaderPolicy  OrdererAdminPolicy    Orderer  ConsensusType  Kafka  OrdererAdminPolicy    Orderer  KafkaBrokersKey  [addr1, addr2, \u2026]  OrdererAdminPolicy    MSP  Org1ID  Org1 MSPConf  MSPInternal    MSP  Org2ID  Org2 MSPConf  MSPInternal    MSP  Org3ID  Org3 MSPConf  MSPInternal    MSP  Org4ID  Org4 MSPConf  MSPInternal    Policy  OrdererReaderPolicy  Org1.User or Org2.User  OrdererAdminPolicy    Policy  OrdererWriterPolicy  Org1.User or Org2.User  OrdererAdminPolicy    Policy  OrdererAdminPolicy  Org1.admin AND Org2.admin  OrdererAdminPolicy    Policy  BlockValidationPolicy  Org1.Cert or Org2.Cert  OrdererAdminPolicy    Policy  SignedByOrdererPolicy  Org1.Cert or Org2.Cert  OrdererAdminPolicy    Policy  ChainCreationPolicy1  Org3.Admin and (Org2.admin or Org4.admin)  OrdererAdminPolicy    Policy  ChainCreationPolicy2  Org4.admin  OrdererAdminPolicy    Policy  NewConfigItemCreationPolicy  Org1.admin AND Org2.admin  OrdererAdminPolicy    Policy  MSPInternal  empty  RejectAlwaysPolicy    Policy  RejectAlwaysPolicy  1 out of 0  RejectAlwaysPolicy     Table 2. Example of list of configuration items in orderer channel genesis transaction. Each row in the table corresponds to a (signed) configuration item of the genesis block.   \u88682\uff1aorderer channel\u521b\u59cb\u4ea4\u6613\u914d\u7f6e\u793a\u4f8b\u3002\u6bcf\u4e00\u884c\u5bf9\u5e94\u521b\u59cb\u5757\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u7b7e\u540d\u7684\u914d\u7f6e\u9879\u3002  Step 4: For their initialization, peers need similar information as the orderers to setup the (local) MSP the peer belongs to, and signing identity/key information the peer would use to sign messages to the rest of Blockchain participants. Finally, the peer initialization information provides the reference to the signing identity the peer is to use when asked to create endorsements. As in the case of orderers, we instantiate SignerMSP for peers by having the administrator fill up three folders with the appropriate certificates/key-material:  \u6b65\u9aa44\uff1a\u5728\u521d\u59cb\u5316\u65f6\uff0cpeer\u9700\u8981\u8ddforderer\u7c7b\u4f3c\u7684MSP\u4fe1\u606f\uff0c\u5bf9\u6d88\u606f\u7b7e\u540d\u7528\u5230\u7684\u8bc1\u4e66\u548c\u79c1\u94a5\u4fe1\u606f\u3002\u6700\u540e\uff0cpeer\u7684\u521d\u59cb\u5316\u4fe1\u606f\u63d0\u4f9b\u7b7e\u540d\u8eab\u4efd\uff0c\u8fd9\u4e2a\u5728\u521b\u5efa\u80cc\u4e66\u8282\u70b9\u7684\u65f6\u5019\u7528\u3002 \u548corderer\u4e00\u6837\uff0c\u6211\u4eec\u901a\u8fc74\u7c7b\u6587\u4ef6\u7ed9peer\u521d\u59cb\u5316\u4e00\u4e2aSignerMSP\u3002\n- cacerts: PEM files containing the root authority certificates of the MSP\n- cacerts\uff1aPEM\u6587\u4ef6\uff0cMSP\u7684\u6839\u8bc1\u4e66\u3002\n- admincerts: PEM files containing the administrators\u2019 certificates of this MSP\n- admincerts\uff1aPEM\u6587\u4ef6\uff0cMSP\u7684\u7ba1\u7406\u5458\u8bc1\u4e66\n- keystore: PEM files containing the signing private key of the peer\n- keystore\uff1aPEM\u6587\u4ef6\uff0c\u7b7e\u540d\u7528\u7684\u79c1\u94a5\n- signcerts: PEM public cert files corresponding to the singing identity of the peer\n- signcerts\uff1aPEM\u6587\u4ef6\uff0c\u8ddf\u7b7e\u540d\u79c1\u94a5\u5bf9\u5e94\u7684\u8bc1\u4e66\u3002  Disclaimer: Currently SignerMSP is not used for signature verification, and hence updating the cacerts or admincerts of this MSP is not of crucial importance. However this is to be revisited as GOSSIP communication may require frequent updates of these values.   \u5426\u8ba4\u58f0\u660e\uff1a\u5f53\u524d\u7b7e\u540dMSP\u4e0d\u7528\u4e8e\u7b7e\u540d\u9a8c\u8bc1\uff0c\u56e0\u6b64\uff0c\u66f4\u65b0MSP\u7684cacerts\u548cadmincerts\u5e76\u4e0d\u5341\u5206\u91cd\u8981\u3002\u7136\u800c\uff0c\u5728gossip\u901a\u4fe1\u4e2d\u7528\u5230\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u7ecf\u5e38\u66f4\u65b0\u4ed6\u4eec\u7684\u503c\u3002  Step 5. Now let\u2019s assume that Org2, and Org3 want to create a chain for their bilateral transactions. Applications of Org2, and Org3 agree off-band on certain configuration aspects of the chain, i.e., the configuration of the MSP contributed by each organization, the readers and the writers of the new chain, as well as the admins of the resulting chain. This information the application of Org2, and Org3 combines with the ordering information, to result to a configuration transaction that includes the information included in Table 3. Notice that Org4, does not appear anywhere in this genesis transaction.  5\uff1a\u73b0\u5728\uff0c\u5047\u8bbeOrg2\u548cOrg3\u60f3\u4e3a\u4ed6\u4eec\u7684\u53cc\u8fb9\u4ea4\u6613\u521b\u5efa\u4e00\u4e2a\u94fe\u3002Org2\u548cOrg3\u7684\u5e94\u7528\u5728\u5bf9\u94fe\u7684\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\u8fbe\u6210\u5171\u8bc6\u3002\u5373\uff1a\u6bcf\u4e2a\u7ec4\u7ec7\u7684MSP\uff0c\u65b0\u94fe\u7684reader\u548cwriter\uff0c\u4ee5\u53ca\u65b0\u94fe\u7684\u7ba1\u7406\u5458\u3002Org2\u548cOrg3\u7684\u5e94\u7528\u628a\u8fd9\u4e9b\u4fe1\u606f\u548corderer\u7684\u4fe1\u606f\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\uff0c\u5982\u88683\u6240\u793a\u3002\u6ce8\uff0cOrg4\u6ca1\u6709\u51fa\u73b0\u5728\u8fd9\u4e2a\u521b\u59cb\u4ea4\u6613\u4e2d\u3002  In the example of Table 3 below, Organization 1 and 2 are the only ones contributing orderers, while Organization 2 and 3 are the ones deploying and invoking application chaincodes.   \u5728\u88683\u7684\u4f8b\u5b50\u4e2d\uff0cOrg1\u548cOrg2\u7ec4\u6210orderer\u3002Org2\u548cOrg3\u90e8\u7f72\u548c\u8c03\u7528\u5e94\u7528\u94fe\u4ee3\u7801\u3002\n- Readers of the chain have been set to all listed MSP\u2019s groups.\n- \u6240\u6709MSP\u90fd\u662f\u94fe\u7684reader\u3002\n- Writers of the chain have been set to all application MSP\u2019s groups, i.e., Organization 2 and 3 members.\n- \u6240\u6709\u5e94\u7528MSP\u90fd\u662f\u94fe\u7684writer\uff0c\u5373 Org2\u548c3\u4e2a\u6210\u5458\n- Chaincode deployer access is given to the admins of the two application MSPs, i.e., Organization 2 and 3.\n- \u94fe\u4ee3\u7801\u7684\u90e8\u7f72\u6743\u9650\u5206\u914d\u7ed9\u4e86\u4e24\u4e2a\u5e94\u7528MSP\u7684\u7ba1\u7406\u5458\uff0c\u5373Org2\u548cOrg3\n- Finally, re-configuration of the chain requires approval from admins of the MSPs of Organization 2 and Organization 3. \n- \u6700\u540e\uff0c\u94fe\u7684\u91cd\u914d\u7f6e\u8bf7\u6c42\u9700\u8981Org2\u548cOrgs\u7684MSP\u7684\u7ba1\u7406\u540c\u610f\u624d\u80fd\u8fdb\u884c\u3002  In the table below, we assumed the following mapping between parts of configuration and (signed) configuration items.   \u5728\u4e0b\u8868\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u914d\u7f6e\u90e8\u5206\u548c\u7b7e\u540d\u914d\u7f6e\u9879\u7684\u6620\u5c04\u5982\u4e0b\uff1a\n- Two configuration items per MSPConfig, of type \u201cMSP\u201d, whose Key is the organization name and whose value is a marshaled MSPConfig proto and whose modification policy is [organization name + \u201cInternal\u201d], and another configuration item of type Policy, of Key of [organization name + \u201cInternal\u201d] of Policy Type MSP, and nil value with modification policy of itself\n- \u6bcf\u4e2aMSPConfig\uff0c\u6709\u4e24\u4e2a\u914d\u7f6e\u9879\u3002\u4e00\u4e2a\u7c7b\u578b\u4e3aMSP\uff0c\u952e\u662f\u7ec4\u7ec7\u540d\uff0c\u503c\u662f\u5e8f\u5217\u5316\u8fc7\u7684MSPConfig\u539f\u578b\uff0c\u53d8\u66f4\u7b56\u7565\u662f\u7ec4\u7ec7\u540d+\u201cinternal\u201d\uff1b\u53e6\u4e00\u4e2a\u7c7b\u578b\u662fPolicy\uff0c\u952e\u662f\u7ec4\u7ec7\u540d+\u201cinternal\u201d\uff0c \u503c\u4e3a\u7a7a\uff0c\u53d8\u66f4\u7b56\u7565\u4e3a\u81ea\u5df1\u3002\n- One configuration item named \u201cChannelAdmins\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for administrative action.  For example \u201c2 out of the following three MSP principals must sign (each an admin).  The \u201cChannelAdmins\u201d, has a modification policy \u201cChannelAdmins\u201d (itself) \n- \u7c7b\u578b\u4e3aPlolicy\u7684\u914d\u7f6e\u9879\u201cChannelAdmins\u201d\u548c\u201cSignaturePlolicy\u201d\uff0c \u503c\u662f\u4e00\u4e2a\u7ba1\u7406\u52a8\u4f5c\u6761\u4ef6\uff0c\u6bd4\u5982\u201c3\u4e2aMSP\u4e2d\u76842\u4e2a\u7ba1\u7406\u5458\u7b7e\u540d\u201d\uff0c \u201cChannelAdmins\u201d\uff0c \u6709\u4e00\u4e2a\u53d8\u66f4\u7b56\u7565\u201cChannelAdmins\u201d\uff08\u8ddf\u81ea\u5df1\u4e00\u6837\uff09\u3002\n- One configuration item of type \u201cPolicy\u201d and Policy.Type MSP for \u201cchain-readers\u201d, and modification policy \u201cchain-admins\u201d \n- \u4e00\u4e2aPolicy\u7c7b\u578b\u7684\u914d\u7f6e\u9879\u201cchain-readers\u201d, \u53d8\u66f4\u7b56\u7565\u4e3a\u201dchain-admins\u201d\u3002\n- One configuration item named \u201cChannelReaders\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for reading the chain.  Since this applies to Deliver calls, it should be \u201c1 out of the following n MSP principals must sign (each a reader)\u201d.  The \u201cChannelReaders\u201d, has a modification policy \u201cChannelAdmins\u201d\n- \u4e00\u4e2a\u7c7b\u578bPolicy\u7684\u914d\u7f6e\u9879\u201cChannelReaders\u201d\uff0cPolicy.Type \u4e3aSignaturePolicy\uff0c\u503c\u4e3a\u201dSignatruePolicy\uff0c\u5305\u542b\u8bfb\u94fe\u7684\u6761\u4ef6\u3002\u56e0\u4e3aDeliver\u7684\u65f6\u5019\u8981\u7528\uff0c\u5b83\u5e94\u4e3a\u201c\u4e0b\u5217N\u4e2aMSP\u4e2d\u7684\u4e00\u4e2a\u7b7e\u540d\uff08\u6bcf\u4e2a\u90fd\u662f\u4e00\u4e2areader\uff09\u201d\u3002 \u201cChannelReaders\u201d\u7684\u53d8\u66f4\u7b56\u7565\u4e3a\u201cChannelAdmins\u201d\n- One configuration item named \u201cChannelWriters\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for reading the chain.  Since this applies to Broadcast calls, it should be \u201c1 out of the following n MSP principals must sign (each a writer)\u201d.  The \u201cChannelWriters\u201d, has a modification policy \u201cChannelAdmins\u201d\n- \u4e00\u4e2aPolicy\u7684\u914d\u7f6e\u9879\u201cChannelWriters\u201d\uff0cPolicy.Type\u201dSignaturePolicy\u201d\uff0c \u503c\u4e3a\u5305\u542b\u5199\u6761\u4ef6\u7684SignaturePolicy\uff0c\u5b83\u7528\u5728Broadcast\u8c03\u7528\uff0c\u5e94\u8be5\u4e3a\u201d\u4e0b\u5217N\u4e2aMSP\u4e2d\u7684\u4e00\u4e2a\u6210\u5458\u7684\u7b7e\u540d\uff08\u6bcf\u4e2a\u90fd\u662fwriter\uff09\u201c\u3002\u201dChannelWriters\u201c\u7684\u53d8\u66f4\u7b56\u7565\u4e3a\u201dChannelAdmins\u201c\u3002\n- One configuration item named \u201cChaincodeLifecycleAdmins\u201d of type \u201cPolicy\u201d and Policy.Type \u201cSignaturePolicy\u201d whose value is a SignaturePolicy containing the conditions for deploying a chaincode to the chain.  This might be something like \u201c3 out of the following 4 MSP principals must sign (each a developer)\u201d. The \u201cChaincodeLifecycleAdmins\u201d, has a modification policy \u201cChannelAdmins\u201d\n- \u4e00\u4e2aPolicy\u7c7b\u578b\u7684\u914d\u7f6e\u201dChaincodeLifeCycleAdmins\u201c\uff0c Poliy.Type\u4e3a\u201dSignaturePolicy\u201d\uff0c\u5b83\u7684\u503c\u4e3a\u5305\u542b\u5411\u94fe\u4e2d\u90e8\u7f72\u94fe\u4ee3\u7801\u7684\u6761\u4ef6\u3002\u53ef\u4ee5\u5982\u4e0b\u201c4\u4e2aMSP\u4e2d\u76843\u4e2a\u7684\u6210\u5458\u7b7e\u540d\u201d\u3002\u201cChaincodeLifecycleAdmins\u201c \u7684\u53d8\u66f4\u7b56\u7565\u4e3a\u201dChannelAdmins\u201c\u3002  The convention for items of type Orderer is to have the Key   have a value of a marshaled   message from the protos/common/orderer/configuration.proto.  The same is true for items of type Chain, and Peer, but corresponding to protos/common/configuration.proto and protos/peer/configuration.proto.  For type Policy, the value is always a marshaled protos/peer/configuration.proto.Policy message, and for type MSP the value is always a marshaled MSPConf from msp/protos (this should probably be moved to protos/msp.  \u6309\u7167\u60ef\u4f8b\uff0corderer\u7684\u7c7b\u578b\u914d\u7f6e\u6709\u952e \uff0c\u503c\u5c31\u662f\u5e8f\u5217\u5316\u7684 \u6d88\u606f\uff08\u5728/protos/common/orderer/configuration.proto\u4e2d\u5b9a\u4e49\uff09\u3002Chain\uff08protos/common/configuration.proto\uff09\u548cPeer\uff08protos/peer/configuration.proto\uff09\u7684\u914d\u7f6e\u4e5f\u662f\u5982\u6b64\u3002Policy\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u503c\u603b\u662f\u5e8f\u5217\u5316\u7684protos/peer/configuration.proto.Policy\u6d88\u606f\u3002 MSP\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u503c\u603b\u662f\u5e8f\u5217\u5316\u7684MSPConf\uff08msp/protos, \u53ef\u80fd\u4f1a\u79fb\u52a8\u5230protos/msp\uff09\u3002     Type  Key  Value  Modification Policy      Chain  HashingAlgorithm  SHAKE256  OrdererAdminPolicy    Chain  BlockDataHashStructure  Merkle tree width 10  OrdererAdminPolicy    Chain  OrdererAddresses  [addr1, addr2, \u2026]  OrdererAdminPolicy    Orderer  BatchSize  100  OrdererAdminPolicy    Orderer  BatchTimeout  10s  OrdererAdminPolicy    Orderer  IngressPolicyNames  OrdererWriterPolicy, PeerWriterPolicy  OrdererAdminPolicy    Orderer  EgressPolicyNames  OrdererReaderPolicy, PeerReaderPolicy  OrdererAdminPolicy    Orderer  ConsensusType  Kafka  OrdererAdminPolicy    Orderer  KafkaBrokersKey  [addr1, addr2, \u2026]  OrdererAdminPolicy    MSP  Org1ID  Org1 MSPConf  MSPInternal    MSP  Org2ID  Org2 MSPConf  MSPInternal    MSP  Org3ID  Org3 MSPConf  MSPInternal    MSP  Org4ID  Org4 MSPConf  MSPInternal    Peer  ReaderPolicyNames  PeerReaderPolicy  PeerAdminPolicy    Peer  WriterPolicyNames  PeerWriterPolicy  PeerAdminPolicy    Peer  AdminPolicyNames  PeerAdminPolicy  PeerAdminPolicy    Peer  ChaincodeLifecycleAdmins  ChaincodeLifecyclePolicy  AdminsPolicy    Policy  PeerReaderPolicy  org1.members OR org2.members OR org3.members  PeerAdminPolicy    Policy  PeerWriterPolicy  org1.members OR org3.members OR org4.members  PeerAdminPolicy    Policy  PeerAdminPolicy  org2.admin AND org3.admin  PeerAdminPolicy    Policy  ChaincodeLifecyclePolicy  org2.admin OR org3.admin  PeerAdminPolicy    Policy  OrdererReaderPolicy   OrdererAdminPolicy    Policy  OrdererWriterPolicy   OrdererAdminPolicy    Policy  OrdererAdminPolicy   OrdererAdminPolicy    Policy  BlockValidationPolicy   OrdererAdminPolicy    Policy  SignedByOrdererPolicy   OrdererAdminPolicy    Policy  NewConfigItemCreationPolicy   OrdererAdminPolicy    Policy  MSPInternal  empty  RejectAlwaysPolicy    Policy  RejectAlwaysPolicy  1 out of 0  RejectAlwaysPolicy     Table 3. Example of organization of chain genesis transaction in configuration items. Each row in the table corresponds to a (signed) configuration item of the genesis block.   \u88683:\u3002\u94fe\u521b\u59cb\u4ea4\u6613\u7ec4\u7ec7\u914d\u7f6e\u7684\u4f8b\u5b50\u3002\u6bcf\u884c\u5bf9\u5e94\u521b\u59cb\u5757\u4e2d\u4e00\u4e2a\u7ecf\u7b7e\u540d\u7684\u914d\u7f6e\u9879\u3002  Step 6. Now from the config file, Org2, and Org3 construct a configuration transaction based on the resulting config file, that would constitute the only transaction included in the new channel\u2019s genesis block. Although we are agnostic to the way the application constructs this configuration transaction, it is the application\u2019s responsibility to submit the constructed genesis block (carrying a chain identity that has not yet been used) to the ordering service via a broadcast request.   \u6b65\u9aa46\u3002\u73b0\u5728\uff0cOrg2,Org3\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6784\u9020\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\uff0c\u8fd9\u662f\u65b0channel\u7684\u521b\u59cb\u5757\u4e2d\u7684\u552f\u4e00\u4ea4\u6613\u3002\u5e94\u7528\u662f\u5982\u4f55\u6784\u5efa\u8fd9\u4e2a\u4ea4\u6613\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u900f\u660e\u7684\uff0c\u5e94\u7528\u8d1f\u8d23\u5c06\u6b64\u521b\u59cb\u5757\u901a\u8fc7broadcast\u8bf7\u6c42\u63d0\u4ea4\u7ed9\u6392\u5e8f\u670d\u52a1\u3002  Step 7. Now each orderer that receives this genesis block for a channel that does not exist assumes this to be a chain creation request. Assuming that the orderer approves of the chain creation request (assuming that is requested by properly authorized requestors), it embeds the (verbatim) configuration transaction as the contents of the genesis block for the new chain. If chain deployers policy exists in orderers\u2019 system channel, then the orderers would need to check that the signatures in the configuration block received match the chain deployers\u2019 policy. Finally, they create a new channel and use the constructed genesis block as the first block of the new channel.   \u6b65\u9aa47. \u6bcf\u4e2a\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684channel\u7684\u521b\u59cb\u5757\uff0c\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u521b\u5efa\u94fe\u8bf7\u6c42\u3002\u5047\u8bbe\u6392\u5e8f\u670d\u52a1\u540c\u610f\u94fe\u521b\u5efa\u8bf7\u6c42\uff08\u5047\u8bbe\u8ba4\u8bc1\u901a\u8fc7\uff09\uff0c\u5b83\u628a\u914d\u7f6e\u4ea4\u6613\u52a0\u5165\u533a\u5757\uff0c\u4f5c\u4e3a\u65b0\u94fe\u7684\u521b\u59cb\u533a\u5757\u3002\u5982\u679c\u5728\u6392\u5e8f\u670d\u52a1\u7684\u7cfb\u7edfchannel\u4e2d\u6709\u90e8\u7f72\u90e8\u7f72\u8005\u7684\u7b56\u7565\uff0c\u6392\u5e8f\u670d\u52a1\u9700\u8981\u68c0\u67e5\u914d\u7f6e\u4ea4\u6613\u7684\u7b7e\u540d\u7b26\u5408\u90e8\u7f72\u8005\u7684\u7b56\u7565\u3002\u6700\u540e\uff0c\u5b83\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684channel\uff0c\u5e76\u4e14\u7528\u8fd9\u4e2a\u521b\u59cb\u5757\u4f5c\u4e3a\u65b0channel\u7684\u9996\u4e2a\u533a\u5757\u3002  Step 8. Application of the two organizations calls deliver on the new channel and obtains the genesis block. It checks the validity of the configuration parameters in there to ensure that it is the same parameters Org2, and Org3, had agreed on (included in the chain creation request configuration).  \u6b65\u9aa48\uff0c\u4e24\u4e2a\u7ec4\u7ec7\u7684\u5e94\u7528\u5728\u65b0\u7684channel\u4e0a\u8c03\u7528deliver\uff0c\u83b7\u53d6\u521b\u59cb\u5757\u3002\u7136\u540e\u9a8c\u8bc1\u914d\u7f6e\u53c2\u6570\u8ddfOrg2\u548cOrg3\u534f\u5546\u597d\u7684\u914d\u7f6e\u53c2\u6570\uff08\u5728\u914d\u7f6e\u8bf7\u6c42\u4e2d\uff09\u4e00\u6837\u3002   Step 9. Application of Org2 send the obtained genesis block to its peers within a JoinChannel request and asks these peers to join the channel. The peer uses the local MSP to authenticate the JoinChannel request.  \u6b65\u9aa49. Org2\u7684\u5e94\u7528\u901a\u8fc7\u201cJoinChannel\u201d\u8bf7\u6c42\u53d1\u9001\u83b7\u53d6\u7684\u521b\u59cb\u5757\u7ed9peer\uff0c\u544a\u8bc9peer\u52a0\u5165channel\u3002peer\u5229\u7528\u672c\u5730MSP\u8ba4\u8bc1JoinChannel\u8bf7\u6c42\u3002   Step 10. Upon joining a channel, and processing the genesis block included in the JoinChannel request  the peers retrieve the list of anchor peers. The gossip layer of the peer notifies the gossip layer of all peers in the organizationgossip leader of the organization the peer belong to, that it has joined the channel. One of the peers in that organization that has also joined the channel, That leader peer can then connects to the ordering service on the peer s behalf of all peers of that organization that have joined the channel. The peer receives the channel related ledger blocks by connecting directly to the ordering service itself (leader peer) or from the leader peer. As a result, the  peer receives the new channel\u2019s transactions (normally it will be only the genesis block) and will have to check that the genesis block it received matches the one the application provided to it with the JoinChannel request. After that, it parses the genesis block and instantiates the corresponding chain instance, i.e., MSPManager, Ledger, and cache.  \u6b65\u9aa410\u3002\u5728\u52a0\u5165channel\uff0c\u5904\u7406JoinChannel\u8bf7\u6c42\u4e2d\u7684\u521b\u59cb\u5757\u7684\u65f6\u5019\uff0cpeer\u83b7\u53d6\u951apeer\u5217\u8868\u3002peer\u7684gossip\u5c42\u901a\u77e5peer\u6240\u5c5e\u7684\u7ec4\u7ec7\u7684gossip leader peer\uff0c\u5b83\u5df2\u7ecf\u52a0\u5165\u4e86channel\u3002\u6709\u65b0\u7684peer\u52a0\u5165\uff0c\u7136\u540eleader peer\u4ee3\u8868\u7ec4\u7ec7\u7684\u6240\u6709peer\u8fde\u63a5\u6392\u5e8f\u670d\u52a1\u3002peer\uff08leader peer\uff09\u901a\u8fc7\u76f4\u63a5\u8fde\u63a5\u6392\u5e8f\u670d\u52a1\u83b7\u53d6\u8d26\u672c\u533a\u5757\u6216\u8005\u4eceleader peer\u83b7\u53d6\u3002\u7ed3\u679c\uff0cpeer\u83b7\u7684\u65b0channel\u7684\u4ea4\u6613\uff08\u6b63\u5e38\u53ea\u6709\u521b\u59cb\u5757\uff09\uff0c\u5e76\u4e14\u5fc5\u987b\u9a8c\u8bc1\u83b7\u53d6\u7684\u521b\u59cb\u5757\u4e0e\u5e94\u7528\u5728JoinChannel\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u7ed9\u5b83\u7684\u662f\u5426\u4e00\u81f4\u3002\u4e4b\u540e\uff0c\u5b83\u89e3\u6790\u521b\u59cb\u5757\u5e76\u521d\u59cb\u5316\u76f8\u5e94\u7684\u94fe\u5b9e\u4f8b\uff0c\u5373\uff0cMSPManager\uff0c \u8d26\u672c\u548c\u7f13\u5b58\u3002  Step 11. After Initializing the channel\u2019s MSP, the peers that joined the channel disseminate via the gossip layer the channel\u2019s MSP to all peers of their organization, in order to ensure that peers that belong to different organizations but their organizations share a channel, can communicate with each other. \n\u6b65\u9aa411. \u521d\u59cb\u5316channel\u7684MSP\u4e4b\u540e\uff0cpeer\u901a\u8fc7gossip\u5c42\u4f20\u64adchannel\u7684MSP\u4fe1\u606f\u7ed9\u7ec4\u7ec7\u4e2d\u7684\u6240\u6709peer\uff0c\u4ece\u800c\u4fdd\u8bc1\u5728\u540c\u4e00channel\u4e2d\u7684\u4e0d\u540c\u7ec4\u7ec7\u4e2d\u7684peer\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002", 
            "title": "5 example"
        }, 
        {
            "location": "/msp_acl_zh/#6-orderer-chain-creation-implementation-details", 
            "text": "\u6392\u5e8f\u670d\u52a1\u521b\u5efa\u94fe\u7684\u5b9e\u73b0\u7ec6\u8282", 
            "title": "6. Orderer Chain Creation Implementation Details"
        }, 
        {
            "location": "/msp_acl_zh/#61-orderer-system-chain", 
            "text": "\u6392\u5e8f\u670d\u52a1\u7cfb\u7edf\u94fe  The orderer network is bootstrapped with a genesis block which contains the orderer system chain id and the initial set of orderer network governance policies, including, the orderer MSPs, the orderer consensus protocol configuration, and the chain creation policies.   Although application network MSPs may also be defined here (to be referenced in the chain creation policies), they are not strictly required at bootstrap.  \u6392\u5e8f\u670d\u52a1\u542f\u52a8\u7684\u65f6\u5019\u52a0\u8f7d\u521b\u59cb\u5757\uff0c\u6b64\u5757\u4e2d\u5305\u542b\u6392\u5e8f\u670d\u52a1\u7684\u7cfb\u7edf\u94feID\u548c\u6392\u5e8f\u7f51\u7edc\u7684\u521d\u59cb\u7ba1\u7406\u7b56\u7565\uff0c\u5305\u62ec\u6392\u5e8fMSP\uff0c\u6392\u5e8f\u5171\u8bc6\u534f\u8bae\u914d\u7f6e\uff0c\u94fe\u521b\u5efa\u7b56\u7565\u3002\u867d\u7136\u5e94\u7528\u7f51\u7edc\u7684MSP\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b9a\u4e49\uff08\u5728\u94fe\u521b\u5efa\u7b56\u7565\u4e2d\u5f15\u7528\uff09\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u5728\u542f\u52a8\u7684\u65f6\u5019\u5f3a\u5236\u8981\u6c42\u7684\u3002  Only the ordering organizations have permission to read or write on this chain, so from a peer consumer perspective, the existence of this chain is irrelevant.  \u53ea\u6709\u6392\u5e8f\u7ec4\u7ec7\u6709\u6743\u9650\u8bfb\u5199\u7cfb\u7edf\u94fe\uff0c\u56e0\u6b64\u4ecepeer\u7684\u89d2\u5ea6\uff0c\u8fd9\u4e2a\u94fe\u662f\u6beb\u4e0d\u76f8\u5e72\u7684\u3002  The chain creators are enumerated in a configuration item of type Orderer, key ChainCreators, and value common.ChainCreators.  The common.ChainCreators is a repeated list of strings, each corresponding to a defined configuration item of type Policy.  Note that this is a repeated list, rather than a single policy, to accommodate the possibility of multi-tenancy.  Different consortiums may desire different chain creation policies, and although it might be possible to construct one large policy with many \u2018ORs\u2019 to accommodate this, it is more natural to specify and manage the policies on a per consortium basis.   Orderer\u7c7b\u578b\u7684\u914d\u7f6e\u4e2d\u679a\u4e3e\u4e86\u94fe\u7684\u521b\u5efa\u8005\uff0c\u952e\u4e3a\u201d ChainCreators\u201c\uff0c\u503c\u4e3a\u901a\u7528\u7684ChainCreator\u3002\u901a\u7528\u7684ChainCreator\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u4e00\u4e2aPolicy\u7c7b\u578b\u7684\u914d\u7f6e\u9879\u3002\u6ce8\u610f\uff0c\u8fd9\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e0d\u662f\u53ea\u6709\u4e00\u4e2a\u7b56\u7565\uff0c\u8fd9\u6837\u53ef\u4ee5\u6ee1\u8db3\u591a\u79df\u6237\u7684\u573a\u666f\u3002 \u4e0d\u540c\u7684\u8054\u76df\u53ef\u80fd\u8981\u6c42\u4e0d\u540c\u7684\u94fe\u521b\u5efa\u7b56\u7565\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u201dOR\u201c\u5b9a\u4e49\u4e00\u4e2a\u5f88\u5927\u7684\u7b56\u7565\u6765\u6ee1\u8db3\u8fd9\u79cd\u9700\u6c42\uff0c\u4f46\u662f\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u662f\u6bcf\u4e2a\u8054\u76df\u6307\u5b9a\u548c\u7ba1\u7406\u81ea\u5df1\u7684\u7b56\u7565\u3002  An example of ordering channel genesis organization in configuration items is depicted in Table 2.  \u88682,\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u7684channel\u521d\u59cb\u7ec4\u7ec7\u7684\u914d\u7f6e\u793a\u4f8b\u3002", 
            "title": "6.1 Orderer System Chain"
        }, 
        {
            "location": "/msp_acl_zh/#62-chain-creation-request-configuration-transaction", 
            "text": "\u521b\u5efa\u94fe\u8bf7\u6c42\uff08\u914d\u7f6e\u4ea4\u6613\uff09  When a consortium wishes to use an ordering service, the ordering service creates a chain creation policy for that consortium, typically requiring the signatures of any two participants in the consortium, but as it uses the underlying policy framework, the signature requirements may be arbitrarily complex (for instance, requiring one authoritative member, and arbitrary two others).  This chain creation policy is simply a named string, and is added internally to the chain creators of the ordering system chain.  The consortium will also be told by the ordering service admins the set of configuration items which must be present in any chain creation request (such as the ordering system MSP definitions and block validation policies).  \u5f53\u4e00\u4e2a\u8054\u76df\u5e0c\u671b\u4f7f\u7528\u6392\u5e8f\u670d\u52a1\u65f6\uff0c\u6392\u5e8f\u670d\u52a1\u4e3a\u8054\u76df\u521b\u5efa\u4e00\u4e2a\u94fe\u521b\u5efa\u7b56\u7565\uff0c\u5178\u578b\u7684\u60c5\u51b5\u662f\u9700\u8981\u8054\u76df\u4e2d\u4efb\u610f2\u4e2a\u53c2\u4e0e\u8005\u7684\u7b7e\u540d\uff0c\u4f46\u662f\u7531\u4e8e\u4f7f\u7528\u4e86\u5e95\u5c42\u7684\u7b56\u7565\u6846\u67b6\uff0c\u7b7e\u540d\u6761\u4ef6\u53ef\u4ee5\u5236\u5b9a\u5f97\u5f88\u590d\u6742\uff08\u4f8b\u5982\uff0c\u8981\u6c421\u4e2a\u6743\u5a01\u6210\u5458\uff0c\u548c\u4efb\u610f2\u4e2a\u5176\u4ed6\u6210\u5458\uff09\u3002\u94fe\u521b\u5efa\u7b56\u7565\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u540d\u5b57\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u4f1a\u88ab\u6dfb\u52a0\u5230\u6392\u5e8f\u670d\u52a1\u7684\u7cfb\u7edf\u94fe\u7684\u521b\u5efa\u8005\u4e2d\u3002\u6392\u5e8f\u670d\u52a1\u7684\u7ba1\u7406\u5458\u4e5f\u4f1a\u544a\u8bc9\u8054\u76df\u94fe\u521b\u5efa\u8bf7\u6c42\u4e2d\u9700\u8981\u5305\u542b\u54ea\u4e9b\u914d\u7f6e\u9879\uff08\u6bd4\u5982\u914d\u9700\u670d\u52a1\u7cfb\u7edfMSP\u5b9a\u4e49\u548c\u5757\u9a8c\u8bc1\u7b56\u7565\uff09  When members of the consortium wish to create a new chain, they simply create the set of configuration items which defines their new chain, concatenate the marshaled bytes, and compute the hash of this data.  They then create a special configuration item of type Orderer, key CreationPolicy, and type orderer.CreationPolicy, with the digest field set to the hash of the chain configuration, and the policy set to the named chain creators policy provided by the ordering service.  This ConfigurationItem is then inserted into a SignedConfigurationItem and is appropriately signed as required by the chain creation policy.   This is all wrapped into a ConfigurationEnvelope and packaged into a signed Envelope and submitted for ordering.  \u5f53\u8054\u76df\u6210\u5458\u8981\u521b\u5efa\u65b0\u94fe\u65f6\uff0c\u5b83\u4eec\u7b80\u5355\u5730\u521b\u5efa\u4e00\u7ec4\u914d\u7f6e\u9879\uff0c\u5b9a\u4e49\u5b83\u4eec\u7684\u65b0\u94fe\uff0c\u5bf9\u914d\u7f6e\u9879\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5e76\u8ba1\u7b97\u54c8\u5e0c\u503c\u3002 \u7136\u540e\u521b\u5efa\u4e00\u4e2aOrderer\u7c7b\u578b\u7684\u914d\u7f6e\u9879\uff0c\u952e\u4e3aCreationPolicy\uff0c \u7c7b\u578borderer.CreationPolicy, \u6458\u8981\u5b57\u6bb5\u8bbe\u4e3a\u914d\u7f6e\u7684\u54c8\u5e0c\u503c\uff0c\u7b56\u7565\u8bbe\u7f6e\u4e3a\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684ChainCreators \u7b56\u7565\u3002\u5c06\u8fd9\u4e2a\u914d\u7f6e\u9879\u63d2\u5165SignedConfigurationItem\uff0c\u5e76\u4e14\u6839\u636e\u94fe\u521b\u5efa\u7b56\u7565\u8fdb\u884c\u5408\u7406\u7684\u7b7e\u540d\u3002\u6240\u6709\u8fd9\u4e9b\u5c01\u88c5\u8fdbConfigurationEnvelope\u5e76\u4e14\u6253\u5305\u8fdb\u4e00\u4e2a\u7b7e\u540d\u7684Envelope\uff0c\u63d0\u4ea4\u7ed9\u6392\u5e8f\u670d\u52a1\u3002  Note then, that the signed Envelope message is exactly the contents of the new genesis block.  All of the requesting parties have their signature encoded into this genesis block, and so the only validation required by the application is to ensure that the signature on the CreationPolicy configuration item is valid, and that the digest encoded corresponds to the remaining configuration.  \u6ce8\u610f\uff0c\u7b7e\u540d\u7684Envelope\u6d88\u606f\u5c31\u662f\u521b\u59cb\u5757\u7684\u5185\u5bb9\u3002 \u8bf7\u6c42\u7684\u6240\u6709\u90e8\u5206\u90fd\u6709\u7b7e\u540d\u4fe1\u606f\u7f16\u7801\u8fdb\u521b\u59cb\u5757\uff0c\u56e0\u6b64\u5e94\u7528\u53ea\u9700\u8981\u9a8c\u8bc1CreationPolicy\u914d\u7f6e\u9879\u7684\u7b7e\u540d\u662f\u5408\u6cd5\u7684\uff0c\u5e76\u4e14\u6458\u8981\u548c\u5269\u4f59\u7684\u90e8\u5206\u76f8\u7b26\u5408\u5373\u53ef\u3002  An example of the structure of a chain genesis transaction appears in Table 3.  \u88683\u662f\u94fe\u521b\u59cb\u4ea4\u6613\u7684\u4f8b\u5b50  When the ordering service receives a chain configuration transaction, it first checks to see if the chain ID already exists.  If it does, then it is treated as a reconfiguration transaction and accepted/rejected accordingly.  In the event that the chain does not exist, the orderer then validates that it is a well formed and currently valid chain creation request, it then wraps this request inside of an Envelope of type ORDERER_TRANSACTION bound for the ordering system chain, and submits it for consensus.  Eventually, once the transaction has been ordered, it is unwrapped, and inspected a second time for validity now that ordering has occurred.  Only in cases where the ordering system chain configuration changed or a chain creation request for the identical chain ID was submitted concurrently can this validation fail, in which case the request is logged and discarded.  \u5f53\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4e00\u4e2a\u94fe\u914d\u7f6e\u4ea4\u6613\uff0c\u5b83\u9996\u5148\u68c0\u67e5\u94feID\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u3002\u5982\u679c\u5df2\u7ecf\u5b58\u5728\uff0c\u5b83\u4f1a\u628a\u4ea4\u6613\u4f5c\u4e3a\u4e00\u4e2a\u91cd\u914d\u7f6e\u4ea4\u6613\uff0c\u5e76\u76f8\u5e94\u7684\u505a\u63a5\u6536\u6216\u8005\u62d2\u7edd\u5904\u7406\u3002\u5982\u679c\u94feID\u4e0d\u5b58\u5728\uff0c\u6392\u5e8f\u670d\u52a1\u68c0\u67e5\u5b83\u7684\u683c\u5f0f\uff0c\u9a8c\u8bc1\u4e3a\u6709\u6548\u8bf7\u6c42\uff0c\u7136\u540e\u5c01\u88c5\u8fd9\u4e2a\u8bf7\u6c42\u5230\u6392\u5e8f\u670d\u52a1\u7cfb\u7edf\u94fe\u7ed1\u5b9a\u7684ORDERER_TRANSACTION \u7c7b\u578b\u7684Envelope\uff0c\u63d0\u4ea4\u7ed9\u5171\u8bc6\u3002\u6700\u7ec8\uff0c\u4e00\u65e6\u4ea4\u6613\u88ab\u6392\u5e8f\uff0c\u5b83\u4f1a\u88ab\u518d\u89e3\u5c01\uff0c\u518d\u6b21\u9a8c\u8bc1\u3002\u53ea\u6709\u6392\u5e8f\u670d\u52a1\u7cfb\u7edf\u94fe\u914d\u7f6e\u53d1\u751f\u53d8\u66f4\u6216\u8005\u540c\u4e00\u94feID\u7684\u94fe\u521b\u5efa\u8bf7\u6c42\u540c\u65f6\u63d0\u4ea4\u7684\u60c5\u51b5\u4e0b\uff0c\u9a8c\u8bc1\u624d\u4f1a\u5931\u8d25\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6c42\u4f1a\u88ab\u8bb0\u5165\u65e5\u5fd7\u5e76\u4e22\u5f03\u3002  Finally, after consensus is achieved and the still valid configuration transaction is processed, new ledger resources are allocated and the configuration transaction is embedded into the genesis block for the new chain.  The created can poll for this creation via a Deliver request.  \u6700\u540e\uff0c \u5171\u8bc6\u8fbe\u6210\uff0c\u914d\u7f6e\u8bf7\u6c42\u88ab\u5904\u7406\u540e\uff0c\u65b0\u7684\u8d26\u672c\u8d44\u6e90\u4f1a\u88ab\u5206\u914d\uff0c\u5e76\u4e14\u914d\u7f6e\u4ea4\u6613\u4f1a\u88ab\u5d4c\u5165\u5230 \u65b0\u94fe\u7684\u521b\u59cb\u5757\u3002\u521b\u5efa\u8005\u53ef\u4ee5\u901a\u8fc7Deliver\u8bf7\u6c42\u83b7\u53d6\u521b\u59cb\u5757\u3002", 
            "title": "6.2 Chain Creation Request (Configuration Transaction)"
        }, 
        {
            "location": "/sdk-design_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLidong Guo\n\n\n\n\n\n\n\n\n\n\n1 \u6982\u8981\n\n\nHyperledger Fabric v1.0\u63d0\u4f9b\u4e86\u57fa\u672c\u7684Protocol Buffers \u683c\u5f0f\u7684API\u901a\u8fc7gRPC\u534f\u8bae\u4f5c\u7528\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u3002\u8fd9\u4e9bAPI\u5305\u542b\u4e86\u4ea4\u6613\u5904\u7406\u3001\u5b89\u5168\u7684\u6210\u5458\u5173\u7cfb\u670d\u52a1\u3001\u533a\u5757\u94fe\u904d\u5386\u548c\u4e8b\u4ef6\u5904\u7406\u3002\u6709\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301Protocol Buffers\uff0c\u5305\u62ecGo, C#, Java, Javascript, Python, and C++\u3002\u6240\u4ee5\u6709\u5fc5\u8981\u7ed9\u5e94\u7528\u5f00\u53d1\u5de5\u7a0b\u5e08\u63d0\u4f9b\u4e00\u4e2a\u672c\u5730SDK\u3002\n\n\n\u672c\u6587\u6863\u8be6\u8ff0\u4e86\u4e00\u4e2aSDK\u5e94\u8be5\u63d0\u4f9b\u7684API\u6700\u5c0f\u96c6\u5408\u7684\u5b9e\u73b0\u3002\u4e00\u4e2aSDK\u7684\u76ee\u6807\u5373\u8981\u89e3\u51b3\u5ba2\u6237\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u76f4\u63a5\u9762\u5bf9\u7684\u4e00\u4e9b\u539f\u59cb\u9700\u6c42\uff1b\u53c8\u8981\u505a\u4e00\u4e9b\u9876\u5c42\u7684\u5408\u7406\u62bd\u8c61\u4ee5\u56fe\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\uff0c\u5e76\u4e14\u5728\u672c\u5730\u5e94\u7528\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9bAPI\u540e\u65b9\u4fbf\u5f00\u53d1\u5de5\u4f5c\u7684\u8fdb\u884c\u3002\u7136\u800c\uff0c\u4f7f\u7528SDK\u5e76\u4e0d\u4f1a\u59a8\u788d\u5e94\u7528\u76f4\u63a5\u8c03\u7528gRPC\u7684\u64cd\u4f5c\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5f53\u524d\u7684REST API\u5e76\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528\uff0cSDK\u4e0d\u5e94\u8be5\u57fa\u4e8e\u4f7f\u7528REST API \u800c\u521b\u5efa\u3002\u8df3\u8fc7REST\u76f4\u63a5\u4f7f\u7528gRPC\u7684\u539f\u56e0\u662f\uff1a\u80fd\u591f\u63a7\u5236\u5168\u53cc\u5411\u7684\u6570\u636e\u6d41\uff08\u5927\u90e8\u5206\u7684API\u8c03\u7528\u90fd\u662f\u5f02\u6b65\u7684\uff09\uff0c\u66f4\u597d\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u81ea\u4ece\u8282\u70b9\u5185\u90e8\u6a21\u5757\u901a\u4fe1\u4f7f\u7528\u4e86gRPC\u4e4b\u540e\uff0c\u4fbf\u4e0d\u5fc5\u518d\u5f00\u653e\u66f4\u591a\u7684HTTP/HTTPS\u7aef\u53e3\u4e86\u3002\n\n\n\u4e00\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u65b0\u7684\u6210\u5458\u670d\u52a1\u65b9\u5f0f\uff08CA\uff09\u662f\u6309REST API\u7684\u89c4\u5219\u5b9e\u73b0\u7684\n\n\n\u4f5c\u4e3a\u53c2\u8003\uff0cFabric v1.0\u7684\u67b6\u6784\u548c\u4ea4\u4e92\u6a21\u578b\u53ef\u4ee5\u5728\u4e0b\u9762\u8fd9\u4e2a\u94fe\u63a5\u6240\u6307\u5411\u7684\u5de5\u4f5c\u5355\u5143\u7684\u9644\u4ef6\u6587\u6863\u91cc\u9762\u67e5\u770b https://jira.hyperledger.org/browse/FAB-37\n\n\n2 \u76ee\u6807\n\n\n2.1 \u5e94\u7528\u5f00\u53d1\n\n\nFabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u79cd\u64cd\u4f5c\u533a\u5757\u94fe\u7f51\u7edc\u7684\u65b9\u5f0f\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u90e8\u7f72/\u6267\u884cchaincode\uff0c\u76d1\u542c\u7f51\u7edc\u4e2d\u4ea7\u751f\u7684\u4e8b\u4ef6\uff0c\u63a5\u6536\u5757\u4fe1\u606f\uff0c\u628a\u4ea4\u6613\u5b58\u50a8\u5230\u8d26\u672c\u4e2d\uff0c\u7b49\u7b49\n\n\n2.2 chaincode\u5f00\u53d1\n\n\nFabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199chaincode\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u3002\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u628achaincode\u90e8\u7f72\u5230\u7f51\u7edc\u4e0a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u6d4b\u8bd5chaincode\n\n\n3 \u539f\u5219\n\n\n3.1 \u826f\u597d\u7684API\u6587\u6863\uff0c\u6570\u636e\u6a21\u578b\uff0c\u793a\u4f8b\u4ee3\u7801\n\n\nSDK\u5e94\u8be5\u63d0\u4f9b\u6e05\u6670\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5305\u62ec\u53ef\u7528\u7684API\uff0c\u6570\u636e\u6a21\u578b\uff0c\u5982\u4f55\u4f7f\u7528API\u7684\u793a\u4f8b\u8bf4\u660e\n\n\n3.2 \u4fbf\u4e8e\u4f7f\u7528\n\n\nChaincode\u5f00\u53d1\u4eba\u5458\u548c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u5173\u6ce8\u4e8e\u4e66\u5199\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u3002\u5c3d\u7ba1\u5f00\u53d1\u4eba\u5458\u719f\u6089fabric\u5185\u90e8\u6784\u4ef6\u5bf9\u5f00\u53d1\u672c\u8eab\u662f\u6709\u5229\u7684\uff0c\u4f46\u662f\u8fd9\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5fc5\u987b\u7684\u5148\u51b3\u6761\u4ef6\u3002SDK\u7f16\u8bd1\u65f6\u95f4\u4e0a\u4e0d\u5e94\u8be5\u5bf9fabric project\u6709\u4efb\u4f55\u4f9d\u8d56\u3002\uff08\u9664\u975e\u539f\u59cb\u6587\u4ef6\u5b9a\u4e49\u4e86\u591a\u79cd\u5408\u7ea6\uff1f\uff1f\uff09 SDK packages/jars/libraries \u5e94\u8be5\u5728\u5e38\u7528\u7684\u8d44\u6e90\u5e93\u7f51\u7ad9\u4e0a\u53ef\u83b7\u53d6\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8f7b\u677e\u5b89\u88c5\u5b83\u4eec\u6216\u8005\u7acb\u5373\u5f00\u59cb\u7f16\u5199Chaincode\u6765\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n3.3 \u6027\u80fd\n\n\n\u8fd9\u4e2aSDK\u5fc5\u987b\u4ed4\u7ec6\u8bbe\u8ba1\u6765\u8fbe\u5230\u9ad8\u541e\u5410\u91cf\uff0c\u6c34\u5e73\u6269\u5c55\u80fd\u529b\u548c\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3002\u5b83\uff08\u672cSDK\uff09\u5e94\u8be5\u662f\u4e00\u4e2a\u7ec4\u4ef6\u72b6\u6001\u65e0\u5173\u5316\u7684\u7406\u60f3\u5b9e\u73b0\uff0c\u6216\u8005\u5141\u8bb8\u5e94\u7528\u5b9e\u4f8b\u501f\u52a9\u6570\u636e\u5e93\u5171\u4eab\u72b6\u6001\u3002\n\n\n3.4 \u7248\u672c\u63a7\u5236\n\n\n\u7edf\u4e00\u7684\u7248\u672c\u63a7\u5236\u4e0b\uff0c\u5efa\u8bae\u5c06SDK\u901a\u8fc7\u591a\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u5e76\u4e14\u591a\u79cd\u5b9e\u73b0\u7684SDK\u4e4b\u95f4\u5728\u529f\u80fd\u4e0a\u80fd\u591f\u4fdd\u6301\u4e92\u901a\n\n\n3.5 \u53ef\u670d\u52a1\u6027\n\n\n\u672cSDK\u5e94\u8be5\u65b9\u4fbf\u4e8e\u5728\u53ef\u670d\u52a1\u6027\u652f\u6301\u4e2d\u6dfb\u52a0\u63d2\u4ef6\uff0c\u5373\u65e5\u5fd7\u7cfb\u7edf\u3002\u5b83\u5e94\u8be5\u5141\u8bb8SDK\u4f7f\u7528\u65b9\u7684\u5e94\u7528\u6dfb\u52a0\u4e00\u4e2a\u65e5\u5fd7\u5904\u7406\u7684\u5b9e\u4f8b\u3002\u5e94\u7528\u503e\u5411\u4e8e\u5728SDK\u5185\u90e8\u548c\u5916\u90e8\u4f7f\u7528\u4e00\u4e2a\u901a\u7528\u7684\u65e5\u5fd7\u7cfb\u7edf\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u4e00\u4e2aIT\u7ec4\u7ec7\u4e3a\u4e86\u76d1\u89c6\u548c\u5206\u6790\u901a\u5e38\u4f1a\u5b89\u88c5\u65e5\u5fd7\u811a\u672c\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u6807\u51c6\u65e5\u5fd7\u683c\u5f0f\u7684\u9700\u6c42\u3002\u672cSDK\u5e94\u8be5\u6709\u4e00\u4e2a\u7f16\u8bd1\u8fdb\u7248\u672c\u7684\u65e5\u5fd7\u7cfb\u7edf\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u4eba\u5458\u901a\u8fc7\u9ed8\u8ba4\u65b9\u5f0f\u83b7\u53d6\u65e5\u5fd7\u3002\u4f46\u662f\u5b83\u5fc5\u987b\u5141\u8bb8\u8bbe\u7f6e\u4e00\u4e2a\u62e5\u6709\u4e00\u7cfb\u5217\u6807\u51c6\u96c6\u5408\u7684\u5916\u90e8\u65e5\u5fd7\u7cfb\u7edf\u6765\u8bb0\u5f55API\u65e5\u5fd7\u3002\n\n\n4 \u573a\u666f\n\n\n\u6709\u8bb8\u591a\u79cd\u53ef\u80fd\u7684\u573a\u666f\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u5173\u6ce8\u4e00\u5c11\u90e8\u5206\u6765\u8bf4\u660eSDK\u7684\u6574\u4f53\u529f\u80fd\u3002\n\n\n4.1 \u6210\u5458\u7684\u6ce8\u518c\u548c\u767b\u8bb0\n\n\n\u4e3a\u4e86\u8ddffabric\u4ea4\u4e92\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5177\u5907\u4e00\u4e2a\u4e13\u6709\u7684\u8eab\u4efd\u8ba4\u8bc1\uff0c\u8fd9\u4e2a\u8ba4\u8bc1\u88ab\u7f16\u7801\u8fdb\u4e00\u4e2a\u53eb\u505aECert\uff08\u767b\u8bb0\u8bc1\u4e66\uff09\u7684\u6210\u5458\u8bc1\u4e66\u91cc\u3002\u8fd9\u4e2a\u8bc1\u4e66\u53ef\u80fd\u662f\u7531\u5916\u90e8\u7684\u8ba4\u8bc1\u673a\u6784\u63d0\u4f9b\uff0c\u6216\u8005\u7531fabric\u6210\u5458\u670d\u52a1\u63d0\u4f9b\uff0c\u53ea\u8981\u8fd9\u4e2aECert\u53ef\u4ee5\u88abfabric\u7ec4\u4ef6\u5728\u5efa\u7acb\u94fe\u7684\u4fe1\u4efb\u94fe\u65f6\u9a8c\u8bc1\u5373\u53ef\u3002\n\n\n\u5982\u679c\u7528\u4e00\u4e2a\u6807\u51c6\u7684CA\u6765\u7ba1\u7406\u5206\u914dECert\uff0c\u4ea4\u6613\u4f1a\u88abECert\u7b7e\u540d\u3002\u8fd9\u5c06\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u4ea4\u6613\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u90fd\u662f\u53ef\u9a8c\u8bc1\u7684\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0cMSP\u5728fabric\u4e2d\u7684\u8bbe\u8ba1\u662f\uff0c\u5229\u7528\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\u4eceECert\u7684\u5bc6\u94a5\u5bf9\u5bfc\u51fa\u4e00\u4e2a\u5bc6\u94a5\u5bf9\uff0c\u56e0\u6b64\u4e3a\u6bcf\u4e00\u4e2a\u4ea4\u6613\u4ea7\u751f\u4e00\u4e2a\u5047\u540d\u8bc1\u4e66\uff0c\u53c8\u53eb\u505aTCert\u3002\u4e00\u4e2aTCert\u4e0d\u80fd\u4ee3\u8868\u4e00\u4e2a\u8ba4\u8bc1\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u80fd\u901a\u8fc7\u6210\u5458\u670d\u52a1\u8ffd\u8e2a\u5230\u539f\u59cb\u7684ECert\u3002\u8fd9\u4e2a\u6280\u672f\u5728\u8bb8\u591a\u4e1a\u52a1\u573a\u666f\u4e0b\u9690\u85cf\u4ea4\u6613\u8ba4\u8bc1\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\n\n\nFabric\u63d0\u4f9b\u4e86MSP\u63a5\u53e3\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u547d\u540d\u4e3a\u201cCOP\u201d\u7acb\u610f\u6765\u6e90\u4e8e\u5b83\u7684\u4f5c\u7528\u5c31\u50cf\u8b66\u5bdf\uff0c\u800c\u4e0d\u662f\u6765\u6e90\u4e8e\u9996\u5b57\u6bcd\u3002\u5728github\u7684\u7ec4\u7ec7\u8d85\u7ea7\u8d26\u672c\u91cc\u9762\u7684\u4ee3\u7801\u5e93\u201cfabric-cop\u201d\u5c31\u662f\u5b83\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u5728github\u4e0ahyperledger\u7ec4\u7ec7\u4e0b\u5e76\u672a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u5e93\uff0c\u53ef\u80fd\u662f\u672c\u6587\u6863\u6210\u4e66\u540e\u53c8\u6709\u53d8\u66f4\u3002\uff09\n\n\n\u5982\u679c\u7ed9\u4e00\u4e2a\u57fa\u4e8efabric\u7684\u7f51\u7edc\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u7684CA\uff0c\u7136\u540e\u7528\u6237\u6ce8\u518c\u4e5f\u4f1a\u5728\u5916\u90e8\u7ef4\u62a4\u3002\u8fd9\u4e2a\u5916\u90e8\u7684\u7528\u6237\u6ce8\u518c\u7cfb\u7edf\u8d1f\u8d23\u8ba4\u8bc1\u7528\u6237\u3002\u4e00\u4e2a\u5df2\u7ecf\u88ab\u8ba4\u8bc1\u7684\u7528\u6237\u4e3a\u4e86\u83b7\u53d6ECert\u53ef\u4ee5\u4f7f\u7528CA\u8bf7\u6c42\u767b\u8bb0\u3002\n\n\n\u5c31SDK\u800c\u8a00\uff0c\u5e94\u8be5\u6709\u4e24\u79cdAPI\uff1a\u652f\u6301\u4efb\u4f55CA\uff08\u5305\u62ec\u5185\u5efa\u7684\u548c\u5916\u90e8\u7684\uff09\u7684\u901a\u7528API\uff0c\u548c\u4e13\u95e8\u4e3afabric\u7684\u5185\u5efa\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u7684API\u3002\u901a\u7528API\u8d1f\u8d23\u5141\u8bb8\u4f7f\u7528SDK\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u6bd4\u5982\u5173\u8054\u7528\u6237\u8eab\u4efd\uff0c\u547d\u540d\u4e3a\u201cenroll()\u201d\uff0c\u4e3a\u8ba4\u8bc1\u7528\u6237\u83b7\u53d6ECert\u7684\u7a0b\u5e8f\uff1b\u8fd8\u6709\u201cgetTCerts()\u201d\uff0c\u83b7\u53d6\u4ea4\u6613\u8bc1\u4e66\u5141\u8bb8\u7528\u6237\u63d0\u4ea4\u4ea4\u6613\u3002\n\n\n\u5ba2\u6237\u7aef\u6709\u5173\u53ef\u9009\u7684\u6210\u5458\u670d\u52a1\u5b9e\u73b0\uff08\u5373COP\uff09\u7684\u8bbe\u8ba1\u9700\u8981\u5355\u72ec\u7684\u6587\u6863\u6765\u8bf4\u660e\u3002https://docs.google.com/document/d/1TO-sdHGpn8ifB9C_pH_y54H75Rx0RdXvZih7-lhsLII/edit\n\n\n4.2 \u94fe\u7684\u521b\u5efa\n\n\nHyperledger Fabric\u6240\u8bbe\u8ba1\u7684\u652f\u6301\u9690\u79c1\u6027\u548c\u673a\u5bc6\u6027\u7684\u901a\u9053\u548c\u8d26\u672c\uff0c\u7edf\u4e00\u88ab\u79f0\u4e3a\u4e00\u4e2a\u201c\u94fe\u201d\u3002\u901a\u9053\u548c\u8d26\u672c\u8bbe\u8ba1\u66f4\u591a\u5185\u5bb9\u8bf7\u67e5\u770b\uff1a\nhttps://docs.google.com/document/d/1eRNxxQ0P8yp4Wh__Vi6ddaN_vhN2RQHP-IruHNUwyhc/edit#\u3002\u901a\u4fe1\uff08\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff09\u88ab\u9650\u5236\u5728\u53c2\u4e0e\u65b9\u4e4b\u95f4\u7684\u901a\u9053\u5185\uff0c\u540c\u65f6\u5757\u5185\u6570\u636e\uff08\u5df2\u88ab\u6301\u4e45\u5316\u7684\u6570\u636e\uff09\u4fdd\u5b58\u5728\u4e00\u4e2a\u79c1\u6709\u7684\u4ec5\u4ec5\u5728\u8fd9\u4e9b\u53c2\u4e0e\u65b9\u4e4b\u95f4\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\u8d26\u672c\u4e2d\u3002\u4e0d\u5c5e\u4e8e\u94fe\u7684\u7f51\u7edc\u8282\u70b9\u4e0d\u4e86\u89e3\u901a\u9053\u548c\u79c1\u6709\u8d26\u672c\u5185\u90e8\u4efb\u4f55\u4e8b\u7269\uff0c\u4e5f\u4e0d\u80fd\u5229\u7528\u8fd9\u4e9b\u4e8b\u7269\u3002\n\n\n\u4e00\u65e6\u4e00\u4e2a\u94fe\u88ab\u521b\u5efa\uff0c\u5e94\u7528\u53ef\u4ee5\u53d1\u9001\u4ea4\u6613\u7ed9\u94fe\u4e0a\u4ee5\u79c1\u6709\u65b9\u5f0f\u5b58\u5728\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u5df2\u63d0\u4ea4\u88ab\u9a8c\u8bc1\u7684\u4ea4\u6613\u5230\u79c1\u6709\u8d26\u672c\u3002\n\n\n\u521b\u5efa\u94fe\u7684\u8d23\u4efb\u843d\u5728\u5e94\u7528\u7a0b\u5e8f\u8eab\u4e0a\u3002\u901a\u8fc7SDK\u5e94\u7528\u7a0b\u5e8f\u521d\u59cb\u5316\u94fe\u7684\u7ec4\u7ec7\u56e2\u4f53\uff08\u7f51\u7edc\u6210\u5458\u7684\u4ee3\u8868\uff09\u6784\u6210\u5e76\u4e14\u7ed9\u6392\u5e8f\u670d\u52a1\u3002\n\n\n\u5728SDK\u91cc\uff0c\u901a\u9053\u548c\u5b83\u672c\u8eab\u5173\u8054\u7684\u8d26\u672c\u7684\u7ed1\u5b9a\u7531\u94fe\u7c7b\u4f53\u73b0\u3002\u5e94\u7528\u548c\u6307\u5b9a\u7684\u6392\u5e8f\u8282\u70b9\u7b2c\u4e00\u6b21\u51c6\u5907\u4e00\u4e2a\u65b0\u7684\u901a\u9053\u5e76\u4e14\u83b7\u53d6\u4e00\u4e2a\u5305\u542b\u5173\u4e8e\u65b0\u94fe\u7684\u5bc6\u94a5\u4fe1\u606f\u7684\u521b\u4e16\u533a\u5757\uff0c\u5305\u542b\u53c2\u4e0e\u8005\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3001\u6392\u5e8f\u8282\u70b9\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3002\u5e94\u7528\u901a\u8fc7\u76ee\u6807\u662f\u914d\u7f6e\u7cfb\u7edfchaincode\u7684\u914d\u7f6e\u5316\u4ea4\u6613\u6765\u534f\u8c03\u65b0\u901a\u9053\u5bf9\u53c2\u4e0e\u8282\u70b9\u7684\u9080\u8bf7\u3002\n\n\n\n\n4.3 \u4ea4\u6613\u652f\u6301\n\n\n\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u660e\u786e\u7684\u4e24\u4e2a\u6b65\u9aa4\uff1a\u80cc\u4e66\u548c\u63d0\u4ea4\u3002\u80cc\u4e66\u662f\u8bf7\u6c42\u8282\u70b9\u5bf9\u4ea4\u6613\u7684\u7ed3\u679c\u8fdb\u884c\u8fd0\u884c\u5e76\u80cc\u4e66\uff08\u7b7e\u540d\uff09\uff1b\u63d0\u4ea4\u662f\u5728\u4ea4\u6613\u548c\u4ea4\u6613\u7684\u80cc\u4e66\u5185\u5bb9\u7684\u6709\u6548\u671f\u5185\u8bf7\u6c42\u5171\u8bc6\u3002\n\n\n\u4e0b\u56fe\u8bf4\u660e\u4ea4\u6613\u65f6\u5ba2\u6237\u7aefSDK\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u67b6\u6784\u6587\u6863\uff08https://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architecture-Proposal.md\uff09\u3002\n\n\n\u9996\u5148SDK\u548c\u5e94\u7528\u534f\u540c\u5de5\u4f5c\uff0c\u4f7f\u7528\u5e94\u7528\u7684\uff08\u6216\u8005\u88ab\u8ba4\u8bc1\u7528\u6237\u7684\uff09\u79c1\u94a5\u7ed9\u4fe1\u606f\u7b7e\u540d\uff08\u6240\u6709\u7684\u5916\u90e8\u4fe1\u606f\u90fd\u9700\u8981\u7b7e\u540d\u8ba4\u8bc1\uff09\u3002\u7136\u540e\u5b83\u6839\u636e\u80cc\u4e66\u7b56\u7565\uff08\u901a\u8fc7\u9a8c\u8bc1\u7cfb\u7edf\u94fe\u7801\u6216\u8005VSCC\u5b9e\u73b0\u7684\uff09\u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u53d1\u9001\u4fe1\u606f\u3002\u5b83\u83b7\u5f97\u5f02\u6b65\u7684\u53cd\u9988\u5e76\u4e14\u51b3\u5b9a\u662f\u5426\u6267\u884c\u521b\u5efa\u548c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u6267\u884c\u4ea4\u6613\u63d0\u4ea4\u7684\u51b3\u5b9a\u662f\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u8c13\u8bcd\uff08\u5c31\u50cf2 out of 3\uff09\u57fa\u4e8e\u5e26\u5916\u77e5\u8bc6\u3002\u4e00\u65e6\u63d0\u4ea4\uff0c\u4ea4\u6613\u7684\u5904\u7406\u6d41\u7a0b\u4fbf\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5SDK\u76d1\u542c\u63d0\u4ea4\u4e8b\u4ef6\u6765\u901a\u77e5\u5e94\u7528\u4ea4\u6613\u5904\u7406\u6d41\u7a0b\u7684\u5b8c\u6210\u6216\u8005\u62d2\u7edd\u7684\u7ed3\u679c\u3002\n\n\n\n\n\u4e0a\u56fe\u662f\u5bf9\u4ea4\u6613\u6d41\u7a0b\u975e\u5e38\u4e0a\u5c42\u7684\u63cf\u8ff0\u3002SDK\u4e2d\u6709\u8be6\u7ec6\u7684\u6267\u884c\u7f51\u7edc\u548c\u73af\u5883\u914d\u7f6e\uff0c\u5305\u62ec\u83b7\u53d6\u7b7e\u540d\u5bc6\u94a5\u6765\u5b89\u5168\u7684\u7ba1\u7406\u6210\u5458\uff0c\u5904\u7406\u4ea4\u6613\u548c\u4e8b\u4ef6\u6d41\uff0c\uff08\u4f9d\u8d56\u5e94\u7528\u7684\uff09\u591a\u79cd\u5171\u8bc6\u901a\u9053\u3002\n\n\n5 \u5ba2\u6237\u7aef\u670d\u52a1\u5668API\u53c2\u8003\n\n\n\u4e0b\u9762\u7684\u94fe\u63a5\u6307\u5411gRPC\u4e0efabric\uff08\u8282\u70b9\uff0c\u6392\u5e8f\u8005\u548c\u6210\u5458\u670d\u52a1\uff09\u6c9f\u901a\u7684\u4fe1\u606f\u548c\u670d\u52a1\u5b9a\u4e49\u3002\n\n\nProposal\n \uff08\u90e8\u7f72\u6216\u8005\u4ea4\u6613\u8c03\u7528\u7684\u63d0\u6848\uff09\n\n\nProposalResponse\n \uff08\u5168\u5c40\u7684\u63d0\u6848\u56de\u5e94\uff09\n\n\nChaincode\n \uff08chaincode\uff0c\u8c03\u7528\uff0c\u90e8\u7f72\uff0c\u7b49\u7ec6\u8282\uff09\n\n\nChaincodeProposal\n (chaincode-specific proposal header and payload)\n\n\nTransaction\n (transaction invocation)\n\n\nChaincodeTransaction\n (chaincode-specific transaction action payload)\n\n\n\u65b0\u7684COP API\u662f\u57fa\u4e8ejson\u7684\uff0c\u9700\u8981\u6dfb\u52a0\u5230\u65b0\u7684\u6210\u5458\u670d\u52a1\u8bbe\u8ba1\u4e2d\u3002\n\n\n\u6d88\u606f\u5b9a\u4e49\u5e94\u8be5\u662f\u8bbe\u8ba1SDK APIs\u7684\u4e00\u4e2a\u7075\u611f\u6765\u6e90\u3002APIs\u660e\u663e\u6ca1\u6709\u5fe0\u5b9e\u7684\u53cd\u6620\u51fa\u6d88\u606f\u5b9a\u4e49\uff0c\u56e0\u4e3aSDK\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u7f3a\u7701\u548c\u72b6\u6001\u4fe1\u606f\u6765\u6700\u5c0f\u5316\u8bf7\u6c42\u7684\u53c2\u6570\u3002\n\n\n6 \u8be6\u7ec6\u8bf4\u660e\n\n\n\u8fd9\u91cc\u6211\u4eec\u8ba8\u8bba\u8bbe\u8ba1\u539f\u5219\u548c\u67b6\u6784\u601d\u8def\u3002\n\n\n\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7b49\u7ea7\u7684\uff08\u6570\u503c\u8d8a\u5c0f\u8868\u793a\u7b49\u7ea7\u8d8a\u9ad8\uff09\u4e00\u4e9b\u6a21\u5757\uff1a\n\n\nPackage: Hyperledger Fabric Client\n\n\n\n\n\n\n\n\n\u6a21\u5757\n\n\n\u7b49\u7ea7\n\n\n\u529f\u80fd\n\n\n\n\n\n\n\n\n\n\nClient\n\n\n0\n\n\n\u4e3b\u8981\u7684\u5165\u53e3\u6a21\u5757\u3002\u5b83\u5fc5\u987b\u5141\u8bb8\u7528\u6237\u521b\u5efa\u9700\u8981\u7684\u4efb\u4f55\u5bf9\u8c61\u6765\u6267\u884c\u6240\u6709\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u76f4\u63a5\u8fde\u63a5\u7f51\u7edc\uff0cchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u6267\u884c\uff0c\u591a\u79cd\u67e5\u8be2\u3002\u53e6\u5916\uff0c\u57fa\u4e8e\u7f16\u7801\u89c4\u8303\u548c\u666e\u904d\u7684\u793e\u533a\u7ec3\u4e60\uff0c\u6bcf\u4e00\u79cd\u8bed\u8a00\u7684\u5b9e\u73b0\u4e5f\u80fd\u51b3\u5b9a\u662f\u5426\u6dfb\u52a0\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5982sendTransaction(chain, tx)\n\n\n\n\n\n\nChain\n\n\n1\n\n\n\u4e00\u4e2a\u94fe\u4ee3\u8868\u4e00\u4e9b\u8282\u70b9\u7279\u522b\u5f62\u6210\u7684\u4e00\u4e2a\u7f51\u7edc\uff0c\u542f\u52a8\u4e00\u4e2a\u5171\u8bc6\u7684\u901a\u9053\uff0c\u5728\u901a\u9053\u4e2d\u4ea4\u6613\u53ef\u4ee5\u88ab\u72ec\u7acb\u7684\u5904\u7406\u3002\u4e00\u4e2a\u7f51\u7edc\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u94fe\u3002\u94fe\u4e0a\u7684\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u8d26\u672c\u5305\u542b\u4ea4\u6613\u5728\u94fe\u4e0a\u6d3e\u53d1\uff0c\u5305\u62ec\u6210\u5458\u5173\u7cfb\u7684\u4efb\u4f55\u914d\u7f6e\u3002\u6240\u6709\u7684\u4ea4\u6613\u90fd\u662f\u5728\u94fe\u4e0a\u53d1\u9001\uff0c\u4e00\u4e2a\u5e94\u7528\u53ef\u80fd\u64cd\u4f5c\u591a\u4e2a\u94fe\u3002\n\n\n\n\n\n\nPeer\n\n\n2\n\n\n\u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u3002\u8282\u70b9\u7684\u89d2\u8272\u6709\u80cc\u4e66\u8282\u70b9\u548c\u63d0\u4ea4\u8282\u70b9\uff0c\u5b83\u4eec\u90fd\u5728\u7ef4\u62a4\u7740\u8d26\u672c\u3002\u5e94\u7528\u53ef\u80fd\u8fde\u63a5\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u53ef\u7528\u7684\u8282\u70b9\n\n\n\n\n\n\nOrderer\n\n\n2\n\n\n\u7c7b\u4f3c\u8282\u70b9\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4ee3\u8868\u6392\u5e8f\u670d\u52a1\u7684\u7ec8\u7aef\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8282\u70b9\uff08\u5f00\u53d1\u65f6\u672c\u5730\u5b89\u88c5\uff09\u6216\u8005\u4e00\u4e2a\u7f51\u7edc\u6392\u5e8f\u8005\u7684\u4ee3\u7406\u8282\u70b9\u3002\u57fa\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u7684fabric\u4f1a\u6709\u4e00\u4e2a\u7531\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\u7684\u5355\u72ec\u7684\u6392\u5e8f\u670d\u52a1\u3002\u5e94\u7528\u53ef\u4ee5\u9009\u62e9\u4fe1\u4efb\u7279\u5b9a\u7684\u6392\u5e8f\u8005\uff0c\u6216\u8005\u4e00\u90e8\u5206\u6392\u5e8f\u8005\uff0c\u6216\u8005\u8bbe\u7f6e\u4ee3\u7406\u53bb\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u5e7f\u64ad\u4ea4\u6613\u3002\n\n\n\n\n\n\nUser\n\n\n2\n\n\n\u4ee3\u8868\u5728\u7f51\u7edc\u4e0a\u4ea4\u6613\u7684\u7528\u6237\u3002\u7528\u6237\u5b9e\u4f8b\u53ef\u4ee5\u57fa\u4e8e\u767b\u8bb0\u8bc1\u4e66\u88ab\u521d\u59cb\u5316\u3002\u8bc1\u4e66\u53ef\u4ee5\u4ece\u6210\u5458\u670d\u52a1\u6216\u8005\u5916\u90e8CA\u83b7\u53d6\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u79cd\u7528\u6237\u4e5f\u80fd\u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\u6210\u5458\u3002\u7136\u800c\uff0c\u8fd9\u4e0e\u5e94\u7528\u7a0b\u5e8f\u65e0\u5173\uff08\u8fd9\u66f4\u50cf\u662f\u7f51\u7edc\u7ba1\u7406\u65b9\u9762\u7684\u95ee\u9898\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u8bbe\u8ba1\u4e2d\u6ca1\u6709\u5f00\u653e\u3002\n\n\n\n\n\n\nProposal\n\n\n3\n\n\n\u767b\u8bb0\u7684\u7528\u6237\u53ef\u4ee5\u5411\u8282\u70b9\u5217\u8868\u63d0\u51fa\u4ea4\u6613\u63d0\u6848\u6765\u80cc\u4e66\u4ea4\u6613\u3002\u4e00\u65e6\u63a5\u6536\u5230\u80cc\u4e66\u54cd\u5e94\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5df2\u7ecf\u83b7\u53d6\u80cc\u4e66\u7b7e\u540d\uff0c\u662f\u5426\u9700\u8981\u6267\u884c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u539f\u59cb\u7684GRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002\n\n\n\n\n\n\nProposalResponse\n\n\n3\n\n\n\u63d0\u6848\u8c03\u7528\u80cc\u4e66\u8282\u70b9\u7684\u54cd\u5e94\uff0c\u6253\u5305\u80cc\u4e66\u7ed3\u679c\uff08\u662f\u6216\u5426\uff09\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u54cd\u5e94\u539f\u59cb\u7684GRPC\u6d88\u606f\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u5229\u7528\u5b83\u81ea\u5df1\u7684\u5185\u5bb9\uff08\u80cc\u4e66\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\uff09\u3002\n\n\n\n\n\n\nTransaction\n\n\n3\n\n\n\u767b\u8bb0\u7528\u6237\u6536\u96c6\u4e86\u80cc\u4e66\u4e4b\u540e\u53ef\u4ee5\u63d0\u4ea4\u4ea4\u6613\u3002\u4ea4\u6613\u8bf7\u6c42\u5305\u542b\u80cc\u4e66\u7b7e\u540d\u548cMVCC+post-image\uff0c\u5e76\u4e14\u4f7f\u7528\u6392\u5e8f\u670d\u52a1API\u3002\u4ea4\u6613\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u90e8\u7f72\u548c\u6267\u884c\u3002\u8fd9\u662f\u4ea4\u6613\u6709\u5173\u539f\u59cbGRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002\n\n\n\n\n\n\nCryptoSuite\n\n\n3\n\n\n\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u5bf9\uff0c\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u6d88\u606f\uff0c\u5b89\u5168\u7684hash\u548cMAC\u3002\n\n\n\n\n\n\n\n\nPackage: Member Service\n \n\n\n\n\n\n\n\n\n\u6a21\u5757\n\n\n\u7b49\u7ea7\n\n\n\u529f\u80fd\n\n\n\n\n\n\n\n\n\n\nMemberService\n\n\n0\n\n\n\u8fd9\u662ffabric\u53ef\u9009\u6a21\u5757\u7684\u5ba2\u6237\u7aef\uff0c\u6210\u5458\u670d\u52a1\u3002\u672c\u6a21\u5757\u7684\u4e3b\u8981\u529f\u80fd\u662f\u4ece\u6210\u5458\u670d\u52a1\u83b7\u53d6\u7528\u6237\u767b\u8bb0\u8bc1\u4e66\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u6a21\u5757\u672c\u8eab\u6216\u5b83\u7684\u6269\u5c55\u7c7b\u4e5f\u5e94\u8be5\u80fd\u5728fabric\u9ed8\u8ba4\u7684\u6210\u5458\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\u63d0\u4f9b\u53ef\u7528\u7684\u989d\u5916\u7684\u529f\u80fd\uff0c\u5982\u7528\u6237\u6ce8\u518c\u529f\u80fd\u3002\n\n\n\n\n\n\n\n\n\u4e3a\u4e86\u5e2e\u52a9\u8bf4\u660e\u4ee5\u4e0a\u5404\u6a21\u5757\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86\u4ee5\u4e0b\u7684UML\u56fe\uff1a\n\n\n\n\n6.1 \u5ba2\u6237\u7aef\n\n\n\u548c\u7ec8\u7aef\u7528\u6237\u4e3b\u8981\u7684\u4ea4\u4e92\u5904\u7406\u5668\u3002\u5ba2\u6237\u7aef\u5b9e\u4f8b\u63d0\u4f9b\u548c\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\uff0c\u6392\u5e8f\u8005\uff0c\u53ef\u9009\u6210\u5458\u670d\u52a1\u4ea4\u4e92\u7684\u5904\u7406\u5668\u3002\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528SDK\u9700\u8981\u548c\u591a\u4e2a\u7f51\u7edc\u4ea4\u4e92\uff0c\u5206\u522b\u901a\u8fc7\u5355\u72ec\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\u8fdb\u884c\u3002\n\n\n\u6bcf\u4e2a\u5ba2\u6237\u7aef\u88ab\u521b\u5efa\u65f6\uff0c\u5e94\u8be5\u662f\u4f7f\u7528\u6765\u81ea\u4e8e\u5171\u8bc6\u670d\u52a1\u7684\u914d\u7f6e\u6570\u636e\u521d\u59cb\u5316\u521b\u5efa\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u542b\u4e00\u4e2a\u88ab\u4fe1\u4efb\u7684\u6839\u7684\u5217\u8868\uff0c\u6392\u5e8f\u8282\u70b9\u8bc1\u4e66\u548cIP\u5730\u5740\uff0c\u8fd8\u6709\u4e00\u4e2a\u8282\u70b9\u8bc1\u4e66\u5217\u8868\u548c\u53ef\u4f7f\u7528\u7684IP\u5730\u5740\u3002\u8fd9\u5fc5\u987b\u662f\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8d23\u7ef4\u62a4\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\uff0c\u56e0\u4e3aSDK\u4e0d\u6301\u4e45\u5730\u4fdd\u5b58\u8fd9\u4e2a\u5bf9\u8c61\u3002\n\n\n\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\u53ef\u4ee5\u7ef4\u62a4\u51e0\u6761\u94fe\u4ee3\u8868\u901a\u9053\u548c\u76f8\u5173\u7684\u8d26\u672c\u3002\n\n\n\n\n\n\nnew_chain\uff08\u521b\u5efa\u4e00\u4e2a\u65b0\u94fe\uff09\n\n\n\u6839\u636e\u53c2\u6570\u7ed9\u51fa\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a\u94fe\u7684\u5b9e\u4f8b\u3002\u8fd9\u5b9e\u9645\u4e0a\u4ee3\u8868\u201c\u901a\u9053\u201d\uff08\u6b63\u5982\u4e0a\u9762\u89e3\u91ca\u7684\uff09\uff0c\u8fd9\u4e2a\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002\u521d\u59cb\u5316\u8fd9\u4e2a\u901a\u9053\uff0c\u8fd9\u4e2a\u8fd4\u56de\u7684\u5bf9\u8c61\u4e0a\u5fc5\u987b\u914d\u7f6e\u4e00\u4e2a\u53c2\u4e0e\u65b9\u7684\u80cc\u4e66\u8005\u5217\u8868\u548c\u6392\u5e8f\u8005\u8282\u70b9\u3002\n\n\nParams \uff08\u53c2\u6570\uff09\n\n\n\n\nname (str):\u94fe\u7684\u540d\u79f0\uff0c\u63a8\u8350\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u9632\u6b62\u78b0\u649e\n\n\n\n\nReturns\uff08\u8fd4\u56de\u503c\uff09\n\n\n\n\n(Chain instance):\u672a\u521d\u59cb\u5316\u7684\u94fe\u7684\u5b9e\u4f8b\n\n\n\n\n\n\n\n\nget_chain\uff08\u83b7\u53d6\u94fe\uff09\n\n\n\u83b7\u53d6\u94fe\u7684\u5b9e\u4f8b\u3002\u672c\u63a5\u53e3\u5141\u8bb8\u4fdd\u5b58\u5df2\u5b58\u5728\u7684\u94fe\u5b9e\u4f8b\u4f9b\u4e4b\u540e\u7684\u68c0\u7d22\uff0c\u5e76\u4e14\u5728\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u3002\u8bb0\u5f55\u94fe\u7684\u4fe1\u606f\u662f\u5e94\u7528\u7a0b\u5e8f\u6216\u8005SDK\u8d1f\u8d23\u7684\u4e8b\u60c5\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u67e5\u770b\u5b58\u50a8\u4e2d\u94fe\u7684\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u8c03\u7528\u53e6\u5916\u4e00\u79cdAPI\u67e5\u8be2\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u6765\u83b7\u5f97\u8fd9\u4e9b\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nname (str): The name of the chain \uff08\u94fe\u7684\u540d\u79f0\uff09\n\n\n\n\nReturns\n\n\n\n\n(Chain instance or None): the chain instance for the name. \uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\uff09\n\n\n\n\nError:\n\n\n\n\nThe state store has not been set\uff08\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5b58\u50a8\u72b6\u6001\uff09\n\n\nA chain does not exist under that name\uff08\u4e0d\u5b58\u5728\u8be5\u540d\u79f0\u547d\u540d\u7684\u94fe\uff09\n\n\n\n\n\n\n\n\nquery_chain_info\uff08\u67e5\u8be2\u94fe\u7684\u4fe1\u606f\uff09\n\n\n\u8fd9\u662f\u4e00\u4e2a\u7f51\u7edc\u8c03\u7528\uff0c\u7528\u6765\u67e5\u8be2\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u94fe\u7684\u4fe1\u606f\u3002\u76ee\u6807\u8282\u70b9\u5fc5\u987b\u662f\u5c5e\u4e8e\u76ee\u6807\u94fe\uff0c\u624d\u80fd\u591f\u8fd4\u56de\u8bf7\u6c42\u7684\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nname (str): The name of the chain \uff08\u94fe\u540d\uff09\n\n\npeers (array of Peer instances): target Peers to query\uff08\u67e5\u8be2\u7684\u76ee\u6807\u8282\u70b9\uff09\n\n\n\n\nReturns\n\n\n\n\n(Chain instance or None): the chain instance for the name.\uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\u3002\uff09\n\n\n\n\nError:\n\n\n\n\nThe target Peer(s) does not know anything about the chain\uff08\u76ee\u6807\u8282\u70b9\u4e0d\u4e86\u89e3\u94fe\u7684\u4fe1\u606f\uff09\n\n\n\n\n\n\n\n\nset_state_store\uff08\u8bbe\u7f6e\u72b6\u6001\u7684\u5b58\u50a8\uff09\n\n\nSDK\u5e94\u8be5\u6709\u4e00\u4e2a\u5185\u5efa\u7684\u952e\u503c\u5b58\u50a8\u7684\u5b9e\u73b0\uff08\u5efa\u8bae\u662f\u57fa\u4e8e\u6587\u4ef6\u7684\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u4e8e\u5728\u5f00\u53d1\u4e2d\u8bbe\u7f6e\uff09\u3002\u4f46\u662f\u751f\u4ea7\u7cfb\u7edf\u9700\u8981\u901a\u8fc7\u6570\u636e\u5e93\u4e3a\u66f4\u591a\u7684\u7a33\u5b9a\u5b58\u50a8\u548c\u805a\u7c07\u5b58\u50a8\u5907\u4efd\uff0c\u6240\u4ee5\u591a\u79cd\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u5171\u4eab\u5e94\u7528\u72b6\u6001\uff08\u5907\u6ce8\uff1a\u5e94\u7528\u4e0d\u9700\u8981\u4e30\u5bcc\u7684\u72b6\u6001\uff09\u3002\u8fd9\u4e2aAPI\u4f7f\u5f97\u5b58\u50a8\u6a21\u5757\u5177\u6709\u53ef\u63d2\u62d4\u7279\u6027\uff0c\u6240\u4ee5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u5b58\u50a8\u5b9e\u73b0\u3002\n\n\nParams\n\n\n\n\nstore (KeyValueStore): instance of an alternative KeyValueStore implementation provided by the consuming app.\uff08\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u952e\u503c\u5b58\u50a8\u5b9e\u73b0\u7684\u5b9e\u4f8b\uff09\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nget_state_store\uff08\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\uff09\n\n\n\u4e3aclient\u63d0\u4f9b\u7684\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\u7684\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(KeyValueStore instance): The KeyValueStore implementation object set within this Client, or null if it does not exist\uff08\u8fd4\u56de\u8bbe\u7f6e\u5230client\u4e2d\u7684\u6309\u952e\u503c\u5bf9\u65b9\u5f0f\u5b9e\u73b0\u7684\u5b58\u50a8\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de\u7a7a\uff09\n\n\n\n\n\n\n\n\nset_crypto_suite\uff08\u8bbe\u7f6e\u52a0\u5bc6\u6a21\u5757\uff09\n\n\n\u8bbe\u7f6e\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u662f\u6309CryptoSuite\u63a5\u53e3\u5b9e\u73b0\u7684\u3002\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7684\u7b97\u6cd5\u548c\u4f7f\u7528\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\u7684\u52a0\u5bc6\u529f\u80fd\uff0c\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u7684\u6d88\u606f\uff0c\u5b89\u5168\u7684hashing\u5904\u7406\u548cMAC\u3002\n\n\nParams\n\n\n\n\nSuite (object): an instance of a crypto suite implementation\uff08\u6309\u63a5\u53e3\u5b9e\u73b0\u7684\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nget_crypto_suite\uff08\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\uff09\n\n\nClient\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(CryptoSuite instance): The CryptoSuite implementation object set within this Client, or null if it does not exist\uff08\u52a0\u5bc6\u6a21\u5757\u7684\u5bf9\u8c61\uff09\n\n\nset_user_context\uff08\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\uff09\n\n\n\n\n\u6839\u636eclient\u5b9e\u4f8b\u7684\u5b89\u5168\u7684\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\u3002\u7528\u6237\u7684\u8d44\u683c\u8bc1\u4e66\u4f1a\u88ab\u7528\u6765\u6267\u884c\u4ea4\u6613\u5e76\u4e14\u67e5\u8be2\u533a\u5757\u94fe\u7f51\u7edc\u3002\u5982\u679c\u72b6\u6001\u5b58\u50a8\u5df2\u7ecf\u8bbe\u7f6e\u5230\u4e86client\u5b9e\u4f8b\u4e0a\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u7528\u6237\u4e0a\u4e0b\u6587\uff0cSDK\u53ef\u4ee5\u628a\u5bf9\u8c61\u4fdd\u5b58\u5728\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u7f13\u5b58\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u72b6\u6001\u5b58\u50a8\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u6216\u8005\u88ab\u8986\u76d6\u65f6\uff0c\u7f13\u5b58\u4e0d\u80fd\u88ab\u521b\u5efa\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u518d\u6b21\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\u3002\n\n\nParams\n\n\n\n\nuser (User): an instance of the User class encapsulating the authenticated user\u2019s signing materials (private key and enrollment certificate) \uff08\u53c2\u6570\u662f\u7528\u6237\uff0c\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5b83\u628a\u88ab\u8ba4\u8bc1\u7528\u6237\u62e5\u6709\u7684\u7b7e\u540d\u6750\u6599\uff08\u79c1\u94a5\u548c\u80cc\u4e66\u8bc1\u4e66\uff09\u6253\u5305\u5728\u5185\uff09\n\n\n\n\n\n\n\n\nget_user_context\uff08\u83b7\u53d6\u7528\u6237\u4e0a\u4e0b\u6587\uff09\n\n\n\u6b63\u5982\u4e0a\u9762\u6240\u89e3\u91ca\u7684\uff0cclient\u5b9e\u4f8b\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u72b6\u6001\u5b58\u50a8\u3002SDK\u4fdd\u5b58\u5df2\u6ce8\u518c\u7528\u6237\u5230\u53ef\u4ee5\u88ab\u5e94\u7528\u7a0b\u5e8f\u7684\u5df2\u8ba4\u8bc1\u7528\u6237\uff08\u8ba4\u8bc1\u7684\u5de5\u4f5c\u5728SDK\u4e4b\u5916\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\uff09\u5229\u7528\u7684\u5b58\u50a8\u4e2d\u3002\u672c\u65b9\u6cd5\u8bd5\u56fe\u901a\u8fc7\u672c\u5730\u5b58\u50a8\u4e2d\u7684\u540d\u79f0\uff08\u901a\u8fc7\u952e\u503c\u5b58\u50a8\u63a5\u53e3\u83b7\u53d6\uff09\u52a0\u8f7d\u7528\u6237\u3002\u5df2\u52a0\u8f7d\u7684\u7528\u6237\u5bf9\u8c61\u5fc5\u987b\u4ee3\u8868\u4e00\u4e2a\u5df2\u6ce8\u518c\u7528\u6237\uff0c\u5e76\u4e14\u8be5\u7528\u6237\u62e5\u6709\u4e00\u4e2a\u5df2\u4fe1\u4efb\u7684CA\uff08\u5982COP\u670d\u52a1\uff09\u7b7e\u540d\u7684\u53ef\u7528\u7684\u80cc\u4e66\u8bc1\u4e66\u3002\n\n\nParams\n\n\n\n\nname (str): The name of the user \uff08\u7528\u6237\u540d\u79f0\uff09\n\n\n\n\nReturns\n\n\n\n\n(User instance): The user object corresponding to the name, or null if the user does not exist or if the state store has not been set\uff08\u8fd4\u56de\u5339\u914d\u540d\u79f0\u7684\u7528\u6237\u5bf9\u8c61\uff0c\u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\u6216\u8005\u72b6\u6001\u5b58\u50a8\u672a\u8bbe\u7f6e\u8fd4\u56de\u7a7a\uff09\n\n\n\n\n\n\n\n\n6.2 \u94fe\n\n\n\u201c\u94fe\u201d\u5bf9\u8c61\u4ece\u901a\u9053\u83b7\u53d6\u8bbe\u7f6e\u9879\uff0c\u7531\u6392\u5e8f\u8005\u8282\u70b9\u521b\u5efa\uff0c\u4e0e\u6392\u5e8f\u8005\u7ed9\u901a\u9053\u4e0a\u53c2\u4e0e\u7684\u8282\u70b9\u6d3e\u53d1\u4ea4\u6613\u7684\u884c\u4e3a\u76f8\u9694\u79bb\u3002\u6839\u636e\u8282\u70b9\u5217\u8868\u548c\u6392\u5e8f\u8005\u5217\u8868\u914d\u7f6e\u94fe\u4e4b\u540e\uff0c\u5b83\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u8fc7\u7a0b\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u53d1\u9001\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\u6765\u521b\u5efa\u7279\u5b9a\u7684\u901a\u9053\uff0c\u5e76\u4e14\u8be2\u95ee\u8282\u70b9\u52a0\u5165\u901a\u9053\u3002\n\n\n\n\n\n\nadd_peer\uff08\u6dfb\u52a0\u8282\u70b9\uff09\n\n\n\u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\npeer (Peer): an instance of the Peer class that has been initialized with URL, TLC certificate, and enrollment certificate\uff08\u5165\u53c2\uff1a\u88abURL\uff0cTLC\u8bc1\u4e66\uff0c\u548c\u80cc\u4e66\u8bc1\u4e66\u521d\u59cb\u5316\u4e4b\u540e\u7684Peer\u7c7b\u7684\u5bf9\u8c61\u3002\uff09\n\n\n\n\n\n\n\n\nremove_peer\uff08\u79fb\u9664\u8282\u70b9\uff09\n\n\n\u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\npeer (Peer): an instance of the Peer class\uff08\u8282\u70b9\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nget_peers\uff08\u83b7\u53d6\u8282\u70b9\uff09\n\n\n\u4ece\u94fe\u7684\u672c\u5730\u4fe1\u606f\u83b7\u53d6\u8282\u70b9\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(Peer list): The peer list on the chain\uff08\u8fd4\u56de\u94fe\u4e0a\u7684\u8282\u70b9\u5217\u8868\u3002\uff09\n\n\n\n\n\n\n\n\nadd_orderer\uff08\u6dfb\u52a0\u6392\u5e8f\u8282\u70b9\uff09\n\n\n\u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\u94fe\u5b9e\u4f8b\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u4e2a\u7684\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u4e2a\u6392\u5e8f\u8005\u8d1f\u8d23\u5411\u6392\u5e8f\u8005\u7f51\u7edc\u4e2d\u5176\u4ed6\u6392\u5e8f\u8005\u5e7f\u64ad\u8bf7\u6c42\u3002\u6216\u8005\u5982\u679c\u5e94\u7528\u4e0d\u4fe1\u4efb\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u66f4\u591a\u7684\u6392\u5e8f\u8005\uff0c\u4ec5\u9700\u8981\u5411\u94fe\u5bf9\u8c61\u6dfb\u52a0\u5b83\u4eec\u5373\u53ef\u3002\u6709\u5173\u67d0\u4e2a\u6392\u5e8f\u8005\u7684\u6240\u6709API\u4f1a\u540c\u65f6\u5e7f\u64ad\u7ed9\u6240\u6709\u7684\u6392\u5e8f\u8005\u3002\n\n\nParams\n\n\n\n\norderer (Orderer): an instance of the Orderer class \uff08Orderer\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nremove_orderer\uff08\u79fb\u9664\u6392\u5e8f\u8282\u70b9\uff09\n\n\n\u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\norderer (Orderer): an instance of the Orderer class\n\n\n\n\n\n\n\n\nget_orderers\uff08\u83b7\u53d6\u6392\u5e8f\u8282\u70b9\uff09\n\n\n\u83b7\u53d6\u94fe\u7684\u6392\u5e8f\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(Orderer list): The orderer list on the chain\n\n\n\n\n\n\n\n\ninitialize_chain\uff08\u521d\u59cb\u5316\u94fe\uff09\n\n\n\u8c03\u7528\u6392\u5e8f\u8005\u6765\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u94fe\uff0c\u521b\u5efa\u52a8\u4f5c\u672c\u8eab\u662f\u5f00\u653e\u7684\u65b0\u7684\u6d88\u606f\u6d41\u548c\u8fde\u63a5\u53c2\u4e0e\u8282\u70b9\u7684\u7ec4\u5408\u3002\u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u5904\u7406\u3002\u53ea\u6709\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u9700\u8981\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u4e00\u65e6\u94fe\u88ab\u6210\u529f\u521b\u5efa\uff0c\u5176\u4ed6\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4ec5\u4ec5\u9700\u8981\u8c03\u7528get_chain()\u6765\u83b7\u53d6\u6709\u5173\u94fe\u7684\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns \uff08\u94fe\u7684\u521d\u59cb\u5316\u52a8\u4f5c\u662f\u5426\u6267\u884c\u6210\u529f\uff09\n\n\n\n\n(bool): whether the chain initialization process was successful\n\n\n\n\n\n\n\n\nupdate_chain\uff08\u66f4\u65b0\u94fe\uff09\n\n\n\u8c03\u7528\u6392\u5e8f\u8005\u8282\u70b9\u6765\u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684\u94fe\u3002\u8fd9\u5141\u8bb8\u7ed9\u5df2\u5b58\u5728\u7684\u94fe\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\uff0c\u4e5f\u662f\u57fa\u4e8e\u8bc1\u4e66\u91cd\u5efa\u5bf9\u8282\u70b9\u8bc1\u4e66\u4fe1\u606f\u8fdb\u884c\u66f4\u65b0\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns \uff08\u66f4\u65b0\u94fe\u7684\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff09\n\n\n\n\n(bool): whether the chain update process was successful\n\n\n\n\n\n\n\n\nis_readonly\uff08\u662f\u5426\u53ea\u8bfb\uff09\n\n\n\u83b7\u53d6\u94fe\u7684\u72b6\u6001\u6765\u67e5\u770b\u5e95\u5c42\u901a\u9053\u662f\u5426\u5df2\u7ecf\u88ab\u7ec8\u6b62\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u94fe\uff0c\u53ef\u4ee5\u67e5\u8be2\u4fe1\u606f\uff08\u4ea4\u6613\u548c\u72b6\u6001\uff09\u4f46\u662f\u4e0d\u53ef\u4ee5\u63d0\u4ea4\u65b0\u7684\u4ea4\u6613\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns \uff08\u662f\u5426\u53ea\u8bfb\uff09\n\n\n\n\n(bool): is ready-only (true) or not\n\n\n\n\n\n\n\n\nquery_info\uff08\u67e5\u8be2\u4fe1\u606f\uff09\n\n\n\u67e5\u8be2\u94fe\u7684\u72b6\u6001\uff08\u9ad8\u5ea6\uff0c\u5df2\u77e5\u7684\u8282\u70b9\uff09\u4e2d\u591a\u79cd\u6709\u7528\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nnone\n\n\n\n\nReturns \n\n\n\n\n(ChainInfo) with height, currently the only useful info\n\n\n\n\n\n\n\n\nquery_block\uff08\u67e5\u8be2\u5757\uff09\n\n\n\u6839\u636e\u5757\u53f7\u67e5\u8be2\u5757\u3002\n\n\nParams\n\n\n\n\nblockNumber (number)\n\n\n\n\nReturns\n\n\n\n\nObject containing the block\n\n\n\n\n\n\n\n\nquery_transaction\uff08\u67e5\u8be2\u4ea4\u6613\uff09\n\n\n\u6839\u636e\u4ea4\u6613\u53f7\u67e5\u8be2\u4ea4\u6613\u3002\n\n\nParams\n\n\n\n\ntransactionID\n\n\n\n\nReturns\n\n\n\n\nTransactionInfo containing the transaction\n\n\n\n\n\n\n\n\ncreate_deploy_proposal\uff08\u521b\u5efa\u90e8\u7f72\u63d0\u6848\uff09\n\n\n\u521b\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincodeID\uff0cchaincode\u8c03\u7528\uff0c\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7b7e\u540d\u63d0\u6848\u3002\n\n\nParams\n\n\n\n\nchaincode_path (string): path to the chaincode to deploy\n\n\nchaincode_name (string): a custom name to identify the chaincode on the chain\n\n\nfcn (string): name of the chaincode function to call after deploy to initiate the state\uff08chaincode\u7684\u65b9\u6cd5\u540d\uff0c\u90e8\u7f72\u540e\u521d\u59cb\u5316\u72b6\u6001\u65f6\u8981\u8c03\u7528\u5b83\uff09\n\n\nargs (string[]): arguments for calling the init function designated by \u201cfcn\u201d\uff08\u4e0a\u9762fcn\u7684\u53c2\u6570\uff09\n\n\nsign (Bool): Whether to sign the transaction, default to True\n\n\n\n\nReturns\n\n\n\n\n(Proposal): The created Proposal instance or None.\n\n\n\n\n\n\n\n\ncreate_transaction_proposal\uff08\u521b\u5efa\u4ea4\u6613\u63d0\u6848\uff09\n\n\n\u4e3a\u4ea4\u6613\u521b\u5efa\u4e00\u4e2a\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincode\u540d\u79f0\uff0c\u9700\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u53c2\u6570\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7ed9\u63d0\u6848\u7b7e\u540d\u3002\n\n\nParams\n\n\n\n\nchaincode_name (string): The name given to the target chaincode to invoke\uff08\u8981\u6267\u884c\u7684\u76ee\u6807chaincode\u7684\u540d\u79f0\uff09\n\n\nargs (string[]): arguments for calling the \u201cinvoke\u201d method on the chaincode\uff08\u6b63\u5728\u8c03\u7528\u6267\u884c\u7684chaincode\u4e0a\u7684\u65b9\u6cd5\u7684\u53c2\u6570\uff09\n\n\nSign (Bool): Whether to sign the transaction, default to True\n\n\n\n\nReturns\n\n\n\n\n(Transaction_Proposal instance): The created Transaction_Proposal instance or None.\n\n\n\n\n\n\n\n\nsend_transaction_proposal\uff08\u53d1\u9001\u4ea4\u6613\u63d0\u6848\uff09\n\n\n\u628a\u521b\u5efa\u597d\u7684\u63d0\u6848\u53d1\u9001\u7ed9\u8282\u70b9\u53bb\u80cc\u4e66\u3002\n\n\nParams\n\n\n\n\ntransaction_proposal (Transaction_Proposal): The transaction proposal data\uff08\u4ea4\u6613\u63d0\u6848\u7684\u6570\u636e\uff09\n\n\nchain: The target chain whose peers the proposal will be sent to\uff08\u63d0\u6848\u5c06\u8981\u53d1\u9001\u7ed9\u7684\u8282\u70b9\u6240\u5728\u7684\u76ee\u6807\u94fe\uff09\n\n\nretry (Number): Times to retry when failure, by default to 0 (no retry)\uff08\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba40\uff09\n\n\n\n\nReturns\n\n\n\n\n(Transaction_Proposal_Response response): The response to send proposal request.\uff08\u53d1\u9001\u63d0\u6848\u8bf7\u6c42\u540e\u7684\u54cd\u5e94\uff09\n\n\n\n\n\n\n\n\ncreate_transaction\uff08\u521b\u5efa\u4ea4\u6613\uff09\n\n\n\u9075\u4ece\u80cc\u4e66\u7b56\u7565\u6839\u636e\u63d0\u6848\u7684\u54cd\u5e94\u4fe1\u606f\u521b\u5efa\u4ea4\u6613\u3002\n\n\nParams\n\n\n\n\nproposal_responses ([Transaction_Proposal_Response]): The array of proposal responses received in the proposal call.\uff08\u5728\u63d0\u6848\u7684\u8c03\u7528\u4e2d\u8fd4\u56de\u7684\u54cd\u5e94\u4fe1\u606f\u7684\u6570\u7ec4\uff09\n\n\n\n\nReturns\n\n\n\n\n(Transaction instance): The created transaction object instance.\uff08\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nsend_transaction\uff08\u53d1\u9001\u4ea4\u6613\uff09\n\n\n\u7ed9\u94fe\u7684\u6392\u5e8f\u670d\u52a1\uff08\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\uff09\u53d1\u9001\u4ea4\u6613\uff0c\u7136\u540e\u505a\u5171\u8bc6\u548c\u63d0\u4ea4\u5230\u8d26\u672c\u7684\u5de5\u4f5c\u3002\n\n\n\u672c\u8c03\u7528\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u63d0\u4ea4\u6210\u529f\u4fe1\u606f\u662f\u901a\u8fc7\u5757\u6216\u8005chaincode\u4e8b\u4ef6\u901a\u77e5\u7684\u3002\uff08\u672c\u65b9\u6cd5\u5fc5\u987b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u54cd\u5e94\u673a\u5236\u5173\u8054\u4e8b\u4ef6\u76d1\u542c\u5668\u5904\u7406\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\uff0c\u201c\u4ea4\u6613\u5b8c\u6210\u201d\uff0c\u201c\u9519\u8bef\u201d\u7b49\u4e8b\u4ef6\u3002\uff09\n\n\n\u4e0b\u9762\u6709\u4e24\u79cd\u6709\u5173fabric\u540e\u7aef\u7684\u6c9f\u901a\u65b9\u5f0f\uff0c\u89e6\u53d1\u4e0d\u540c\u7684\u4e8b\u4ef6\u56de\u8c03\u7ed9\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u5668\n\n\n\n\n\u6392\u5e8f\u8005\u670d\u52a1\u7684gRPC\u5ba2\u6237\u7aef\u5728\u201c\u5e7f\u64ad\u201d\u8c03\u7528\u7684\u8bf7\u6c42\u6216\u54cd\u5e94\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5e38\u89c4\u7684\u65e0\u72b6\u6001\u7684HTTP \u8fde\u63a5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u5728\u54cd\u5e94\u4e2d\u63a5\u6536\u5230\u6210\u529f\u786e\u8ba4\u65f6\u53d1\u9001\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\u4e8b\u4ef6\uff0c\u6216\u8005\u5728\u63a5\u6536\u5230\u9519\u8bef\u65f6\u53d1\u9001\u201c\u9519\u8bef\u201d\u4e8b\u4ef6\n\n\n\u4e3a\u4e86\u652f\u6301fabric\u201cBLOCK\u201d \u201d, \u201cCHAINCODE\u201d\u548c\u201cTRANSACTION\u201d\u4e8b\u4ef6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u548c\u4f5c\u4e3a\u5185\u90e8\u4e8b\u4ef6\u67a2\u7ebd\u673a\u5236\u4e00\u90e8\u5206\u7684\u94fe\u4e8b\u4ef6\u6e90\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6301\u4e45\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u5e94\u8be5\u5f15\u53d1\u65b9\u6cd5\u7ed9\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u201c\u5b8c\u6210\u201d\u6216\u201c\u9519\u8bef\u201d\u4e8b\u4ef6\u3002\n\n\n\n\nParams\n\n\n\n\ntransaction (Transaction): The transaction object constructed above\uff08\u4e0a\u9762\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u3002\uff09\n\n\n\n\nReturns\uff08\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\uff0c\u53ef\u4ee5\u5173\u8054\u5230\u5e94\u7528\u7a0b\u5e8f\u4e8b\u4ef6\u5904\u7406\u5668\u7684\uff09\n\n\n\n\nresult (EventEmitter): an handle to allow the application to attach event handlers on\u201csubmitted\u201d, \u201ccomplete\u201d, and \u201cerror\u201d.\n\n\n\n\n\n\n\n\n6.3 \u7528\u6237\n\n\n\u7528\u6237\u7c7b\u4ee3\u8868\u5df2\u7ecf\u901a\u8fc7\u6ce8\u518c\u8bc1\u4e66\u6ce8\u518c\u548c\u7b7e\u540d\u5bc6\u94a5\u7b7e\u540d\u7684\u5df2\u767b\u8bb0\u7528\u6237\u3002\u6ce8\u518c\u8bc1\u4e66\u5fc5\u987b\u901a\u8fc7\u533a\u5757\u94fe\u7f51\u7edc\u914d\u7f6e\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u7b7e\u540d\u3002\u5df2\u6ce8\u518c\u7528\u6237\uff08\u62e5\u6709\u5df2\u7b7e\u540d\u5bc6\u94a5\u548c\u6ce8\u518c\u8bc1\u4e66\uff09\u53ef\u4ee5\u5f15\u5bfcchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u548c\u94fe\u4e0a\u67e5\u8be2\u3002\n\n\n\u7528\u6237\u6ce8\u518c\u8bc1\u4e66\u53ef\u4ee5\u4e8b\u5148\u4f5c\u4e3a\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u4eceCA\u83b7\u53d6\uff0c\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u5b83\u672c\u8eab\u7684\u767b\u8bb0\u7a0b\u5e8f\u4ece\u53ef\u9009\u7684fabric COP\u670d\u52a1\u83b7\u53d6\u3002\n\n\n\u6709\u65f6\u7528\u6237\u8ba4\u8bc1\u548c\u8282\u70b9\u8ba4\u8bc1\u4f1a\u6df7\u6dc6\u3002\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\uff0c\u6240\u4ee5\u7528\u6237\u8eab\u4efd\u6709\u4ee3\u7406\u7b7e\u540d\u7684\u80fd\u529b\uff0c\u800c\u8282\u70b9\u5728\u5e94\u7528\u7a0b\u5e8f/SDKs\u4e0a\u4e0b\u6587\u4e2d\u53ea\u6709\u9a8c\u8bc1\u7b7e\u540d\u7684\u8ba4\u8bc1\u80fd\u529b\u3002\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u4f7f\u7528\u8282\u70b9\u8eab\u4efd\u6765\u7b7e\u540d\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5229\u7528\u8282\u70b9\u8eab\u4efd\u7684\u79c1\u94a5\u3002\n\n\n\n\n\n\nget_name\uff08\u83b7\u53d6\u540d\u79f0\uff09\n\n\n\u83b7\u53d6\u6210\u5458\u540d\u79f0\u3002\u4ece\u5bf9\u8c61\u5b9e\u4f8b\u8bf7\u6c42\u53c2\u6570\u3002\n\n\nReturns (str):\n\n\n\n\nThe name of the user\n\n\n\n\nget_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09\n\n\n\u83b7\u53d6\u7528\u6237\u7684\u89d2\u8272\u3002\u5b83\u53ef\u80fd\u662f\u201c\u5ba2\u6237\u7aef\u201d\u201c\u5ba1\u8ba1\u5458\u201d\u8fd9\u7c7b\u503c\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7684\u89d2\u8272\u7528\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff0c\u5982\u201c\u8282\u70b9\u201d\u548c\u201c\u9a8c\u8bc1\u8005\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\n\n\n\nReturns (str[]):\n\n\n\n\nThe roles for this user\n\n\n\n\n\n\n\n\nget_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\n\u8fd4\u56de\u5e95\u5c42\u8ba4\u8bc1\u8bc1\u4e66\u4ee3\u8868\u7684\u7528\u6237\u8eab\u4efd\u8bc1\u4e66\u3002\n\n\nParams: none\n\n\nReturns:\n\n\n\n\nCertificate in PEM format signed by the trusted CA\uff08\u8fd4\u56de\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\n\n\n\n\n\n\n\n\nset_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09\n\n\n\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u79f0/ID\u3002\n\n\nParams:\n\n\n\n\nname (string[): The user name / id.\n\n\n\n\n\n\n\n\nset_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09\n\n\n\u6309\u4e0a\u9762\u5b9a\u4e49\u7684\u89d2\u8272\u503c\u8bbe\u7f6e\u7528\u6237\u89d2\u8272\u3002\n\n\nParams:\n\n\n\n\nRoles (string[]): The list of roles for the user\uff08\u5165\u53c2\u7528\u6237\u7684\u89d2\u8272\u5217\u8868\u3002\uff09\n\n\n\n\n\n\n\n\nset_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\n\u8bbe\u7f6e\u7528\u6237\u7684\u80cc\u4e66\u8bc1\u4e66\u3002\n\n\nParams: \n\n\n\n\nCertificate : The certificate in PEM format signed by the trusted CA\uff08\u5165\u53c2\u662f\u88ab\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\n\n\n\n\n\n\n\n\ngenerate_tcerts\uff08\u751f\u6210\u4ea4\u6613\u8bc1\u4e66\uff09\n\n\n\u83b7\u53d6\u4e00\u7cfb\u5217TCert\uff0c\u53ef\u4ee5\u5728\u4ea4\u6613\u4e2d\u4f7f\u7528\u3002TCert\u548c\u4ea4\u6613\u4e4b\u95f4\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\u3002TCert\u53ef\u4ee5\u5728\u672c\u5730\u901a\u8fc7SDK\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u6570\u636e\u9879\u751f\u6210\u3002\n\n\nParams\n\n\n\n\ncount (number): how many in the batch to obtain?\uff08\u83b7\u53d6\u7684\u4ea4\u6613\u8bc1\u4e66\u7684\u6570\u91cf\uff09\n\n\nAttributes (string[]): list of attributes to include in the TCert\uff08TCert\u5305\u542b\u7684\u5c5e\u6027\u7684\u5217\u8868\uff09\n\n\n\n\nReturns (TCert[]):\n\n\n\n\nAn array of TCerts\n\n\n\n\n\n\n\n\n6.4 \u8282\u70b9\n\n\n\u8282\u70b9\u7c7b\u4ee3\u8868\u4e86\u8fdc\u7a0b\u8282\u70b9\u548c\u5b83\u672c\u8eab\u7f51\u7edc\u6210\u5458\u7684\u6570\u636e\uff0c\u5373\u7528\u6765\u9a8c\u8bc1\u7b7e\u540d\u7684ECert\u3002\u8282\u70b9\u6210\u5458\u4ee3\u8868\u7ec4\u7ec7\uff0c\u4e0d\u50cf\u7528\u6237\u6210\u5458\u4ee3\u8868\u4e2a\u4f53\u3002\n\n\n\u5f53\u8282\u70b9\u88ab\u521b\u5efa\u540e\uff0c\u53ea\u8981\u914d\u7f6e\u4e00\u4e2a\u540d\u4e3a\u201ceventSourceUrl\u201d\u7684\u5c5e\u6027\uff0c\u8282\u70b9\u5b9e\u4f8b\u5c31\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a\u4e00\u4e2a\u4e8b\u4ef6\u6e90\u3002\u5141\u8bb8SDK\u81ea\u52a8\u5173\u8054\u4ea4\u6613\u4e8b\u4ef6\u76d1\u542c\u5668\u4e8b\u4ef6\u6d41\u3002\n\n\n\u9700\u8981\u8bf4\u660e\u7684\u662f\u8282\u70b9\u4e8b\u4ef6\u6d41\u529f\u80fd\u5728\u8282\u70b9\u5c42\u6b21\uff0c\u4e0d\u5728\u94fe\u548cchaincode\u7684\u5c42\u6b21\u3002\n\n\n\n\n\n\nconnectEventSource\uff08\u8fde\u63a5\u4e8b\u4ef6\u6e90\uff09\n\n\n\u7531\u4e8e\u51e0\u4e4e\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e8b\u4ef6\u7684\u751f\u4ea7\u8005\uff0c\u5f53\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\u5b9e\u4f8b\u65f6\uff0c\u5e94\u7528\u53ef\u4ee5\u6307\u5b9a\u5b83\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u6e90\u3002\u53ea\u9700\u8981\u94fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u6210\u4e3a\u4e8b\u4ef6\u6e90\uff0c\u56e0\u4e3a\u94fe\u4e0a\u7684\u6240\u6709\u8282\u70b9\u4ea7\u751f\u7684\u4e8b\u4ef6\u76f8\u540c\u3002\u672c\u65b9\u6cd5\u544a\u8bc9SDK\u5bf9\u4e8e\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u54ea\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e8b\u4ef6\u6e90\u4f7f\u7528\u3002\u7ba1\u7406\u4e0e\u8282\u70b9\u7684EventHub\u8fde\u63a5\u7684\u751f\u547d\u5468\u671f\u662fSDK\u7684\u8d23\u4efb\u3002\u7406\u89e3\u5e76\u901a\u77e5\u9009\u62e9\u7684\u8282\u70b9\u60f3\u63a5\u6536\u54ea\u79cd\u4e8b\u4ef6\u7c7b\u578b\u4ee5\u53ca\u60f3\u4f7f\u7528\u54ea\u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u662f\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u8d23\u4efb\u3002\n\n\nParams:\n\n\n\n\nNone\n\n\n\n\nResult:\n\n\n\n\nPromise/Future: this gives the app a handle to attach \u201csuccess\u201d and \u201cerror\u201d listeners\uff08\u5e94\u7528\u83b7\u5f97\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u6765\u5173\u8054\u201c\u6210\u529f\u201d\u6216\u201c\u9519\u8bef\u201d\u7684\u76d1\u542c\u5668\uff09\n\n\n\n\n\n\n\n\nis_event_listened\uff08\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u76d1\u542c\u7684\u6807\u8bb0\uff09\n\n\n\u7f51\u7edc\u8c03\u7528\u53ef\u4ee5\u663e\u793a\u51fa\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u76d1\u542c\u5668\u5df2\u7ecf\u8fde\u63a5\u5230\u4e8b\u4ef6\u7684\u76ee\u6807\u8282\u70b9\u3002\u8fd9\u80fd\u5e2e\u52a9\u5e94\u7528\u5b9e\u4f8b\u5728\u5d29\u6e83\u540e\u6062\u590d\u4e2d\u6216\u8005\u591a\u4e2a\u5b9e\u4f8b\u90e8\u7f72\u7684\u60c5\u51b5\u4e0b\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fde\u63a5\u4e8b\u4ef6\u6e90\u3002\n\n\n\u5907\u6ce8\uff1a\u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u8282\u70b9\u4e0a\u4e8b\u4ef6\u7684\u751f\u6210\u8005\u6709\u5f3a\u5316\u4f5c\u7528\u3002\n\n\nParams:\n\n\n\n\neventName (string): required \uff08\u5fc5\u9700\u7684\uff09\n\n\nchain (Chain): optional \uff08\u53ef\u9009\u7684\uff09\n\n\n\n\nResult:\uff08\u662f\u5426\u5df2\u7ecf\u88ab\u94fe\u4e0a\u7684\u4e00\u4e9b\u5e94\u7528\u5b9e\u4f8b\u76d1\u542c\uff09\n\n\n\n\n(boolean): whether the said event has been listened on by some application instance on that chain \n\n\n\n\n\n\n\n\naddListener\uff08\u6dfb\u52a0\u76d1\u542c\u5668\uff09\n\n\n\u65b9\u6cd5\u4e3a\u8fde\u63a5\u5230\u4e8b\u4ef6\u6e90\u7684\u8282\u70b9\u63d0\u4f9b\uff0c\u76d1\u542c\u5668\u6ce8\u518c\u5728EventCallBack\uff0c\u7528\u4ee5\u63a5\u6536\u4e8b\u4ef6\u7c7b\u578b\u96c6\u7684\u56de\u8c03\u3002\u6dfb\u52a0\u76d1\u542c\u5668\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u6267\u884c\u591a\u6b21\u6765\u652f\u6301\u4e0d\u540c\u7684EventCallBack\u65b9\u6cd5\u63a5\u6536\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\n\n\n\u8bf4\u660e\uff1a\u4ee5\u4e0b\u7684\u53c2\u6570\u5728\u67d0\u4e9b\u8bed\u8a00\u91cc\u662f\u53ef\u9009\u7684\uff0c\u6bd4\u5982Java\uff0c\u4e3a\u76d1\u542c\u5668\u63a5\u53e3\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u628a\u8be5\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002\n\n\nParams:\n\n\n\n\neventType : ie. Block, Chaincode, Transaction \uff08\u4e8b\u4ef6\u7c7b\u578b\uff09\n\n\neventTypeData : Object Specific for event type as necessary, currently needed for \u201cChaincode\u201d event type, specifying a matching pattern to the event name set in the chaincode(s) being executed on the target Peer, and for \u201cTransaction\u201d event type, specifying the transaction ID \uff08\u4e8b\u4ef6\u7c7b\u578b\u6570\u636e\uff1a\u4e8b\u4ef6\u7c7b\u578b\u6709\u5fc5\u8981\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5bf9\u8c61\uff0c\u5bf9\u4e8e\u201cchaincode\u201d\u4e8b\u4ef6\u7c7b\u578b\u8981\u6c42\u662f\uff0c\u5728\u76ee\u6807\u8282\u70b9\u4e0a\u6267\u884c\u7684chaincode\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5b9a\u7684\u4e8b\u4ef6\u540d\u5339\u914d\u8303\u5f0f\uff1b\u5bf9\u4e8e\u201cTransaction\u201d\u4e8b\u4ef6\u7c7b\u578b\uff0c\u8981\u6307\u5b9a\u4ea4\u6613ID\u3002\uff09\n\n\neventCallback : Client Application class registering for the callback.\uff08\u4e8b\u4ef6\u56de\u8c03\uff1a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4e3a\u56de\u8c03\u800c\u6ce8\u518c\u7684\u3002\uff09\n\n\n\n\nReturns:\n\n\n\n\n[event-listener-ref] a reference to the event listener, some language uses an ID (javascript), others uses object reference (Java)\uff08\u8fd4\u56de\u503c\uff1a\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6307\u5411\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6709\u4e9b\u8bed\u8a00\uff08javascript\uff09\u4f7f\u7528ID\uff0c\u5176\u4ed6\u7684\u8bed\u8a00\uff08Java\uff09\u4f7f\u7528\u5bf9\u8c61\u5f15\u7528\u3002\uff09\n\n\n\n\n\n\n\n\nremoveListener\uff08\u79fb\u9664\u76d1\u542c\u5668\uff09\n\n\n\u89e3\u6ce8\u518c\u76d1\u542c\u5668\n\n\nParams:\uff08SDK\u8fd4\u56de\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff09\n\n\n\n\n[event-listener-ref] : reference returned by SDK for event listener\n\n\n\n\nReturns:\n\n\n\n\nstatusFlag: Success / Failure\n\n\n\n\n\n\n\n\nget_name\uff08\u83b7\u53d6\u540d\u79f0\uff09\n\n\n\u83b7\u53d6\u8282\u70b9\u540d\u79f0\u3002\u9700\u8981\u5bf9\u8c61\u5b9e\u4f8b\u7684\u53c2\u6570\u3002\n\n\nReturns (str):\n\n\n\n\nThe name of the Peer\n\n\n\n\n\n\n\n\nset_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09\n\n\nSet the Peer name / id.\n\n\nParams:\n\n\n\n\nName (string): The unique name / id of this Peer.\n\n\n\n\n\n\n\n\nget_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09\n\n\n\u83b7\u53d6\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u7684\u89d2\u8272\u3002\u53ef\u80fd\u7684\u7ed3\u679c\u662f\u201cclient\u201d\u548c\u201cauditor\u201d\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u89d2\u8272\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff1a\u201cpeer\u201d\u548c\u201cvalidator\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nReturns (str[]):\n\n\n\n\nThe roles for this user\n\n\n\n\n\n\n\n\nset_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09\n\n\n\u8bbe\u7f6e\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u89d2\u8272\u3002\u503c\u9075\u4ece\u4e0a\u9762\u9884\u5b9a\u7684\u51e0\u4e2a\u503c\u3002\n\n\nParams:\n\n\n\n\nRoles (string[]): The list of roles for the user\uff08\u7528\u6237\u89d2\u8272\u5217\u8868\uff09\n\n\n\n\n\n\n\n\nget_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\n\u8fd4\u56de\u5e95\u5c42\u4ee3\u8868\u7528\u6237\u8eab\u4efd\u7684ECert\u3002\n\n\nParams: none\n\n\nReturns:\n\n\n\n\nCertificate in PEM format signed by the trusted CA\n\n\n\n\n\n\n\n\nset_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\nSet the Peer\u2019s enrollment certificate.\n\n\nParams:\n\n\n\n\nCertificate: Certificate in PEM format signed by the trusted CA\n\n\n\n\n\n\n\n\n6.5 \u952e\u503c\u5b58\u50a8\uff08\u63a5\u53e3\uff09\n\n\n\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4fdd\u5b58\u72b6\u6001\uff0c\u5305\u542b\u7528\u6237\u767b\u8bb0\u6750\u6599\uff08\u79c1\u94a5\uff0cCA\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\u3002\u8fd9\u4e9b\u72b6\u6001\u9700\u8981\u88ab\u6301\u4e45\u5316\u3002\u201cKeyValueStore\u201d\u7684\u63a5\u53e3\u4e3aSDK\u81ea\u52a8\u4fdd\u5b58\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u673a\u5236\uff0c\u8fd9\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u6709\u76ca\u7684\u3002\n\u5982\u679c\u5e94\u7528\u4f7f\u7528\u57fa\u4e8e\u8f6f\u4ef6\u5bc6\u94a5\u751f\u6210\u5668\u5373CryptoSuite\u7684\u5b9e\u73b0\uff0c\u90a3\u4e48\u5b83\u9700\u8981\u952e\u503c\u5b58\u50a8\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4e00\u4e2a\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u5e94\u8be5\u9ed8\u8ba4\u4f7f\u7528\u4e00\u4e2a\u5185\u5efa\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e00\u4e2a\u57fa\u4e8e\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002\n\n\nSDK\u4e5f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\u91cc\u9762\u4ee5\u53ef\u9009\u7f13\u5b58\u7684\u65b9\u5f0f\u4fdd\u5b58\u7528\u6237\u767b\u8bb0\u6750\u6599\u3002\u4f46\u662f\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u914d\u7f6e\u4e00\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u4f1a\u628a\u5e94\u7528\u7a0b\u5e8f\u7406\u89e3\u6210\u9009\u62e9\u4e86\u603b\u662f\u4e3a\u4f1a\u8bdd\u8bbe\u7f6e\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u56fe\u4f7f\u7528\u9ed8\u8ba4\u7684\u952e\u503c\u5b58\u50a8\u3002\n\n\n\n\n\n\nget_value\uff08\u83b7\u53d6\u503c\uff09\n\n\nRetrieves a value given a key\n\n\nParams\n\n\n\n\nkey (str): The name of the key\n\n\n\n\nReturns\n\n\n\n\nResult (Object): The value\n\n\n\n\n\n\n\n\nset_value\uff08\u5b58\u5165\u503c\uff09\n\n\nSets the value\n\n\nParams\n\n\n\n\nKey\n\n\nvalue\n\n\n\n\nReturns\n\n\n\n\nAcknowledgement of successful storage of the value\n\n\n\n\n\n\n\n\n6.6 \u52a0\u5bc6\u6a21\u5757\uff08\u63a5\u53e3\uff09\n\n\n\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6d88\u606f\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u548chash\u4ee5\u53caMAC\u3002\u8fd9\u662f\u4e3a\u533a\u5757\u94fe\u52a0\u5bc6\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u7684\u4e00\u4e2a\u955c\u50cf\u8bbe\u8ba1\uff0c\u88abfabric\u52a0\u5bc6\u56e2\u961f\u53d1\u8868\u3002\n\n\nDefault implementation currently planned for the peer and COP, and must be implemented by the SDK\u2019s default implementation also: \n\n\n\n\nECDSA: curves \u201csecp256r1\u201d and \u201csecp384r1\u201d\n\n\nAES: AES128, AES256 with CBC/CTR/GCM mode key length = 128 bits\n\n\n\n\nSHA: SHA256, SHA384, SHA3_256, SHA3_384\n\n\n\n\n\n\ngenerate_key\uff08\u751f\u6210\u5bc6\u94a5\uff09\n\n\nGenerate a key based on the options. The output can be a private key or a public key in an asymmetric algorithm, or a secret key of a symmetric algorithm.\n\n\nParams\n\n\n\n\nopts (Object): an object that encapsulates two properties, \u201calgorithm\u201d and\u201cephemeral\u201d.\n\n\n\n\nReturns\n\n\n\n\nResult (Key): The key object\n\n\n\n\n\n\n\n\nderiveKey\uff08\u5bfc\u51fa\u5bc6\u94a5\uff09\n\n\nDerives a key from k using opts.\n\n\nParams\n\n\n\n\nk (Key)\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(Key) derived key\n\n\n\n\n\n\n\n\nimportKey\uff08\u5bfc\u5165\u5bc6\u94a5\uff09\n\n\nImports a key from its raw representation using opts.\n\n\nParams\n\n\n\n\nk (Key)\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(Key) An instance of the Key class wrapping the raw key bytes\n\n\n\n\n\n\n\n\ngetKey\uff08\u83b7\u53d6\u5bc6\u94a5\uff09\n\n\nReturns the key this CSP associates to the Subject Key Identifier ski .\n\n\nParams\n\n\n\n\nski (byte[])\n\n\n\n\nReturns\n\n\n\n\n(Key) An instance of the Key class corresponding to the ski\n\n\n\n\n\n\n\n\nhash\uff08hash\u5904\u7406\uff09\n\n\nHashes messages msg using options opts .\n\n\nParams\n\n\n\n\nmsg (byte[])\n\n\nopts (Object) an object that encapsulates property \u201calgorithm\u201d with values for hashing algorithms such as \u201cSHA2\u201d or \u201cSHA3\u201d\n\n\n\n\nReturns\n\n\n\n\n(Key) An instance of the Key class corresponding to the ski\n\n\n\n\n\n\n\n\nencrypt\uff08\u52a0\u5bc6\uff09\n\n\nEncrypt plain text.\n\n\nParams\n\n\n\n\nkey (Key) public encryption key\n\n\nplainText (byte[])\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(byte[]) Cipher text\n\n\n\n\n\n\n\n\ndecrypt\uff08\u89e3\u5bc6\uff09\n\n\nDecrypt cipher text.\n\n\nParams\n\n\n\n\nkey (Key) private decryption key\n\n\ncipherText (byte[])\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(byte[]) Plain text\n\n\n\n\n\n\n\n\nsign\uff08\u7b7e\u540d\uff09\n\n\nSign the data.\n\n\nParams\n\n\n\n\nKey (Key) private signing key\n\n\ndigest (byte[]) fixed-length digest of the target message to be signed\n\n\nopts (function) hashing function to use\n\n\n\n\nReturns\n\n\n\n\nResult(Object):Signature object\n\n\n\n\n\n\n\n\nverify\uff08\u9a8c\u8bc1\uff09\n\n\nVerify the signature.\n\n\nParams\n\n\n\n\nkey (Key) public verification key\n\n\nsignature (byte[]) signature\n\n\ndigest (byte[]) original digest that was signed\n\n\n\n\nReturns\n\n\n\n\n(bool): verification successful or not\n\n\n\n\n\n\n\n\n7 \u5904\u7406\u7f51\u7edc\u9519\u8bef\n\n\n\u5ba2\u6237\u7aefSDK\u548cfabric\u7528\u4e24\u4e2a\u65b9\u6cd5\u6c9f\u901a\uff1a\u65e0\u72b6\u6001\u7684HTTP\u8fde\u63a5\u548cHTTP\u957f\u8fde\u63a5\u3002\n\n\n\u53d1\u9001\u63d0\u6848\u548c\u53d1\u9001\u4ea4\u6613\u8c03\u7528\u5728\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u662f\u65e0\u72b6\u6001\u7684\u3002\u5982\u679c\u51fa\u73b0\u7f51\u7edc\u9519\u8bef\uff0c\u8c03\u7528\u4f1a\u8d85\u65f6\u3002SDK\u5e94\u8be5\u6709\u4e00\u4e2a\u53ef\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u65b9\u4fbf\u5e94\u7528\u7a0b\u5e8f\u57fa\u4e8e\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u548cfabric\u8282\u70b9\u4e4b\u95f4\u7684\u7f51\u7edc\u7279\u5f81\u7684\u7406\u89e3\u63a7\u5236\u8c03\u7528\u7684\u52a8\u4f5c\u3002\n\n\n\u53e6\u5916\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u6709\u4e00\u4e2a\u91cd\u8bd5\u6b21\u6570\uff0c\u4ee5\u4fbf\u4e8eSDK\u6839\u636e\u8d85\u65f6\u9519\u8bef\u81ea\u52a8\u8bd5\u56fe\u91cd\u8fdeHTTP\u8c03\u7528\u3002\u8fd9\u4e9b\u91cd\u8bd5\u90fd\u5c1d\u8bd5\u5e76\u4e14\u4ecd\u7136\u53d1\u751f\u8d85\u65f6\u9519\u8bef\u4e4b\u540e\uff0c\u8fde\u63a5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u4e8b\u4ef6\u6d41\u8fde\u63a5SDK\u548c\u4e8b\u4ef6\u6e90\u8282\u70b9\u662f\u957f\u8fde\u63a5\u3002\u7279\u522b\u5730\uff0c\u7531\u4e8e\u4e8b\u4ef6\u6d41\u63a5\u53e3\u88abfabric\u5b9a\u4e49\uff0c\u8fde\u63a5\u662f\u53cc\u5411\u7684\uff0c\u5141\u8bb8\u6d88\u606f\u53d1\u9001\u5230\u4e24\u65b9\u3002\u5bf9\u4e8e\u7f51\u7edc\u9519\u8bef\uff0c\u4ee5\u9632\u4e22\u5931\u4e8b\u4ef6\u548c\u4e0d\u80fd\u89e6\u53d1client\u5e94\u7528\u6ce8\u518c\u7684\u76d1\u542c\u5668\u7684\u7ed3\u679c\uff0c\u8fde\u63a5\u4f1a\u88ab\u65ad\u5f00\u3002\n\n\n\u4e3a\u5e94\u7528\u7684\u5229\u76ca\u8003\u8651SDK\u5e94\u8be5\u8bd5\u56fe\u91cd\u65b0\u53d1\u8d77\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u5c1d\u8bd5\u4e86\u91cd\u8fde\u6b21\u6570\u4e4b\u540e\u4e0d\u80fd\u6062\u590d\u8fde\u63a5\uff0c\u5e94\u8be5\u7528\u4e00\u4e2a\u9ad8\u7ea7\u522b\u7684\u4e25\u91cd\u9519\u8bef\u901a\u77e5\u5e94\u7528\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\n8 \u53c2\u8003\n\n\n1) Next-Consensus-Architecture_Proposal:\nhttps://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architec\nture-Proposal.md\n\n\n2) Consensus endorsing, consenting, and committing model:\nhttps://jira.hyperledger.org/browse/FAB-37\n\n\n3) Node.js SDK\nhttps://github.com/hyperledger/fabric-sdk-node\n\n\n4) Fabric-Cop Design\nhttps://docs.google.com/document/d/1TRYHcaT8yMn8MZlDtreqzkDcXx0WI50AV2JpAcv\nAM5w\n\n\n5) Next Hyperledger-Fabric Architecture Protocol messages\nhttps://docs.google.com/document/d/1qD2zOTxmPoss3Xop_pDdkSXHozIR4N27NEsym\nosW4Gk", 
            "title": "Fabric SDK \u8bbe\u8ba1"
        }, 
        {
            "location": "/sdk-design_zh/#1", 
            "text": "Hyperledger Fabric v1.0\u63d0\u4f9b\u4e86\u57fa\u672c\u7684Protocol Buffers \u683c\u5f0f\u7684API\u901a\u8fc7gRPC\u534f\u8bae\u4f5c\u7528\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u3002\u8fd9\u4e9bAPI\u5305\u542b\u4e86\u4ea4\u6613\u5904\u7406\u3001\u5b89\u5168\u7684\u6210\u5458\u5173\u7cfb\u670d\u52a1\u3001\u533a\u5757\u94fe\u904d\u5386\u548c\u4e8b\u4ef6\u5904\u7406\u3002\u6709\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301Protocol Buffers\uff0c\u5305\u62ecGo, C#, Java, Javascript, Python, and C++\u3002\u6240\u4ee5\u6709\u5fc5\u8981\u7ed9\u5e94\u7528\u5f00\u53d1\u5de5\u7a0b\u5e08\u63d0\u4f9b\u4e00\u4e2a\u672c\u5730SDK\u3002  \u672c\u6587\u6863\u8be6\u8ff0\u4e86\u4e00\u4e2aSDK\u5e94\u8be5\u63d0\u4f9b\u7684API\u6700\u5c0f\u96c6\u5408\u7684\u5b9e\u73b0\u3002\u4e00\u4e2aSDK\u7684\u76ee\u6807\u5373\u8981\u89e3\u51b3\u5ba2\u6237\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u76f4\u63a5\u9762\u5bf9\u7684\u4e00\u4e9b\u539f\u59cb\u9700\u6c42\uff1b\u53c8\u8981\u505a\u4e00\u4e9b\u9876\u5c42\u7684\u5408\u7406\u62bd\u8c61\u4ee5\u56fe\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\uff0c\u5e76\u4e14\u5728\u672c\u5730\u5e94\u7528\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9bAPI\u540e\u65b9\u4fbf\u5f00\u53d1\u5de5\u4f5c\u7684\u8fdb\u884c\u3002\u7136\u800c\uff0c\u4f7f\u7528SDK\u5e76\u4e0d\u4f1a\u59a8\u788d\u5e94\u7528\u76f4\u63a5\u8c03\u7528gRPC\u7684\u64cd\u4f5c\u3002  \u8bf7\u6ce8\u610f\uff0c\u5f53\u524d\u7684REST API\u5e76\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528\uff0cSDK\u4e0d\u5e94\u8be5\u57fa\u4e8e\u4f7f\u7528REST API \u800c\u521b\u5efa\u3002\u8df3\u8fc7REST\u76f4\u63a5\u4f7f\u7528gRPC\u7684\u539f\u56e0\u662f\uff1a\u80fd\u591f\u63a7\u5236\u5168\u53cc\u5411\u7684\u6570\u636e\u6d41\uff08\u5927\u90e8\u5206\u7684API\u8c03\u7528\u90fd\u662f\u5f02\u6b65\u7684\uff09\uff0c\u66f4\u597d\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u81ea\u4ece\u8282\u70b9\u5185\u90e8\u6a21\u5757\u901a\u4fe1\u4f7f\u7528\u4e86gRPC\u4e4b\u540e\uff0c\u4fbf\u4e0d\u5fc5\u518d\u5f00\u653e\u66f4\u591a\u7684HTTP/HTTPS\u7aef\u53e3\u4e86\u3002  \u4e00\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u65b0\u7684\u6210\u5458\u670d\u52a1\u65b9\u5f0f\uff08CA\uff09\u662f\u6309REST API\u7684\u89c4\u5219\u5b9e\u73b0\u7684  \u4f5c\u4e3a\u53c2\u8003\uff0cFabric v1.0\u7684\u67b6\u6784\u548c\u4ea4\u4e92\u6a21\u578b\u53ef\u4ee5\u5728\u4e0b\u9762\u8fd9\u4e2a\u94fe\u63a5\u6240\u6307\u5411\u7684\u5de5\u4f5c\u5355\u5143\u7684\u9644\u4ef6\u6587\u6863\u91cc\u9762\u67e5\u770b https://jira.hyperledger.org/browse/FAB-37", 
            "title": "1 \u6982\u8981"
        }, 
        {
            "location": "/sdk-design_zh/#2", 
            "text": "", 
            "title": "2 \u76ee\u6807"
        }, 
        {
            "location": "/sdk-design_zh/#21", 
            "text": "Fabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u79cd\u64cd\u4f5c\u533a\u5757\u94fe\u7f51\u7edc\u7684\u65b9\u5f0f\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u90e8\u7f72/\u6267\u884cchaincode\uff0c\u76d1\u542c\u7f51\u7edc\u4e2d\u4ea7\u751f\u7684\u4e8b\u4ef6\uff0c\u63a5\u6536\u5757\u4fe1\u606f\uff0c\u628a\u4ea4\u6613\u5b58\u50a8\u5230\u8d26\u672c\u4e2d\uff0c\u7b49\u7b49", 
            "title": "2.1 \u5e94\u7528\u5f00\u53d1"
        }, 
        {
            "location": "/sdk-design_zh/#22-chaincode", 
            "text": "Fabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199chaincode\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u3002\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u628achaincode\u90e8\u7f72\u5230\u7f51\u7edc\u4e0a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u6d4b\u8bd5chaincode", 
            "title": "2.2 chaincode\u5f00\u53d1"
        }, 
        {
            "location": "/sdk-design_zh/#3", 
            "text": "", 
            "title": "3 \u539f\u5219"
        }, 
        {
            "location": "/sdk-design_zh/#31-api", 
            "text": "SDK\u5e94\u8be5\u63d0\u4f9b\u6e05\u6670\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5305\u62ec\u53ef\u7528\u7684API\uff0c\u6570\u636e\u6a21\u578b\uff0c\u5982\u4f55\u4f7f\u7528API\u7684\u793a\u4f8b\u8bf4\u660e", 
            "title": "3.1 \u826f\u597d\u7684API\u6587\u6863\uff0c\u6570\u636e\u6a21\u578b\uff0c\u793a\u4f8b\u4ee3\u7801"
        }, 
        {
            "location": "/sdk-design_zh/#32", 
            "text": "Chaincode\u5f00\u53d1\u4eba\u5458\u548c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u5173\u6ce8\u4e8e\u4e66\u5199\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u3002\u5c3d\u7ba1\u5f00\u53d1\u4eba\u5458\u719f\u6089fabric\u5185\u90e8\u6784\u4ef6\u5bf9\u5f00\u53d1\u672c\u8eab\u662f\u6709\u5229\u7684\uff0c\u4f46\u662f\u8fd9\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5fc5\u987b\u7684\u5148\u51b3\u6761\u4ef6\u3002SDK\u7f16\u8bd1\u65f6\u95f4\u4e0a\u4e0d\u5e94\u8be5\u5bf9fabric project\u6709\u4efb\u4f55\u4f9d\u8d56\u3002\uff08\u9664\u975e\u539f\u59cb\u6587\u4ef6\u5b9a\u4e49\u4e86\u591a\u79cd\u5408\u7ea6\uff1f\uff1f\uff09 SDK packages/jars/libraries \u5e94\u8be5\u5728\u5e38\u7528\u7684\u8d44\u6e90\u5e93\u7f51\u7ad9\u4e0a\u53ef\u83b7\u53d6\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8f7b\u677e\u5b89\u88c5\u5b83\u4eec\u6216\u8005\u7acb\u5373\u5f00\u59cb\u7f16\u5199Chaincode\u6765\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002", 
            "title": "3.2 \u4fbf\u4e8e\u4f7f\u7528"
        }, 
        {
            "location": "/sdk-design_zh/#33", 
            "text": "\u8fd9\u4e2aSDK\u5fc5\u987b\u4ed4\u7ec6\u8bbe\u8ba1\u6765\u8fbe\u5230\u9ad8\u541e\u5410\u91cf\uff0c\u6c34\u5e73\u6269\u5c55\u80fd\u529b\u548c\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3002\u5b83\uff08\u672cSDK\uff09\u5e94\u8be5\u662f\u4e00\u4e2a\u7ec4\u4ef6\u72b6\u6001\u65e0\u5173\u5316\u7684\u7406\u60f3\u5b9e\u73b0\uff0c\u6216\u8005\u5141\u8bb8\u5e94\u7528\u5b9e\u4f8b\u501f\u52a9\u6570\u636e\u5e93\u5171\u4eab\u72b6\u6001\u3002", 
            "title": "3.3 \u6027\u80fd"
        }, 
        {
            "location": "/sdk-design_zh/#34", 
            "text": "\u7edf\u4e00\u7684\u7248\u672c\u63a7\u5236\u4e0b\uff0c\u5efa\u8bae\u5c06SDK\u901a\u8fc7\u591a\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u5e76\u4e14\u591a\u79cd\u5b9e\u73b0\u7684SDK\u4e4b\u95f4\u5728\u529f\u80fd\u4e0a\u80fd\u591f\u4fdd\u6301\u4e92\u901a", 
            "title": "3.4 \u7248\u672c\u63a7\u5236"
        }, 
        {
            "location": "/sdk-design_zh/#35", 
            "text": "\u672cSDK\u5e94\u8be5\u65b9\u4fbf\u4e8e\u5728\u53ef\u670d\u52a1\u6027\u652f\u6301\u4e2d\u6dfb\u52a0\u63d2\u4ef6\uff0c\u5373\u65e5\u5fd7\u7cfb\u7edf\u3002\u5b83\u5e94\u8be5\u5141\u8bb8SDK\u4f7f\u7528\u65b9\u7684\u5e94\u7528\u6dfb\u52a0\u4e00\u4e2a\u65e5\u5fd7\u5904\u7406\u7684\u5b9e\u4f8b\u3002\u5e94\u7528\u503e\u5411\u4e8e\u5728SDK\u5185\u90e8\u548c\u5916\u90e8\u4f7f\u7528\u4e00\u4e2a\u901a\u7528\u7684\u65e5\u5fd7\u7cfb\u7edf\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u4e00\u4e2aIT\u7ec4\u7ec7\u4e3a\u4e86\u76d1\u89c6\u548c\u5206\u6790\u901a\u5e38\u4f1a\u5b89\u88c5\u65e5\u5fd7\u811a\u672c\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u6807\u51c6\u65e5\u5fd7\u683c\u5f0f\u7684\u9700\u6c42\u3002\u672cSDK\u5e94\u8be5\u6709\u4e00\u4e2a\u7f16\u8bd1\u8fdb\u7248\u672c\u7684\u65e5\u5fd7\u7cfb\u7edf\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u4eba\u5458\u901a\u8fc7\u9ed8\u8ba4\u65b9\u5f0f\u83b7\u53d6\u65e5\u5fd7\u3002\u4f46\u662f\u5b83\u5fc5\u987b\u5141\u8bb8\u8bbe\u7f6e\u4e00\u4e2a\u62e5\u6709\u4e00\u7cfb\u5217\u6807\u51c6\u96c6\u5408\u7684\u5916\u90e8\u65e5\u5fd7\u7cfb\u7edf\u6765\u8bb0\u5f55API\u65e5\u5fd7\u3002", 
            "title": "3.5 \u53ef\u670d\u52a1\u6027"
        }, 
        {
            "location": "/sdk-design_zh/#4", 
            "text": "\u6709\u8bb8\u591a\u79cd\u53ef\u80fd\u7684\u573a\u666f\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u5173\u6ce8\u4e00\u5c11\u90e8\u5206\u6765\u8bf4\u660eSDK\u7684\u6574\u4f53\u529f\u80fd\u3002", 
            "title": "4 \u573a\u666f"
        }, 
        {
            "location": "/sdk-design_zh/#41", 
            "text": "\u4e3a\u4e86\u8ddffabric\u4ea4\u4e92\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5177\u5907\u4e00\u4e2a\u4e13\u6709\u7684\u8eab\u4efd\u8ba4\u8bc1\uff0c\u8fd9\u4e2a\u8ba4\u8bc1\u88ab\u7f16\u7801\u8fdb\u4e00\u4e2a\u53eb\u505aECert\uff08\u767b\u8bb0\u8bc1\u4e66\uff09\u7684\u6210\u5458\u8bc1\u4e66\u91cc\u3002\u8fd9\u4e2a\u8bc1\u4e66\u53ef\u80fd\u662f\u7531\u5916\u90e8\u7684\u8ba4\u8bc1\u673a\u6784\u63d0\u4f9b\uff0c\u6216\u8005\u7531fabric\u6210\u5458\u670d\u52a1\u63d0\u4f9b\uff0c\u53ea\u8981\u8fd9\u4e2aECert\u53ef\u4ee5\u88abfabric\u7ec4\u4ef6\u5728\u5efa\u7acb\u94fe\u7684\u4fe1\u4efb\u94fe\u65f6\u9a8c\u8bc1\u5373\u53ef\u3002  \u5982\u679c\u7528\u4e00\u4e2a\u6807\u51c6\u7684CA\u6765\u7ba1\u7406\u5206\u914dECert\uff0c\u4ea4\u6613\u4f1a\u88abECert\u7b7e\u540d\u3002\u8fd9\u5c06\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u4ea4\u6613\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u90fd\u662f\u53ef\u9a8c\u8bc1\u7684\u3002  \u53e6\u4e00\u65b9\u9762\uff0cMSP\u5728fabric\u4e2d\u7684\u8bbe\u8ba1\u662f\uff0c\u5229\u7528\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\u4eceECert\u7684\u5bc6\u94a5\u5bf9\u5bfc\u51fa\u4e00\u4e2a\u5bc6\u94a5\u5bf9\uff0c\u56e0\u6b64\u4e3a\u6bcf\u4e00\u4e2a\u4ea4\u6613\u4ea7\u751f\u4e00\u4e2a\u5047\u540d\u8bc1\u4e66\uff0c\u53c8\u53eb\u505aTCert\u3002\u4e00\u4e2aTCert\u4e0d\u80fd\u4ee3\u8868\u4e00\u4e2a\u8ba4\u8bc1\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u80fd\u901a\u8fc7\u6210\u5458\u670d\u52a1\u8ffd\u8e2a\u5230\u539f\u59cb\u7684ECert\u3002\u8fd9\u4e2a\u6280\u672f\u5728\u8bb8\u591a\u4e1a\u52a1\u573a\u666f\u4e0b\u9690\u85cf\u4ea4\u6613\u8ba4\u8bc1\u662f\u975e\u5e38\u6709\u7528\u7684\u3002  Fabric\u63d0\u4f9b\u4e86MSP\u63a5\u53e3\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u547d\u540d\u4e3a\u201cCOP\u201d\u7acb\u610f\u6765\u6e90\u4e8e\u5b83\u7684\u4f5c\u7528\u5c31\u50cf\u8b66\u5bdf\uff0c\u800c\u4e0d\u662f\u6765\u6e90\u4e8e\u9996\u5b57\u6bcd\u3002\u5728github\u7684\u7ec4\u7ec7\u8d85\u7ea7\u8d26\u672c\u91cc\u9762\u7684\u4ee3\u7801\u5e93\u201cfabric-cop\u201d\u5c31\u662f\u5b83\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u5728github\u4e0ahyperledger\u7ec4\u7ec7\u4e0b\u5e76\u672a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u5e93\uff0c\u53ef\u80fd\u662f\u672c\u6587\u6863\u6210\u4e66\u540e\u53c8\u6709\u53d8\u66f4\u3002\uff09  \u5982\u679c\u7ed9\u4e00\u4e2a\u57fa\u4e8efabric\u7684\u7f51\u7edc\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u7684CA\uff0c\u7136\u540e\u7528\u6237\u6ce8\u518c\u4e5f\u4f1a\u5728\u5916\u90e8\u7ef4\u62a4\u3002\u8fd9\u4e2a\u5916\u90e8\u7684\u7528\u6237\u6ce8\u518c\u7cfb\u7edf\u8d1f\u8d23\u8ba4\u8bc1\u7528\u6237\u3002\u4e00\u4e2a\u5df2\u7ecf\u88ab\u8ba4\u8bc1\u7684\u7528\u6237\u4e3a\u4e86\u83b7\u53d6ECert\u53ef\u4ee5\u4f7f\u7528CA\u8bf7\u6c42\u767b\u8bb0\u3002  \u5c31SDK\u800c\u8a00\uff0c\u5e94\u8be5\u6709\u4e24\u79cdAPI\uff1a\u652f\u6301\u4efb\u4f55CA\uff08\u5305\u62ec\u5185\u5efa\u7684\u548c\u5916\u90e8\u7684\uff09\u7684\u901a\u7528API\uff0c\u548c\u4e13\u95e8\u4e3afabric\u7684\u5185\u5efa\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u7684API\u3002\u901a\u7528API\u8d1f\u8d23\u5141\u8bb8\u4f7f\u7528SDK\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u6bd4\u5982\u5173\u8054\u7528\u6237\u8eab\u4efd\uff0c\u547d\u540d\u4e3a\u201cenroll()\u201d\uff0c\u4e3a\u8ba4\u8bc1\u7528\u6237\u83b7\u53d6ECert\u7684\u7a0b\u5e8f\uff1b\u8fd8\u6709\u201cgetTCerts()\u201d\uff0c\u83b7\u53d6\u4ea4\u6613\u8bc1\u4e66\u5141\u8bb8\u7528\u6237\u63d0\u4ea4\u4ea4\u6613\u3002  \u5ba2\u6237\u7aef\u6709\u5173\u53ef\u9009\u7684\u6210\u5458\u670d\u52a1\u5b9e\u73b0\uff08\u5373COP\uff09\u7684\u8bbe\u8ba1\u9700\u8981\u5355\u72ec\u7684\u6587\u6863\u6765\u8bf4\u660e\u3002https://docs.google.com/document/d/1TO-sdHGpn8ifB9C_pH_y54H75Rx0RdXvZih7-lhsLII/edit", 
            "title": "4.1 \u6210\u5458\u7684\u6ce8\u518c\u548c\u767b\u8bb0"
        }, 
        {
            "location": "/sdk-design_zh/#42", 
            "text": "Hyperledger Fabric\u6240\u8bbe\u8ba1\u7684\u652f\u6301\u9690\u79c1\u6027\u548c\u673a\u5bc6\u6027\u7684\u901a\u9053\u548c\u8d26\u672c\uff0c\u7edf\u4e00\u88ab\u79f0\u4e3a\u4e00\u4e2a\u201c\u94fe\u201d\u3002\u901a\u9053\u548c\u8d26\u672c\u8bbe\u8ba1\u66f4\u591a\u5185\u5bb9\u8bf7\u67e5\u770b\uff1a\nhttps://docs.google.com/document/d/1eRNxxQ0P8yp4Wh__Vi6ddaN_vhN2RQHP-IruHNUwyhc/edit#\u3002\u901a\u4fe1\uff08\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff09\u88ab\u9650\u5236\u5728\u53c2\u4e0e\u65b9\u4e4b\u95f4\u7684\u901a\u9053\u5185\uff0c\u540c\u65f6\u5757\u5185\u6570\u636e\uff08\u5df2\u88ab\u6301\u4e45\u5316\u7684\u6570\u636e\uff09\u4fdd\u5b58\u5728\u4e00\u4e2a\u79c1\u6709\u7684\u4ec5\u4ec5\u5728\u8fd9\u4e9b\u53c2\u4e0e\u65b9\u4e4b\u95f4\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\u8d26\u672c\u4e2d\u3002\u4e0d\u5c5e\u4e8e\u94fe\u7684\u7f51\u7edc\u8282\u70b9\u4e0d\u4e86\u89e3\u901a\u9053\u548c\u79c1\u6709\u8d26\u672c\u5185\u90e8\u4efb\u4f55\u4e8b\u7269\uff0c\u4e5f\u4e0d\u80fd\u5229\u7528\u8fd9\u4e9b\u4e8b\u7269\u3002  \u4e00\u65e6\u4e00\u4e2a\u94fe\u88ab\u521b\u5efa\uff0c\u5e94\u7528\u53ef\u4ee5\u53d1\u9001\u4ea4\u6613\u7ed9\u94fe\u4e0a\u4ee5\u79c1\u6709\u65b9\u5f0f\u5b58\u5728\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u5df2\u63d0\u4ea4\u88ab\u9a8c\u8bc1\u7684\u4ea4\u6613\u5230\u79c1\u6709\u8d26\u672c\u3002  \u521b\u5efa\u94fe\u7684\u8d23\u4efb\u843d\u5728\u5e94\u7528\u7a0b\u5e8f\u8eab\u4e0a\u3002\u901a\u8fc7SDK\u5e94\u7528\u7a0b\u5e8f\u521d\u59cb\u5316\u94fe\u7684\u7ec4\u7ec7\u56e2\u4f53\uff08\u7f51\u7edc\u6210\u5458\u7684\u4ee3\u8868\uff09\u6784\u6210\u5e76\u4e14\u7ed9\u6392\u5e8f\u670d\u52a1\u3002  \u5728SDK\u91cc\uff0c\u901a\u9053\u548c\u5b83\u672c\u8eab\u5173\u8054\u7684\u8d26\u672c\u7684\u7ed1\u5b9a\u7531\u94fe\u7c7b\u4f53\u73b0\u3002\u5e94\u7528\u548c\u6307\u5b9a\u7684\u6392\u5e8f\u8282\u70b9\u7b2c\u4e00\u6b21\u51c6\u5907\u4e00\u4e2a\u65b0\u7684\u901a\u9053\u5e76\u4e14\u83b7\u53d6\u4e00\u4e2a\u5305\u542b\u5173\u4e8e\u65b0\u94fe\u7684\u5bc6\u94a5\u4fe1\u606f\u7684\u521b\u4e16\u533a\u5757\uff0c\u5305\u542b\u53c2\u4e0e\u8005\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3001\u6392\u5e8f\u8282\u70b9\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3002\u5e94\u7528\u901a\u8fc7\u76ee\u6807\u662f\u914d\u7f6e\u7cfb\u7edfchaincode\u7684\u914d\u7f6e\u5316\u4ea4\u6613\u6765\u534f\u8c03\u65b0\u901a\u9053\u5bf9\u53c2\u4e0e\u8282\u70b9\u7684\u9080\u8bf7\u3002", 
            "title": "4.2 \u94fe\u7684\u521b\u5efa"
        }, 
        {
            "location": "/sdk-design_zh/#43", 
            "text": "\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u660e\u786e\u7684\u4e24\u4e2a\u6b65\u9aa4\uff1a\u80cc\u4e66\u548c\u63d0\u4ea4\u3002\u80cc\u4e66\u662f\u8bf7\u6c42\u8282\u70b9\u5bf9\u4ea4\u6613\u7684\u7ed3\u679c\u8fdb\u884c\u8fd0\u884c\u5e76\u80cc\u4e66\uff08\u7b7e\u540d\uff09\uff1b\u63d0\u4ea4\u662f\u5728\u4ea4\u6613\u548c\u4ea4\u6613\u7684\u80cc\u4e66\u5185\u5bb9\u7684\u6709\u6548\u671f\u5185\u8bf7\u6c42\u5171\u8bc6\u3002  \u4e0b\u56fe\u8bf4\u660e\u4ea4\u6613\u65f6\u5ba2\u6237\u7aefSDK\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u67b6\u6784\u6587\u6863\uff08https://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architecture-Proposal.md\uff09\u3002  \u9996\u5148SDK\u548c\u5e94\u7528\u534f\u540c\u5de5\u4f5c\uff0c\u4f7f\u7528\u5e94\u7528\u7684\uff08\u6216\u8005\u88ab\u8ba4\u8bc1\u7528\u6237\u7684\uff09\u79c1\u94a5\u7ed9\u4fe1\u606f\u7b7e\u540d\uff08\u6240\u6709\u7684\u5916\u90e8\u4fe1\u606f\u90fd\u9700\u8981\u7b7e\u540d\u8ba4\u8bc1\uff09\u3002\u7136\u540e\u5b83\u6839\u636e\u80cc\u4e66\u7b56\u7565\uff08\u901a\u8fc7\u9a8c\u8bc1\u7cfb\u7edf\u94fe\u7801\u6216\u8005VSCC\u5b9e\u73b0\u7684\uff09\u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u53d1\u9001\u4fe1\u606f\u3002\u5b83\u83b7\u5f97\u5f02\u6b65\u7684\u53cd\u9988\u5e76\u4e14\u51b3\u5b9a\u662f\u5426\u6267\u884c\u521b\u5efa\u548c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u6267\u884c\u4ea4\u6613\u63d0\u4ea4\u7684\u51b3\u5b9a\u662f\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u8c13\u8bcd\uff08\u5c31\u50cf2 out of 3\uff09\u57fa\u4e8e\u5e26\u5916\u77e5\u8bc6\u3002\u4e00\u65e6\u63d0\u4ea4\uff0c\u4ea4\u6613\u7684\u5904\u7406\u6d41\u7a0b\u4fbf\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5SDK\u76d1\u542c\u63d0\u4ea4\u4e8b\u4ef6\u6765\u901a\u77e5\u5e94\u7528\u4ea4\u6613\u5904\u7406\u6d41\u7a0b\u7684\u5b8c\u6210\u6216\u8005\u62d2\u7edd\u7684\u7ed3\u679c\u3002   \u4e0a\u56fe\u662f\u5bf9\u4ea4\u6613\u6d41\u7a0b\u975e\u5e38\u4e0a\u5c42\u7684\u63cf\u8ff0\u3002SDK\u4e2d\u6709\u8be6\u7ec6\u7684\u6267\u884c\u7f51\u7edc\u548c\u73af\u5883\u914d\u7f6e\uff0c\u5305\u62ec\u83b7\u53d6\u7b7e\u540d\u5bc6\u94a5\u6765\u5b89\u5168\u7684\u7ba1\u7406\u6210\u5458\uff0c\u5904\u7406\u4ea4\u6613\u548c\u4e8b\u4ef6\u6d41\uff0c\uff08\u4f9d\u8d56\u5e94\u7528\u7684\uff09\u591a\u79cd\u5171\u8bc6\u901a\u9053\u3002", 
            "title": "4.3 \u4ea4\u6613\u652f\u6301"
        }, 
        {
            "location": "/sdk-design_zh/#5-api", 
            "text": "\u4e0b\u9762\u7684\u94fe\u63a5\u6307\u5411gRPC\u4e0efabric\uff08\u8282\u70b9\uff0c\u6392\u5e8f\u8005\u548c\u6210\u5458\u670d\u52a1\uff09\u6c9f\u901a\u7684\u4fe1\u606f\u548c\u670d\u52a1\u5b9a\u4e49\u3002  Proposal  \uff08\u90e8\u7f72\u6216\u8005\u4ea4\u6613\u8c03\u7528\u7684\u63d0\u6848\uff09  ProposalResponse  \uff08\u5168\u5c40\u7684\u63d0\u6848\u56de\u5e94\uff09  Chaincode  \uff08chaincode\uff0c\u8c03\u7528\uff0c\u90e8\u7f72\uff0c\u7b49\u7ec6\u8282\uff09  ChaincodeProposal  (chaincode-specific proposal header and payload)  Transaction  (transaction invocation)  ChaincodeTransaction  (chaincode-specific transaction action payload)  \u65b0\u7684COP API\u662f\u57fa\u4e8ejson\u7684\uff0c\u9700\u8981\u6dfb\u52a0\u5230\u65b0\u7684\u6210\u5458\u670d\u52a1\u8bbe\u8ba1\u4e2d\u3002  \u6d88\u606f\u5b9a\u4e49\u5e94\u8be5\u662f\u8bbe\u8ba1SDK APIs\u7684\u4e00\u4e2a\u7075\u611f\u6765\u6e90\u3002APIs\u660e\u663e\u6ca1\u6709\u5fe0\u5b9e\u7684\u53cd\u6620\u51fa\u6d88\u606f\u5b9a\u4e49\uff0c\u56e0\u4e3aSDK\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u7f3a\u7701\u548c\u72b6\u6001\u4fe1\u606f\u6765\u6700\u5c0f\u5316\u8bf7\u6c42\u7684\u53c2\u6570\u3002", 
            "title": "5 \u5ba2\u6237\u7aef\u670d\u52a1\u5668API\u53c2\u8003"
        }, 
        {
            "location": "/sdk-design_zh/#6", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u8ba8\u8bba\u8bbe\u8ba1\u539f\u5219\u548c\u67b6\u6784\u601d\u8def\u3002  \u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7b49\u7ea7\u7684\uff08\u6570\u503c\u8d8a\u5c0f\u8868\u793a\u7b49\u7ea7\u8d8a\u9ad8\uff09\u4e00\u4e9b\u6a21\u5757\uff1a  Package: Hyperledger Fabric Client     \u6a21\u5757  \u7b49\u7ea7  \u529f\u80fd      Client  0  \u4e3b\u8981\u7684\u5165\u53e3\u6a21\u5757\u3002\u5b83\u5fc5\u987b\u5141\u8bb8\u7528\u6237\u521b\u5efa\u9700\u8981\u7684\u4efb\u4f55\u5bf9\u8c61\u6765\u6267\u884c\u6240\u6709\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u76f4\u63a5\u8fde\u63a5\u7f51\u7edc\uff0cchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u6267\u884c\uff0c\u591a\u79cd\u67e5\u8be2\u3002\u53e6\u5916\uff0c\u57fa\u4e8e\u7f16\u7801\u89c4\u8303\u548c\u666e\u904d\u7684\u793e\u533a\u7ec3\u4e60\uff0c\u6bcf\u4e00\u79cd\u8bed\u8a00\u7684\u5b9e\u73b0\u4e5f\u80fd\u51b3\u5b9a\u662f\u5426\u6dfb\u52a0\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5982sendTransaction(chain, tx)    Chain  1  \u4e00\u4e2a\u94fe\u4ee3\u8868\u4e00\u4e9b\u8282\u70b9\u7279\u522b\u5f62\u6210\u7684\u4e00\u4e2a\u7f51\u7edc\uff0c\u542f\u52a8\u4e00\u4e2a\u5171\u8bc6\u7684\u901a\u9053\uff0c\u5728\u901a\u9053\u4e2d\u4ea4\u6613\u53ef\u4ee5\u88ab\u72ec\u7acb\u7684\u5904\u7406\u3002\u4e00\u4e2a\u7f51\u7edc\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u94fe\u3002\u94fe\u4e0a\u7684\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u8d26\u672c\u5305\u542b\u4ea4\u6613\u5728\u94fe\u4e0a\u6d3e\u53d1\uff0c\u5305\u62ec\u6210\u5458\u5173\u7cfb\u7684\u4efb\u4f55\u914d\u7f6e\u3002\u6240\u6709\u7684\u4ea4\u6613\u90fd\u662f\u5728\u94fe\u4e0a\u53d1\u9001\uff0c\u4e00\u4e2a\u5e94\u7528\u53ef\u80fd\u64cd\u4f5c\u591a\u4e2a\u94fe\u3002    Peer  2  \u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u3002\u8282\u70b9\u7684\u89d2\u8272\u6709\u80cc\u4e66\u8282\u70b9\u548c\u63d0\u4ea4\u8282\u70b9\uff0c\u5b83\u4eec\u90fd\u5728\u7ef4\u62a4\u7740\u8d26\u672c\u3002\u5e94\u7528\u53ef\u80fd\u8fde\u63a5\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u53ef\u7528\u7684\u8282\u70b9    Orderer  2  \u7c7b\u4f3c\u8282\u70b9\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4ee3\u8868\u6392\u5e8f\u670d\u52a1\u7684\u7ec8\u7aef\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8282\u70b9\uff08\u5f00\u53d1\u65f6\u672c\u5730\u5b89\u88c5\uff09\u6216\u8005\u4e00\u4e2a\u7f51\u7edc\u6392\u5e8f\u8005\u7684\u4ee3\u7406\u8282\u70b9\u3002\u57fa\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u7684fabric\u4f1a\u6709\u4e00\u4e2a\u7531\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\u7684\u5355\u72ec\u7684\u6392\u5e8f\u670d\u52a1\u3002\u5e94\u7528\u53ef\u4ee5\u9009\u62e9\u4fe1\u4efb\u7279\u5b9a\u7684\u6392\u5e8f\u8005\uff0c\u6216\u8005\u4e00\u90e8\u5206\u6392\u5e8f\u8005\uff0c\u6216\u8005\u8bbe\u7f6e\u4ee3\u7406\u53bb\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u5e7f\u64ad\u4ea4\u6613\u3002    User  2  \u4ee3\u8868\u5728\u7f51\u7edc\u4e0a\u4ea4\u6613\u7684\u7528\u6237\u3002\u7528\u6237\u5b9e\u4f8b\u53ef\u4ee5\u57fa\u4e8e\u767b\u8bb0\u8bc1\u4e66\u88ab\u521d\u59cb\u5316\u3002\u8bc1\u4e66\u53ef\u4ee5\u4ece\u6210\u5458\u670d\u52a1\u6216\u8005\u5916\u90e8CA\u83b7\u53d6\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u79cd\u7528\u6237\u4e5f\u80fd\u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\u6210\u5458\u3002\u7136\u800c\uff0c\u8fd9\u4e0e\u5e94\u7528\u7a0b\u5e8f\u65e0\u5173\uff08\u8fd9\u66f4\u50cf\u662f\u7f51\u7edc\u7ba1\u7406\u65b9\u9762\u7684\u95ee\u9898\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u8bbe\u8ba1\u4e2d\u6ca1\u6709\u5f00\u653e\u3002    Proposal  3  \u767b\u8bb0\u7684\u7528\u6237\u53ef\u4ee5\u5411\u8282\u70b9\u5217\u8868\u63d0\u51fa\u4ea4\u6613\u63d0\u6848\u6765\u80cc\u4e66\u4ea4\u6613\u3002\u4e00\u65e6\u63a5\u6536\u5230\u80cc\u4e66\u54cd\u5e94\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5df2\u7ecf\u83b7\u53d6\u80cc\u4e66\u7b7e\u540d\uff0c\u662f\u5426\u9700\u8981\u6267\u884c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u539f\u59cb\u7684GRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002    ProposalResponse  3  \u63d0\u6848\u8c03\u7528\u80cc\u4e66\u8282\u70b9\u7684\u54cd\u5e94\uff0c\u6253\u5305\u80cc\u4e66\u7ed3\u679c\uff08\u662f\u6216\u5426\uff09\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u54cd\u5e94\u539f\u59cb\u7684GRPC\u6d88\u606f\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u5229\u7528\u5b83\u81ea\u5df1\u7684\u5185\u5bb9\uff08\u80cc\u4e66\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\uff09\u3002    Transaction  3  \u767b\u8bb0\u7528\u6237\u6536\u96c6\u4e86\u80cc\u4e66\u4e4b\u540e\u53ef\u4ee5\u63d0\u4ea4\u4ea4\u6613\u3002\u4ea4\u6613\u8bf7\u6c42\u5305\u542b\u80cc\u4e66\u7b7e\u540d\u548cMVCC+post-image\uff0c\u5e76\u4e14\u4f7f\u7528\u6392\u5e8f\u670d\u52a1API\u3002\u4ea4\u6613\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u90e8\u7f72\u548c\u6267\u884c\u3002\u8fd9\u662f\u4ea4\u6613\u6709\u5173\u539f\u59cbGRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002    CryptoSuite  3  \u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u5bf9\uff0c\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u6d88\u606f\uff0c\u5b89\u5168\u7684hash\u548cMAC\u3002     Package: Member Service       \u6a21\u5757  \u7b49\u7ea7  \u529f\u80fd      MemberService  0  \u8fd9\u662ffabric\u53ef\u9009\u6a21\u5757\u7684\u5ba2\u6237\u7aef\uff0c\u6210\u5458\u670d\u52a1\u3002\u672c\u6a21\u5757\u7684\u4e3b\u8981\u529f\u80fd\u662f\u4ece\u6210\u5458\u670d\u52a1\u83b7\u53d6\u7528\u6237\u767b\u8bb0\u8bc1\u4e66\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u6a21\u5757\u672c\u8eab\u6216\u5b83\u7684\u6269\u5c55\u7c7b\u4e5f\u5e94\u8be5\u80fd\u5728fabric\u9ed8\u8ba4\u7684\u6210\u5458\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\u63d0\u4f9b\u53ef\u7528\u7684\u989d\u5916\u7684\u529f\u80fd\uff0c\u5982\u7528\u6237\u6ce8\u518c\u529f\u80fd\u3002     \u4e3a\u4e86\u5e2e\u52a9\u8bf4\u660e\u4ee5\u4e0a\u5404\u6a21\u5757\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86\u4ee5\u4e0b\u7684UML\u56fe\uff1a", 
            "title": "6 \u8be6\u7ec6\u8bf4\u660e"
        }, 
        {
            "location": "/sdk-design_zh/#61", 
            "text": "\u548c\u7ec8\u7aef\u7528\u6237\u4e3b\u8981\u7684\u4ea4\u4e92\u5904\u7406\u5668\u3002\u5ba2\u6237\u7aef\u5b9e\u4f8b\u63d0\u4f9b\u548c\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\uff0c\u6392\u5e8f\u8005\uff0c\u53ef\u9009\u6210\u5458\u670d\u52a1\u4ea4\u4e92\u7684\u5904\u7406\u5668\u3002\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528SDK\u9700\u8981\u548c\u591a\u4e2a\u7f51\u7edc\u4ea4\u4e92\uff0c\u5206\u522b\u901a\u8fc7\u5355\u72ec\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\u8fdb\u884c\u3002  \u6bcf\u4e2a\u5ba2\u6237\u7aef\u88ab\u521b\u5efa\u65f6\uff0c\u5e94\u8be5\u662f\u4f7f\u7528\u6765\u81ea\u4e8e\u5171\u8bc6\u670d\u52a1\u7684\u914d\u7f6e\u6570\u636e\u521d\u59cb\u5316\u521b\u5efa\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u542b\u4e00\u4e2a\u88ab\u4fe1\u4efb\u7684\u6839\u7684\u5217\u8868\uff0c\u6392\u5e8f\u8282\u70b9\u8bc1\u4e66\u548cIP\u5730\u5740\uff0c\u8fd8\u6709\u4e00\u4e2a\u8282\u70b9\u8bc1\u4e66\u5217\u8868\u548c\u53ef\u4f7f\u7528\u7684IP\u5730\u5740\u3002\u8fd9\u5fc5\u987b\u662f\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8d23\u7ef4\u62a4\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\uff0c\u56e0\u4e3aSDK\u4e0d\u6301\u4e45\u5730\u4fdd\u5b58\u8fd9\u4e2a\u5bf9\u8c61\u3002  \u6bcf\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\u53ef\u4ee5\u7ef4\u62a4\u51e0\u6761\u94fe\u4ee3\u8868\u901a\u9053\u548c\u76f8\u5173\u7684\u8d26\u672c\u3002    new_chain\uff08\u521b\u5efa\u4e00\u4e2a\u65b0\u94fe\uff09  \u6839\u636e\u53c2\u6570\u7ed9\u51fa\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a\u94fe\u7684\u5b9e\u4f8b\u3002\u8fd9\u5b9e\u9645\u4e0a\u4ee3\u8868\u201c\u901a\u9053\u201d\uff08\u6b63\u5982\u4e0a\u9762\u89e3\u91ca\u7684\uff09\uff0c\u8fd9\u4e2a\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002\u521d\u59cb\u5316\u8fd9\u4e2a\u901a\u9053\uff0c\u8fd9\u4e2a\u8fd4\u56de\u7684\u5bf9\u8c61\u4e0a\u5fc5\u987b\u914d\u7f6e\u4e00\u4e2a\u53c2\u4e0e\u65b9\u7684\u80cc\u4e66\u8005\u5217\u8868\u548c\u6392\u5e8f\u8005\u8282\u70b9\u3002  Params \uff08\u53c2\u6570\uff09   name (str):\u94fe\u7684\u540d\u79f0\uff0c\u63a8\u8350\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u9632\u6b62\u78b0\u649e   Returns\uff08\u8fd4\u56de\u503c\uff09   (Chain instance):\u672a\u521d\u59cb\u5316\u7684\u94fe\u7684\u5b9e\u4f8b     get_chain\uff08\u83b7\u53d6\u94fe\uff09  \u83b7\u53d6\u94fe\u7684\u5b9e\u4f8b\u3002\u672c\u63a5\u53e3\u5141\u8bb8\u4fdd\u5b58\u5df2\u5b58\u5728\u7684\u94fe\u5b9e\u4f8b\u4f9b\u4e4b\u540e\u7684\u68c0\u7d22\uff0c\u5e76\u4e14\u5728\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u3002\u8bb0\u5f55\u94fe\u7684\u4fe1\u606f\u662f\u5e94\u7528\u7a0b\u5e8f\u6216\u8005SDK\u8d1f\u8d23\u7684\u4e8b\u60c5\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u67e5\u770b\u5b58\u50a8\u4e2d\u94fe\u7684\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u8c03\u7528\u53e6\u5916\u4e00\u79cdAPI\u67e5\u8be2\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u6765\u83b7\u5f97\u8fd9\u4e9b\u4fe1\u606f\u3002  Params   name (str): The name of the chain \uff08\u94fe\u7684\u540d\u79f0\uff09   Returns   (Chain instance or None): the chain instance for the name. \uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\uff09   Error:   The state store has not been set\uff08\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5b58\u50a8\u72b6\u6001\uff09  A chain does not exist under that name\uff08\u4e0d\u5b58\u5728\u8be5\u540d\u79f0\u547d\u540d\u7684\u94fe\uff09     query_chain_info\uff08\u67e5\u8be2\u94fe\u7684\u4fe1\u606f\uff09  \u8fd9\u662f\u4e00\u4e2a\u7f51\u7edc\u8c03\u7528\uff0c\u7528\u6765\u67e5\u8be2\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u94fe\u7684\u4fe1\u606f\u3002\u76ee\u6807\u8282\u70b9\u5fc5\u987b\u662f\u5c5e\u4e8e\u76ee\u6807\u94fe\uff0c\u624d\u80fd\u591f\u8fd4\u56de\u8bf7\u6c42\u7684\u4fe1\u606f\u3002  Params   name (str): The name of the chain \uff08\u94fe\u540d\uff09  peers (array of Peer instances): target Peers to query\uff08\u67e5\u8be2\u7684\u76ee\u6807\u8282\u70b9\uff09   Returns   (Chain instance or None): the chain instance for the name.\uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\u3002\uff09   Error:   The target Peer(s) does not know anything about the chain\uff08\u76ee\u6807\u8282\u70b9\u4e0d\u4e86\u89e3\u94fe\u7684\u4fe1\u606f\uff09     set_state_store\uff08\u8bbe\u7f6e\u72b6\u6001\u7684\u5b58\u50a8\uff09  SDK\u5e94\u8be5\u6709\u4e00\u4e2a\u5185\u5efa\u7684\u952e\u503c\u5b58\u50a8\u7684\u5b9e\u73b0\uff08\u5efa\u8bae\u662f\u57fa\u4e8e\u6587\u4ef6\u7684\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u4e8e\u5728\u5f00\u53d1\u4e2d\u8bbe\u7f6e\uff09\u3002\u4f46\u662f\u751f\u4ea7\u7cfb\u7edf\u9700\u8981\u901a\u8fc7\u6570\u636e\u5e93\u4e3a\u66f4\u591a\u7684\u7a33\u5b9a\u5b58\u50a8\u548c\u805a\u7c07\u5b58\u50a8\u5907\u4efd\uff0c\u6240\u4ee5\u591a\u79cd\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u5171\u4eab\u5e94\u7528\u72b6\u6001\uff08\u5907\u6ce8\uff1a\u5e94\u7528\u4e0d\u9700\u8981\u4e30\u5bcc\u7684\u72b6\u6001\uff09\u3002\u8fd9\u4e2aAPI\u4f7f\u5f97\u5b58\u50a8\u6a21\u5757\u5177\u6709\u53ef\u63d2\u62d4\u7279\u6027\uff0c\u6240\u4ee5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u5b58\u50a8\u5b9e\u73b0\u3002  Params   store (KeyValueStore): instance of an alternative KeyValueStore implementation provided by the consuming app.\uff08\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u952e\u503c\u5b58\u50a8\u5b9e\u73b0\u7684\u5b9e\u4f8b\uff09   Returns   None     get_state_store\uff08\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\uff09  \u4e3aclient\u63d0\u4f9b\u7684\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\u7684\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5  Params   None   Returns   (KeyValueStore instance): The KeyValueStore implementation object set within this Client, or null if it does not exist\uff08\u8fd4\u56de\u8bbe\u7f6e\u5230client\u4e2d\u7684\u6309\u952e\u503c\u5bf9\u65b9\u5f0f\u5b9e\u73b0\u7684\u5b58\u50a8\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de\u7a7a\uff09     set_crypto_suite\uff08\u8bbe\u7f6e\u52a0\u5bc6\u6a21\u5757\uff09  \u8bbe\u7f6e\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u662f\u6309CryptoSuite\u63a5\u53e3\u5b9e\u73b0\u7684\u3002\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7684\u7b97\u6cd5\u548c\u4f7f\u7528\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\u7684\u52a0\u5bc6\u529f\u80fd\uff0c\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u7684\u6d88\u606f\uff0c\u5b89\u5168\u7684hashing\u5904\u7406\u548cMAC\u3002  Params   Suite (object): an instance of a crypto suite implementation\uff08\u6309\u63a5\u53e3\u5b9e\u73b0\u7684\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff09     get_crypto_suite\uff08\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\uff09  Client\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5\u3002  Params   None   Returns   (CryptoSuite instance): The CryptoSuite implementation object set within this Client, or null if it does not exist\uff08\u52a0\u5bc6\u6a21\u5757\u7684\u5bf9\u8c61\uff09  set_user_context\uff08\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\uff09   \u6839\u636eclient\u5b9e\u4f8b\u7684\u5b89\u5168\u7684\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\u3002\u7528\u6237\u7684\u8d44\u683c\u8bc1\u4e66\u4f1a\u88ab\u7528\u6765\u6267\u884c\u4ea4\u6613\u5e76\u4e14\u67e5\u8be2\u533a\u5757\u94fe\u7f51\u7edc\u3002\u5982\u679c\u72b6\u6001\u5b58\u50a8\u5df2\u7ecf\u8bbe\u7f6e\u5230\u4e86client\u5b9e\u4f8b\u4e0a\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u7528\u6237\u4e0a\u4e0b\u6587\uff0cSDK\u53ef\u4ee5\u628a\u5bf9\u8c61\u4fdd\u5b58\u5728\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u7f13\u5b58\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u72b6\u6001\u5b58\u50a8\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u6216\u8005\u88ab\u8986\u76d6\u65f6\uff0c\u7f13\u5b58\u4e0d\u80fd\u88ab\u521b\u5efa\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u518d\u6b21\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\u3002  Params   user (User): an instance of the User class encapsulating the authenticated user\u2019s signing materials (private key and enrollment certificate) \uff08\u53c2\u6570\u662f\u7528\u6237\uff0c\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5b83\u628a\u88ab\u8ba4\u8bc1\u7528\u6237\u62e5\u6709\u7684\u7b7e\u540d\u6750\u6599\uff08\u79c1\u94a5\u548c\u80cc\u4e66\u8bc1\u4e66\uff09\u6253\u5305\u5728\u5185\uff09     get_user_context\uff08\u83b7\u53d6\u7528\u6237\u4e0a\u4e0b\u6587\uff09  \u6b63\u5982\u4e0a\u9762\u6240\u89e3\u91ca\u7684\uff0cclient\u5b9e\u4f8b\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u72b6\u6001\u5b58\u50a8\u3002SDK\u4fdd\u5b58\u5df2\u6ce8\u518c\u7528\u6237\u5230\u53ef\u4ee5\u88ab\u5e94\u7528\u7a0b\u5e8f\u7684\u5df2\u8ba4\u8bc1\u7528\u6237\uff08\u8ba4\u8bc1\u7684\u5de5\u4f5c\u5728SDK\u4e4b\u5916\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\uff09\u5229\u7528\u7684\u5b58\u50a8\u4e2d\u3002\u672c\u65b9\u6cd5\u8bd5\u56fe\u901a\u8fc7\u672c\u5730\u5b58\u50a8\u4e2d\u7684\u540d\u79f0\uff08\u901a\u8fc7\u952e\u503c\u5b58\u50a8\u63a5\u53e3\u83b7\u53d6\uff09\u52a0\u8f7d\u7528\u6237\u3002\u5df2\u52a0\u8f7d\u7684\u7528\u6237\u5bf9\u8c61\u5fc5\u987b\u4ee3\u8868\u4e00\u4e2a\u5df2\u6ce8\u518c\u7528\u6237\uff0c\u5e76\u4e14\u8be5\u7528\u6237\u62e5\u6709\u4e00\u4e2a\u5df2\u4fe1\u4efb\u7684CA\uff08\u5982COP\u670d\u52a1\uff09\u7b7e\u540d\u7684\u53ef\u7528\u7684\u80cc\u4e66\u8bc1\u4e66\u3002  Params   name (str): The name of the user \uff08\u7528\u6237\u540d\u79f0\uff09   Returns   (User instance): The user object corresponding to the name, or null if the user does not exist or if the state store has not been set\uff08\u8fd4\u56de\u5339\u914d\u540d\u79f0\u7684\u7528\u6237\u5bf9\u8c61\uff0c\u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\u6216\u8005\u72b6\u6001\u5b58\u50a8\u672a\u8bbe\u7f6e\u8fd4\u56de\u7a7a\uff09", 
            "title": "6.1 \u5ba2\u6237\u7aef"
        }, 
        {
            "location": "/sdk-design_zh/#62", 
            "text": "\u201c\u94fe\u201d\u5bf9\u8c61\u4ece\u901a\u9053\u83b7\u53d6\u8bbe\u7f6e\u9879\uff0c\u7531\u6392\u5e8f\u8005\u8282\u70b9\u521b\u5efa\uff0c\u4e0e\u6392\u5e8f\u8005\u7ed9\u901a\u9053\u4e0a\u53c2\u4e0e\u7684\u8282\u70b9\u6d3e\u53d1\u4ea4\u6613\u7684\u884c\u4e3a\u76f8\u9694\u79bb\u3002\u6839\u636e\u8282\u70b9\u5217\u8868\u548c\u6392\u5e8f\u8005\u5217\u8868\u914d\u7f6e\u94fe\u4e4b\u540e\uff0c\u5b83\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u8fc7\u7a0b\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u53d1\u9001\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\u6765\u521b\u5efa\u7279\u5b9a\u7684\u901a\u9053\uff0c\u5e76\u4e14\u8be2\u95ee\u8282\u70b9\u52a0\u5165\u901a\u9053\u3002    add_peer\uff08\u6dfb\u52a0\u8282\u70b9\uff09  \u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   peer (Peer): an instance of the Peer class that has been initialized with URL, TLC certificate, and enrollment certificate\uff08\u5165\u53c2\uff1a\u88abURL\uff0cTLC\u8bc1\u4e66\uff0c\u548c\u80cc\u4e66\u8bc1\u4e66\u521d\u59cb\u5316\u4e4b\u540e\u7684Peer\u7c7b\u7684\u5bf9\u8c61\u3002\uff09     remove_peer\uff08\u79fb\u9664\u8282\u70b9\uff09  \u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   peer (Peer): an instance of the Peer class\uff08\u8282\u70b9\u5b9e\u4f8b\uff09     get_peers\uff08\u83b7\u53d6\u8282\u70b9\uff09  \u4ece\u94fe\u7684\u672c\u5730\u4fe1\u606f\u83b7\u53d6\u8282\u70b9\u3002  Params   None   Returns   (Peer list): The peer list on the chain\uff08\u8fd4\u56de\u94fe\u4e0a\u7684\u8282\u70b9\u5217\u8868\u3002\uff09     add_orderer\uff08\u6dfb\u52a0\u6392\u5e8f\u8282\u70b9\uff09  \u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\u94fe\u5b9e\u4f8b\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u4e2a\u7684\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u4e2a\u6392\u5e8f\u8005\u8d1f\u8d23\u5411\u6392\u5e8f\u8005\u7f51\u7edc\u4e2d\u5176\u4ed6\u6392\u5e8f\u8005\u5e7f\u64ad\u8bf7\u6c42\u3002\u6216\u8005\u5982\u679c\u5e94\u7528\u4e0d\u4fe1\u4efb\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u66f4\u591a\u7684\u6392\u5e8f\u8005\uff0c\u4ec5\u9700\u8981\u5411\u94fe\u5bf9\u8c61\u6dfb\u52a0\u5b83\u4eec\u5373\u53ef\u3002\u6709\u5173\u67d0\u4e2a\u6392\u5e8f\u8005\u7684\u6240\u6709API\u4f1a\u540c\u65f6\u5e7f\u64ad\u7ed9\u6240\u6709\u7684\u6392\u5e8f\u8005\u3002  Params   orderer (Orderer): an instance of the Orderer class \uff08Orderer\u5b9e\u4f8b\uff09     remove_orderer\uff08\u79fb\u9664\u6392\u5e8f\u8282\u70b9\uff09  \u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   orderer (Orderer): an instance of the Orderer class     get_orderers\uff08\u83b7\u53d6\u6392\u5e8f\u8282\u70b9\uff09  \u83b7\u53d6\u94fe\u7684\u6392\u5e8f\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   None   Returns   (Orderer list): The orderer list on the chain     initialize_chain\uff08\u521d\u59cb\u5316\u94fe\uff09  \u8c03\u7528\u6392\u5e8f\u8005\u6765\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u94fe\uff0c\u521b\u5efa\u52a8\u4f5c\u672c\u8eab\u662f\u5f00\u653e\u7684\u65b0\u7684\u6d88\u606f\u6d41\u548c\u8fde\u63a5\u53c2\u4e0e\u8282\u70b9\u7684\u7ec4\u5408\u3002\u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u5904\u7406\u3002\u53ea\u6709\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u9700\u8981\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u4e00\u65e6\u94fe\u88ab\u6210\u529f\u521b\u5efa\uff0c\u5176\u4ed6\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4ec5\u4ec5\u9700\u8981\u8c03\u7528get_chain()\u6765\u83b7\u53d6\u6709\u5173\u94fe\u7684\u4fe1\u606f\u3002  Params   None   Returns \uff08\u94fe\u7684\u521d\u59cb\u5316\u52a8\u4f5c\u662f\u5426\u6267\u884c\u6210\u529f\uff09   (bool): whether the chain initialization process was successful     update_chain\uff08\u66f4\u65b0\u94fe\uff09  \u8c03\u7528\u6392\u5e8f\u8005\u8282\u70b9\u6765\u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684\u94fe\u3002\u8fd9\u5141\u8bb8\u7ed9\u5df2\u5b58\u5728\u7684\u94fe\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\uff0c\u4e5f\u662f\u57fa\u4e8e\u8bc1\u4e66\u91cd\u5efa\u5bf9\u8282\u70b9\u8bc1\u4e66\u4fe1\u606f\u8fdb\u884c\u66f4\u65b0\u3002  Params   None   Returns \uff08\u66f4\u65b0\u94fe\u7684\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff09   (bool): whether the chain update process was successful     is_readonly\uff08\u662f\u5426\u53ea\u8bfb\uff09  \u83b7\u53d6\u94fe\u7684\u72b6\u6001\u6765\u67e5\u770b\u5e95\u5c42\u901a\u9053\u662f\u5426\u5df2\u7ecf\u88ab\u7ec8\u6b62\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u94fe\uff0c\u53ef\u4ee5\u67e5\u8be2\u4fe1\u606f\uff08\u4ea4\u6613\u548c\u72b6\u6001\uff09\u4f46\u662f\u4e0d\u53ef\u4ee5\u63d0\u4ea4\u65b0\u7684\u4ea4\u6613\u3002  Params   None   Returns \uff08\u662f\u5426\u53ea\u8bfb\uff09   (bool): is ready-only (true) or not     query_info\uff08\u67e5\u8be2\u4fe1\u606f\uff09  \u67e5\u8be2\u94fe\u7684\u72b6\u6001\uff08\u9ad8\u5ea6\uff0c\u5df2\u77e5\u7684\u8282\u70b9\uff09\u4e2d\u591a\u79cd\u6709\u7528\u4fe1\u606f\u3002  Params   none   Returns    (ChainInfo) with height, currently the only useful info     query_block\uff08\u67e5\u8be2\u5757\uff09  \u6839\u636e\u5757\u53f7\u67e5\u8be2\u5757\u3002  Params   blockNumber (number)   Returns   Object containing the block     query_transaction\uff08\u67e5\u8be2\u4ea4\u6613\uff09  \u6839\u636e\u4ea4\u6613\u53f7\u67e5\u8be2\u4ea4\u6613\u3002  Params   transactionID   Returns   TransactionInfo containing the transaction     create_deploy_proposal\uff08\u521b\u5efa\u90e8\u7f72\u63d0\u6848\uff09  \u521b\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincodeID\uff0cchaincode\u8c03\u7528\uff0c\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7b7e\u540d\u63d0\u6848\u3002  Params   chaincode_path (string): path to the chaincode to deploy  chaincode_name (string): a custom name to identify the chaincode on the chain  fcn (string): name of the chaincode function to call after deploy to initiate the state\uff08chaincode\u7684\u65b9\u6cd5\u540d\uff0c\u90e8\u7f72\u540e\u521d\u59cb\u5316\u72b6\u6001\u65f6\u8981\u8c03\u7528\u5b83\uff09  args (string[]): arguments for calling the init function designated by \u201cfcn\u201d\uff08\u4e0a\u9762fcn\u7684\u53c2\u6570\uff09  sign (Bool): Whether to sign the transaction, default to True   Returns   (Proposal): The created Proposal instance or None.     create_transaction_proposal\uff08\u521b\u5efa\u4ea4\u6613\u63d0\u6848\uff09  \u4e3a\u4ea4\u6613\u521b\u5efa\u4e00\u4e2a\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincode\u540d\u79f0\uff0c\u9700\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u53c2\u6570\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7ed9\u63d0\u6848\u7b7e\u540d\u3002  Params   chaincode_name (string): The name given to the target chaincode to invoke\uff08\u8981\u6267\u884c\u7684\u76ee\u6807chaincode\u7684\u540d\u79f0\uff09  args (string[]): arguments for calling the \u201cinvoke\u201d method on the chaincode\uff08\u6b63\u5728\u8c03\u7528\u6267\u884c\u7684chaincode\u4e0a\u7684\u65b9\u6cd5\u7684\u53c2\u6570\uff09  Sign (Bool): Whether to sign the transaction, default to True   Returns   (Transaction_Proposal instance): The created Transaction_Proposal instance or None.     send_transaction_proposal\uff08\u53d1\u9001\u4ea4\u6613\u63d0\u6848\uff09  \u628a\u521b\u5efa\u597d\u7684\u63d0\u6848\u53d1\u9001\u7ed9\u8282\u70b9\u53bb\u80cc\u4e66\u3002  Params   transaction_proposal (Transaction_Proposal): The transaction proposal data\uff08\u4ea4\u6613\u63d0\u6848\u7684\u6570\u636e\uff09  chain: The target chain whose peers the proposal will be sent to\uff08\u63d0\u6848\u5c06\u8981\u53d1\u9001\u7ed9\u7684\u8282\u70b9\u6240\u5728\u7684\u76ee\u6807\u94fe\uff09  retry (Number): Times to retry when failure, by default to 0 (no retry)\uff08\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba40\uff09   Returns   (Transaction_Proposal_Response response): The response to send proposal request.\uff08\u53d1\u9001\u63d0\u6848\u8bf7\u6c42\u540e\u7684\u54cd\u5e94\uff09     create_transaction\uff08\u521b\u5efa\u4ea4\u6613\uff09  \u9075\u4ece\u80cc\u4e66\u7b56\u7565\u6839\u636e\u63d0\u6848\u7684\u54cd\u5e94\u4fe1\u606f\u521b\u5efa\u4ea4\u6613\u3002  Params   proposal_responses ([Transaction_Proposal_Response]): The array of proposal responses received in the proposal call.\uff08\u5728\u63d0\u6848\u7684\u8c03\u7528\u4e2d\u8fd4\u56de\u7684\u54cd\u5e94\u4fe1\u606f\u7684\u6570\u7ec4\uff09   Returns   (Transaction instance): The created transaction object instance.\uff08\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u5b9e\u4f8b\uff09     send_transaction\uff08\u53d1\u9001\u4ea4\u6613\uff09  \u7ed9\u94fe\u7684\u6392\u5e8f\u670d\u52a1\uff08\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\uff09\u53d1\u9001\u4ea4\u6613\uff0c\u7136\u540e\u505a\u5171\u8bc6\u548c\u63d0\u4ea4\u5230\u8d26\u672c\u7684\u5de5\u4f5c\u3002  \u672c\u8c03\u7528\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u63d0\u4ea4\u6210\u529f\u4fe1\u606f\u662f\u901a\u8fc7\u5757\u6216\u8005chaincode\u4e8b\u4ef6\u901a\u77e5\u7684\u3002\uff08\u672c\u65b9\u6cd5\u5fc5\u987b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u54cd\u5e94\u673a\u5236\u5173\u8054\u4e8b\u4ef6\u76d1\u542c\u5668\u5904\u7406\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\uff0c\u201c\u4ea4\u6613\u5b8c\u6210\u201d\uff0c\u201c\u9519\u8bef\u201d\u7b49\u4e8b\u4ef6\u3002\uff09  \u4e0b\u9762\u6709\u4e24\u79cd\u6709\u5173fabric\u540e\u7aef\u7684\u6c9f\u901a\u65b9\u5f0f\uff0c\u89e6\u53d1\u4e0d\u540c\u7684\u4e8b\u4ef6\u56de\u8c03\u7ed9\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u5668   \u6392\u5e8f\u8005\u670d\u52a1\u7684gRPC\u5ba2\u6237\u7aef\u5728\u201c\u5e7f\u64ad\u201d\u8c03\u7528\u7684\u8bf7\u6c42\u6216\u54cd\u5e94\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5e38\u89c4\u7684\u65e0\u72b6\u6001\u7684HTTP \u8fde\u63a5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u5728\u54cd\u5e94\u4e2d\u63a5\u6536\u5230\u6210\u529f\u786e\u8ba4\u65f6\u53d1\u9001\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\u4e8b\u4ef6\uff0c\u6216\u8005\u5728\u63a5\u6536\u5230\u9519\u8bef\u65f6\u53d1\u9001\u201c\u9519\u8bef\u201d\u4e8b\u4ef6  \u4e3a\u4e86\u652f\u6301fabric\u201cBLOCK\u201d \u201d, \u201cCHAINCODE\u201d\u548c\u201cTRANSACTION\u201d\u4e8b\u4ef6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u548c\u4f5c\u4e3a\u5185\u90e8\u4e8b\u4ef6\u67a2\u7ebd\u673a\u5236\u4e00\u90e8\u5206\u7684\u94fe\u4e8b\u4ef6\u6e90\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6301\u4e45\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u5e94\u8be5\u5f15\u53d1\u65b9\u6cd5\u7ed9\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u201c\u5b8c\u6210\u201d\u6216\u201c\u9519\u8bef\u201d\u4e8b\u4ef6\u3002   Params   transaction (Transaction): The transaction object constructed above\uff08\u4e0a\u9762\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u3002\uff09   Returns\uff08\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\uff0c\u53ef\u4ee5\u5173\u8054\u5230\u5e94\u7528\u7a0b\u5e8f\u4e8b\u4ef6\u5904\u7406\u5668\u7684\uff09   result (EventEmitter): an handle to allow the application to attach event handlers on\u201csubmitted\u201d, \u201ccomplete\u201d, and \u201cerror\u201d.", 
            "title": "6.2 \u94fe"
        }, 
        {
            "location": "/sdk-design_zh/#63", 
            "text": "\u7528\u6237\u7c7b\u4ee3\u8868\u5df2\u7ecf\u901a\u8fc7\u6ce8\u518c\u8bc1\u4e66\u6ce8\u518c\u548c\u7b7e\u540d\u5bc6\u94a5\u7b7e\u540d\u7684\u5df2\u767b\u8bb0\u7528\u6237\u3002\u6ce8\u518c\u8bc1\u4e66\u5fc5\u987b\u901a\u8fc7\u533a\u5757\u94fe\u7f51\u7edc\u914d\u7f6e\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u7b7e\u540d\u3002\u5df2\u6ce8\u518c\u7528\u6237\uff08\u62e5\u6709\u5df2\u7b7e\u540d\u5bc6\u94a5\u548c\u6ce8\u518c\u8bc1\u4e66\uff09\u53ef\u4ee5\u5f15\u5bfcchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u548c\u94fe\u4e0a\u67e5\u8be2\u3002  \u7528\u6237\u6ce8\u518c\u8bc1\u4e66\u53ef\u4ee5\u4e8b\u5148\u4f5c\u4e3a\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u4eceCA\u83b7\u53d6\uff0c\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u5b83\u672c\u8eab\u7684\u767b\u8bb0\u7a0b\u5e8f\u4ece\u53ef\u9009\u7684fabric COP\u670d\u52a1\u83b7\u53d6\u3002  \u6709\u65f6\u7528\u6237\u8ba4\u8bc1\u548c\u8282\u70b9\u8ba4\u8bc1\u4f1a\u6df7\u6dc6\u3002\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\uff0c\u6240\u4ee5\u7528\u6237\u8eab\u4efd\u6709\u4ee3\u7406\u7b7e\u540d\u7684\u80fd\u529b\uff0c\u800c\u8282\u70b9\u5728\u5e94\u7528\u7a0b\u5e8f/SDKs\u4e0a\u4e0b\u6587\u4e2d\u53ea\u6709\u9a8c\u8bc1\u7b7e\u540d\u7684\u8ba4\u8bc1\u80fd\u529b\u3002\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u4f7f\u7528\u8282\u70b9\u8eab\u4efd\u6765\u7b7e\u540d\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5229\u7528\u8282\u70b9\u8eab\u4efd\u7684\u79c1\u94a5\u3002    get_name\uff08\u83b7\u53d6\u540d\u79f0\uff09  \u83b7\u53d6\u6210\u5458\u540d\u79f0\u3002\u4ece\u5bf9\u8c61\u5b9e\u4f8b\u8bf7\u6c42\u53c2\u6570\u3002  Returns (str):   The name of the user   get_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09  \u83b7\u53d6\u7528\u6237\u7684\u89d2\u8272\u3002\u5b83\u53ef\u80fd\u662f\u201c\u5ba2\u6237\u7aef\u201d\u201c\u5ba1\u8ba1\u5458\u201d\u8fd9\u7c7b\u503c\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7684\u89d2\u8272\u7528\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff0c\u5982\u201c\u8282\u70b9\u201d\u548c\u201c\u9a8c\u8bc1\u8005\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002    Returns (str[]):   The roles for this user     get_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09  \u8fd4\u56de\u5e95\u5c42\u8ba4\u8bc1\u8bc1\u4e66\u4ee3\u8868\u7684\u7528\u6237\u8eab\u4efd\u8bc1\u4e66\u3002  Params: none  Returns:   Certificate in PEM format signed by the trusted CA\uff08\u8fd4\u56de\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09     set_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09  \u8bbe\u7f6e\u7528\u6237\u7684\u540d\u79f0/ID\u3002  Params:   name (string[): The user name / id.     set_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09  \u6309\u4e0a\u9762\u5b9a\u4e49\u7684\u89d2\u8272\u503c\u8bbe\u7f6e\u7528\u6237\u89d2\u8272\u3002  Params:   Roles (string[]): The list of roles for the user\uff08\u5165\u53c2\u7528\u6237\u7684\u89d2\u8272\u5217\u8868\u3002\uff09     set_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09  \u8bbe\u7f6e\u7528\u6237\u7684\u80cc\u4e66\u8bc1\u4e66\u3002  Params:    Certificate : The certificate in PEM format signed by the trusted CA\uff08\u5165\u53c2\u662f\u88ab\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09     generate_tcerts\uff08\u751f\u6210\u4ea4\u6613\u8bc1\u4e66\uff09  \u83b7\u53d6\u4e00\u7cfb\u5217TCert\uff0c\u53ef\u4ee5\u5728\u4ea4\u6613\u4e2d\u4f7f\u7528\u3002TCert\u548c\u4ea4\u6613\u4e4b\u95f4\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\u3002TCert\u53ef\u4ee5\u5728\u672c\u5730\u901a\u8fc7SDK\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u6570\u636e\u9879\u751f\u6210\u3002  Params   count (number): how many in the batch to obtain?\uff08\u83b7\u53d6\u7684\u4ea4\u6613\u8bc1\u4e66\u7684\u6570\u91cf\uff09  Attributes (string[]): list of attributes to include in the TCert\uff08TCert\u5305\u542b\u7684\u5c5e\u6027\u7684\u5217\u8868\uff09   Returns (TCert[]):   An array of TCerts", 
            "title": "6.3 \u7528\u6237"
        }, 
        {
            "location": "/sdk-design_zh/#64", 
            "text": "\u8282\u70b9\u7c7b\u4ee3\u8868\u4e86\u8fdc\u7a0b\u8282\u70b9\u548c\u5b83\u672c\u8eab\u7f51\u7edc\u6210\u5458\u7684\u6570\u636e\uff0c\u5373\u7528\u6765\u9a8c\u8bc1\u7b7e\u540d\u7684ECert\u3002\u8282\u70b9\u6210\u5458\u4ee3\u8868\u7ec4\u7ec7\uff0c\u4e0d\u50cf\u7528\u6237\u6210\u5458\u4ee3\u8868\u4e2a\u4f53\u3002  \u5f53\u8282\u70b9\u88ab\u521b\u5efa\u540e\uff0c\u53ea\u8981\u914d\u7f6e\u4e00\u4e2a\u540d\u4e3a\u201ceventSourceUrl\u201d\u7684\u5c5e\u6027\uff0c\u8282\u70b9\u5b9e\u4f8b\u5c31\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a\u4e00\u4e2a\u4e8b\u4ef6\u6e90\u3002\u5141\u8bb8SDK\u81ea\u52a8\u5173\u8054\u4ea4\u6613\u4e8b\u4ef6\u76d1\u542c\u5668\u4e8b\u4ef6\u6d41\u3002  \u9700\u8981\u8bf4\u660e\u7684\u662f\u8282\u70b9\u4e8b\u4ef6\u6d41\u529f\u80fd\u5728\u8282\u70b9\u5c42\u6b21\uff0c\u4e0d\u5728\u94fe\u548cchaincode\u7684\u5c42\u6b21\u3002    connectEventSource\uff08\u8fde\u63a5\u4e8b\u4ef6\u6e90\uff09  \u7531\u4e8e\u51e0\u4e4e\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e8b\u4ef6\u7684\u751f\u4ea7\u8005\uff0c\u5f53\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\u5b9e\u4f8b\u65f6\uff0c\u5e94\u7528\u53ef\u4ee5\u6307\u5b9a\u5b83\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u6e90\u3002\u53ea\u9700\u8981\u94fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u6210\u4e3a\u4e8b\u4ef6\u6e90\uff0c\u56e0\u4e3a\u94fe\u4e0a\u7684\u6240\u6709\u8282\u70b9\u4ea7\u751f\u7684\u4e8b\u4ef6\u76f8\u540c\u3002\u672c\u65b9\u6cd5\u544a\u8bc9SDK\u5bf9\u4e8e\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u54ea\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e8b\u4ef6\u6e90\u4f7f\u7528\u3002\u7ba1\u7406\u4e0e\u8282\u70b9\u7684EventHub\u8fde\u63a5\u7684\u751f\u547d\u5468\u671f\u662fSDK\u7684\u8d23\u4efb\u3002\u7406\u89e3\u5e76\u901a\u77e5\u9009\u62e9\u7684\u8282\u70b9\u60f3\u63a5\u6536\u54ea\u79cd\u4e8b\u4ef6\u7c7b\u578b\u4ee5\u53ca\u60f3\u4f7f\u7528\u54ea\u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u662f\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u8d23\u4efb\u3002  Params:   None   Result:   Promise/Future: this gives the app a handle to attach \u201csuccess\u201d and \u201cerror\u201d listeners\uff08\u5e94\u7528\u83b7\u5f97\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u6765\u5173\u8054\u201c\u6210\u529f\u201d\u6216\u201c\u9519\u8bef\u201d\u7684\u76d1\u542c\u5668\uff09     is_event_listened\uff08\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u76d1\u542c\u7684\u6807\u8bb0\uff09  \u7f51\u7edc\u8c03\u7528\u53ef\u4ee5\u663e\u793a\u51fa\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u76d1\u542c\u5668\u5df2\u7ecf\u8fde\u63a5\u5230\u4e8b\u4ef6\u7684\u76ee\u6807\u8282\u70b9\u3002\u8fd9\u80fd\u5e2e\u52a9\u5e94\u7528\u5b9e\u4f8b\u5728\u5d29\u6e83\u540e\u6062\u590d\u4e2d\u6216\u8005\u591a\u4e2a\u5b9e\u4f8b\u90e8\u7f72\u7684\u60c5\u51b5\u4e0b\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fde\u63a5\u4e8b\u4ef6\u6e90\u3002  \u5907\u6ce8\uff1a\u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u8282\u70b9\u4e0a\u4e8b\u4ef6\u7684\u751f\u6210\u8005\u6709\u5f3a\u5316\u4f5c\u7528\u3002  Params:   eventName (string): required \uff08\u5fc5\u9700\u7684\uff09  chain (Chain): optional \uff08\u53ef\u9009\u7684\uff09   Result:\uff08\u662f\u5426\u5df2\u7ecf\u88ab\u94fe\u4e0a\u7684\u4e00\u4e9b\u5e94\u7528\u5b9e\u4f8b\u76d1\u542c\uff09   (boolean): whether the said event has been listened on by some application instance on that chain      addListener\uff08\u6dfb\u52a0\u76d1\u542c\u5668\uff09  \u65b9\u6cd5\u4e3a\u8fde\u63a5\u5230\u4e8b\u4ef6\u6e90\u7684\u8282\u70b9\u63d0\u4f9b\uff0c\u76d1\u542c\u5668\u6ce8\u518c\u5728EventCallBack\uff0c\u7528\u4ee5\u63a5\u6536\u4e8b\u4ef6\u7c7b\u578b\u96c6\u7684\u56de\u8c03\u3002\u6dfb\u52a0\u76d1\u542c\u5668\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u6267\u884c\u591a\u6b21\u6765\u652f\u6301\u4e0d\u540c\u7684EventCallBack\u65b9\u6cd5\u63a5\u6536\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002  \u8bf4\u660e\uff1a\u4ee5\u4e0b\u7684\u53c2\u6570\u5728\u67d0\u4e9b\u8bed\u8a00\u91cc\u662f\u53ef\u9009\u7684\uff0c\u6bd4\u5982Java\uff0c\u4e3a\u76d1\u542c\u5668\u63a5\u53e3\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u628a\u8be5\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002  Params:   eventType : ie. Block, Chaincode, Transaction \uff08\u4e8b\u4ef6\u7c7b\u578b\uff09  eventTypeData : Object Specific for event type as necessary, currently needed for \u201cChaincode\u201d event type, specifying a matching pattern to the event name set in the chaincode(s) being executed on the target Peer, and for \u201cTransaction\u201d event type, specifying the transaction ID \uff08\u4e8b\u4ef6\u7c7b\u578b\u6570\u636e\uff1a\u4e8b\u4ef6\u7c7b\u578b\u6709\u5fc5\u8981\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5bf9\u8c61\uff0c\u5bf9\u4e8e\u201cchaincode\u201d\u4e8b\u4ef6\u7c7b\u578b\u8981\u6c42\u662f\uff0c\u5728\u76ee\u6807\u8282\u70b9\u4e0a\u6267\u884c\u7684chaincode\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5b9a\u7684\u4e8b\u4ef6\u540d\u5339\u914d\u8303\u5f0f\uff1b\u5bf9\u4e8e\u201cTransaction\u201d\u4e8b\u4ef6\u7c7b\u578b\uff0c\u8981\u6307\u5b9a\u4ea4\u6613ID\u3002\uff09  eventCallback : Client Application class registering for the callback.\uff08\u4e8b\u4ef6\u56de\u8c03\uff1a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4e3a\u56de\u8c03\u800c\u6ce8\u518c\u7684\u3002\uff09   Returns:   [event-listener-ref] a reference to the event listener, some language uses an ID (javascript), others uses object reference (Java)\uff08\u8fd4\u56de\u503c\uff1a\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6307\u5411\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6709\u4e9b\u8bed\u8a00\uff08javascript\uff09\u4f7f\u7528ID\uff0c\u5176\u4ed6\u7684\u8bed\u8a00\uff08Java\uff09\u4f7f\u7528\u5bf9\u8c61\u5f15\u7528\u3002\uff09     removeListener\uff08\u79fb\u9664\u76d1\u542c\u5668\uff09  \u89e3\u6ce8\u518c\u76d1\u542c\u5668  Params:\uff08SDK\u8fd4\u56de\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff09   [event-listener-ref] : reference returned by SDK for event listener   Returns:   statusFlag: Success / Failure     get_name\uff08\u83b7\u53d6\u540d\u79f0\uff09  \u83b7\u53d6\u8282\u70b9\u540d\u79f0\u3002\u9700\u8981\u5bf9\u8c61\u5b9e\u4f8b\u7684\u53c2\u6570\u3002  Returns (str):   The name of the Peer     set_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09  Set the Peer name / id.  Params:   Name (string): The unique name / id of this Peer.     get_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09  \u83b7\u53d6\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u7684\u89d2\u8272\u3002\u53ef\u80fd\u7684\u7ed3\u679c\u662f\u201cclient\u201d\u548c\u201cauditor\u201d\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u89d2\u8272\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff1a\u201cpeer\u201d\u548c\u201cvalidator\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002  Returns (str[]):   The roles for this user     set_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09  \u8bbe\u7f6e\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u89d2\u8272\u3002\u503c\u9075\u4ece\u4e0a\u9762\u9884\u5b9a\u7684\u51e0\u4e2a\u503c\u3002  Params:   Roles (string[]): The list of roles for the user\uff08\u7528\u6237\u89d2\u8272\u5217\u8868\uff09     get_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09  \u8fd4\u56de\u5e95\u5c42\u4ee3\u8868\u7528\u6237\u8eab\u4efd\u7684ECert\u3002  Params: none  Returns:   Certificate in PEM format signed by the trusted CA     set_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09  Set the Peer\u2019s enrollment certificate.  Params:   Certificate: Certificate in PEM format signed by the trusted CA", 
            "title": "6.4 \u8282\u70b9"
        }, 
        {
            "location": "/sdk-design_zh/#65", 
            "text": "\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4fdd\u5b58\u72b6\u6001\uff0c\u5305\u542b\u7528\u6237\u767b\u8bb0\u6750\u6599\uff08\u79c1\u94a5\uff0cCA\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\u3002\u8fd9\u4e9b\u72b6\u6001\u9700\u8981\u88ab\u6301\u4e45\u5316\u3002\u201cKeyValueStore\u201d\u7684\u63a5\u53e3\u4e3aSDK\u81ea\u52a8\u4fdd\u5b58\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u673a\u5236\uff0c\u8fd9\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u6709\u76ca\u7684\u3002\n\u5982\u679c\u5e94\u7528\u4f7f\u7528\u57fa\u4e8e\u8f6f\u4ef6\u5bc6\u94a5\u751f\u6210\u5668\u5373CryptoSuite\u7684\u5b9e\u73b0\uff0c\u90a3\u4e48\u5b83\u9700\u8981\u952e\u503c\u5b58\u50a8\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4e00\u4e2a\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u5e94\u8be5\u9ed8\u8ba4\u4f7f\u7528\u4e00\u4e2a\u5185\u5efa\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e00\u4e2a\u57fa\u4e8e\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002  SDK\u4e5f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\u91cc\u9762\u4ee5\u53ef\u9009\u7f13\u5b58\u7684\u65b9\u5f0f\u4fdd\u5b58\u7528\u6237\u767b\u8bb0\u6750\u6599\u3002\u4f46\u662f\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u914d\u7f6e\u4e00\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u4f1a\u628a\u5e94\u7528\u7a0b\u5e8f\u7406\u89e3\u6210\u9009\u62e9\u4e86\u603b\u662f\u4e3a\u4f1a\u8bdd\u8bbe\u7f6e\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u56fe\u4f7f\u7528\u9ed8\u8ba4\u7684\u952e\u503c\u5b58\u50a8\u3002    get_value\uff08\u83b7\u53d6\u503c\uff09  Retrieves a value given a key  Params   key (str): The name of the key   Returns   Result (Object): The value     set_value\uff08\u5b58\u5165\u503c\uff09  Sets the value  Params   Key  value   Returns   Acknowledgement of successful storage of the value", 
            "title": "6.5 \u952e\u503c\u5b58\u50a8\uff08\u63a5\u53e3\uff09"
        }, 
        {
            "location": "/sdk-design_zh/#66", 
            "text": "\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6d88\u606f\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u548chash\u4ee5\u53caMAC\u3002\u8fd9\u662f\u4e3a\u533a\u5757\u94fe\u52a0\u5bc6\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u7684\u4e00\u4e2a\u955c\u50cf\u8bbe\u8ba1\uff0c\u88abfabric\u52a0\u5bc6\u56e2\u961f\u53d1\u8868\u3002  Default implementation currently planned for the peer and COP, and must be implemented by the SDK\u2019s default implementation also:    ECDSA: curves \u201csecp256r1\u201d and \u201csecp384r1\u201d  AES: AES128, AES256 with CBC/CTR/GCM mode key length = 128 bits   SHA: SHA256, SHA384, SHA3_256, SHA3_384    generate_key\uff08\u751f\u6210\u5bc6\u94a5\uff09  Generate a key based on the options. The output can be a private key or a public key in an asymmetric algorithm, or a secret key of a symmetric algorithm.  Params   opts (Object): an object that encapsulates two properties, \u201calgorithm\u201d and\u201cephemeral\u201d.   Returns   Result (Key): The key object     deriveKey\uff08\u5bfc\u51fa\u5bc6\u94a5\uff09  Derives a key from k using opts.  Params   k (Key)  opts (Object)   Returns   (Key) derived key     importKey\uff08\u5bfc\u5165\u5bc6\u94a5\uff09  Imports a key from its raw representation using opts.  Params   k (Key)  opts (Object)   Returns   (Key) An instance of the Key class wrapping the raw key bytes     getKey\uff08\u83b7\u53d6\u5bc6\u94a5\uff09  Returns the key this CSP associates to the Subject Key Identifier ski .  Params   ski (byte[])   Returns   (Key) An instance of the Key class corresponding to the ski     hash\uff08hash\u5904\u7406\uff09  Hashes messages msg using options opts .  Params   msg (byte[])  opts (Object) an object that encapsulates property \u201calgorithm\u201d with values for hashing algorithms such as \u201cSHA2\u201d or \u201cSHA3\u201d   Returns   (Key) An instance of the Key class corresponding to the ski     encrypt\uff08\u52a0\u5bc6\uff09  Encrypt plain text.  Params   key (Key) public encryption key  plainText (byte[])  opts (Object)   Returns   (byte[]) Cipher text     decrypt\uff08\u89e3\u5bc6\uff09  Decrypt cipher text.  Params   key (Key) private decryption key  cipherText (byte[])  opts (Object)   Returns   (byte[]) Plain text     sign\uff08\u7b7e\u540d\uff09  Sign the data.  Params   Key (Key) private signing key  digest (byte[]) fixed-length digest of the target message to be signed  opts (function) hashing function to use   Returns   Result(Object):Signature object     verify\uff08\u9a8c\u8bc1\uff09  Verify the signature.  Params   key (Key) public verification key  signature (byte[]) signature  digest (byte[]) original digest that was signed   Returns   (bool): verification successful or not", 
            "title": "6.6 \u52a0\u5bc6\u6a21\u5757\uff08\u63a5\u53e3\uff09"
        }, 
        {
            "location": "/sdk-design_zh/#7", 
            "text": "\u5ba2\u6237\u7aefSDK\u548cfabric\u7528\u4e24\u4e2a\u65b9\u6cd5\u6c9f\u901a\uff1a\u65e0\u72b6\u6001\u7684HTTP\u8fde\u63a5\u548cHTTP\u957f\u8fde\u63a5\u3002  \u53d1\u9001\u63d0\u6848\u548c\u53d1\u9001\u4ea4\u6613\u8c03\u7528\u5728\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u662f\u65e0\u72b6\u6001\u7684\u3002\u5982\u679c\u51fa\u73b0\u7f51\u7edc\u9519\u8bef\uff0c\u8c03\u7528\u4f1a\u8d85\u65f6\u3002SDK\u5e94\u8be5\u6709\u4e00\u4e2a\u53ef\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u65b9\u4fbf\u5e94\u7528\u7a0b\u5e8f\u57fa\u4e8e\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u548cfabric\u8282\u70b9\u4e4b\u95f4\u7684\u7f51\u7edc\u7279\u5f81\u7684\u7406\u89e3\u63a7\u5236\u8c03\u7528\u7684\u52a8\u4f5c\u3002  \u53e6\u5916\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u6709\u4e00\u4e2a\u91cd\u8bd5\u6b21\u6570\uff0c\u4ee5\u4fbf\u4e8eSDK\u6839\u636e\u8d85\u65f6\u9519\u8bef\u81ea\u52a8\u8bd5\u56fe\u91cd\u8fdeHTTP\u8c03\u7528\u3002\u8fd9\u4e9b\u91cd\u8bd5\u90fd\u5c1d\u8bd5\u5e76\u4e14\u4ecd\u7136\u53d1\u751f\u8d85\u65f6\u9519\u8bef\u4e4b\u540e\uff0c\u8fde\u63a5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002  \u53e6\u4e00\u65b9\u9762\uff0c\u4e8b\u4ef6\u6d41\u8fde\u63a5SDK\u548c\u4e8b\u4ef6\u6e90\u8282\u70b9\u662f\u957f\u8fde\u63a5\u3002\u7279\u522b\u5730\uff0c\u7531\u4e8e\u4e8b\u4ef6\u6d41\u63a5\u53e3\u88abfabric\u5b9a\u4e49\uff0c\u8fde\u63a5\u662f\u53cc\u5411\u7684\uff0c\u5141\u8bb8\u6d88\u606f\u53d1\u9001\u5230\u4e24\u65b9\u3002\u5bf9\u4e8e\u7f51\u7edc\u9519\u8bef\uff0c\u4ee5\u9632\u4e22\u5931\u4e8b\u4ef6\u548c\u4e0d\u80fd\u89e6\u53d1client\u5e94\u7528\u6ce8\u518c\u7684\u76d1\u542c\u5668\u7684\u7ed3\u679c\uff0c\u8fde\u63a5\u4f1a\u88ab\u65ad\u5f00\u3002  \u4e3a\u5e94\u7528\u7684\u5229\u76ca\u8003\u8651SDK\u5e94\u8be5\u8bd5\u56fe\u91cd\u65b0\u53d1\u8d77\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u5c1d\u8bd5\u4e86\u91cd\u8fde\u6b21\u6570\u4e4b\u540e\u4e0d\u80fd\u6062\u590d\u8fde\u63a5\uff0c\u5e94\u8be5\u7528\u4e00\u4e2a\u9ad8\u7ea7\u522b\u7684\u4e25\u91cd\u9519\u8bef\u901a\u77e5\u5e94\u7528\u8fd9\u79cd\u60c5\u51b5\u3002", 
            "title": "7 \u5904\u7406\u7f51\u7edc\u9519\u8bef"
        }, 
        {
            "location": "/sdk-design_zh/#8", 
            "text": "1) Next-Consensus-Architecture_Proposal:\nhttps://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architec\nture-Proposal.md  2) Consensus endorsing, consenting, and committing model:\nhttps://jira.hyperledger.org/browse/FAB-37  3) Node.js SDK\nhttps://github.com/hyperledger/fabric-sdk-node  4) Fabric-Cop Design\nhttps://docs.google.com/document/d/1TRYHcaT8yMn8MZlDtreqzkDcXx0WI50AV2JpAcv\nAM5w  5) Next Hyperledger-Fabric Architecture Protocol messages\nhttps://docs.google.com/document/d/1qD2zOTxmPoss3Xop_pDdkSXHozIR4N27NEsym\nosW4Gk", 
            "title": "8 \u53c2\u8003"
        }, 
        {
            "location": "/makefile_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nDijun Liu\n\n\n\n\n\n\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770b\n\u8fd9\u91cc", 
            "title": "Makefile\u6587\u4ef6\u89e3\u6790"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nDijun Liu\n\n\n\n\n\n\n\n\n\n\n\u4ec0\u4e48\u662fBCCSP\n\n\nBCCSP\u5168\u79f0\u662f\n\u533a\u5757\u94fe\u5bc6\u7801\u670d\u52a1\u63d0\u4f9b\u8005\n\uff0c\u7528\u6765\u63d0\u4f9b\u533a\u5757\u94fe\u76f8\u5173\u7684\u7b97\u6cd5\u6807\u51c6\u548c\u4ed6\u4eec\u7684\u5b9e\u73b0\u3002\n\n\nbccsp.go\n\n\n// BCCSP is the blockchain cryptographic service provider that offers\n// the implementation of cryptographic standards and algorithms.\ntype BCCSP interface {\n\n    // KeyGen generates a key using opts.\n    KeyGen(opts KeyGenOpts) (k Key, err error)\n\n    // KeyDeriv derives a key from k using opts.\n    // The opts argument should be appropriate for the primitive used.\n    KeyDeriv(k Key, opts KeyDerivOpts) (dk Key, err error)\n\n    // KeyImport imports a key from its raw representation using opts.\n    // The opts argument should be appropriate for the primitive used.\n    KeyImport(raw interface{}, opts KeyImportOpts) (k Key, err error)\n\n    // GetKey returns the key this CSP associates to\n    // the Subject Key Identifier ski.\n    GetKey(ski []byte) (k Key, err error)\n\n    // Hash hashes messages msg using options opts.\n    // If opts is nil, the default hash function will be used.\n    Hash(msg []byte, opts HashOpts) (hash []byte, err error)\n\n    // GetHash returns and instance of hash.Hash using options opts.\n    // If opts is nil, the default hash function will be returned.\n    GetHash(opts HashOpts) (h hash.Hash, err error)\n\n    // Sign signs digest using key k.\n    // The opts argument should be appropriate for the algorithm used.\n    //\n    // Note that when a signature of a hash of a larger message is needed,\n    // the caller is responsible for hashing the larger message and passing\n    // the hash (as digest).\n    Sign(k Key, digest []byte, opts SignerOpts) (signature []byte, err error)\n\n    // Verify verifies signature against key k and digest\n    // The opts argument should be appropriate for the algorithm used.\n    Verify(k Key, signature, digest []byte, opts SignerOpts) (valid bool, err error)\n\n    // Encrypt encrypts plaintext using key k.\n    // The opts argument should be appropriate for the algorithm used.\n    Encrypt(k Key, plaintext []byte, opts EncrypterOpts) (ciphertext []byte, err error)\n\n    // Decrypt decrypts ciphertext using key k.\n    // The opts argument should be appropriate for the algorithm used.\n    Decrypt(k Key, ciphertext []byte, opts DecrypterOpts) (plaintext []byte, err error)\n}\n\n\n\n\u4ee3\u7801\u8bd1\u6ce8\n\n\n\u79d8\u94a5\u751f\u547d\u5468\u671f\u7ba1\u7406\n\n1. GenKey - \u4ea7\u751f\u79d8\u94a5\n2. DeriveKey -\u6d3e\u751f\u79d8\u94a5\n3. GetKey - \u83b7\u53d6\u79d8\u94a5\n4. ImportKey - \u5bfc\u5165\u79d8\u94a5\n\n\n\u7b7e\u540d\u9a8c\u7b7e\u64cd\u4f5c\n\n\n\n\nSign -\u7b7e\u540d\n\n\nVerify -\u9a8c\u7b7e\n\n\n\n\n\u52a0\u89e3\u5bc6\u64cd\u4f5c\n\n\n\n\nEncrypt - \u52a0\u5bc6\u64cd\u4f5c\n\n\nDecrypt - \u89e3\u5bc6\u64cd\u4f5c\n\n\n\n\nHyperledger Fabric\u4e2dBCCSP\u7684\u6574\u5408\u65b9\u5f0f\n\n\n\n\n\u6846\u56fe\u8bd1\u6ce8\n\n\nBCCSP Factory \u4e3b\u8981\u63d0\u4f9b3\u79cdBCCSP\u5b9e\u73b0\u3002\n\n\n\n\n\u8f6f\u4ef6\u5b9e\u73b0 Software BCCSP\n\n\n\u57fa\u4e8ePKCS11\u7684\u786c\u4ef6\u5b9e\u73b0 HSM BCCSP (PKCS11\uff09\n\n\n\u6d4b\u8bd5\u7528\u7684\u7a7a\u5b9e\u73b0 Null BCCSP (testing)\n\n\n\n\nBCCSP\u901a\u8fc7Membership Service\uff08\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005\uff09\u7ed9\u76f8\u5173\u6838\u5fc3\u529f\u80fd\u548c\u5ba2\u6237\u7aefSDK\u63d0\u4f9b\u52a0\u5bc6\u7b97\u6cd5\u76f8\u5173\u7684\u670d\u52a1\u3002\n\u76f8\u5173\u6838\u5fc3\u529f\u80fd\u96c6\u4e2d\u5728core\u4e2d\uff0c\u5305\u62ec\u5171\u8bc6\u6a21\u5757\uff0c\u80cc\u4e66\u6a21\u5757\u7b49\u3002\n\n\nBCCSP\u8bbe\u8ba1\u76ee\u6807\n\n\n\n\n\u53ef\u63d2\u62d4\n\n\n\u5728\u4e0d\u6539\u53d8\u6838\u5fc3\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u52a0\u5bc6\u5b9e\u73b0\u65b9\u5f0f\n\n\n\n\n\n\n\u63d0\u4f9b\u591a\u79cdCSP\n\n\n\u53ef\u4ee5\u6dfb\u52a0\u591a\u79cdCSP\uff0c\u6bd4\u5982\u4e0d\u540c\u7684\u786c\u4ef6\u5b9e\u73b0\n\n\n\u5141\u8bb8\u5728\u4e0d\u540c\u7684\u6a21\u5757\u4e0a\u9762\u4f7f\u7528\u4e0d\u540c\u7684CSP\n\n\n\n\n\n\n\u652f\u6301\u56fd\u9645\u6807\u51c6\n\n\n\u901a\u8fc7\u65b0\u7684CSP\u6765\u505a\u652f\u6301\n\n\n\u4e0d\u9700\u8981\u5bf9\u4e0d\u540c\u6807\u51c6\u4e4b\u95f4\u7684\u4e92\u901a\u505a\u4fdd\u8bc1\n\n\n\n\n\n\n\n\nBCCSP\u79d8\u94a5\n\n\nbccsp.go\n\n\n// Key represents a cryptographic key\ntype Key interface {\n\n    // Bytes converts this key to its byte representation,\n    // if this operation is allowed.\n    Bytes() ([]byte, error)\n\n    // SKI returns the subject key identifier of this key.\n    SKI() []byte\n\n    // Symmetric returns true if this key is a symmetric key,\n    // false is this key is asymmetric\n    Symmetric() bool\n\n    // Private returns true if this key is a private key,\n    // false otherwise.\n    Private() bool\n\n    // PublicKey returns the corresponding public key part of an asymmetric public/private key pair.\n    // This method returns an error in symmetric key schemes.\n    PublicKey() (Key, error)\n}\n\n\n\nKEY\u63cf\u8ff0\u4e86\u5bc6\u7801\u76f8\u5173\u7684\u79d8\u94a5\uff0c\u79d8\u94a5\u53ef\u4ee5\u662f\n\u5bf9\u79f0\n\u7684\u6216\u8005\n\u975e\u5bf9\u79f0\n\u7684\u3002\n\n\n\u5982\u679c\u662f\u975e\u5bf9\u79f0\u7684\uff0c\u90a3\u4e48\u79d8\u94a5\u8fd8\u5206\u4e3a\n\u516c\u94a5\n\u548c\n\u79c1\u94a5\n\u4e24\u79cd\n\n\n\u5982\u679c\u662f\u79c1\u94a5\u7684\u8bdd\uff0c\u5b83\u8fd8\u53ef\u4ee5\u901a\u8fc7\nPublicKey()\n\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u516c\u94a5\n\n\n\u79d8\u94a5\u53ef\u4ee5\u901a\u8fc7Subject Key Identifier (GetSKI)\u6765\u7d22\u5f15\u3002\n\n\n\u79d8\u94a5\u751f\u547d\u5468\u671f\n\n\n\u4e3a\u4e86\u8fdb\u884c\u5bc6\u7801\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u4ea7\u751f\u76f8\u5e94\u7684\u79d8\u94a5\uff08\n\u8bd1\u6ce8\n\uff1a\u5e76\u4e14\u7ef4\u62a4\u76f8\u5e94\u7684\u79d8\u94a5\u72b6\u6001\uff0c\u6bd4\u5982\u5b58\u50a8\uff0c\u7d22\u5f15\uff09\n\n\nbccsp.go\n\n\n GenKey(opts GenKeyOpts) (k Key, err error)\n\n\n\nbccsp.go\n\n\n// KeyGenOpts contains options for key-generation with a CSP.\ntype KeyGenOpts interface {\n\n    // Algorithm returns the key generation algorithm identifier (to be used).\n    Algorithm() string\n\n    // Ephemeral returns true if the key to generate has to be ephemeral,\n    // false otherwise.\n    Ephemeral() bool\n}\n\n\n\nGenKey\n\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684opts\u6765\u63a7\u5236\uff0c\u4ea7\u751f\u4e0d\u540c\u79cd\u7c7b\u7684\u79d8\u94a5\n\n\n\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u81f3\u5c11\u9700\u8981\u4e3a\u6307\u5b9a\u751f\u6210\u79d8\u94a5\u7684\u7b97\u6cd5\u548c\u662f\u5426\u662f\u77ed\u671f\u79d8\u94a5\u3002\u5982\u679c\u662f\u957f\u671f\u79d8\u94a5\u7684\u8bdd\uff0c\u5219\u9700\u8981\u901a\u8fc7SKI\u6765\u5b8c\u6210\u5b58\u50a8\u548c\u7d22\u5f15\n\n\n\u77ed\u671f\u79d8\u94a5\u7684\u8bdd\uff0c\u5982\u679c\u6ca1\u6709\u5730\u65b9\u518d\u5f15\u7528\u4e86\uff0c\u4f1a\u81ea\u52a8\u88ab\u9500\u6bc1\u3002\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u9664\u4e86\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5176\u4ed6\u4efb\u4f55\u7684\u53c2\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b9e\u73b0\u6b64\u63a5\u53e3\nGenKeyOpts\n\u7684\u65f6\u5019\u52a0\u4e0a\u3002\n\n\n\n\n\u6709\u65f6\u9700\u8981\u901a\u8fc7\u5df2\u6709\u7684\u79d8\u94a5\u6d3e\u751f\u65b0\u7684\u79d8\u94a5\n\n\nbccsp.go\n\n\nDeriveKey(k Key, opts DeriveKeyOpts) (dk Key, err error)\n\n\n\nbccsp.go\n\n\n// KeyDerivOpts contains options for key-derivation with a CSP.\ntype KeyDerivOpts interface {\n\n    // Algorithm returns the key derivation algorithm identifier (to be used).\n    Algorithm() string\n\n    // Ephemeral returns true if the key to derived has to be ephemeral,\n    // false otherwise.\n    Ephemeral() bool\n}\n\n\n\nDeriveKey\n\u5141\u8bb8\u4ece\u5df2\u6709\u79d8\u94a5\u6d3e\u751f\u4e00\u7ec4\u65b0\u7684\u79d8\u94a5\uff08\u6bd4\u5982\u901a\u8fc7HMAC\u6216\u8005\u91cd\u65b0\u968f\u673a\u751f\u6210\uff09\u3002\u901a\u8fc7\u9002\u5f53\u7684opts\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u6d3e\u751f\u65b9\u6cd5\u3002\n\n\n\u540c\nGenKey\n\uff0c\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u81f3\u5c11\u9700\u8981\u4e3a\u6307\u5b9a\u751f\u6210\u79d8\u94a5\u7684\u7b97\u6cd5\u548c\u662f\u5426\u662f\u77ed\u671f\u79d8\u94a5\u3002\u5982\u679c\u662f\u957f\u671f\u79d8\u94a5\u7684\u8bdd\uff0c\u5219\u9700\u8981\u901a\u8fc7SKI\u6765\u5b8c\u6210\u5b58\u50a8\u548c\u7d22\u5f15\u3002\n\n\n\u540c\nGenKey\n\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u9664\u4e86\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5176\u4ed6\u4efb\u4f55\u7684\u53c2\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b9e\u73b0\u6b64\u63a5\u53e3\nDeriveKeyOpts\n\u7684\u65f6\u5019\u52a0\u4e0a\u3002\n\n\n\u7b7e\u540d\u9a8c\u7b7e\u80fd\u529b\n\n\nbccsp.go\n\n\n// Sign signs digest using key k.\n// The opts argument should be appropriate for the algorithm used.\n//\n// Note that when a signature of a hash of a larger message is needed,\n// the caller is responsible for hashing the larger message and passing\n// the hash (as digest).\nSign(k Key, digest []byte, opts SignerOpts) (signature []byte, err error)\n\n// Verify verifies signature against key k and digest\n// The opts argument should be appropriate for the algorithm used.\nVerify(k Key, signature, digest []byte, opts SignerOpts) (valid bool, err error)\n\n\n\nbccsp.go\n\n\n// SignerOpts contains options for signing with a CSP.\ntype SignerOpts interface{}\n\n\n\nBCCSP\u901a\u8fc7\nSign\n\uff0c\nVerify\n\u63d0\u4f9b\u7b7e\u540d\u9a8c\u7b7e\u3002\n\n\n\u901a\u8fc7\u79d8\u94a5\u7684\u79cd\u7c7b\u6765\u51b3\u5b9a\u7b7e\u540d\u9a8c\u7b7e\u7684\u7b97\u6cd5\uff0c\u6bd4\u5982\u4f20\u5165ECDSA\u7684\u79d8\u94a5\u5c31\u4f7f\u7528ECDSA\u7684\u7b7e\u540d\u7b97\u6cd5\u3002\n\n\n\u5176\u4ed6\u4efb\u4f55\u7684\u53c2\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b9e\u73b0\u6b64\u63a5\u53e3\nSignerOpts\n\u7684\u65f6\u5019\u52a0\u4e0a\u3002\n\n\n\u52a0\u89e3\u5bc6\u80fd\u529b\n\n\nbccsp.go\n\n\n// Encrypt encrypts plaintext using key k.\n// The opts argument should be appropriate for the algorithm used.\nEncrypt(k Key, plaintext []byte, opts EncrypterOpts) (ciphertext []byte, err error)\n\n// Decrypt decrypts ciphertext using key k.\n// The opts argument should be appropriate for the algorithm used.\nDecrypt(k Key, ciphertext []byte, opts DecrypterOpts) (plaintext []byte, err error)\n\n\n\nbccsp.go\n\n\n// EncrypterOpts contains options for encrypting with a CSP.\ntype EncrypterOpts interface{}\n\n// DecrypterOpts contains options for decrypting with a CSP.\ntype DecrypterOpts interface{}\n\n\n\nBCCSP\u901a\u8fc7\nEncrypt\n\uff0c\nDecrypt\n\u63d0\u4f9b\u52a0\u5bc6/\u89e3\u5bc6\u3002\n\n\n\u901a\u8fc7\u4e0d\u540c\u79cd\u7c7b\u7684\u79d8\u94a5\u7c7b\u578b\u548copts\u6765\u51b3\u5b9a\u4f7f\u7528\u7684\u52a0\u5bc6\u7b97\u6cd5\uff08\n\u8bd1\u6ce8\n\uff1a\u8fd9\u548c\u7b7e\u540d\u9a8c\u7b7e\u4e0d\u540c\uff0c\u8fd9\u91cc\u4f1a\u4f7f\u7528opts\u6765\u51b3\u5b9a\u4f7f\u7528\u7684\u6a21\u5f0f\uff09\u3002\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u79d8\u94a5\u662fAES\u7684\uff0c\u90a3\u4e48opts\u5c31\u4f1a\u7528\u6765\u51b3\u5b9a\u64cd\u4f5c\u7684\u6a21\u5f0f\u3002\n\n\n\u53ef\u4ee5\u5728\u5b9e\u73b0\nEncrypterOpts\n/ \nDecrypterOpts\n\u7684\u65f6\u5019\u6dfb\u52a0\u4efb\u4f55\u4f60\u60f3\u8981\u5b9a\u5236\u7684\u53c2\u6570\u3002(\n\u8bd1\u6ce8\n\uff1a \u8fd9\u91cc\u539f\u6587\u6ce8\u91ca\u6709\u9519\u8bef\uff0c\u5199\u6210\u4e86SignerOpts)\n\n\n\u6458\u8981\u80fd\u529b \u8bd1\u8005\u589e\u52a0\u8868\u8ff0\n\n\n(\u539f\u6587\u7531\u4e8e\u7248\u672c\u539f\u56e0\uff0c\u6ca1\u6709\u5217\u51fahash)\n\n\nbccsp.go\n\n\n// Hash hashes messages msg using options opts.\n// If opts is nil, the default hash function will be used.\nHash(msg []byte, opts HashOpts) (hash []byte, err error)\n\n// GetHash returns and instance of hash.Hash using options opts.\n// If opts is nil, the default hash function will be returned.\nGetHash(opts HashOpts) (h hash.Hash, err error)\n\n\n\nbccsp.go\n\n\n// HashOpts contains options for hashing with a CSP.\ntype HashOpts interface {\n\n    // Algorithm returns the hash algorithm identifier (to be used).\n    Algorithm() string\n}\n\n\n\nBCCSP\u901a\u8fc7\nHash\n\u6765\u63d0\u4f9b\u6458\u8981\u80fd\u529b\n\n\n\u4e0d\u540c\u79cd\u7c7b\u7684hash\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684opts\u6765\u83b7\u53d6\uff08\u6bd4\u5982md5\u6216\u8005SHA256\uff09", 
            "title": "BCCSP\u5bc6\u7801\u7b97\u6cd5\u5957\u4ef6\u89e3\u6790"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#bccsp", 
            "text": "BCCSP\u5168\u79f0\u662f \u533a\u5757\u94fe\u5bc6\u7801\u670d\u52a1\u63d0\u4f9b\u8005 \uff0c\u7528\u6765\u63d0\u4f9b\u533a\u5757\u94fe\u76f8\u5173\u7684\u7b97\u6cd5\u6807\u51c6\u548c\u4ed6\u4eec\u7684\u5b9e\u73b0\u3002  bccsp.go  // BCCSP is the blockchain cryptographic service provider that offers\n// the implementation of cryptographic standards and algorithms.\ntype BCCSP interface {\n\n    // KeyGen generates a key using opts.\n    KeyGen(opts KeyGenOpts) (k Key, err error)\n\n    // KeyDeriv derives a key from k using opts.\n    // The opts argument should be appropriate for the primitive used.\n    KeyDeriv(k Key, opts KeyDerivOpts) (dk Key, err error)\n\n    // KeyImport imports a key from its raw representation using opts.\n    // The opts argument should be appropriate for the primitive used.\n    KeyImport(raw interface{}, opts KeyImportOpts) (k Key, err error)\n\n    // GetKey returns the key this CSP associates to\n    // the Subject Key Identifier ski.\n    GetKey(ski []byte) (k Key, err error)\n\n    // Hash hashes messages msg using options opts.\n    // If opts is nil, the default hash function will be used.\n    Hash(msg []byte, opts HashOpts) (hash []byte, err error)\n\n    // GetHash returns and instance of hash.Hash using options opts.\n    // If opts is nil, the default hash function will be returned.\n    GetHash(opts HashOpts) (h hash.Hash, err error)\n\n    // Sign signs digest using key k.\n    // The opts argument should be appropriate for the algorithm used.\n    //\n    // Note that when a signature of a hash of a larger message is needed,\n    // the caller is responsible for hashing the larger message and passing\n    // the hash (as digest).\n    Sign(k Key, digest []byte, opts SignerOpts) (signature []byte, err error)\n\n    // Verify verifies signature against key k and digest\n    // The opts argument should be appropriate for the algorithm used.\n    Verify(k Key, signature, digest []byte, opts SignerOpts) (valid bool, err error)\n\n    // Encrypt encrypts plaintext using key k.\n    // The opts argument should be appropriate for the algorithm used.\n    Encrypt(k Key, plaintext []byte, opts EncrypterOpts) (ciphertext []byte, err error)\n\n    // Decrypt decrypts ciphertext using key k.\n    // The opts argument should be appropriate for the algorithm used.\n    Decrypt(k Key, ciphertext []byte, opts DecrypterOpts) (plaintext []byte, err error)\n}  \u4ee3\u7801\u8bd1\u6ce8  \u79d8\u94a5\u751f\u547d\u5468\u671f\u7ba1\u7406 \n1. GenKey - \u4ea7\u751f\u79d8\u94a5\n2. DeriveKey -\u6d3e\u751f\u79d8\u94a5\n3. GetKey - \u83b7\u53d6\u79d8\u94a5\n4. ImportKey - \u5bfc\u5165\u79d8\u94a5  \u7b7e\u540d\u9a8c\u7b7e\u64cd\u4f5c   Sign -\u7b7e\u540d  Verify -\u9a8c\u7b7e   \u52a0\u89e3\u5bc6\u64cd\u4f5c   Encrypt - \u52a0\u5bc6\u64cd\u4f5c  Decrypt - \u89e3\u5bc6\u64cd\u4f5c", 
            "title": "\u4ec0\u4e48\u662fBCCSP"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#hyperledger-fabricbccsp", 
            "text": "\u6846\u56fe\u8bd1\u6ce8  BCCSP Factory \u4e3b\u8981\u63d0\u4f9b3\u79cdBCCSP\u5b9e\u73b0\u3002   \u8f6f\u4ef6\u5b9e\u73b0 Software BCCSP  \u57fa\u4e8ePKCS11\u7684\u786c\u4ef6\u5b9e\u73b0 HSM BCCSP (PKCS11\uff09  \u6d4b\u8bd5\u7528\u7684\u7a7a\u5b9e\u73b0 Null BCCSP (testing)   BCCSP\u901a\u8fc7Membership Service\uff08\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u8005\uff09\u7ed9\u76f8\u5173\u6838\u5fc3\u529f\u80fd\u548c\u5ba2\u6237\u7aefSDK\u63d0\u4f9b\u52a0\u5bc6\u7b97\u6cd5\u76f8\u5173\u7684\u670d\u52a1\u3002\n\u76f8\u5173\u6838\u5fc3\u529f\u80fd\u96c6\u4e2d\u5728core\u4e2d\uff0c\u5305\u62ec\u5171\u8bc6\u6a21\u5757\uff0c\u80cc\u4e66\u6a21\u5757\u7b49\u3002", 
            "title": "Hyperledger Fabric\u4e2dBCCSP\u7684\u6574\u5408\u65b9\u5f0f"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#bccsp_1", 
            "text": "\u53ef\u63d2\u62d4  \u5728\u4e0d\u6539\u53d8\u6838\u5fc3\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u52a0\u5bc6\u5b9e\u73b0\u65b9\u5f0f    \u63d0\u4f9b\u591a\u79cdCSP  \u53ef\u4ee5\u6dfb\u52a0\u591a\u79cdCSP\uff0c\u6bd4\u5982\u4e0d\u540c\u7684\u786c\u4ef6\u5b9e\u73b0  \u5141\u8bb8\u5728\u4e0d\u540c\u7684\u6a21\u5757\u4e0a\u9762\u4f7f\u7528\u4e0d\u540c\u7684CSP    \u652f\u6301\u56fd\u9645\u6807\u51c6  \u901a\u8fc7\u65b0\u7684CSP\u6765\u505a\u652f\u6301  \u4e0d\u9700\u8981\u5bf9\u4e0d\u540c\u6807\u51c6\u4e4b\u95f4\u7684\u4e92\u901a\u505a\u4fdd\u8bc1", 
            "title": "BCCSP\u8bbe\u8ba1\u76ee\u6807"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#bccsp_2", 
            "text": "bccsp.go  // Key represents a cryptographic key\ntype Key interface {\n\n    // Bytes converts this key to its byte representation,\n    // if this operation is allowed.\n    Bytes() ([]byte, error)\n\n    // SKI returns the subject key identifier of this key.\n    SKI() []byte\n\n    // Symmetric returns true if this key is a symmetric key,\n    // false is this key is asymmetric\n    Symmetric() bool\n\n    // Private returns true if this key is a private key,\n    // false otherwise.\n    Private() bool\n\n    // PublicKey returns the corresponding public key part of an asymmetric public/private key pair.\n    // This method returns an error in symmetric key schemes.\n    PublicKey() (Key, error)\n}  KEY\u63cf\u8ff0\u4e86\u5bc6\u7801\u76f8\u5173\u7684\u79d8\u94a5\uff0c\u79d8\u94a5\u53ef\u4ee5\u662f \u5bf9\u79f0 \u7684\u6216\u8005 \u975e\u5bf9\u79f0 \u7684\u3002  \u5982\u679c\u662f\u975e\u5bf9\u79f0\u7684\uff0c\u90a3\u4e48\u79d8\u94a5\u8fd8\u5206\u4e3a \u516c\u94a5 \u548c \u79c1\u94a5 \u4e24\u79cd  \u5982\u679c\u662f\u79c1\u94a5\u7684\u8bdd\uff0c\u5b83\u8fd8\u53ef\u4ee5\u901a\u8fc7 PublicKey() \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u516c\u94a5  \u79d8\u94a5\u53ef\u4ee5\u901a\u8fc7Subject Key Identifier (GetSKI)\u6765\u7d22\u5f15\u3002", 
            "title": "BCCSP\u79d8\u94a5"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#_1", 
            "text": "\u4e3a\u4e86\u8fdb\u884c\u5bc6\u7801\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u4ea7\u751f\u76f8\u5e94\u7684\u79d8\u94a5\uff08 \u8bd1\u6ce8 \uff1a\u5e76\u4e14\u7ef4\u62a4\u76f8\u5e94\u7684\u79d8\u94a5\u72b6\u6001\uff0c\u6bd4\u5982\u5b58\u50a8\uff0c\u7d22\u5f15\uff09  bccsp.go   GenKey(opts GenKeyOpts) (k Key, err error)  bccsp.go  // KeyGenOpts contains options for key-generation with a CSP.\ntype KeyGenOpts interface {\n\n    // Algorithm returns the key generation algorithm identifier (to be used).\n    Algorithm() string\n\n    // Ephemeral returns true if the key to generate has to be ephemeral,\n    // false otherwise.\n    Ephemeral() bool\n}  GenKey \u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684opts\u6765\u63a7\u5236\uff0c\u4ea7\u751f\u4e0d\u540c\u79cd\u7c7b\u7684\u79d8\u94a5  \u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u81f3\u5c11\u9700\u8981\u4e3a\u6307\u5b9a\u751f\u6210\u79d8\u94a5\u7684\u7b97\u6cd5\u548c\u662f\u5426\u662f\u77ed\u671f\u79d8\u94a5\u3002\u5982\u679c\u662f\u957f\u671f\u79d8\u94a5\u7684\u8bdd\uff0c\u5219\u9700\u8981\u901a\u8fc7SKI\u6765\u5b8c\u6210\u5b58\u50a8\u548c\u7d22\u5f15  \u77ed\u671f\u79d8\u94a5\u7684\u8bdd\uff0c\u5982\u679c\u6ca1\u6709\u5730\u65b9\u518d\u5f15\u7528\u4e86\uff0c\u4f1a\u81ea\u52a8\u88ab\u9500\u6bc1\u3002  \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u9664\u4e86\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5176\u4ed6\u4efb\u4f55\u7684\u53c2\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b9e\u73b0\u6b64\u63a5\u53e3 GenKeyOpts \u7684\u65f6\u5019\u52a0\u4e0a\u3002   \u6709\u65f6\u9700\u8981\u901a\u8fc7\u5df2\u6709\u7684\u79d8\u94a5\u6d3e\u751f\u65b0\u7684\u79d8\u94a5  bccsp.go  DeriveKey(k Key, opts DeriveKeyOpts) (dk Key, err error)  bccsp.go  // KeyDerivOpts contains options for key-derivation with a CSP.\ntype KeyDerivOpts interface {\n\n    // Algorithm returns the key derivation algorithm identifier (to be used).\n    Algorithm() string\n\n    // Ephemeral returns true if the key to derived has to be ephemeral,\n    // false otherwise.\n    Ephemeral() bool\n}  DeriveKey \u5141\u8bb8\u4ece\u5df2\u6709\u79d8\u94a5\u6d3e\u751f\u4e00\u7ec4\u65b0\u7684\u79d8\u94a5\uff08\u6bd4\u5982\u901a\u8fc7HMAC\u6216\u8005\u91cd\u65b0\u968f\u673a\u751f\u6210\uff09\u3002\u901a\u8fc7\u9002\u5f53\u7684opts\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u6d3e\u751f\u65b9\u6cd5\u3002  \u540c GenKey \uff0c\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u81f3\u5c11\u9700\u8981\u4e3a\u6307\u5b9a\u751f\u6210\u79d8\u94a5\u7684\u7b97\u6cd5\u548c\u662f\u5426\u662f\u77ed\u671f\u79d8\u94a5\u3002\u5982\u679c\u662f\u957f\u671f\u79d8\u94a5\u7684\u8bdd\uff0c\u5219\u9700\u8981\u901a\u8fc7SKI\u6765\u5b8c\u6210\u5b58\u50a8\u548c\u7d22\u5f15\u3002  \u540c GenKey \uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u9664\u4e86\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5176\u4ed6\u4efb\u4f55\u7684\u53c2\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b9e\u73b0\u6b64\u63a5\u53e3 DeriveKeyOpts \u7684\u65f6\u5019\u52a0\u4e0a\u3002", 
            "title": "\u79d8\u94a5\u751f\u547d\u5468\u671f"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#_2", 
            "text": "bccsp.go  // Sign signs digest using key k.\n// The opts argument should be appropriate for the algorithm used.\n//\n// Note that when a signature of a hash of a larger message is needed,\n// the caller is responsible for hashing the larger message and passing\n// the hash (as digest).\nSign(k Key, digest []byte, opts SignerOpts) (signature []byte, err error)\n\n// Verify verifies signature against key k and digest\n// The opts argument should be appropriate for the algorithm used.\nVerify(k Key, signature, digest []byte, opts SignerOpts) (valid bool, err error)  bccsp.go  // SignerOpts contains options for signing with a CSP.\ntype SignerOpts interface{}  BCCSP\u901a\u8fc7 Sign \uff0c Verify \u63d0\u4f9b\u7b7e\u540d\u9a8c\u7b7e\u3002  \u901a\u8fc7\u79d8\u94a5\u7684\u79cd\u7c7b\u6765\u51b3\u5b9a\u7b7e\u540d\u9a8c\u7b7e\u7684\u7b97\u6cd5\uff0c\u6bd4\u5982\u4f20\u5165ECDSA\u7684\u79d8\u94a5\u5c31\u4f7f\u7528ECDSA\u7684\u7b7e\u540d\u7b97\u6cd5\u3002  \u5176\u4ed6\u4efb\u4f55\u7684\u53c2\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b9e\u73b0\u6b64\u63a5\u53e3 SignerOpts \u7684\u65f6\u5019\u52a0\u4e0a\u3002", 
            "title": "\u7b7e\u540d\u9a8c\u7b7e\u80fd\u529b"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#_3", 
            "text": "bccsp.go  // Encrypt encrypts plaintext using key k.\n// The opts argument should be appropriate for the algorithm used.\nEncrypt(k Key, plaintext []byte, opts EncrypterOpts) (ciphertext []byte, err error)\n\n// Decrypt decrypts ciphertext using key k.\n// The opts argument should be appropriate for the algorithm used.\nDecrypt(k Key, ciphertext []byte, opts DecrypterOpts) (plaintext []byte, err error)  bccsp.go  // EncrypterOpts contains options for encrypting with a CSP.\ntype EncrypterOpts interface{}\n\n// DecrypterOpts contains options for decrypting with a CSP.\ntype DecrypterOpts interface{}  BCCSP\u901a\u8fc7 Encrypt \uff0c Decrypt \u63d0\u4f9b\u52a0\u5bc6/\u89e3\u5bc6\u3002  \u901a\u8fc7\u4e0d\u540c\u79cd\u7c7b\u7684\u79d8\u94a5\u7c7b\u578b\u548copts\u6765\u51b3\u5b9a\u4f7f\u7528\u7684\u52a0\u5bc6\u7b97\u6cd5\uff08 \u8bd1\u6ce8 \uff1a\u8fd9\u548c\u7b7e\u540d\u9a8c\u7b7e\u4e0d\u540c\uff0c\u8fd9\u91cc\u4f1a\u4f7f\u7528opts\u6765\u51b3\u5b9a\u4f7f\u7528\u7684\u6a21\u5f0f\uff09\u3002\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u79d8\u94a5\u662fAES\u7684\uff0c\u90a3\u4e48opts\u5c31\u4f1a\u7528\u6765\u51b3\u5b9a\u64cd\u4f5c\u7684\u6a21\u5f0f\u3002  \u53ef\u4ee5\u5728\u5b9e\u73b0 EncrypterOpts /  DecrypterOpts \u7684\u65f6\u5019\u6dfb\u52a0\u4efb\u4f55\u4f60\u60f3\u8981\u5b9a\u5236\u7684\u53c2\u6570\u3002( \u8bd1\u6ce8 \uff1a \u8fd9\u91cc\u539f\u6587\u6ce8\u91ca\u6709\u9519\u8bef\uff0c\u5199\u6210\u4e86SignerOpts)", 
            "title": "\u52a0\u89e3\u5bc6\u80fd\u529b"
        }, 
        {
            "location": "/blockchain-crypto-service-provider_zh/#_4", 
            "text": "(\u539f\u6587\u7531\u4e8e\u7248\u672c\u539f\u56e0\uff0c\u6ca1\u6709\u5217\u51fahash)  bccsp.go  // Hash hashes messages msg using options opts.\n// If opts is nil, the default hash function will be used.\nHash(msg []byte, opts HashOpts) (hash []byte, err error)\n\n// GetHash returns and instance of hash.Hash using options opts.\n// If opts is nil, the default hash function will be returned.\nGetHash(opts HashOpts) (h hash.Hash, err error)  bccsp.go  // HashOpts contains options for hashing with a CSP.\ntype HashOpts interface {\n\n    // Algorithm returns the hash algorithm identifier (to be used).\n    Algorithm() string\n}  BCCSP\u901a\u8fc7 Hash \u6765\u63d0\u4f9b\u6458\u8981\u80fd\u529b  \u4e0d\u540c\u79cd\u7c7b\u7684hash\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684opts\u6765\u83b7\u53d6\uff08\u6bd4\u5982md5\u6216\u8005SHA256\uff09", 
            "title": "\u6458\u8981\u80fd\u529b \u8bd1\u8005\u589e\u52a0\u8868\u8ff0"
        }, 
        {
            "location": "/zanata_guide/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u65e0\n\n\n\u4e8e\u6797\u751f\n\n\n\n\n\n\n\n\n\n\nZanata\n\n\nZanata\n\u662f\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u7684\u7ffb\u8bd1\u5e73\u53f0\uff0c\u7528\u4e8e\u7ffb\u8bd1\u8005\u3001\u5185\u5bb9\u521b\u4f5c\u8005\u548c\u5f00\u53d1\u4eba\u5458\u6765\u7ba1\u7406\u672c\u5730\u5316\u9879\u76ee\u3002\n\n\n\u4e3a\u4e86\u66f4\u597d\u7684\u7ba1\u7406\u3001\u63a8\u5e7f\u3001\u7ffb\u8bd1Hyperledger\u56fd\u9645\u5316\u6587\u6863\uff0c\u5de5\u4f5c\u7ec4\u5c1d\u8bd5\u4f7f\u7528zanata\u7ffb\u8bd1\u5e73\u53f0\u3002\n\n\n\n\nZanata\u5b98\u65b9\u5feb\u901f\u4f7f\u7528\u6307\u5357\n\n\nZanata\u5b98\u65b9\u6587\u6863\n\n\n\n\n\u7528Zanata\u7ffb\u8bd1Hyperledger\u6587\u6863\n\n\n\n\n\n\n\u6ce8\u518c\u7528\u6237\u5e76\u767b\u9646\n\n\n\u6ce8\u518c\u65b0\u7528\u6237\uff0c\u5e76\u5c06\u60a8\u7684Zanata ID\u6dfb\u52a0\u81f3\u9879\u76ee\u7ec4\nwiki\u9875\u9762\n\u3002\n\n\n\n\n\n\n\u7533\u8bf7\u52a0\u5165Zanata\u4e2d\u6587\u56e2\u961f\n\n\n\u901a\u8fc7\nLaunguage\n-\nChinese (Simplified, China)\n-\nRequest to Join\n\uff0c\u7533\u8bf7\u52a0\u5165Zanata\u4e2d\u6587\u7ffb\u8bd1\u56e2\u961f\u3002\u901a\u5e38\u8fd9\u4e2a\u7533\u8bf7\u53ea\u9700\u8981\u4e00\u4e24\u5929\u5c31\u53ef\u4ee5\u88ab\u901a\u8fc7\u3002\u82e5\u4e24\u5929\u540e\u60a8\u7684\u7533\u8bf7\u4ecd\u5904\u4e8e\npending\n\u72b6\u6001\uff0c\u8bf7\u8054\u7cfbLinsheng Yu\u6216Jiannan Guo\u3002\n\n\n\n\n\n\n\u67e5\u627e\u5e76\u5355\u51fb\u8fdb\u5165\u9879\u76ee\nhyperledger-fabric-docs\n\n\n\n\n\n\n\u5355\u51fb\u9009\u62e9\u7248\u672c\u53f7\n\n\n\n\u5355\u51fb\u9009\u62e9\u8bed\u8a00\n\n\n\n\u5355\u51fb\u9009\u62e9\u8981\u7ffb\u8bd1\u7684\u6587\u4ef6\n\n\n\n\n\n\u5728\u53f3\u4fa7\u7f16\u8f91\u7ffb\u8bd1\n\n\n\u5728\u53f3\u4fa7\u8f93\u5165\u8bd1\u6587\uff0c\u7f16\u8f91\u5b8c\u540e\u4f1a\u81ea\u52a8\u4fdd\u5b58\uff1b\u4e0b\u4fa7\u662f\u7ffb\u8bd1\u63d0\u793a\u5185\u5bb9\uff0c\u53ef\u76f4\u63a5\ncopy\n\uff1b\u4e5f\u53ef\u4ee5\u70b9\u51fb\n\u4f7f\u7528\u65b0\u7248\n\u4f53\u9a8c\u65b0\u7248\u7ffb\u8bd1\u9875\u9762\u3002\n\n\n\u6ce8\u610f\uff1a\u7ffb\u8bd1\u4e2d\u7684\u56fa\u5b9a\u672f\u8bed\u5c3d\u91cf\u6309\u7167\u7ffb\u8bd1\u63d0\u793a\u7edf\u4e00\u547d\u540d\uff0c\u4ee5\u514d\u6df7\u4e71\uff01\uff01\uff01\n\n\n\n\n\u65b0\u7248\u7ffb\u8bd1\u9875\u9762\n\n\n\n\n\n\n\n8. \u539f\u6587\u66f4\u65b0\u53ca\u8bd1\u540e\u6587\u6863\u7684\u5c55\u793a\u64cd\u4f5c\uff0c\u4e4b\u540e\u8865\u5145\u8bf4\u660e\n\n\n\u95ee\u9898\n\n\n\u76ee\u524d\u7f16\u8005\u5bf9Zanata\u5e76\u4e0d\u591f\u719f\u6089\uff0c\u8fd8\u6709\u5f88\u591a\u95ee\u9898\u6ca1\u6709\u89e3\u51b3\uff0c\u8bf7\u5927\u5bb6\u591a\u591a\u6307\u6559\u3002\n\n\n\n\nZanata\u6587\u6863\u4e0egithub\u7684\u5173\u8054\uff0c\u5982\u4f55\u81ea\u52a8\u66f4\u65b0\u539f\u6587\uff0c\u5982\u4f55\u5c06\u8bd1\u6587\u81ea\u52a8push\u5230github\u4ed3\u5e93\u3002\n\n\n\u65b0\u7528\u6237\u5982\u4f55\u80fd\u76f4\u63a5\u7ffb\u8bd1\u6587\u6863\uff0c\u800c\u65e0\u9700\u7ba1\u7406\u8005\u4e8b\u5148\u5c06\u8bd1\u8005\u7528\u6237\u52a0\u5165\u5230\u9879\u76ee\u4e2d\u3002\n\n\nZanata\u4e0d\u652f\u6301fabric\u5b98\u65b9\u6587\u6863\u7684\nrst\n\u683c\u5f0f\uff0c\u76ee\u524d\u662f\u5c06\u4e4b\u8f6c\u6362\u4e3a\nhtml\n\u683c\u5f0f\uff0c\u5bfc\u81f4Zanata\u4e0a\u7684\u539f\u6587\u5305\u542b\u5f88\u591a\u91cd\u590d\u4fe1\u606f\uff08\u5982\u76ee\u5f55\u3001\u7f51\u9875\u6807\u9898\u7b49\uff09\u3002", 
            "title": "Zanata\u4f7f\u7528\u6307\u5357"
        }, 
        {
            "location": "/zanata_guide/#zanata", 
            "text": "Zanata \u662f\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u7684\u7ffb\u8bd1\u5e73\u53f0\uff0c\u7528\u4e8e\u7ffb\u8bd1\u8005\u3001\u5185\u5bb9\u521b\u4f5c\u8005\u548c\u5f00\u53d1\u4eba\u5458\u6765\u7ba1\u7406\u672c\u5730\u5316\u9879\u76ee\u3002  \u4e3a\u4e86\u66f4\u597d\u7684\u7ba1\u7406\u3001\u63a8\u5e7f\u3001\u7ffb\u8bd1Hyperledger\u56fd\u9645\u5316\u6587\u6863\uff0c\u5de5\u4f5c\u7ec4\u5c1d\u8bd5\u4f7f\u7528zanata\u7ffb\u8bd1\u5e73\u53f0\u3002   Zanata\u5b98\u65b9\u5feb\u901f\u4f7f\u7528\u6307\u5357  Zanata\u5b98\u65b9\u6587\u6863", 
            "title": "Zanata"
        }, 
        {
            "location": "/zanata_guide/#zanatahyperledger", 
            "text": "\u6ce8\u518c\u7528\u6237\u5e76\u767b\u9646  \u6ce8\u518c\u65b0\u7528\u6237\uff0c\u5e76\u5c06\u60a8\u7684Zanata ID\u6dfb\u52a0\u81f3\u9879\u76ee\u7ec4 wiki\u9875\u9762 \u3002    \u7533\u8bf7\u52a0\u5165Zanata\u4e2d\u6587\u56e2\u961f  \u901a\u8fc7 Launguage - Chinese (Simplified, China) - Request to Join \uff0c\u7533\u8bf7\u52a0\u5165Zanata\u4e2d\u6587\u7ffb\u8bd1\u56e2\u961f\u3002\u901a\u5e38\u8fd9\u4e2a\u7533\u8bf7\u53ea\u9700\u8981\u4e00\u4e24\u5929\u5c31\u53ef\u4ee5\u88ab\u901a\u8fc7\u3002\u82e5\u4e24\u5929\u540e\u60a8\u7684\u7533\u8bf7\u4ecd\u5904\u4e8e pending \u72b6\u6001\uff0c\u8bf7\u8054\u7cfbLinsheng Yu\u6216Jiannan Guo\u3002    \u67e5\u627e\u5e76\u5355\u51fb\u8fdb\u5165\u9879\u76ee hyperledger-fabric-docs    \u5355\u51fb\u9009\u62e9\u7248\u672c\u53f7  \u5355\u51fb\u9009\u62e9\u8bed\u8a00  \u5355\u51fb\u9009\u62e9\u8981\u7ffb\u8bd1\u7684\u6587\u4ef6   \u5728\u53f3\u4fa7\u7f16\u8f91\u7ffb\u8bd1  \u5728\u53f3\u4fa7\u8f93\u5165\u8bd1\u6587\uff0c\u7f16\u8f91\u5b8c\u540e\u4f1a\u81ea\u52a8\u4fdd\u5b58\uff1b\u4e0b\u4fa7\u662f\u7ffb\u8bd1\u63d0\u793a\u5185\u5bb9\uff0c\u53ef\u76f4\u63a5 copy \uff1b\u4e5f\u53ef\u4ee5\u70b9\u51fb \u4f7f\u7528\u65b0\u7248 \u4f53\u9a8c\u65b0\u7248\u7ffb\u8bd1\u9875\u9762\u3002  \u6ce8\u610f\uff1a\u7ffb\u8bd1\u4e2d\u7684\u56fa\u5b9a\u672f\u8bed\u5c3d\u91cf\u6309\u7167\u7ffb\u8bd1\u63d0\u793a\u7edf\u4e00\u547d\u540d\uff0c\u4ee5\u514d\u6df7\u4e71\uff01\uff01\uff01   \u65b0\u7248\u7ffb\u8bd1\u9875\u9762    8. \u539f\u6587\u66f4\u65b0\u53ca\u8bd1\u540e\u6587\u6863\u7684\u5c55\u793a\u64cd\u4f5c\uff0c\u4e4b\u540e\u8865\u5145\u8bf4\u660e", 
            "title": "\u7528Zanata\u7ffb\u8bd1Hyperledger\u6587\u6863"
        }, 
        {
            "location": "/zanata_guide/#_1", 
            "text": "\u76ee\u524d\u7f16\u8005\u5bf9Zanata\u5e76\u4e0d\u591f\u719f\u6089\uff0c\u8fd8\u6709\u5f88\u591a\u95ee\u9898\u6ca1\u6709\u89e3\u51b3\uff0c\u8bf7\u5927\u5bb6\u591a\u591a\u6307\u6559\u3002   Zanata\u6587\u6863\u4e0egithub\u7684\u5173\u8054\uff0c\u5982\u4f55\u81ea\u52a8\u66f4\u65b0\u539f\u6587\uff0c\u5982\u4f55\u5c06\u8bd1\u6587\u81ea\u52a8push\u5230github\u4ed3\u5e93\u3002  \u65b0\u7528\u6237\u5982\u4f55\u80fd\u76f4\u63a5\u7ffb\u8bd1\u6587\u6863\uff0c\u800c\u65e0\u9700\u7ba1\u7406\u8005\u4e8b\u5148\u5c06\u8bd1\u8005\u7528\u6237\u52a0\u5165\u5230\u9879\u76ee\u4e2d\u3002  Zanata\u4e0d\u652f\u6301fabric\u5b98\u65b9\u6587\u6863\u7684 rst \u683c\u5f0f\uff0c\u76ee\u524d\u662f\u5c06\u4e4b\u8f6c\u6362\u4e3a html \u683c\u5f0f\uff0c\u5bfc\u81f4Zanata\u4e0a\u7684\u539f\u6587\u5305\u542b\u5f88\u591a\u91cd\u590d\u4fe1\u606f\uff08\u5982\u76ee\u5f55\u3001\u7f51\u9875\u6807\u9898\u7b49\uff09\u3002", 
            "title": "\u95ee\u9898"
        }
    ]
}